{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/get.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/superPropBase.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/regenerator-runtime/runtime.js","src/module/actor/SR5Actor.ts","src/module/actor/SR5ActorSheet.ts","src/module/actor/prep/BaseActorPrep.ts","src/module/apps/chummer-import-form.js","src/module/apps/dialogs/ShadowrunItemDialog.ts","src/module/apps/gmtools/OverwatchScoreTracker.js","src/module/apps/skills/KnowledgeSkillEditForm.ts","src/module/apps/skills/LanguageSkillEditForm.ts","src/module/apps/skills/SkillEditForm.ts","src/module/canvas.ts","src/module/chat.ts","src/module/combat.ts","src/module/config.ts","src/module/constants.ts","src/module/dataWrappers/DataWrapper.ts","src/module/handlebars/BasicHelpers.ts","src/module/handlebars/HandlebarManager.ts","src/module/handlebars/HandlebarTemplates.ts","src/module/handlebars/ItemLineHelpers.ts","src/module/handlebars/RollAndLabelHelpers.ts","src/module/handlebars/SkillLineHelpers.ts","src/module/helpers.ts","src/module/item/ChatData.ts","src/module/item/SR5Item.ts","src/module/item/SR5ItemDataWrapper.ts","src/module/item/SR5ItemSheet.ts","src/module/main.ts","src/module/migrator/Migrator.ts","src/module/migrator/VersionMigration.ts","src/module/migrator/versions/LegacyMigration.ts","src/module/migrator/versions/Version0_6_10.ts","src/module/migrator/versions/Version0_6_5.ts","src/module/parts/PartsList.ts","src/module/rolls/ShadowrunRoller.ts","src/module/settings.ts","src/module/template.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;ACztBA,8DAA2D;AAC3D,wCAAqC;AAarC,4CAA2C;AAC3C,wDAAqD;AAErD,kDAA+C;AAK/C,MAAa,QAAS,SAAQ,KAAK;IACzB,MAAM,CAAC,IAAI,EAAE,OAAQ;;;;;YACvB,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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { ShadowrunRoller } from '../rolls/ShadowrunRoller';\r\nimport { Helpers } from '../helpers';\r\nimport { SR5Item } from '../item/SR5Item';\r\nimport ActorRollOptions = Shadowrun.ActorRollOptions;\r\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\r\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillRollOptions = Shadowrun.SkillRollOptions;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport ModList = Shadowrun.ModList;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport { SYSTEM_NAME } from '../constants';\r\nimport { BaseActorPrep } from './prep/BaseActorPrep';\r\nimport SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { PartsList } from '../parts/PartsList';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport EdgeAttributeField = Shadowrun.EdgeAttributeField;\r\n\r\nexport class SR5Actor extends Actor {\r\n    async update(data, options?) {\r\n        await super.update(data, options);\r\n        // trigger update for all items with action\r\n        // needed for rolls to properly update when items or attributes update\r\n        const itemUpdates: Item[] = [];\r\n        // @ts-ignore\r\n        for (let item of this.data.items) {\r\n            if (item && item.data.action) {\r\n                itemUpdates.push(item);\r\n            }\r\n        }\r\n        await this.updateEmbeddedEntity('OwnedItem', itemUpdates);\r\n        return this;\r\n    }\r\n\r\n    getOverwatchScore() {\r\n        const os = this.getFlag(SYSTEM_NAME, 'overwatchScore');\r\n        return os !== undefined ? os : 0;\r\n    }\r\n\r\n    async setOverwatchScore(value) {\r\n        const num = parseInt(value);\r\n        if (!isNaN(num)) {\r\n            return this.setFlag(SYSTEM_NAME, 'overwatchScore', num);\r\n        }\r\n    }\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n\r\n        const actorData = this.data as SR5ActorType;\r\n        const prepper = new BaseActorPrep(actorData);\r\n        prepper.prepareModifiers();\r\n        prepper.prepareArmor();\r\n        prepper.prepareCyberware();\r\n        prepper.prepareSkills();\r\n        prepper.prepareAttributes();\r\n        prepper.prepareMatrix();\r\n        prepper.prepareLimits();\r\n        prepper.prepareConditionMonitors();\r\n        prepper.prepareMovement();\r\n        prepper.prepareWounds();\r\n        prepper.prepareInitiative();\r\n\r\n        const data = actorData.data;\r\n        if (data.magic.drain && !data.magic.drain.mod) data.magic.drain.mod = [];\r\n    }\r\n\r\n    getModifier(modifierName: string): number | undefined {\r\n        return this.data.data.modifiers[modifierName];\r\n    }\r\n\r\n    findActiveSkill(skillName?: string): SkillField | undefined {\r\n        if (skillName === undefined) return undefined;\r\n        return this.data.data.skills.active[skillName];\r\n    }\r\n\r\n    findAttribute(attributeName?: string): AttributeField | undefined {\r\n        if (attributeName === undefined) return undefined;\r\n        return this.data.data.attributes[attributeName];\r\n    }\r\n\r\n    getEquippedMatrixDevice(): SR5Item | undefined {\r\n        return this.items.find((item: SR5Item) => item.isDevice());\r\n    }\r\n\r\n    getEquippedArmor(): SR5Item[] | undefined {\r\n        return this.items.filter((item: SR5Item) => item.isArmor());\r\n    }\r\n\r\n    findLimitFromAttribute(attributeName?: string): LimitField | undefined {\r\n        if (attributeName === undefined) return undefined;\r\n        const attribute = this.findAttribute(attributeName);\r\n        if (!attribute?.limit) return undefined;\r\n        return this.findLimit(attribute.limit);\r\n    }\r\n\r\n    findLimit(limitName?: string): LimitField | undefined {\r\n        if (!limitName) return undefined;\r\n        return this.data.data.limits[limitName];\r\n    }\r\n\r\n    getWoundModifier(): number {\r\n        return -1 * this.data.data.wounds?.value || 0;\r\n    }\r\n\r\n    getEdge(): EdgeAttributeField {\r\n        return this.data.data.attributes.edge;\r\n    }\r\n\r\n    getArmor(): BaseValuePair<number> & ModifiableValue & LabelField {\r\n        return this.data.data.armor;\r\n    }\r\n\r\n    getOwnedItem(itemId: string): SR5Item | null {\r\n        return (super.getOwnedItem(itemId) as unknown) as SR5Item;\r\n    }\r\n\r\n    getMatrixDevice(): SR5Item | undefined | null {\r\n        const matrix = this.data.data.matrix;\r\n        if (matrix.device) return this.getOwnedItem(matrix.device);\r\n        return undefined;\r\n    }\r\n\r\n    getFullDefenseAttribute(): AttributeField | undefined {\r\n        let att = this.data.data.full_defense_attribute;\r\n        if (!att) att = 'willpower';\r\n        return this.findAttribute(att);\r\n    }\r\n\r\n    getEquippedWeapons(): SR5Item[] {\r\n        return this.items.filter((item) => item.isEquipped() && item.data.type === 'weapon');\r\n    }\r\n\r\n    getRecoilCompensation(): number {\r\n        let total = 1; // always get 1\r\n        const strength = this.findAttribute('strength');\r\n        if (strength) {\r\n            total += Math.ceil(strength.value / 3);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    addKnowledgeSkill(category, skill?) {\r\n        const defaultSkill = {\r\n            name: '',\r\n            specs: [],\r\n            base: 0,\r\n            value: 0,\r\n            mod: 0,\r\n        };\r\n        skill = {\r\n            ...defaultSkill,\r\n            ...skill,\r\n        };\r\n\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `data.skills.knowledge.${category}.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n        this.update(updateData);\r\n    }\r\n\r\n    removeLanguageSkill(skillId) {\r\n        const value = {};\r\n        value[skillId] = { _delete: true };\r\n        this.update({ 'data.skills.language.value': value });\r\n    }\r\n\r\n    addLanguageSkill(skill) {\r\n        const defaultSkill = {\r\n            name: '',\r\n            specs: [],\r\n            base: 0,\r\n            value: 0,\r\n            mod: 0,\r\n        };\r\n        skill = {\r\n            ...defaultSkill,\r\n            ...skill,\r\n        };\r\n\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `data.skills.language.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n        this.update(updateData);\r\n    }\r\n\r\n    removeKnowledgeSkill(skillId, category) {\r\n        const value = {};\r\n        const updateData = {};\r\n\r\n        const dataString = `data.skills.knowledge.${category}.value`;\r\n        value[skillId] = { _delete: true };\r\n        updateData[dataString] = value;\r\n\r\n        this.update(updateData);\r\n    }\r\n\r\n    rollFade(options: ActorRollOptions = {}, incoming = -1) {\r\n        const wil = this.data.data.attributes.willpower;\r\n        const res = this.data.data.attributes.resonance;\r\n        const data = this.data.data;\r\n\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(wil.label, wil.value);\r\n        parts.addUniquePart(res.label, res.value);\r\n        if (data.modifiers.fade) parts.addUniquePart('SR5.Bonus', data.modifiers.fade);\r\n\r\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Fade')}`;\r\n        const incomingDrain = {\r\n            label: 'SR5.Fade',\r\n            value: incoming,\r\n        };\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            parts: parts.list,\r\n            actor: this,\r\n            title: title,\r\n            wounds: false,\r\n            incomingDrain,\r\n        });\r\n    }\r\n\r\n    rollDrain(options: ActorRollOptions = {}, incoming = -1) {\r\n        const wil = this.data.data.attributes.willpower;\r\n        const drainAtt = this.data.data.attributes[this.data.data.magic.attribute];\r\n\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(wil.label, wil.value);\r\n        parts.addPart(drainAtt.label, drainAtt.value);\r\n        if (this.data.data.modifiers.drain) parts.addUniquePart('SR5.Bonus', this.data.data.modifiers.drain);\r\n\r\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Drain')}`;\r\n        const incomingDrain = {\r\n            label: 'SR5.Drain',\r\n            value: incoming,\r\n        };\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            parts: parts.list,\r\n            actor: this,\r\n            title: title,\r\n            wounds: false,\r\n            incomingDrain,\r\n        });\r\n    }\r\n\r\n    rollArmor(options: ActorRollOptions = {}, partsProps: ModList<number> = []) {\r\n        const parts = new PartsList(partsProps);\r\n        this._addArmorParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: game.i18n.localize('SR5.Armor'),\r\n            wounds: false,\r\n        });\r\n    }\r\n\r\n    rollDefense(options: DefenseRollOptions = {}, partsProps: ModList<number> = []) {\r\n        const parts = new PartsList(partsProps);\r\n        this._addDefenseParts(parts);\r\n        // full defense is always added\r\n        const activeDefenses = {\r\n            full_defense: {\r\n                label: 'SR5.FullDefense',\r\n                value: this.getFullDefenseAttribute()?.value,\r\n                initMod: -10,\r\n            },\r\n        };\r\n        // if we have a melee attack\r\n        if (options.incomingAttack?.reach) {\r\n            activeDefenses['dodge'] = {\r\n                label: 'SR5.Dodge',\r\n                value: this.findActiveSkill('gymnastics')?.value,\r\n                initMod: -5,\r\n            };\r\n            activeDefenses['block'] = {\r\n                label: 'SR5.Block',\r\n                value: this.findActiveSkill('unarmed_combat')?.value,\r\n                initMod: -5,\r\n            };\r\n            const equippedMeleeWeapons = this.getEquippedWeapons().filter((w) => w.isMeleeWeapon());\r\n            let defenseReach = 0;\r\n            equippedMeleeWeapons.forEach((weapon) => {\r\n                activeDefenses[`parry-${weapon.name}`] = {\r\n                    label: 'SR5.Parry',\r\n                    weapon: weapon.name,\r\n                    value: this.findActiveSkill(weapon.getActionSkill())?.value,\r\n                    init: -5,\r\n                };\r\n                defenseReach = Math.max(defenseReach, weapon.getReach());\r\n            });\r\n            const incomingReach = options.incomingAttack.reach;\r\n            const netReach = defenseReach - incomingReach;\r\n            if (netReach !== 0) {\r\n                parts.addUniquePart('SR5.Reach', netReach);\r\n            }\r\n        }\r\n        let dialogData = {\r\n            parts: parts.getMessageOutput(),\r\n            cover: options.cover,\r\n            activeDefenses,\r\n        };\r\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-defense.html';\r\n        let cancel = true;\r\n        const incomingAttack = options.incomingAttack;\r\n        const event = options.event;\r\n        return new Promise((resolve) => {\r\n            renderTemplate(template, dialogData).then((dlg) => {\r\n                new Dialog({\r\n                    title: game.i18n.localize('SR5.Defense'),\r\n                    content: dlg,\r\n                    buttons: {\r\n                        continue: {\r\n                            label: game.i18n.localize('SR5.Continue'),\r\n                            callback: () => (cancel = false),\r\n                        },\r\n                    },\r\n                    default: 'normal',\r\n                    close: async (html) => {\r\n                        if (cancel) return;\r\n                        let cover = Helpers.parseInputToNumber($(html).find('[name=cover]').val());\r\n                        let special = Helpers.parseInputToString($(html).find('[name=activeDefense]').val());\r\n                        if (special) {\r\n                            // TODO subtract initiative score when Foundry updates to 0.7.0\r\n                            const defense = activeDefenses[special];\r\n                            parts.addUniquePart(defense.label, defense.value);\r\n                        }\r\n                        if (cover) parts.addUniquePart('SR5.Cover', cover);\r\n\r\n                        resolve(\r\n                            ShadowrunRoller.advancedRoll({\r\n                                event: event,\r\n                                actor: this,\r\n                                parts: parts.list,\r\n                                title: game.i18n.localize('SR5.DefenseTest'),\r\n                                incomingAttack,\r\n                            }).then(async (roll: Roll | undefined) => {\r\n                                if (incomingAttack && roll) {\r\n                                    let defenderHits = roll.total;\r\n                                    let attackerHits = incomingAttack.hits || 0;\r\n                                    let netHits = attackerHits - defenderHits;\r\n\r\n                                    if (netHits >= 0) {\r\n                                        const damage = incomingAttack.damage;\r\n                                        damage.mod = PartsList.AddUniquePart(damage.mod, 'SR5.NetHits', netHits);\r\n                                        damage.value = Helpers.calcTotal(damage);\r\n\r\n                                        const soakRollOptions = {\r\n                                            event: event,\r\n                                            damage: damage,\r\n                                        };\r\n                                        await this.rollSoak(soakRollOptions);\r\n                                    }\r\n                                }\r\n                            }),\r\n                        );\r\n                    },\r\n                }).render(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    rollSoak(options?: SoakRollOptions, partsProps: ModList<number> = []) {\r\n        const parts = new PartsList(partsProps);\r\n        this._addSoakParts(parts);\r\n        let dialogData = {\r\n            damage: options?.damage,\r\n            parts: parts.getMessageOutput(),\r\n            elementTypes: CONFIG.SR5.elementTypes,\r\n        };\r\n        let id = '';\r\n        let cancel = true;\r\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-soak.html';\r\n        return new Promise((resolve) => {\r\n            renderTemplate(template, dialogData).then((dlg) => {\r\n                new Dialog({\r\n                    title: game.i18n.localize('SR5.DamageResistanceTest'),\r\n                    content: dlg,\r\n                    buttons: {\r\n                        continue: {\r\n                            label: game.i18n.localize('SR5.Continue'),\r\n                            callback: () => {\r\n                                id = 'default';\r\n                                cancel = false;\r\n                            },\r\n                        },\r\n                    },\r\n                    close: async (html) => {\r\n                        if (cancel) return;\r\n\r\n                        const soak: DamageData = options?.damage\r\n                            ? options.damage\r\n                            : {\r\n                                  base: 0,\r\n                                  value: 0,\r\n                                  mod: [],\r\n                                  ap: {\r\n                                      base: 0,\r\n                                      value: 0,\r\n                                      mod: [],\r\n                                  },\r\n                                  attribute: '' as const,\r\n                                  type: {\r\n                                      base: '',\r\n                                      value: '',\r\n                                  },\r\n                                  element: {\r\n                                      base: '',\r\n                                      value: '',\r\n                                  },\r\n                              };\r\n\r\n                        const armor = this.getArmor();\r\n\r\n                        // handle element changes\r\n                        const element = Helpers.parseInputToString($(html).find('[name=element]').val());\r\n                        if (element) {\r\n                            soak.element.value = element as DamageElement;\r\n                        }\r\n                        const bonusArmor = armor[element] ?? 0;\r\n                        if (bonusArmor) {\r\n                            parts.addUniquePart(CONFIG.SR5.elementTypes[element], bonusArmor);\r\n                        }\r\n\r\n                        // handle ap changes\r\n                        const ap = Helpers.parseInputToNumber($(html).find('[name=ap]').val());\r\n                        if (ap) {\r\n                            let armorVal = armor.value + bonusArmor;\r\n\r\n                            // don't take more AP than armor\r\n                            parts.addUniquePart('SR5.AP', Math.max(ap, -armorVal));\r\n                        }\r\n\r\n                        // handle incoming damage changes\r\n                        const incomingDamage = Helpers.parseInputToNumber($(html).find('[name=incomingDamage]').val());\r\n                        if (incomingDamage) {\r\n                            const totalDamage = Helpers.calcTotal(soak);\r\n                            if (totalDamage !== incomingDamage) {\r\n                                const diff = incomingDamage - totalDamage;\r\n                                // add part and calc total again\r\n                                soak.mod = PartsList.AddUniquePart(soak.mod, 'SR5.UserInput', diff);\r\n                                soak.value = Helpers.calcTotal(soak);\r\n                                console.log(soak);\r\n                            }\r\n                            console.log(soak);\r\n\r\n                            const totalAp = Helpers.calcTotal(soak.ap);\r\n                            if (totalAp !== ap) {\r\n                                const diff = ap - totalAp;\r\n                                // add part and calc total\r\n                                soak.ap.mod = PartsList.AddUniquePart(soak.ap.mod, 'SR5.UserInput', diff);\r\n                                soak.ap.value = Helpers.calcTotal(soak.ap);\r\n                            }\r\n                        }\r\n\r\n                        let title = game.i18n.localize('SR5.SoakTest');\r\n                        resolve(\r\n                            ShadowrunRoller.advancedRoll({\r\n                                event: options?.event,\r\n                                actor: this,\r\n                                soak: soak,\r\n                                parts: parts.list,\r\n                                title: title,\r\n                                wounds: false,\r\n                            }),\r\n                        );\r\n                    },\r\n                }).render(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    rollSingleAttribute(attId, options: ActorRollOptions) {\r\n        const attr = this.data.data.attributes[attId];\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(attr.label, attr.value);\r\n        this._addMatrixParts(parts, attr);\r\n        this._addGlobalParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: Helpers.label(attId),\r\n        });\r\n    }\r\n\r\n    rollTwoAttributes([id1, id2], options: ActorRollOptions) {\r\n        const attr1 = this.data.data.attributes[id1];\r\n        const attr2 = this.data.data.attributes[id2];\r\n        const label1 = Helpers.label(id1);\r\n        const label2 = Helpers.label(id2);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(attr1.label, attr1.value);\r\n        parts.addPart(attr2.label, attr2.value);\r\n        this._addMatrixParts(parts, [attr1, attr2]);\r\n        this._addGlobalParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: `${label1} + ${label2}`,\r\n        });\r\n    }\r\n\r\n    rollNaturalRecovery(track, options?: ActorRollOptions) {\r\n        let id1 = 'body';\r\n        let id2 = 'willpower';\r\n        let title = 'Natural Recover';\r\n        if (track === 'physical') {\r\n            id2 = 'body';\r\n            title += ' - Physical - 1 Day';\r\n        } else {\r\n            title += ' - Stun - 1 Hour';\r\n        }\r\n        let att1 = this.data.data.attributes[id1];\r\n        let att2 = this.data.data.attributes[id2];\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(att1.label, att1.value);\r\n        parts.addPart(att2.label, att2.value);\r\n\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: title,\r\n            extended: true,\r\n            after: async (roll: Roll | undefined) => {\r\n                if (!roll) return;\r\n                let hits = roll.total;\r\n                let current = this.data.data.track[track].value;\r\n\r\n                current = Math.max(current - hits, 0);\r\n\r\n                let key = `data.track.${track}.value`;\r\n\r\n                let u = {};\r\n                u[key] = current;\r\n                await this.update(u);\r\n            },\r\n        });\r\n    }\r\n\r\n    async rollMatrixAttribute(attr, options?: ActorRollOptions) {\r\n        let matrix_att = this.data.data.matrix[attr];\r\n        let title = game.i18n.localize(CONFIG.SR5.matrixAttributes[attr]);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(CONFIG.SR5.matrixAttributes[attr], matrix_att.value);\r\n\r\n        if (options && options.event && options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\r\n        if (Helpers.hasModifiers(options?.event)) {\r\n            return ShadowrunRoller.advancedRoll({\r\n                event: options?.event,\r\n                actor: this,\r\n                parts: parts.list,\r\n                title: title,\r\n            });\r\n        }\r\n        const attributes = Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0);\r\n        const attribute = 'willpower';\r\n\r\n        let dialogData = {\r\n            attribute: attribute,\r\n            attributes: attributes,\r\n        };\r\n        const buttons = {\r\n            roll: {\r\n                label: 'Continue',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n\r\n        let cancel = true;\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/matrix-roll.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Test`,\r\n                content: dlg,\r\n                buttons: buttons,\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=attribute]').val());\r\n                    let att: AttributeField | undefined = undefined;\r\n                    if (newAtt) {\r\n                        att = this.data.data.attributes[newAtt];\r\n                        title += ` + ${game.i18n.localize(CONFIG.SR5.attributes[newAtt])}`;\r\n                    }\r\n                    if (att !== undefined) {\r\n                        if (att.value && att.label) parts.addPart(att.label, att.value);\r\n                        this._addMatrixParts(parts, true);\r\n                        this._addGlobalParts(parts);\r\n                        return ShadowrunRoller.advancedRoll({\r\n                            event: options?.event,\r\n                            actor: this,\r\n                            parts: parts.list,\r\n                            title: title,\r\n                        });\r\n                    }\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    promptRoll(options?: ActorRollOptions) {\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            title: 'Roll',\r\n            parts: [],\r\n            actor: this,\r\n            dialogOptions: {\r\n                prompt: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    rollAttributesTest(rollId, options?: ActorRollOptions) {\r\n        const title = game.i18n.localize(CONFIG.SR5.attributeRolls[rollId]);\r\n        const atts = this.data.data.attributes;\r\n        const modifiers = this.data.data.modifiers;\r\n        const parts = new PartsList<number>();\r\n        if (rollId === 'composure') {\r\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\r\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\r\n            if (modifiers.composure) parts.addUniquePart('SR5.Bonus', modifiers.composure);\r\n        } else if (rollId === 'judge_intentions') {\r\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\r\n            parts.addUniquePart(atts.intuition.label, atts.intuition.value);\r\n            if (modifiers.judge_intentions) parts.addUniquePart('SR5.Bonus', modifiers.judge_intentions);\r\n        } else if (rollId === 'lift_carry') {\r\n            parts.addUniquePart(atts.strength.label, atts.strength.value);\r\n            parts.addUniquePart(atts.body.label, atts.body.value);\r\n            if (modifiers.lift_carry) parts.addUniquePart('SR5.Bonus', modifiers.lift_carry);\r\n        } else if (rollId === 'memory') {\r\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\r\n            parts.addUniquePart(atts.logic.label, atts.logic.value);\r\n            if (modifiers.memory) parts.addUniquePart('SR5.Bonus', modifiers.memory);\r\n        }\r\n\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: `${title} Test`,\r\n        });\r\n    }\r\n\r\n    rollSkill(skill, options?: SkillRollOptions) {\r\n        let att = this.data.data.attributes[skill.attribute];\r\n        let title = skill.label;\r\n\r\n        if (options?.attribute) att = this.data.data.attributes[options.attribute];\r\n        let limit = this.data.data.limits[att.limit];\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(skill.label, skill.value);\r\n\r\n        if (options?.event && Helpers.hasModifiers(options?.event)) {\r\n            parts.addUniquePart(att.label, att.value);\r\n            if (options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\r\n\r\n            this._addMatrixParts(parts, [att, skill]);\r\n            this._addGlobalParts(parts);\r\n            return ShadowrunRoller.advancedRoll({\r\n                event: options.event,\r\n                actor: this,\r\n                parts: parts.list,\r\n                limit,\r\n                title: `${title} Test`,\r\n            });\r\n        }\r\n        let dialogData = {\r\n            attribute: skill.attribute,\r\n            attributes: Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0),\r\n            limit: att.limit,\r\n            limits: this.data.data.limits,\r\n        };\r\n        let cancel = true;\r\n        let spec = '';\r\n\r\n        let buttons = {\r\n            roll: {\r\n                label: 'Normal',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n        // add specializations to dialog as buttons\r\n        if (skill.specs?.length) {\r\n            skill.specs.forEach(\r\n                (s) =>\r\n                    (buttons[s] = {\r\n                        label: s,\r\n                        callback: () => {\r\n                            cancel = false;\r\n                            spec = s;\r\n                        },\r\n                    }),\r\n            );\r\n        }\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/skill-roll.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Test`,\r\n                content: dlg,\r\n                buttons,\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=\"attribute\"]').val());\r\n                    const newLimit = Helpers.parseInputToString($(html).find('[name=\"attribute.limit\"]').val());\r\n                    att = this.data.data.attributes[newAtt];\r\n                    title += ` + ${game.i18n.localize(CONFIG.SR5.attributes[newAtt])}`;\r\n                    limit = this.data.data.limits[newLimit];\r\n                    parts.addUniquePart(att.label, att.value);\r\n                    if (skill.value === 0) parts.addUniquePart('SR5.Defaulting', -1);\r\n                    if (spec) parts.addUniquePart('SR5.Specialization', 2);\r\n                    this._addMatrixParts(parts, [att, skill]);\r\n                    this._addGlobalParts(parts);\r\n                    return ShadowrunRoller.advancedRoll({\r\n                        event: options?.event,\r\n                        actor: this,\r\n                        parts: parts.list,\r\n                        limit,\r\n                        title: `${title} Test`,\r\n                    });\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    rollKnowledgeSkill(catId: string, skillId: string, options?: SkillRollOptions) {\r\n        const category = this.data.data.skills.knowledge[catId];\r\n        const skill = duplicate(category.value[skillId]);\r\n        skill.attribute = category.attribute;\r\n        skill.label = skill.name;\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollLanguageSkill(skillId: string, options?: SkillRollOptions) {\r\n        const skill = duplicate(this.data.data.skills.language.value[skillId]);\r\n        skill.attribute = 'intuition';\r\n        skill.label = skill.name;\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollActiveSkill(skillId: string, options?: SkillRollOptions) {\r\n        const skill = this.data.data.skills.active[skillId];\r\n        skill.label = game.i18n.localize(CONFIG.SR5.activeSkills[skillId]);\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollAttribute(attId, options?: ActorRollOptions) {\r\n        let title = game.i18n.localize(CONFIG.SR5.attributes[attId]);\r\n        const att = this.data.data.attributes[attId];\r\n        const atts = this.data.data.attributes;\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(att.label, att.value);\r\n        let dialogData = {\r\n            attribute: att,\r\n            attributes: atts,\r\n        };\r\n        let cancel = true;\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/single-attribute.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Attribute Test`,\r\n                content: dlg,\r\n                buttons: {\r\n                    roll: {\r\n                        label: 'Continue',\r\n                        callback: () => (cancel = false),\r\n                    },\r\n                },\r\n                default: 'roll',\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n\r\n                    const att2Id: string = Helpers.parseInputToString($(html).find('[name=attribute2]').val());\r\n                    let att2: AttributeField | undefined = undefined;\r\n                    if (att2Id !== 'none') {\r\n                        att2 = atts[att2Id];\r\n                        if (att2?.label) {\r\n                            parts.addUniquePart(att2.label, att2.value);\r\n                            const att2IdLabel = game.i18n.localize(CONFIG.SR5.attributes[att2Id]);\r\n                            title += ` + ${att2IdLabel}`;\r\n                        }\r\n                    }\r\n                    if (att2Id === 'default') {\r\n                        parts.addUniquePart('SR5.Defaulting', -1);\r\n                    }\r\n                    this._addMatrixParts(parts, [att, att2]);\r\n                    this._addGlobalParts(parts);\r\n                    return ShadowrunRoller.advancedRoll({\r\n                        event: options?.event,\r\n                        title: `${title} Test`,\r\n                        actor: this,\r\n                        parts: parts.list,\r\n                    });\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    _addMatrixParts(parts: PartsList<number>, atts) {\r\n        if (Helpers.isMatrix(atts)) {\r\n            const m = this.data.data.matrix;\r\n            if (m.hot_sim) parts.addUniquePart('SR5.HotSim', 2);\r\n            if (m.running_silent) parts.addUniquePart('SR5.RunningSilent', -2);\r\n        }\r\n    }\r\n    _addGlobalParts(parts: PartsList<number>) {\r\n        if (this.data.data.modifiers.global) {\r\n            parts.addUniquePart('SR5.Global', this.data.data.modifiers.global);\r\n        }\r\n    }\r\n\r\n    _addDefenseParts(parts: PartsList<number>) {\r\n        const reaction = this.findAttribute('reaction');\r\n        const intuition = this.findAttribute('intuition');\r\n        const mod = this.getModifier('defense');\r\n\r\n        if (reaction) {\r\n            parts.addUniquePart(reaction.label || 'SR5.Reaction', reaction.value);\r\n        }\r\n        if (intuition) {\r\n            parts.addUniquePart(intuition.label || 'SR5.Intuition', intuition.value);\r\n        }\r\n        if (mod) {\r\n            parts.addUniquePart('SR5.Bonus', mod);\r\n        }\r\n    }\r\n\r\n    _addArmorParts(parts: PartsList<number>) {\r\n        const armor = this.getArmor();\r\n        if (armor) {\r\n            parts.addUniquePart(armor.label || 'SR5.Armor', armor.base);\r\n            for (let part of armor.mod) {\r\n                parts.addUniquePart(part.name, part.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    _addSoakParts(parts: PartsList<number>) {\r\n        const body = this.findAttribute('body');\r\n        if (body) {\r\n            parts.addUniquePart(body.label || 'SR5.Body', body.value);\r\n        }\r\n        this._addArmorParts(parts);\r\n    }\r\n\r\n    static async pushTheLimit(li) {\r\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\r\n\r\n        if (msg.getFlag(SYSTEM_NAME, 'customRoll')) {\r\n            let actor = (msg.user.character as unknown) as SR5Actor;\r\n            if (!actor) {\r\n                // get controlled tokens\r\n                const tokens = canvas.tokens.controlled;\r\n                if (tokens.length > 0) {\r\n                    for (let token of tokens) {\r\n                        if (token.actor.owner) {\r\n                            actor = token.actor;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (actor) {\r\n                const parts = new PartsList<number>();\r\n                parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\r\n                ShadowrunRoller.basicRoll({\r\n                    title: ` - ${game.i18n.localize('SR5.PushTheLimit')}`,\r\n                    parts: parts.list,\r\n                    actor: actor,\r\n                }).then(() => {\r\n                    actor;\r\n                    actor.update({\r\n                        'data.attributes.edge.uses': actor.getEdge().uses - 1,\r\n                    });\r\n                });\r\n            } else {\r\n                // @ts-ignore\r\n                ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\r\n            }\r\n        }\r\n    }\r\n\r\n    static async secondChance(li) {\r\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\r\n        // @ts-ignore\r\n        let roll: Roll = JSON.parse(msg.data?.roll);\r\n        let formula = roll.formula;\r\n        let hits = roll.total;\r\n        let re = /(\\d+)d6/;\r\n        let matches = formula.match(re);\r\n        if (matches && matches[1]) {\r\n            let match = matches[1];\r\n            let pool = parseInt(match.replace('d6', ''));\r\n            if (!isNaN(pool) && !isNaN(hits)) {\r\n                let actor = (msg.user.character as unknown) as SR5Actor;\r\n                if (!actor) {\r\n                    // get controlled tokens\r\n                    const tokens = canvas.tokens.controlled;\r\n                    if (tokens.length > 0) {\r\n                        for (let token of tokens) {\r\n                            if (token.actor.owner) {\r\n                                actor = token.actor;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (actor) {\r\n                    const parts = new PartsList<number>();\r\n                    parts.addUniquePart('SR5.OriginalDicePool', pool);\r\n                    parts.addUniquePart('SR5.Successes', -hits);\r\n\r\n                    return ShadowrunRoller.basicRoll({\r\n                        title: ` - Second Chance`,\r\n                        parts: parts.list,\r\n                        actor: actor,\r\n                    }).then(() => {\r\n                        actor.update({\r\n                            'data.attributes.edge.uses': actor.getEdge().uses - 1,\r\n                        });\r\n                    });\r\n                } else {\r\n                    // @ts-ignore\r\n                    ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\r\n     * @param scope\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setFlag(scope: string, key: string, value: any): Promise<Entity> {\r\n        const newValue = Helpers.onSetFlag(value);\r\n        return super.setFlag(scope, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\r\n     * @param scope\r\n     * @param key\r\n     */\r\n    getFlag(scope: string, key: string): any {\r\n        const data = super.getFlag(scope, key);\r\n        return Helpers.onGetFlag(data);\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport { ChummerImportForm } from '../apps/chummer-import-form';\r\nimport { SkillEditForm } from '../apps/skills/SkillEditForm';\r\nimport { KnowledgeSkillEditForm } from '../apps/skills/KnowledgeSkillEditForm';\r\nimport { LanguageSkillEditForm } from '../apps/skills/LanguageSkillEditForm';\r\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\r\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\r\nimport Skills = Shadowrun.Skills;\r\nimport { SR5Actor } from './SR5Actor';\r\nimport MatrixAttribute = Shadowrun.MatrixAttribute;\r\n\r\n/**\r\n * Extend the basic ActorSheet with some very simple modifications\r\n */\r\nexport class SR5ActorSheet extends ActorSheet {\r\n    _shownUntrainedSkills: boolean;\r\n    _shownDesc: string[];\r\n    _filters: SR5SheetFilters;\r\n    actor: SR5Actor;\r\n    _scroll: string;\r\n\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        /**\r\n         * Keep track of the currently active sheet tab\r\n         * @type {string}\r\n         */\r\n        this._shownUntrainedSkills = true;\r\n        this._shownDesc = [];\r\n        this._filters = {\r\n            skills: '',\r\n        };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Extend and override the default options used by the 5e Actor Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'actor'],\r\n            template: 'systems/shadowrun5e/dist/templates/actor/character.html',\r\n            width: 880,\r\n            height: 690,\r\n            tabs: [\r\n                {\r\n                    navSelector: '.tabs',\r\n                    contentSelector: '.sheetbody',\r\n                    initial: 'skills',\r\n                },\r\n            ],\r\n        });\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Prepare data for rendering the Actor sheet\r\n     * The prepared data object contains both the actor data as well as additional sheet options\r\n     */\r\n    getData() {\r\n        const data: SR5ActorSheetData = (super.getData() as unknown) as SR5ActorSheetData;\r\n\r\n        this._prepareMatrixAttributes(data);\r\n\r\n        const attrs = data.data.attributes;\r\n        for (let [, att] of Object.entries(attrs)) {\r\n            if (!att.hidden) {\r\n                if (att.temp === 0) delete att.temp;\r\n            }\r\n        }\r\n\r\n        /*c\r\n        const { magic } = data.data;\r\n        if (magic.drain && magic.drain.temp === 0) delete magic.drain.temp;\r\n         */\r\n\r\n        const { modifiers: mods } = data.data;\r\n        for (let [key, value] of Object.entries(mods)) {\r\n            if (value === 0) mods[key] = '';\r\n        }\r\n\r\n        this._prepareItems(data);\r\n        this._prepareSkills(data);\r\n\r\n        data['config'] = CONFIG.SR5;\r\n        data['awakened'] = data.data.special === 'magic';\r\n        data['emerged'] = data.data.special === 'resonance';\r\n        data['woundTolerance'] = 3 + (Number(mods['wound_tolerance']) || 0);\r\n        console.log(data['woundTolerance']);\r\n\r\n        data.filters = this._filters;\r\n\r\n        return data;\r\n    }\r\n\r\n    _isSkillMagic(id, skill) {\r\n        return skill.attribute === 'magic' || id === 'astral_combat' || id === 'assensing';\r\n    }\r\n\r\n    _doesSkillContainText(key, skill, text) {\r\n        let searchString = `${key} ${game.i18n.localize(skill.label)} ${skill?.specs?.join(' ')}`;\r\n        return searchString.toLowerCase().search(text.toLowerCase()) > -1;\r\n    }\r\n\r\n    _prepareMatrixAttributes(data) {\r\n        const { matrix } = data.data;\r\n        const cleanupAttribute = (attribute: MatrixAttribute) => {\r\n            const att = matrix[attribute];\r\n            if (att) {\r\n                if (!att.mod) att.mod = {};\r\n                if (att.temp === 0) delete att.temp;\r\n            }\r\n        };\r\n\r\n        ['firewall', 'data_processing', 'sleaze', 'attack'].forEach((att: MatrixAttribute) => cleanupAttribute(att));\r\n    }\r\n\r\n    _prepareSkills(data) {\r\n        const activeSkills = {};\r\n        const oldSkills: Skills = data.data.skills.active;\r\n        for (let [key, skill] of Object.entries(oldSkills)) {\r\n            // if filter isn't empty, we are doing custom filtering\r\n            if (this._filters.skills !== '') {\r\n                if (this._doesSkillContainText(key, skill, this._filters.skills)) {\r\n                    activeSkills[key] = skill;\r\n                }\r\n                // general check if we aren't filtering\r\n            } else if (\r\n                (skill.value > 0 || this._shownUntrainedSkills) &&\r\n                !(this._isSkillMagic(key, skill) && data.data.special !== 'magic') &&\r\n                !(skill.attribute === 'resonance' && data.data.special !== 'resonance')\r\n            ) {\r\n                activeSkills[key] = skill;\r\n            }\r\n        }\r\n        Helpers.orderKeys(activeSkills);\r\n        data.data.skills.active = activeSkills;\r\n    }\r\n\r\n    _prepareItems(data) {\r\n        const inventory = {\r\n            weapon: {\r\n                label: game.i18n.localize('SR5.Weapon'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'weapon',\r\n                },\r\n            },\r\n            armor: {\r\n                label: game.i18n.localize('SR5.Armor'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'armor',\r\n                },\r\n            },\r\n            device: {\r\n                label: game.i18n.localize('SR5.Device'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'device',\r\n                },\r\n            },\r\n            equipment: {\r\n                label: game.i18n.localize('SR5.Equipment'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'equipment',\r\n                },\r\n            },\r\n            cyberware: {\r\n                label: game.i18n.localize('SR5.Cyberware'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'cyberware',\r\n                },\r\n            },\r\n        };\r\n\r\n        let [items, spells, qualities, adept_powers, actions, complex_forms, lifestyles, contacts, sins, programs] = data.items.reduce(\r\n            (arr, item) => {\r\n                item.isStack = item.data.quantity ? item.data.quantity > 1 : false;\r\n                if (item.type === 'spell') arr[1].push(item);\r\n                else if (item.type === 'quality') arr[2].push(item);\r\n                else if (item.type === 'adept_power') arr[3].push(item);\r\n                else if (item.type === 'action') arr[4].push(item);\r\n                else if (item.type === 'complex_form') arr[5].push(item);\r\n                else if (item.type === 'lifestyle') arr[6].push(item);\r\n                else if (item.type === 'contact') arr[7].push(item);\r\n                else if (item.type === 'sin') arr[8].push(item);\r\n                else if (item.type === 'program') arr[9].push(item);\r\n                else if (Object.keys(inventory).includes(item.type)) arr[0].push(item);\r\n                return arr;\r\n            },\r\n            [[], [], [], [], [], [], [], [], [], []],\r\n        );\r\n\r\n        const sortByName = (i1, i2) => {\r\n            if (i1.name > i2.name) return 1;\r\n            if (i1.name < i2.name) return -1;\r\n            return 0;\r\n        };\r\n        const sortByEquipped = (left, right) => {\r\n            const leftEquipped = left.data?.technology?.equipped;\r\n            const rightEquipped = right.data?.technology?.equipped;\r\n            if (leftEquipped && !rightEquipped) return -1;\r\n            if (rightEquipped && !leftEquipped) return 1;\r\n            if (left.name > right.name) return 1;\r\n            if (left.name < right.name) return -1;\r\n            return 0;\r\n        };\r\n        actions.sort(sortByName);\r\n        adept_powers.sort(sortByName);\r\n        complex_forms.sort(sortByName);\r\n        items.sort(sortByEquipped);\r\n        spells.sort(sortByName);\r\n        contacts.sort(sortByName);\r\n        lifestyles.sort(sortByName);\r\n        sins.sort(sortByName);\r\n        programs.sort(sortByEquipped);\r\n\r\n        items.forEach((item) => {\r\n            inventory[item.type].items.push(item);\r\n        });\r\n\r\n        data.inventory = Object.values(inventory);\r\n        data.magic = {\r\n            spellbook: spells,\r\n            powers: adept_powers,\r\n        };\r\n        data.actions = actions;\r\n        data.complex_forms = complex_forms;\r\n        data.lifestyles = lifestyles;\r\n        data.contacts = contacts;\r\n        data.sins = sins;\r\n        data.programs = programs;\r\n\r\n        qualities.sort((a, b) => {\r\n            if (a.data.type === 'positive' && b.data.type === 'negative') return -1;\r\n            if (a.data.type === 'negative' && b.data.type === 'positive') return 1;\r\n            return a.name < b.name ? -1 : 1;\r\n        });\r\n        data.qualities = qualities;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Activate event listeners using the prepared sheet HTML\r\n     * @param html The prepared HTML object ready to be rendered into the DOM\r\n     */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n\r\n        html.find('.hidden').hide();\r\n\r\n        html.find('.skill-header').click((event) => {\r\n            event.preventDefault();\r\n            this._shownUntrainedSkills = !this._shownUntrainedSkills;\r\n            this._render(true);\r\n        });\r\n\r\n        html.find('.has-desc').click((event) => {\r\n            event.preventDefault();\r\n            const item = $(event.currentTarget).parents('.item');\r\n            const iid = $(item).data().item;\r\n            const field = item.next();\r\n            field.toggle();\r\n            if (iid) {\r\n                if (field.is(':visible')) this._shownDesc.push(iid);\r\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n            }\r\n        });\r\n\r\n        html.find('#filter-skills').on('input', this._onFilterSkills.bind(this));\r\n        html.find('.cell-input-roll').click(this._onRollCellInput.bind(this));\r\n        html.find('.attribute-roll').click(this._onRollAttribute.bind(this));\r\n        html.find('.skill-roll').click(this._onRollActiveSkill.bind(this));\r\n        html.find('.defense-roll').click(this._onRollDefense.bind(this));\r\n        html.find('.attribute-only-roll').click(this._onRollAttributesOnly.bind(this));\r\n        html.find('.soak-roll').click(this._onRollSoak.bind(this));\r\n        html.find('.drain-roll').click(this._onRollDrain.bind(this));\r\n        html.find('.fade-roll').click(this._onRollFade.bind(this));\r\n        html.find('.item-roll').click(this._onRollItem.bind(this));\r\n        // $(html).find('.item-roll').on('contextmenu', () => console.log('TEST'));\r\n        html.find('.item-equip-toggle').click(this._onEquipItem.bind(this));\r\n        html.find('.item-qty').change(this._onChangeQty.bind(this));\r\n        html.find('.item-rtg').change(this._onChangeRtg.bind(this));\r\n        html.find('.item-create').click(this._onItemCreate.bind(this));\r\n        html.find('.matrix-roll').click(this._onRollMatrixAttribute.bind(this));\r\n        html.find('.matrix-att-selector').change(this._onMatrixAttributeSelected.bind(this));\r\n        html.find('.basic-roll').click(this._onRollPrompt.bind(this));\r\n        html.find('.armor-roll').click(this._onRollArmor.bind(this));\r\n        html.find('.add-knowledge').click(this._onAddKnowledgeSkill.bind(this));\r\n        html.find('.knowledge-skill').click(this._onRollKnowledgeSkill.bind(this));\r\n        html.find('.remove-knowledge').click(this._onRemoveKnowledgeSkill.bind(this));\r\n        html.find('.add-language').click(this._onAddLanguageSkill.bind(this));\r\n        html.find('.language-skill').click(this._onRollLanguageSkill.bind(this));\r\n        html.find('.remove-language').click(this._onRemoveLanguageSkill.bind(this));\r\n        html.find('.import-character').click(this._onShowImportCharacter.bind(this));\r\n        html.find('.reload-ammo').click(this._onReloadAmmo.bind(this));\r\n        html.find('.skill-edit').click(this._onShowEditSkill.bind(this));\r\n        html.find('.knowledge-skill-edit').click(this._onShowEditKnowledgeSkill.bind(this));\r\n        html.find('.language-skill-edit').click(this._onShowEditLanguageSkill.bind(this));\r\n\r\n        $(html).find('.horizontal-cell-input .cell').on('click', this._onSetCellInput.bind(this));\r\n\r\n        $(html).find('.horizontal-cell-input .cell').on('contextmenu', this._onClearCellInput.bind(this));\r\n\r\n        // updates matrix condition monitor on the device the actor has equippe\r\n        $(html)\r\n            .find('[name=\"data.matrix.condition_monitor.value\"]')\r\n            .on('change', async (event: any) => {\r\n                event.preventDefault();\r\n                const value = Helpers.parseInputToNumber(event.currentTarget.value);\r\n                const matrixDevice = this.actor.getMatrixDevice();\r\n                if (matrixDevice && !isNaN(value)) {\r\n                    const updateData = {};\r\n                    updateData['data.technology.condition_monitor.value'] = value;\r\n                    await matrixDevice.update(updateData);\r\n                }\r\n            });\r\n\r\n        // Update Inventory Item\r\n        html.find('.item-edit').click((event) => {\r\n            event.preventDefault();\r\n            const iid = event.currentTarget.closest('.item').dataset.itemId;\r\n            const item = this.actor.getOwnedItem(iid);\r\n            if (item) item.sheet.render(true);\r\n        });\r\n        // Delete Inventory Item\r\n        html.find('.item-delete').click((event) => {\r\n            event.preventDefault();\r\n            const iid = event.currentTarget.closest('.item').dataset.itemId;\r\n            const el = $(event.currentTarget).parents('.item');\r\n            this.actor.deleteOwnedItem(iid);\r\n            el.slideUp(200, () => this.render(false));\r\n        });\r\n        // Drag inventory item\r\n        let handler = (ev) => this._onDragItemStart(ev);\r\n        html.find('.item').each((i, item) => {\r\n            if (item.dataset && item.dataset.itemId) {\r\n                item.setAttribute('draggable', true);\r\n                item.addEventListener('dragstart', handler, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async _onFilterSkills(event) {\r\n        this._filters.skills = event.currentTarget.value;\r\n        this.render();\r\n    }\r\n\r\n    async _onReloadAmmo(event) {\r\n        event.preventDefault();\r\n        const iid = event.currentTarget.closest('.item').dataset.itemId;\r\n        const item = this.actor.getOwnedItem(iid);\r\n        if (item) return item.reloadAmmo();\r\n    }\r\n\r\n    async _onMatrixAttributeSelected(event) {\r\n        let iid = this.actor.data.data.matrix.device;\r\n        let item = this.actor.getOwnedItem(iid);\r\n        if (!item) {\r\n            console.error('could not find item');\r\n            return;\r\n        }\r\n        // grab matrix attribute (sleaze, attack, etc.)\r\n        let att = event.currentTarget.dataset.att;\r\n        // grab device attribute (att1, att2, ...)\r\n        let deviceAtt = event.currentTarget.value;\r\n\r\n        // get current matrix attribute on the device\r\n        let oldVal = item.data.data.atts[deviceAtt].att;\r\n        let data = {\r\n            _id: iid,\r\n        };\r\n\r\n        // go through atts on device, setup matrix attributes on it\r\n        for (let i = 1; i <= 4; i++) {\r\n            let tmp = `att${i}`;\r\n            let key = `data.atts.att${i}.att`;\r\n            if (tmp === deviceAtt) {\r\n                data[key] = att;\r\n            } else if (item.data.data.atts[`att${i}`].att === att) {\r\n                data[key] = oldVal;\r\n            }\r\n        }\r\n        await this.actor.updateOwnedItem(data);\r\n    }\r\n\r\n    _onItemCreate(event) {\r\n        event.preventDefault();\r\n        const header = event.currentTarget;\r\n        const type = header.dataset.type;\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            data: duplicate(header.dataset),\r\n        };\r\n        delete itemData.data['type'];\r\n        return this.actor.createOwnedItem(itemData, { renderSheet: true });\r\n    }\r\n\r\n    async _onAddLanguageSkill(event) {\r\n        event.preventDefault();\r\n        this.actor.addLanguageSkill({ name: '' });\r\n    }\r\n\r\n    async _onRemoveLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skillId = event.currentTarget.closest('.item').dataset.itemId;\r\n        this.actor.removeLanguageSkill(skillId);\r\n    }\r\n\r\n    async _onAddKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const category = event.currentTarget.closest('.item').dataset.itemId;\r\n        this.actor.addKnowledgeSkill(category);\r\n    }\r\n\r\n    async _onRemoveKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const [skillId, category] = event.currentTarget.closest('.item').dataset.itemId.split('.');\r\n        this.actor.removeKnowledgeSkill(skillId, category);\r\n    }\r\n\r\n    async _onChangeRtg(event) {\r\n        const iid = event.currentTarget.closest('.item').dataset.itemId;\r\n        const item = this.actor.getOwnedItem(iid);\r\n        const rtg = parseInt(event.currentTarget.value);\r\n        if (item && rtg) {\r\n            item.update({ 'data.technology.rating': rtg });\r\n        }\r\n    }\r\n\r\n    async _onChangeQty(event) {\r\n        const iid = event.currentTarget.closest('.item').dataset.itemId;\r\n        const item = this.actor.getOwnedItem(iid);\r\n        const qty = parseInt(event.currentTarget.value);\r\n        if (item && qty) {\r\n            item.data.data.technology.quantity = qty;\r\n            item.update({ 'data.technology.quantity': qty });\r\n        }\r\n    }\r\n\r\n    async _onEquipItem(event) {\r\n        event.preventDefault();\r\n        const iid = event.currentTarget.closest('.item').dataset.itemId;\r\n        const item = this.actor.getOwnedItem(iid);\r\n        if (item) {\r\n            const itemData = item.data.data;\r\n            const newItems = [] as any[];\r\n            if (item.type === 'device') {\r\n                // turn off all other devices than the one that is being equipped\r\n                // if clicking the equipped, toggle it\r\n                for (let ite of this.actor.items.filter((i) => i.type === 'device')) {\r\n                    newItems.push({\r\n                        '_id': ite._id,\r\n                        'data.technology.equipped': ite._id === iid ? !itemData.technology.equipped : false,\r\n                    });\r\n                }\r\n            } else {\r\n                newItems.push({\r\n                    '_id': iid,\r\n                    'data.technology.equipped': !itemData.technology.equipped,\r\n                });\r\n            }\r\n            await this.actor.updateEmbeddedEntity('OwnedItem', newItems);\r\n            this.actor.render();\r\n        }\r\n    }\r\n\r\n    async _onSetCellInput(event) {\r\n        const value = Number(event.currentTarget.dataset.value);\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun' || cmId === 'physical') {\r\n            const property = `data.track.${cmId}.value`;\r\n            data[property] = value;\r\n        } else if (cmId === 'edge') {\r\n            const property = `data.attributes.edge.uses`;\r\n            data[property] = value;\r\n        } else if (cmId === 'overflow') {\r\n            const property = 'data.track.physical.overflow.value';\r\n            data[property] = value;\r\n        } else if (cmId === 'matrix') {\r\n            const matrixDevice = this.actor.getMatrixDevice();\r\n            if (matrixDevice && !isNaN(value)) {\r\n                const updateData = {};\r\n                updateData['data.technology.condition_monitor.value'] = value;\r\n                await matrixDevice.update(updateData);\r\n            }\r\n        }\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    async _onClearCellInput(event) {\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun' || cmId === 'physical') {\r\n            const property = `data.track.${cmId}.value`;\r\n            data[property] = 0;\r\n        } else if (cmId === 'edge') {\r\n            const property = `data.attributes.edge.uses`;\r\n            data[property] = 0;\r\n        } else if (cmId === 'overflow') {\r\n            const property = 'data.track.physical.overflow.value';\r\n            data[property] = 0;\r\n        } else if (cmId === 'matrix') {\r\n            const matrixDevice = this.actor.getMatrixDevice();\r\n            if (matrixDevice) {\r\n                const updateData = {};\r\n                updateData['data.technology.condition_monitor.value'] = 0;\r\n                await matrixDevice.update(updateData);\r\n            }\r\n        }\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    async _onRollCellInput(event) {\r\n        event.preventDefault();\r\n        let track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        if (track === 'stun' || track === 'physical') {\r\n            await this.actor.rollNaturalRecovery(track, event);\r\n        } else if (track === 'edge') {\r\n            await this.actor.rollAttribute('edge');\r\n        }\r\n    }\r\n\r\n    async _onRollPrompt(event) {\r\n        event.preventDefault();\r\n        await this.actor.promptRoll({ event: event });\r\n    }\r\n\r\n    async _onRollItem(event) {\r\n        event.preventDefault();\r\n        const iid = event.currentTarget.closest('.item').dataset.itemId;\r\n        const item = this.actor.getOwnedItem(iid);\r\n        if (item) {\r\n            await item.postCard(event);\r\n        }\r\n    }\r\n\r\n    async _onRollFade(event) {\r\n        event.preventDefault();\r\n        this.actor.rollFade({ event: event });\r\n    }\r\n\r\n    async _onRollDrain(event) {\r\n        event.preventDefault();\r\n        this.actor.rollDrain({ event: event });\r\n    }\r\n\r\n    async _onRollArmor(event) {\r\n        event.preventDefault();\r\n        return this.actor.rollArmor({ event: event });\r\n    }\r\n\r\n    async _onRollDefense(event) {\r\n        event.preventDefault();\r\n        return this.actor.rollDefense({ event: event });\r\n    }\r\n\r\n    async _onRollMatrixAttribute(event) {\r\n        event.preventDefault();\r\n        const attr = event.currentTarget.dataset.attribute;\r\n        return this.actor.rollMatrixAttribute(attr, { event: event });\r\n    }\r\n\r\n    async _onRollSoak(event: MouseEvent) {\r\n        event.preventDefault();\r\n        return this.actor.rollSoak({ event: event });\r\n    }\r\n\r\n    async _onRollAttributesOnly(event) {\r\n        event.preventDefault();\r\n        const roll = event.currentTarget.dataset.roll;\r\n        return this.actor.rollAttributesTest(roll, { event: event });\r\n    }\r\n\r\n    async _onRollKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const id = event.currentTarget.closest('.item').dataset.itemId;\r\n        const [skill, category] = id.split('.');\r\n        return this.actor.rollKnowledgeSkill(category, skill, { event: event });\r\n    }\r\n\r\n    async _onRollLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skill = event.currentTarget.closest('.item').dataset.itemId;\r\n        return this.actor.rollLanguageSkill(skill, { event: event });\r\n    }\r\n\r\n    async _onRollActiveSkill(event) {\r\n        event.preventDefault();\r\n        const skill = event.currentTarget.closest('.item').dataset.itemId;\r\n        return this.actor.rollActiveSkill(skill, { event: event });\r\n    }\r\n\r\n    async _onRollAttribute(event) {\r\n        event.preventDefault();\r\n        const attr = event.currentTarget.closest('.attribute').dataset.attribute;\r\n        return this.actor.rollAttribute(attr, { event: event });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    async _render(...args) {\r\n        const focusList = $(this.element).find(':focus');\r\n        const focus: any = focusList.length ? focusList[0] : null;\r\n\r\n        this._saveScrollPositions();\r\n        await super._render(...args);\r\n        this._restoreScrollPositions();\r\n\r\n        if (focus && focus.name) {\r\n            const element = this.form[focus.name];\r\n            if (element) {\r\n                element.focus();\r\n                // set the selection range on the focus formed from before (keeps track of cursor in input)\r\n                element.setSelectionRange && element.setSelectionRange(focus.selectionStart, focus.selectionEnd);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n\r\n    _onShowEditKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const [skill, category] = event.currentTarget.closest('.item').dataset.itemId.split('.');\r\n        new KnowledgeSkillEditForm(this.actor, skill, category, {\r\n            event: event,\r\n        }).render(true);\r\n    }\r\n\r\n    _onShowEditLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skill = event.currentTarget.closest('.item').dataset.itemId;\r\n        new LanguageSkillEditForm(this.actor, skill, { event: event }).render(true);\r\n    }\r\n\r\n    _onShowEditSkill(event) {\r\n        event.preventDefault();\r\n        const skill = event.currentTarget.closest('.item').dataset.itemId;\r\n        new SkillEditForm(this.actor, skill, { event: event }).render(true);\r\n    }\r\n\r\n    _onShowImportCharacter(event) {\r\n        event.preventDefault();\r\n        const options = {\r\n            name: 'chummer-import',\r\n            title: 'Chummer Import',\r\n        };\r\n        new ChummerImportForm(this.actor, options).render(true);\r\n    }\r\n}\r\n","import SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { SR5ItemDataWrapper } from '../../item/SR5ItemDataWrapper';\r\nimport SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { Helpers } from '../../helpers';\r\nimport { PartsList } from '../../parts/PartsList';\r\n\r\nexport class BaseActorPrep {\r\n    data: SR5ActorData;\r\n    items: SR5ItemDataWrapper[];\r\n\r\n    constructor(data: SR5ActorType) {\r\n        this.data = data.data;\r\n        this.items = data.items.map((item) => new SR5ItemDataWrapper(item));\r\n    }\r\n    /**\r\n     * Prepare Matrix data on the actor\r\n     * - if an item is equipped, it will use that data\r\n     * - if it isn't and player is technomancer, it will use that data\r\n     */\r\n    prepareMatrix() {\r\n        const { matrix, attributes, limits } = this.data;\r\n\r\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\r\n\r\n        // clear matrix data to defaults\r\n        MatrixList.forEach((key) => {\r\n            const parts = new PartsList(matrix[key].mod);\r\n            parts.addUniquePart('SR5.Temporary', matrix[key].temp);\r\n            // TODO LEGACY from when the sheet used 'mod.Temporary'\r\n            parts.removePart('Temporary');\r\n            matrix[key].mod = parts.list;\r\n            matrix[key].value = parts.total;\r\n        });\r\n        matrix.condition_monitor.max = 0;\r\n        matrix.rating = 0;\r\n        matrix.name = '';\r\n        matrix.device = '';\r\n        matrix.condition_monitor.label = 'SR5.ConditionMonitor';\r\n\r\n        // get the first equipped device, we don't care if they have more equipped -- it shouldn't happen\r\n        const device = this.items.find((item) => item.isEquipped() && item.isDevice());\r\n\r\n        if (device) {\r\n            const conditionMonitor = device.getConditionMonitor();\r\n            matrix.device = device.getId();\r\n            matrix.condition_monitor.max = conditionMonitor.max;\r\n            matrix.condition_monitor.value = conditionMonitor.value;\r\n            matrix.rating = device.getRating();\r\n            matrix.is_cyberdeck = device.isCyberdeck();\r\n            matrix.name = device.getName();\r\n            matrix.item = device.getData();\r\n            const deviceAtts = device.getASDF();\r\n            if (deviceAtts) {\r\n                // setup the actual matrix attributes for the actor\r\n                for (const [key, value] of Object.entries(deviceAtts)) {\r\n                    if (value && matrix[key]) {\r\n                        matrix[key].base = value.value;\r\n                        matrix[key].device_att = value.device_att;\r\n                    }\r\n                }\r\n            }\r\n        } // if we don't have a device, use living persona\r\n        else if (this.data.special === 'resonance') {\r\n            matrix.firewall.base = Helpers.calcTotal(attributes.willpower);\r\n            matrix.data_processing.base = Helpers.calcTotal(attributes.logic);\r\n            matrix.rating = Helpers.calcTotal(attributes.resonance);\r\n            matrix.attack.base = Helpers.calcTotal(attributes.charisma);\r\n            matrix.sleaze.base = Helpers.calcTotal(attributes.intuition);\r\n            matrix.name = game.i18n.localize('SR5.LivingPersona');\r\n        }\r\n\r\n        // set matrix condition monitor to max if greater than\r\n        if (matrix.condition_monitor.value > matrix.condition_monitor.max) {\r\n            matrix.condition_monitor.value = matrix.condition_monitor.max;\r\n        }\r\n\r\n        // add matrix attributes to both limits and attributes as hidden entries\r\n        MatrixList.forEach((key) => {\r\n            Helpers.calcTotal(matrix[key])\r\n            if (matrix[key]) {\r\n                const label = CONFIG.SR5.matrixAttributes[key];\r\n                const { value, base, mod } = matrix[key];\r\n                const hidden = true;\r\n\r\n                limits[key] = {\r\n                    value,\r\n                    base,\r\n                    mod,\r\n                    label,\r\n                    hidden,\r\n                };\r\n                attributes[key] = {\r\n                    value,\r\n                    base,\r\n                    mod,\r\n                    label,\r\n                    hidden,\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prepare the armor data for the Item\r\n     * - will only allow one \"Base\" armor item to be used\r\n     * - all \"accessories\" will be added to the armor\r\n     */\r\n    prepareArmor() {\r\n        const { armor } = this.data;\r\n        armor.base = 0;\r\n        armor.value = 0;\r\n        armor.mod = [];\r\n        for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\r\n            armor[element] = 0;\r\n        }\r\n\r\n        const equippedArmor = this.items.filter((item) => item.hasArmor() && item.isEquipped());\r\n        const armorModParts = new PartsList<number>(armor.mod);\r\n        equippedArmor?.forEach((item) => {\r\n            if (item.hasArmorAccessory()) {\r\n                armorModParts.addUniquePart(item.getName(), item.getArmorValue());\r\n            } // if not a mod, set armor.value to the items value\r\n            else {\r\n                armor.base = item.getArmorValue();\r\n                armor.label = item.getName();\r\n                for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\r\n                    armor[element] = item.getArmorElements()[element];\r\n                }\r\n            }\r\n        });\r\n\r\n        if (this.data.modifiers['armor']) armorModParts.addUniquePart(game.i18n.localize('SR5.Bonus'), this.data.modifiers['armor']);\r\n        // SET ARMOR\r\n        armor.value = Helpers.calcTotal(armor);\r\n    }\r\n\r\n    /**\r\n     * Prepare actor data for cyberware changes\r\n     * - this calculates the actors essence\r\n     */\r\n    prepareCyberware() {\r\n        const { attributes } = this.data;\r\n        const parts = new PartsList<number>();\r\n        // add Items as values to lower the total value of essence\r\n        this.items\r\n            .filter((item) => item.isCyberware() && item.isEquipped())\r\n            .forEach((item) => {\r\n                if (item.getEssenceLoss()) {\r\n                    parts.addUniquePart(item.getName(), -Number(item.getEssenceLoss()));\r\n                }\r\n            });\r\n        // add the bonus from the misc tab if applied\r\n        const essenceMod = this.data.modifiers['essence'];\r\n        if (essenceMod && !Number.isNaN(essenceMod)) {\r\n            parts.addUniquePart('SR5.Bonus', Number(essenceMod));\r\n        }\r\n\r\n        attributes.essence.base = 6;\r\n        attributes.essence.mod = parts.list;\r\n        attributes.essence.value = Helpers.calcTotal(attributes.essence);\r\n    }\r\n\r\n    /**\r\n     * Prepare actor data for attributes\r\n     */\r\n    prepareAttributes() {\r\n        const { attributes } = this.data;\r\n\r\n        // always have special attributes set to hidden\r\n        attributes.magic.hidden = true;\r\n        attributes.resonance.hidden = true;\r\n        attributes.edge.hidden = true;\r\n        attributes.essence.hidden = true;\r\n\r\n        // set the value for the attributes\r\n        for (let [key, attribute] of Object.entries(attributes)) {\r\n            // don't manage the attribute if it is using the old method of edge tracking\r\n            // needed to be able to migrate things correctly\r\n            if (key === 'edge' && attribute['uses'] === undefined) return;\r\n            // this turns the Object model into the list mod\r\n            if (typeof attribute.mod === 'object') {\r\n                attribute.mod = new PartsList(attribute.mod).list;\r\n            }\r\n            attribute.mod = PartsList.AddUniquePart(attribute.mod, 'SR5.Temporary', attribute.temp ?? 0);\r\n            Helpers.calcTotal(attribute);\r\n            // add labels\r\n            attribute.label = CONFIG.SR5.attributes[key];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare actor data for skills\r\n     */\r\n    prepareSkills() {\r\n        const { language, active, knowledge } = this.data.skills;\r\n        if (language) {\r\n            if (!language.value) language.value = {};\r\n            language.attribute = 'intuition';\r\n        }\r\n\r\n        // function that will set the total of a skill correctly\r\n        const prepareSkill = (skill) => {\r\n            skill.mod = [];\r\n            if (!skill.base) skill.base = 0;\r\n            if (skill.bonus?.length) {\r\n                for (let bonus of skill.bonus) {\r\n                    skill.mod = PartsList.AddUniquePart(skill.mod, bonus.key, bonus.value);\r\n                }\r\n            }\r\n            Helpers.calcTotal(skill);\r\n        };\r\n\r\n        // setup active skills\r\n        for (const skill of Object.values(active)) {\r\n            if (!skill.hidden) {\r\n                prepareSkill(skill);\r\n            }\r\n        }\r\n\r\n        const entries = Object.entries(this.data.skills.language.value);\r\n        // remove entries which are deleted TODO figure out how to delete these from the data\r\n        entries.forEach(([key, val]: [string, { _delete?: boolean }]) => val._delete && delete this.data.skills.language.value[key]);\r\n\r\n        for (let skill of Object.values(language.value)) {\r\n            prepareSkill(skill);\r\n            skill.attribute = 'intuition';\r\n        }\r\n\r\n        // setup knowledge skills\r\n        for (let [, group] of Object.entries(knowledge)) {\r\n            const entries = Object.entries(group.value);\r\n            // remove entries which are deleted TODO figure out how to delete these from the data\r\n            group.value = entries\r\n                .filter(([, val]) => !val._delete)\r\n                .reduce((acc, [id, skill]) => {\r\n                    prepareSkill(skill);\r\n\r\n                    // set the attribute on the skill\r\n                    skill.attribute = group.attribute;\r\n                    acc[id] = skill;\r\n                    return acc;\r\n                }, {});\r\n        }\r\n\r\n        // skill labels\r\n        for (let [skillKey, skillValue] of Object.entries(active)) {\r\n            skillValue.label = CONFIG.SR5.activeSkills[skillKey];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare the actor data limits\r\n     */\r\n    prepareLimits() {\r\n        const { limits, attributes, modifiers } = this.data;\r\n\r\n        // SETUP LIMITS\r\n        limits.physical.value =\r\n            Math.ceil((2 * attributes.strength.value + attributes.body.value + attributes.reaction.value) / 3) + Number(modifiers['physical_limit']);\r\n        limits.mental.value =\r\n            Math.ceil((2 * attributes.logic.value + attributes.intuition.value + attributes.willpower.value) / 3) + Number(modifiers['mental_limit']);\r\n        limits.social.value =\r\n            Math.ceil((2 * attributes.charisma.value + attributes.willpower.value + attributes.essence.value) / 3) + Number(modifiers['social_limit']);\r\n\r\n        // limit labels\r\n        for (let [limitKey, limitValue] of Object.entries(limits)) {\r\n            limitValue.label = CONFIG.SR5.limits[limitKey];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare actor data condition monitors (aka Tracks)\r\n     */\r\n    prepareConditionMonitors() {\r\n        const { track, attributes, modifiers } = this.data;\r\n\r\n        // TODO we will have grunts eventually that only have one track\r\n        track.physical.max = 8 + Math.ceil(attributes.body.value / 2) + Number(modifiers['physical_track']);\r\n        track.physical.overflow.max = attributes.body.value;\r\n        track.stun.max = 8 + Math.ceil(attributes.willpower.value / 2) + Number(modifiers['stun_track']);\r\n\r\n        // tracks\r\n        for (let [trackKey, trackValue] of Object.entries(track)) {\r\n            trackValue.label = CONFIG.SR5.damageTypes[trackKey];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prepare actor data movement\r\n     */\r\n    prepareMovement() {\r\n        const { attributes, modifiers } = this.data;\r\n        const movement = this.data.movement;\r\n        // default movement: WALK = AGI * 2, RUN = AGI * 4\r\n        movement.walk.value = attributes.agility.value * (2 + Number(modifiers['walk']));\r\n        movement.run.value = attributes.agility.value * (4 + Number(modifiers['run']));\r\n    }\r\n\r\n    /**\r\n     * Prepare the modifiers that are displayed in the Misc. tab\r\n     */\r\n    prepareModifiers() {\r\n        if (!this.data.modifiers) this.data.modifiers = {};\r\n        const modifiers = {};\r\n        let miscTabModifiers = [\r\n            'soak',\r\n            'drain',\r\n            'armor',\r\n            'physical_limit',\r\n            'social_limit',\r\n            'mental_limit',\r\n            'stun_track',\r\n            'physical_track',\r\n            'meat_initiative',\r\n            'meat_initiative_dice',\r\n            'astral_initiative',\r\n            'astral_initiative_dice',\r\n            'matrix_initiative',\r\n            'matrix_initiative_dice',\r\n            'composure',\r\n            'lift_carry',\r\n            'judge_intentions',\r\n            'memory',\r\n            'walk',\r\n            'run',\r\n            'defense',\r\n            'wound_tolerance',\r\n            'essence',\r\n            'fade',\r\n        ];\r\n        miscTabModifiers.sort();\r\n        // force global to the top\r\n        miscTabModifiers.unshift('global');\r\n\r\n        for (let item of miscTabModifiers) {\r\n            modifiers[item] = Number(this.data.modifiers[item]) || 0;\r\n        }\r\n\r\n        this.data.modifiers = modifiers;\r\n    }\r\n\r\n    /**\r\n     * Prepare actor data for initiative\r\n     */\r\n    prepareInitiative() {\r\n        const { initiative, attributes, modifiers, matrix } = this.data;\r\n        initiative.meatspace.base.base = attributes.intuition.value + attributes.reaction.value + Number(modifiers['meat_initiative']);\r\n        initiative.meatspace.dice.base = 1 + Number(modifiers['meat_initiative_dice']);\r\n        initiative.astral.base.base = attributes.intuition.value * 2 + Number(modifiers['astral_initiative']);\r\n        initiative.astral.dice.base = 2 + Number(modifiers['astral_initiative_dice']);\r\n        initiative.matrix.base.base = attributes.intuition.value + this.data.matrix.data_processing.value + Number(modifiers['matrix_initiative']);\r\n        initiative.matrix.dice.base = (matrix.hot_sim ? 4 : 3) + Number(modifiers['matrix_initiative_dice']);\r\n        if (initiative.perception === 'matrix') initiative.current = initiative.matrix;\r\n        else if (initiative.perception === 'astral') initiative.current = initiative.astral;\r\n        else {\r\n            initiative.current = initiative.meatspace;\r\n            initiative.perception = 'meatspace';\r\n        }\r\n        initiative.current.dice.value = initiative.current.dice.base;\r\n        if (initiative.edge) initiative.current.dice.value = 5;\r\n        initiative.current.dice.value = Math.min(5, initiative.current.dice.value); // maximum of 5d6 for initiative\r\n        initiative.current.dice.text = `${initiative.current.dice.value}d6`;\r\n        initiative.current.base.value = initiative.current.base.base;\r\n    }\r\n\r\n    /**\r\n     * Prepare actor data for wounds\r\n     */\r\n    prepareWounds() {\r\n        const { modifiers, track } = this.data;\r\n        const count = 3 + Number(modifiers['wound_tolerance']);\r\n        const stunWounds = Math.floor(this.data.track.stun.value / count);\r\n        const physicalWounds = Math.floor(this.data.track.physical.value / count);\r\n\r\n        track.stun.wounds = stunWounds;\r\n        track.physical.wounds = physicalWounds;\r\n\r\n        this.data.wounds = {\r\n            value: stunWounds + physicalWounds,\r\n        };\r\n    }\r\n}\r\n","export class ChummerImportForm extends FormApplication {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'chummer-import';\r\n        options.classes = ['shadowrun5e'];\r\n        options.title = 'Chummer/Hero Lab Import';\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/import.html';\r\n        options.width = 600;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    getData() {\r\n        return {};\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.submit-chummer-import').click(async (event) => {\r\n            event.preventDefault();\r\n            const chummerfile = JSON.parse($('.chummer-text').val());\r\n            const weapons = $('.weapons').is(':checked');\r\n            const armor = $('.armor').is(':checked');\r\n            const cyberware = $('.cyberware').is(':checked');\r\n            const equipment = $('.gear').is(':checked');\r\n            const qualities = $('.qualities').is(':checked');\r\n            const powers = $('.powers').is(':checked');\r\n            const spells = $('.spells').is(':checked');\r\n\r\n            console.log(chummerfile);\r\n\r\n            const parseAtt = (att) => {\r\n                if (att.toLowerCase() === 'bod') {\r\n                    return 'body';\r\n                }\r\n                if (att.toLowerCase() === 'agi') {\r\n                    return 'agility';\r\n                }\r\n                if (att.toLowerCase() === 'rea') {\r\n                    return 'reaction';\r\n                }\r\n                if (att.toLowerCase() === 'str') {\r\n                    return 'strength';\r\n                }\r\n                if (att.toLowerCase() === 'cha') {\r\n                    return 'charisma';\r\n                }\r\n                if (att.toLowerCase() === 'int') {\r\n                    return 'intuition';\r\n                }\r\n                if (att.toLowerCase() === 'log') {\r\n                    return 'logic';\r\n                }\r\n                if (att.toLowerCase() === 'wil') {\r\n                    return 'willpower';\r\n                }\r\n                if (att.toLowerCase() === 'edg') {\r\n                    return 'edge';\r\n                }\r\n                if (att.toLowerCase() === 'mag') {\r\n                    return 'magic';\r\n                }\r\n                if (att.toLowerCase() === 'res') {\r\n                    return 'resonance';\r\n                }\r\n            };\r\n\r\n            const parseDamage = (val) => {\r\n                const damage = {\r\n                    damage: 0,\r\n                    type: 'physical',\r\n                    radius: 0,\r\n                    dropoff: 0,\r\n                };\r\n                const split = val.split(',');\r\n                if (split.length > 0) {\r\n                    const l = split[0].match(/(\\d+)(\\w+)/);\r\n                    if (l && l[1]) damage.damage = parseInt(l[1]);\r\n                    if (l && l[2]) damage.type = l[2] === 'P' ? 'physical' : 'stun';\r\n                }\r\n                for (let i = 1; i < split.length; i++) {\r\n                    const l = split[i].match(/(-?\\d+)(.*)/);\r\n                    if (l && l[2]) {\r\n                        if (l[2].toLowerCase().includes('/m')) damage.dropoff = parseInt(l[1]);\r\n                        else damage.radius = parseInt(l[1]);\r\n                    }\r\n                }\r\n                return damage;\r\n            };\r\n\r\n            const getValues = (val) => {\r\n                const regex = /(-?[0-9]+)(?:([0-9]+))*/g;\r\n                const l = val.match(regex);\r\n                return l || ['0'];\r\n            };\r\n\r\n            const getArray = (value) => {\r\n                return Array.isArray(value) ? value : [value];\r\n            };\r\n            const updateData = duplicate(this.object.data);\r\n            const update = updateData.data;\r\n            const items = [];\r\n            let error = '';\r\n            // character info stuff, also techno/magic and essence\r\n            if (chummerfile.characters && chummerfile.characters.character) {\r\n                const c = chummerfile.characters.character;\r\n                try {\r\n                    if (c.playername) {\r\n                        update.player_name = c.playername;\r\n                    }\r\n                    if (c.alias) {\r\n                        update.name = c.alias;\r\n                        updateData.name = c.alias;\r\n                    }\r\n                    if (c.metatype) {\r\n                        update.metatype = c.metatype;\r\n                    }\r\n                    if (c.sex) {\r\n                        update.sex = c.sex;\r\n                    }\r\n                    if (c.age) {\r\n                        update.age = c.age;\r\n                    }\r\n                    if (c.height) {\r\n                        update.height = c.height;\r\n                    }\r\n                    if (c.weight) {\r\n                        update.weight = c.weight;\r\n                    }\r\n                    if (c.calculatedstreetcred) {\r\n                        update.street_cred = c.calculatedstreetcred;\r\n                    }\r\n                    if (c.calculatednotoriety) {\r\n                        update.notoriety = c.calculatednotoriety;\r\n                    }\r\n                    if (c.calculatedpublicawareness) {\r\n                        update.public_awareness = c.calculatedpublicawareness;\r\n                    }\r\n                    if (c.karma) {\r\n                        update.karma.value = c.karma;\r\n                    }\r\n                    if (c.totalkarma) {\r\n                        update.karma.max = c.totalkarma;\r\n                    }\r\n                    if (c.technomancer && c.technomancer.toLowerCase() === 'true') {\r\n                        update.special = 'resonance';\r\n                    }\r\n                    if (\r\n                        (c.magician && c.magician.toLowerCase() === 'true') ||\r\n                        (c.adept && c.adept.toLowerCase() === 'true')\r\n                    ) {\r\n                        update.special = 'magic';\r\n                        let attr = [];\r\n                        if (\r\n                            c.tradition &&\r\n                            c.tradition.drainattribute &&\r\n                            c.tradition.drainattribute.attr\r\n                        ) {\r\n                            attr = c.tradition.drainattribute.attr;\r\n                        } else if (c.tradition && c.tradition.drainattributes) {\r\n                            attr = c.tradition.drainattributes\r\n                                .split('+')\r\n                                .map((item) => item.trim());\r\n                        }\r\n                        attr.forEach((att) => {\r\n                            att = parseAtt(att);\r\n                            if (att !== 'willpower') update.magic.attribute = att;\r\n                        });\r\n                    }\r\n                    if (c.totaless) {\r\n                        update.attributes.essence.value = c.totaless;\r\n                    }\r\n                    if (c.nuyen) {\r\n                        update.nuyen = parseInt(c.nuyen.replace(',', ''));\r\n                    }\r\n                } catch (e) {\r\n                    error += `Error with character info: ${e}. `;\r\n                }\r\n                // update attributes\r\n                const atts = chummerfile.characters.character.attributes[1].attribute;\r\n                atts.forEach((att) => {\r\n                    try {\r\n                        const newAtt = parseAtt(att.name);\r\n                        if (newAtt) update.attributes[newAtt].base = parseInt(att.total);\r\n                    } catch (e) {\r\n                        error += `Error with attributes: ${e}. `;\r\n                    }\r\n                });\r\n                // initiative stuff\r\n                try {\r\n                    if (c.initbonus) {\r\n                        // not sure if this one is correct\r\n                        update.mods.initiative = c.initbonus;\r\n                    }\r\n                    if (c.initdice) {\r\n                        update.mods.initiative_dice = c.initdice - 1;\r\n                    }\r\n                } catch (e) {\r\n                    error += `Error with initiative: ${e}. `;\r\n                }\r\n                // skills...\r\n                const skills = c.skills.skill;\r\n                for (let i = 0; i < skills.length; i++) {\r\n                    try {\r\n                        const s = skills[i];\r\n                        if (s.rating > 0 && s.islanguage) {\r\n                            let group = 'active';\r\n                            let skill = null;\r\n                            const id = randomID(16);\r\n                            if (s.islanguage && s.islanguage.toLowerCase() === 'true') {\r\n                                skill = {};\r\n                                update.skills.language.value[id] = skill;\r\n                                group = 'language';\r\n                            } else if (s.knowledge && s.knowledge.toLowerCase() === 'true') {\r\n                                const category = s.skillcategory_english;\r\n                                console.log(category);\r\n                                skill = {};\r\n                                let skillCategory;\r\n                                if (category) {\r\n                                    console.log('found category', category);\r\n                                    const cat = category.toLowerCase();\r\n                                    if (cat === 'street')\r\n                                        skillCategory = update.skills.knowledge.street.value;\r\n                                    if (cat === 'academic')\r\n                                        skillCategory = update.skills.knowledge.academic.value;\r\n                                    if (cat === 'professional')\r\n                                        skillCategory = update.skills.knowledge.professional.value;\r\n                                    if (cat === 'interest')\r\n                                        skillCategory = update.skills.knowledge.interests.value;\r\n                                    if (skillCategory) skillCategory[id] = skill;\r\n                                } else {\r\n                                    if (s.attribute.toLowerCase() === 'int') {\r\n                                        update.skills.knowledge.street.value[id] = skill;\r\n                                    }\r\n                                    if (s.attribute.toLowerCase() === 'log') {\r\n                                        update.skills.knowledge.professional.value[id] = skill;\r\n                                    }\r\n                                }\r\n                                group = 'knowledge';\r\n                            } else {\r\n                                let name = s.name\r\n                                    .toLowerCase()\r\n                                    .trim()\r\n                                    .replace(/\\s/g, '_')\r\n                                    .replace(/-/g, '_');\r\n                                if (name.includes('exotic') && name.includes('_weapon'))\r\n                                    name = name.replace('_weapon', '');\r\n                                skill = update.skills.active[name];\r\n                            }\r\n                            if (!skill) console.error(`Couldn't parse skill ${s.name}`);\r\n                            if (skill) {\r\n                                if (group !== 'active') skill.name = s.name;\r\n                                skill.base = parseInt(s.rating);\r\n                                if (s.skillspecializations) {\r\n                                    skill.specs = getArray(\r\n                                        s.skillspecializations.skillspecialization.name\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n                // qualities\r\n                if (qualities && c.qualities && c.qualities.quality) {\r\n                    const qualities = getArray(c.qualities.quality);\r\n                    qualities.forEach((q) => {\r\n                        try {\r\n                            const data = {};\r\n                            data.type = q.qualitytype.toLowerCase();\r\n                            if (q.description)\r\n                                data.description = {\r\n                                    value: TextEditor.enrichHTML(q.description),\r\n                                };\r\n\r\n                            const itemData = {\r\n                                name: q.name,\r\n                                type: 'quality',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // weapons\r\n                if (weapons && c.weapons != null && c.weapons.weapon != null) {\r\n                    const weapons = getArray(c.weapons.weapon);\r\n                    weapons.forEach((w) => {\r\n                        try {\r\n                            const data = {};\r\n                            const action = {};\r\n                            const damage = {};\r\n                            action.damage = damage;\r\n                            data.action = action;\r\n\r\n                            if (w.description) {\r\n                                data.description = {\r\n                                    value: TextEditor.enrichHTML(w.description),\r\n                                };\r\n                            }\r\n\r\n                            damage.ap = {\r\n                                base: parseInt(getValues(w.ap)[0]),\r\n                            };\r\n                            action.type = 'varies';\r\n                            if (w.skill) action.skill = w.skill.toLowerCase().replace(/\\s/g, '_');\r\n                            else if (w.category && w.category.toLowerCase().includes('exotic'))\r\n                                action.skill = w.category\r\n                                    .toLowerCase()\r\n                                    .replace(' weapons', '')\r\n                                    .replace(/\\s/g, '_');\r\n                            if (action.skill.includes('exotic'))\r\n                                action.skill = action.skill.replace('_weapon', '');\r\n                            action.attribute = 'agility';\r\n                            action.limit = {\r\n                                base: parseInt(getValues(w.accuracy)[0]),\r\n                            };\r\n                            action.opposed = {\r\n                                type: 'defense',\r\n                            };\r\n\r\n                            if (w.type.toLowerCase() === 'melee') {\r\n                                action.type = 'complex';\r\n                                data.category = 'melee';\r\n                                const melee = {};\r\n                                data.melee = melee;\r\n                                melee.reach = parseInt(w.reach);\r\n                            } else if (w.type.toLowerCase() === 'ranged') {\r\n                                data.category = 'range';\r\n                                if (w.skill.toLowerCase().includes('throw')) {\r\n                                    data.category = 'thrown'; // TODO clean this up\r\n                                }\r\n                                const range = {};\r\n                                data.range = range;\r\n                                range.rc = {\r\n                                    base: parseInt(getValues(w.rc)[0]),\r\n                                };\r\n                                if (w.mode) {\r\n                                    // HeroLab export doesn't have mode\r\n                                    const lower = w.mode.toLowerCase();\r\n                                    range.modes = {\r\n                                        single_shot: lower.includes('ss'),\r\n                                        semi_auto: lower.includes('sa'),\r\n                                        burst_fire: lower.includes('bf'),\r\n                                        full_auto: lower.includes('fa'),\r\n                                    };\r\n                                }\r\n                                if (w.clips != null && w.clips.clip != null) {\r\n                                    // HeroLab export doesn't have clips\r\n                                    const clips = Array.isArray(w.clips.clip)\r\n                                        ? w.clips.clip\r\n                                        : [w.clips.clip];\r\n                                    clips.forEach((clip) => {\r\n                                        console.log(clip);\r\n                                    });\r\n                                }\r\n                                if (\r\n                                    w.ranges &&\r\n                                    w.ranges.short &&\r\n                                    w.ranges.medium &&\r\n                                    w.ranges.long &&\r\n                                    w.ranges.extreme\r\n                                ) {\r\n                                    console.log(w.ranges);\r\n                                    range.ranges = {\r\n                                        short: parseInt(w.ranges.short.split('-')[1]),\r\n                                        medium: parseInt(w.ranges.medium.split('-')[1]),\r\n                                        long: parseInt(w.ranges.long.split('-')[1]),\r\n                                        extreme: parseInt(w.ranges.extreme.split('-')[1]),\r\n                                    };\r\n                                }\r\n                                // TODO figure out how to add mods to weapons\r\n                                // if (w.accessories && w.accessories.accessory) {\r\n                                //     range.mods = [];\r\n                                //     const accessories = getArray(w.accessories.accessory);\r\n                                //     accessories.forEach((a) => {\r\n                                //         if (a) {\r\n                                //             range.mods.push({\r\n                                //                 name: a.name,\r\n                                //             });\r\n                                //         }\r\n                                //     });\r\n                                // }\r\n                            } else if (w.type.toLowerCase() === 'thrown') {\r\n                                data.category = 'thrown';\r\n                            }\r\n                            {\r\n                                // TODO handle raw damage if present\r\n                                const d = parseDamage(w.damage_english);\r\n                                damage.base = d.damage;\r\n                                damage.type = {};\r\n                                damage.type.base = d.type;\r\n                                if (d.dropoff || d.radius) {\r\n                                    const thrown = {};\r\n                                    data.thrown = thrown;\r\n                                    thrown.blast = {\r\n                                        radius: d.radius,\r\n                                        dropoff: d.dropoff,\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            const itemData = {\r\n                                name: w.name,\r\n                                type: 'weapon',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // armors\r\n                if (armor && c.armors && c.armors.armor) {\r\n                    const armors = getArray(c.armors.armor);\r\n                    armors.forEach((a) => {\r\n                        try {\r\n                            const data = {};\r\n                            const armor = {};\r\n                            data.armor = armor;\r\n\r\n                            let desc = '';\r\n                            armor.mod = a.armor.includes('+');\r\n                            armor.value = parseInt(a.armor.replace('+', ''));\r\n                            if (a.description) desc = a.description;\r\n\r\n                            console.log(a);\r\n                            if (a.armormods && a.armormods.armormod) {\r\n                                armor.fire = 0;\r\n                                armor.electricity = 0;\r\n                                armor.cold = 0;\r\n                                armor.acid = 0;\r\n                                armor.radiation = 0;\r\n\r\n                                const modDesc = [];\r\n                                const mods = getArray(a.armormods.armormod);\r\n                                mods.forEach((mod) => {\r\n                                    if (mod.name.toLowerCase().includes('fire resistance')) {\r\n                                        armor.fire += parseInt(mod.rating);\r\n                                    } else if (mod.name.toLowerCase().includes('nonconductivity')) {\r\n                                        armor.electricity += parseInt(mod.rating);\r\n                                    } else if (mod.name.toLowerCase().includes('insulation')) {\r\n                                        armor.cold += parseInt(mod.rating);\r\n                                    } else if (\r\n                                        mod.name.toLowerCase().includes('radiation shielding')\r\n                                    ) {\r\n                                        armor.radiation += parseInt(mod.rating);\r\n                                    }\r\n                                    if (mod.rating !== '') {\r\n                                        modDesc.push(`${mod.name} R${mod.rating}`);\r\n                                    } else {\r\n                                        modDesc.push(mod.name);\r\n                                    }\r\n                                });\r\n                                if (modDesc.length > 0) {\r\n                                    // add desc to beginning\r\n                                    desc = `${modDesc.join(',')}\\n\\n${desc}`;\r\n                                }\r\n                            }\r\n                            if (a.equipped.toLowerCase() === 'true') {\r\n                                data.technology = {\r\n                                    equipped: true,\r\n                                };\r\n                            }\r\n                            data.description = {\r\n                                value: TextEditor.enrichHTML(desc),\r\n                            };\r\n\r\n                            const itemData = {\r\n                                name: a.name,\r\n                                type: 'armor',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // cyberware\r\n                if (cyberware && c.cyberwares && c.cyberwares.cyberware) {\r\n                    const cyberwares = getArray(c.cyberwares.cyberware);\r\n                    cyberwares.forEach((cy) => {\r\n                        try {\r\n                            const data = {};\r\n                            data.description = {\r\n                                rating: cy.rating,\r\n                                value: cy.description,\r\n                            };\r\n                            data.technology = {\r\n                                equipped: true,\r\n                            };\r\n                            data.essence = cy.ess;\r\n                            data.grade = cy.grade;\r\n                            const itemData = {\r\n                                name: cy.name,\r\n                                type: 'cyberware',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // powers\r\n                if (powers && c.powers && c.powers.power) {\r\n                    const powers = getArray(c.powers.power);\r\n                    powers.forEach((p) => {\r\n                        const data = {};\r\n                        if (p.description)\r\n                            data.description = {\r\n                                value: TextEditor.enrichHTML(p.description),\r\n                            };\r\n                        data.level = parseInt(p.rating);\r\n                        p.pp = parseInt(p.totalpoints);\r\n\r\n                        const itemData = {\r\n                            name: p.name,\r\n                            type: 'adept_power',\r\n                            data,\r\n                        };\r\n                        items.push(itemData);\r\n                    });\r\n                }\r\n                // gear\r\n                if (equipment && c.gears && c.gears.gear) {\r\n                    const gears = getArray(c.gears.gear);\r\n                    gears.forEach((g) => {\r\n                        try {\r\n                            const data = {};\r\n                            let { name } = g;\r\n                            if (g.extra) name += ` (${g.extra})`;\r\n                            data.technology = {\r\n                                rating: g.rating,\r\n                                quantity: g.qty,\r\n                            };\r\n                            data.description = {\r\n                                value: g.description,\r\n                            };\r\n                            const itemData = {\r\n                                name,\r\n                                type: 'equipment',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // spells\r\n                if (spells && c.spells && c.spells.spell) {\r\n                    const spells = getArray(c.spells.spell);\r\n                    spells.forEach((s) => {\r\n                        try {\r\n                            if (s.alchemy.toLowerCase() !== 'true') {\r\n                                const action = {};\r\n                                const data = {};\r\n                                data.action = action;\r\n                                data.category = s.category.toLowerCase().replace(/\\s/g, '_');\r\n                                data.name = s.name;\r\n                                data.type = s.type === 'M' ? 'mana' : 'physical';\r\n                                data.range =\r\n                                    s.range === 'T'\r\n                                        ? 'touch'\r\n                                        : s.range\r\n                                              .toLowerCase()\r\n                                              .replace(/\\s/g, '_')\r\n                                              .replace('(', '')\r\n                                              .replace(')', '');\r\n                                data.drain = parseInt(s.dv.replace('F', ''));\r\n                                let description = '';\r\n                                if (s.descriptors) description = s.descriptors;\r\n                                if (s.description) description += `\\n${s.description}`;\r\n                                data.description = {};\r\n                                data.description.value = TextEditor.enrichHTML(description);\r\n\r\n                                if (s.duration.toLowerCase() === 's') data.duration = 'sustained';\r\n                                else if (s.duration.toLowerCase() === 'i')\r\n                                    data.duration = 'instant';\r\n                                else if (s.duration.toLowerCase() === 'p')\r\n                                    data.duration = 'permanent';\r\n\r\n                                action.type = 'varies';\r\n                                action.skill = 'spellcasting';\r\n                                action.attribute = 'magic';\r\n\r\n                                if (s.descriptors) {\r\n                                    const desc = s.descriptors.toLowerCase();\r\n                                    if (s.category.toLowerCase() === 'combat') {\r\n                                        data.combat = {};\r\n                                        if (desc.includes('direct')) {\r\n                                            data.combat.type = 'indirect';\r\n                                            action.opposed = {\r\n                                                type: 'defense',\r\n                                            };\r\n                                        } else {\r\n                                            data.combat.type = 'direct';\r\n                                            if (data.type === 'mana') {\r\n                                                action.opposed = {\r\n                                                    type: 'custom',\r\n                                                    attribute: 'willpower',\r\n                                                };\r\n                                            } else if (data.type === 'physical') {\r\n                                                action.opposed = {\r\n                                                    type: 'custom',\r\n                                                    attribute: 'body',\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (s.category.toLowerCase() === 'detection') {\r\n                                        data.detection = {};\r\n                                        const split = desc.split(',');\r\n                                        split.forEach((token) => {\r\n                                            token = token || '';\r\n                                            token = token.replace(' detection spell', '');\r\n                                            if (!token) return;\r\n                                            if (token.includes('area')) return;\r\n\r\n                                            if (token.includes('passive'))\r\n                                                data.detection.passive = true;\r\n                                            else if (token.includes('active'))\r\n                                                data.detection.passive = false;\r\n                                            else if (token)\r\n                                                data.detection.type = token.toLowerCase();\r\n                                        });\r\n                                        if (!data.detection.passive) {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'willpower',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                    if (s.category.toLowerCase() === 'illusion') {\r\n                                        data.illusion = {};\r\n                                        const split = desc.split(',');\r\n                                        split.forEach((token) => {\r\n                                            token = token || '';\r\n                                            token = token.replace(' illusion spell', '');\r\n                                            if (!token) return;\r\n                                            if (token.includes('area')) return;\r\n\r\n                                            if (token.includes('sense'))\r\n                                                data.illusion.sense = token.toLowerCase();\r\n                                            else if (token)\r\n                                                data.illusion.type = token.toLowerCase();\r\n                                        });\r\n                                        if (data.type === 'mana') {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'willpower',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        } else {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'intuition',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                    if (s.category.toLowerCase() === 'manipulation') {\r\n                                        data.manipulation = {};\r\n                                        if (desc.includes('environmental'))\r\n                                            data.manipulation.environmental = true;\r\n                                        if (desc.includes('physical'))\r\n                                            data.manipulation.physical = true;\r\n                                        if (desc.includes('mental'))\r\n                                            data.manipulation.mental = true;\r\n                                        // TODO figure out how to parse damaging\r\n\r\n                                        if (data.manipulation.mental) {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'willpower',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        }\r\n                                        if (data.manipulation.physical) {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'body',\r\n                                                attribute2: 'strength',\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n                                const itemData = {\r\n                                    name: s.name,\r\n                                    type: 'spell',\r\n                                    data,\r\n                                };\r\n                                items.push(itemData);\r\n                            }\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            await this.object.update(updateData);\r\n            await this.object.createEmbeddedEntity('OwnedItem', items);\r\n            ui.notifications.info(\r\n                'Complete! Check everything. Notably: Ranged weapon mods and ammo; Strength based weapon damage; Specializations on all spells, powers, and weapons;'\r\n            );\r\n            this.close();\r\n        });\r\n    }\r\n}\r\n","import { SR5Item } from '../../item/SR5Item';\r\nimport { Helpers } from '../../helpers';\r\n\r\nexport class ShadowrunItemDialog extends Dialog {\r\n    static async fromItem(item: SR5Item, event?: MouseEvent): Promise<DialogData | undefined> {\r\n        const dialogData: DialogData = {\r\n            title: item.name,\r\n            buttons: {},\r\n        };\r\n        if (event) dialogData['event'] = event;\r\n\r\n        const templateData = {};\r\n        let templatePath = '';\r\n\r\n        if (item.isRangedWeapon()) {\r\n            ShadowrunItemDialog.addRangedWeaponData(templateData, dialogData, item);\r\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/range-weapon-roll.html';\r\n        } else if (item.isSpell()) {\r\n            ShadowrunItemDialog.addSpellData(templateData, dialogData, item);\r\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-spell.html';\r\n        } else if (item.isComplexForm()) {\r\n            ShadowrunItemDialog.addComplexFormData(templateData, dialogData, item);\r\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-complex-form.html';\r\n        }\r\n\r\n        if (templatePath) {\r\n            const dialog = await renderTemplate(templatePath, templateData);\r\n            return mergeObject(dialogData, {\r\n                content: dialog,\r\n            });\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /*\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        return mergeObject(options, {\r\n            classes: ['sr5', 'sheet'],\r\n        });\r\n    }\r\n     */\r\n\r\n    static addComplexFormData(templateData: object, dialogData: DialogData, item: SR5Item): void {\r\n        const fade = item.getFade();\r\n        const title = `${Helpers.label(item.name)} Level`;\r\n\r\n        const level = item.getLastComplexFormLevel()?.value || 2 - fade;\r\n\r\n        templateData['fade'] = fade >= 0 ? `+${fade}` : fade;\r\n        templateData['level'] = level;\r\n        templateData['title'] = title;\r\n\r\n        let cancel = true;\r\n        dialogData.buttons = {\r\n            roll: {\r\n                label: 'Continue',\r\n                icon: '<i class=\"fas fa-dice-six\"></i>',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n        dialogData.close = async (html) => {\r\n            if (cancel) return false;\r\n            const level = Helpers.parseInputToNumber($(html).find('[name=level]').val());\r\n            await item.setLastComplexFormLevel({ value: level });\r\n            return true;\r\n        };\r\n    }\r\n\r\n    static addSpellData(templateData: object, dialogData: DialogData, item: SR5Item): void {\r\n        const title = `${Helpers.label(item.name)} Force`;\r\n        const drain = item.getDrain();\r\n\r\n        const force = item.getLastSpellForce()?.value || 2 - drain;\r\n\r\n        templateData['drain'] = drain >= 0 ? `+${drain}` : `${drain}`;\r\n        templateData['force'] = force;\r\n        templateData['title'] = title;\r\n\r\n        dialogData.title = title;\r\n        let cancel = true;\r\n        let reckless = false;\r\n        dialogData.buttons = {\r\n            normal: {\r\n                label: game.i18n.localize('SR5.NormalSpellButton'),\r\n                callback: () => (cancel = false),\r\n            },\r\n            reckless: {\r\n                label: game.i18n.localize('SR5.RecklessSpellButton'),\r\n                callback: () => {\r\n                    reckless = true;\r\n                    cancel = false;\r\n                },\r\n            },\r\n        };\r\n        dialogData.default = 'normal';\r\n        dialogData.close = async (html) => {\r\n            if (cancel) return false;\r\n            const force = Helpers.parseInputToNumber($(html).find('[name=force]').val());\r\n            await item.setLastSpellForce({ value: force, reckless });\r\n            return true;\r\n        };\r\n    }\r\n\r\n    static addRangedWeaponData(templateData: object, dialogData: DialogData, item: SR5Item): void {\r\n        let title = dialogData.title || item.name;\r\n\r\n        const itemData = item.data.data;\r\n        const fireModes = {};\r\n\r\n        const { modes, ranges } = itemData.range;\r\n        const { ammo } = itemData;\r\n        if (modes.single_shot) {\r\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSingleShotShort\");\r\n        }\r\n        if (modes.semi_auto) {\r\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoShort\");\r\n            fireModes['3'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\");\r\n        }\r\n        if (modes.burst_fire) {\r\n            fireModes['3'] = `${modes.semi_auto ? `${game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\")}/` : ''}${game.i18n.localize(\"SR5.WeaponModeBurstFireShort\")}`;\r\n            fireModes['6'] = game.i18n.localize(\"SR5.WeaponModeBurstFireLong\");\r\n        }\r\n        if (modes.full_auto) {\r\n            fireModes['6'] = `${modes.burst_fire ? 'LB/' : ''}${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(s)`;\r\n            fireModes['10'] = `${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(c)`;\r\n            fireModes['20'] = game.i18n.localize('SR5.Suppressing');\r\n        }\r\n\r\n        const templateRanges = this._getRangeWeaponTemplateData(ranges);\r\n        const fireMode = item.getLastFireMode();\r\n        const rc = item.getRecoilCompensation(true);\r\n        templateData['fireModes'] = fireModes;\r\n        templateData['fireMode'] = fireMode?.value;\r\n        templateData['rc'] = rc;\r\n        templateData['ammo'] = ammo;\r\n        templateData['title'] = title;\r\n        templateData['ranges'] = templateRanges;\r\n        templateData['targetRange'] = item.getLastFireRangeMod();\r\n\r\n        let cancel = true;\r\n        dialogData.buttons = {\r\n            continue: {\r\n                label: game.i18n.localize('SR5.Continue'),\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n\r\n        dialogData.close = async (html) => {\r\n            if (cancel) return false;\r\n            const fireMode = Helpers.parseInputToNumber($(html).find('[name=\"fireMode\"]').val());\r\n            const range = Helpers.parseInputToNumber($(html).find('[name=\"range\"]').val());\r\n\r\n            if (range) {\r\n                await item.setLastFireRangeMod({ value: range });\r\n            }\r\n\r\n            if (fireMode) {\r\n                const fireModeString = fireModes[fireMode];\r\n                const defenseModifier = Helpers.mapRoundsToDefenseDesc(fireMode);\r\n                const fireModeData = {\r\n                    label: fireModeString,\r\n                    value: fireMode,\r\n                    defense: defenseModifier,\r\n                };\r\n                await item.setLastFireMode(fireModeData);\r\n            }\r\n            return true;\r\n        };\r\n    }\r\n\r\n    static _getRangeWeaponTemplateData(ranges) {\r\n        const lookup = {\r\n            short: 0,\r\n            medium: -1,\r\n            long: -3,\r\n            extreme: -6,\r\n        };\r\n        const newRanges = {};\r\n        for (const [key, value] of Object.entries(ranges)) {\r\n            newRanges[key] = {\r\n                distance: value,\r\n                label: CONFIG.SR5.weaponRanges[key],\r\n                modifier: lookup[key],\r\n            };\r\n        }\r\n        return newRanges;\r\n    }\r\n}\r\n","/**\r\n * A GM-Tool to keep track of all players overwatch scores\r\n */\r\nexport class OverwatchScoreTracker extends Application {\r\n    static MatrixOverwatchDiceCount = '2d6';\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'overwatch-score-tracker';\r\n        options.classes = ['sr5'];\r\n        options.title = game.i18n.localize('SR5.OverwatchScoreTrackerTitle');\r\n        options.template =\r\n            'systems/shadowrun5e/dist/templates/apps/gmtools/overwatch-score-tracker.html';\r\n        options.width = 450;\r\n        options.height = 'auto';\r\n        options.resizable = true;\r\n        return options;\r\n    }\r\n\r\n    getData() {\r\n        // get list of actors that belong to users\r\n        const actors = game.users.reduce((acc, user) => {\r\n            if (!user.isGM && user.character) {\r\n                acc.push(user.character.data);\r\n            }\r\n            return acc;\r\n        }, []);\r\n\r\n        return {\r\n            actors,\r\n        };\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.overwatch-score-reset').on('click', this._resetOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-add').on('click', this._addOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-input').on('change', this._setOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-roll-15-minutes').on(\r\n            'click',\r\n            this._rollFor15Minutes.bind(this)\r\n        );\r\n    }\r\n\r\n    // returns the actor that this event is acting on\r\n    _getActorFromEvent(event) {\r\n        const id = event.currentTarget.closest('.item').dataset.actorId;\r\n        if (id) return game.actors.find((a) => a._id === id);\r\n    }\r\n\r\n    _setOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = event.currentTarget.value;\r\n        if (amount && actor) {\r\n            actor.setOverwatchScore(amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _addOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = parseInt(event.currentTarget.dataset.amount);\r\n        if (amount && actor) {\r\n            const os = actor.getOverwatchScore();\r\n            actor.setOverwatchScore(os + amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _resetOverwatchScore(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            actor.setOverwatchScore(0).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _rollFor15Minutes(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            //  use static value so it can be modified in modules\r\n            const roll = new Roll(OverwatchScoreTracker.MatrixOverwatchDiceCount);\r\n            roll.roll();\r\n\r\n            // use GM Roll Mode so players don't see\r\n            // const rollMode = CONFIG.Dice.rollModes.gmroll;\r\n            // roll.toMessage({ rollMode });\r\n\r\n            if (roll.total) {\r\n                const os = actor.getOverwatchScore();\r\n                actor.setOverwatchScore(os + roll.total).then(() => this.render());\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { LanguageSkillEditForm } from './LanguageSkillEditForm';\r\nimport KnowledgeSkillCategory = Shadowrun.KnowledgeSkillCategory;\r\n\r\nexport class KnowledgeSkillEditForm extends LanguageSkillEditForm {\r\n    category: KnowledgeSkillCategory;\r\n    _updateString() {\r\n        return `data.skills.knowledge.${this.category}.value.${this.skillId}`;\r\n    }\r\n\r\n    constructor(actor, skillId, category, options) {\r\n        super(actor, skillId, options);\r\n        this.category = category;\r\n    }\r\n}\r\n","import { SkillEditForm } from './SkillEditForm';\r\n\r\nexport class LanguageSkillEditForm extends SkillEditForm {\r\n    _updateString() {\r\n        return `data.skills.language.value.${this.skillId}`;\r\n    }\r\n\r\n    getData() {\r\n        return mergeObject(super.getData(), {\r\n            editable_name: true,\r\n        });\r\n    }\r\n\r\n    /** @override */\r\n    _onUpdateObject(event, formData, updateData) {\r\n        super._onUpdateObject(event, formData, updateData);\r\n        const name = formData['data.name'];\r\n        const currentData = updateData[this._updateString()] || {};\r\n        updateData[this._updateString()] = {\r\n            ...currentData,\r\n            name,\r\n        };\r\n    }\r\n}\r\n","import SkillEditFormData = Shadowrun.SkillEditFormData;\r\n\r\nexport class SkillEditForm extends BaseEntitySheet {\r\n    skillId: string;\r\n\r\n    constructor(actor, skillId, options) {\r\n        super(actor, options);\r\n        this.skillId = skillId;\r\n    }\r\n\r\n    _updateString() {\r\n        return `data.skills.active.${this.skillId}`;\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        return mergeObject(options, {\r\n            id: 'skill-editor',\r\n            classes: ['sr5', 'sheet', 'skill-edit-window'],\r\n            template: 'systems/shadowrun5e/dist/templates/apps/skill-edit.html',\r\n            width: 300,\r\n            submitOnClose: true,\r\n            submitOnChange: true,\r\n            closeOnSubmit: false,\r\n            resizable: true,\r\n        });\r\n    }\r\n\r\n    get title(): string {\r\n        const data = this.getData().data;\r\n        return `${game.i18n.localize('SR5.EditSkill')} - ${data?.label ? game.i18n.localize(data.label) : ''}`;\r\n    }\r\n\r\n    _onUpdateObject(event, formData, updateData) {\r\n        // get base value\r\n        const base = formData['data.base'];\r\n\r\n        // process specializations\r\n        const specsRegex = /data\\.specs\\.(\\d+)/;\r\n        const specs = Object.entries(formData).reduce((running, [key, val]: [string, any]) => {\r\n            const found = key.match(specsRegex);\r\n            if (found && found[0]) {\r\n                running.push(val);\r\n            }\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        // process bonuses\r\n        const bonusKeyRegex = /data\\.bonus\\.(\\d+).key/;\r\n        const bonusValueRegex = /data\\.bonus\\.(\\d+).value/;\r\n        const bonus = Object.entries(formData).reduce((running, [key, value]: [string, any]) => {\r\n            const foundKey = key.match(bonusKeyRegex);\r\n            const foundVal = key.match(bonusValueRegex);\r\n            if (foundKey && foundKey[0] && foundKey[1]) {\r\n                const index = foundKey[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].key = value;\r\n            } else if (foundVal && foundVal[0] && foundVal[1]) {\r\n                const index = foundVal[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].value = value;\r\n            }\r\n\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        const currentData = updateData[this._updateString()] || {};\r\n        updateData[this._updateString()] = {\r\n            ...currentData,\r\n            base,\r\n            specs,\r\n            bonus,\r\n        };\r\n    }\r\n\r\n    /** @override */\r\n    async _updateObject(event, formData) {\r\n        const updateData = {};\r\n        this._onUpdateObject(event, formData, updateData);\r\n        console.log(formData);\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        $(html).find('.add-spec').on('click', this._addNewSpec.bind(this));\r\n        $(html).find('.remove-spec').on('click', this._removeSpec.bind(this));\r\n        $(html).find('.add-bonus').on('click', this._addNewBonus.bind(this));\r\n        $(html).find('.remove-bonus').on('click', this._removeBonus.bind(this));\r\n    }\r\n\r\n    async _addNewBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (!data) return;\r\n        const { bonus = [] } = data;\r\n        // add blank line for new bonus\r\n        updateData[`${this._updateString()}.bonus`] = [...bonus, { key: '', value: 0 }];\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    async _removeBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.bonus) {\r\n            const { bonus } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                bonus.splice(index, 1);\r\n                updateData[`${this._updateString()}.bonus`] = bonus;\r\n                await this.entity.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _addNewSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.specs) {\r\n            // add a blank line to specs\r\n            const { specs } = data;\r\n            updateData[`${this._updateString()}.specs`] = [...specs, ''];\r\n        }\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    async _removeSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.specs) {\r\n            const { specs } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                specs.splice(index, 1);\r\n                updateData[`${this._updateString()}.specs`] = specs;\r\n                await this.entity.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    getData(): SkillEditFormData {\r\n        const data = super.getData();\r\n        const actor = super.getData().entity;\r\n        data['data'] = actor ? getProperty(actor, this._updateString()) : {};\r\n        return data;\r\n    }\r\n}\r\n","/**\r\n * Measure the distance between two pixel coordinates\r\n * See BaseGrid.measureDistance for more details\r\n *\r\n * @param {Object} p0           The origin coordinate {x, y}\r\n * @param {Object} p1           The destination coordinate {x, y}\r\n * @param {boolean} gridSpaces  Enforce grid distance (if true) vs. direct point-to-point (if false)\r\n * @return {number}             The distance between p1 and p0\r\n */\r\nimport { SYSTEM_NAME } from './constants';\r\n\r\nexport const measureDistance = function (p0, p1, { gridSpaces = true } = {}) {\r\n    if (!gridSpaces)\r\n        {  // BaseGrid exists... fix in foundry types\r\n            // @ts-ignore\r\n            return BaseGrid.prototype.measureDistance.bind(this)(p0, p1, {\r\n                        gridSpaces,\r\n                    });\r\n        }\r\n    const gs = canvas.dimensions.size;\r\n    const ray = new Ray(p0, p1);\r\n    const nx = Math.abs(Math.ceil(ray.dx / gs));\r\n    const ny = Math.abs(Math.ceil(ray.dy / gs));\r\n\r\n    // Get the number of straight and diagonal moves\r\n    const nDiagonal = Math.min(nx, ny);\r\n    const nStraight = Math.abs(ny - nx);\r\n\r\n    const diagonalRule = game.settings.get(SYSTEM_NAME, 'diagonalMovement');\r\n\r\n    if (diagonalRule === '1-2-1') {\r\n        const nd10 = Math.floor(nDiagonal / 2);\r\n        const spaces = nd10 * 2 + (nDiagonal - nd10) + nStraight;\r\n        return spaces * canvas.dimensions.distance;\r\n    }\r\n    return (nStraight + nDiagonal) * canvas.scene.data.gridDistance;\r\n};\r\n","import { SR5Actor } from './actor/SR5Actor';\r\nimport { SR5Item } from './item/SR5Item';\r\nimport Template from './template';\r\nimport ModList = Shadowrun.ModList;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport { FLAGS, SYSTEM_NAME } from './constants';\r\nimport { PartsList } from './parts/PartsList';\r\n\r\nexport type TemplateData = {\r\n    header: {\r\n        name: string;\r\n        img: string;\r\n    };\r\n    tokenId?: string;\r\n    dice?: Die[];\r\n    parts?: ModList<number>;\r\n    limit?: BaseValuePair<number> & LabelField;\r\n    testName?: string;\r\n    actor?: SR5Actor;\r\n    item?: SR5Item;\r\n    attack?: AttackData;\r\n    incomingAttack?: AttackData;\r\n    incomingDrain?: LabelField & {\r\n        value: number;\r\n    };\r\n    hits?: number;\r\n    soak?: DamageData;\r\n    tests?: {\r\n        label: string;\r\n        type: string;\r\n    }[];\r\n    description?: object;\r\n    previewTemplate?: boolean;\r\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\r\n};\r\n\r\nexport const createChatData = async (templateData: TemplateData, roll?: Roll) => {\r\n    const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\r\n    const hackyTemplateData = {\r\n        ...templateData,\r\n        parts: new PartsList(templateData.parts).getMessageOutput(),\r\n        showGlitchAnimation: game.settings.get(SYSTEM_NAME, FLAGS.ShowGlitchAnimation),\r\n    };\r\n    const html = await renderTemplate(template, hackyTemplateData);\r\n    const actor = templateData.actor;\r\n\r\n    const chatData = {\r\n        user: game.user._id,\r\n        type: roll ? CONST.CHAT_MESSAGE_TYPES.ROLL : CONST.CHAT_MESSAGE_TYPES.OTHER,\r\n        content: html,\r\n        roll: roll ? JSON.stringify(roll) : undefined,\r\n        speaker: {\r\n            actor: actor?._id,\r\n            token: actor?.token,\r\n            alias: actor?.name,\r\n        },\r\n        flags: {\r\n            shadowrun5e: {\r\n                customRoll: true,\r\n            },\r\n        },\r\n    };\r\n    if (roll) {\r\n        chatData['sound'] = CONFIG.sounds.dice;\r\n    }\r\n    const rollMode = templateData.rollMode ?? game.settings.get('core', 'rollMode');\r\n\r\n    if (['gmroll', 'blindroll'].includes(rollMode)) chatData['whisper'] = ChatMessage.getWhisperIDs('GM');\r\n    if (rollMode === 'blindroll') chatData['blind'] = true;\r\n\r\n    return chatData;\r\n};\r\n\r\nexport const addChatMessageContextOptions = (html, options) => {\r\n    const canRoll = (li) => {\r\n        const msg = game.messages.get(li.data().messageId);\r\n\r\n        return msg.getFlag(SYSTEM_NAME, 'customRoll');\r\n    };\r\n\r\n    options.push(\r\n        {\r\n            name: 'Push the Limit',\r\n            callback: (li) => SR5Actor.pushTheLimit(li),\r\n            condition: canRoll,\r\n            icon: '<i class=\"fas fa-meteor\"></i>',\r\n        },\r\n        {\r\n            name: 'Second Chance',\r\n            callback: (li) => SR5Actor.secondChance(li),\r\n            condition: canRoll,\r\n            icon: '<i class=\"fas fa-dice-d6\"></i>',\r\n        },\r\n    );\r\n    return options;\r\n};\r\n\r\nexport const addRollListeners = (app: ChatMessage, html) => {\r\n    if (!app.getFlag(SYSTEM_NAME, 'customRoll')) return;\r\n    const item = SR5Item.getItemFromMessage(html);\r\n    html.on('click', '.test-roll', async (event) => {\r\n        event.preventDefault();\r\n        if (item) {\r\n            const roll = await item.rollTest(event, { hideRollMessage: true });\r\n            if (roll && roll.templateData) {\r\n                const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\r\n                const html = await renderTemplate(template, roll.templateData);\r\n                const data = {};\r\n                data['content'] = html;\r\n                await app.update(data);\r\n            }\r\n        }\r\n    });\r\n    html.on('click', '.test', async (event) => {\r\n        event.preventDefault();\r\n        const type = event.currentTarget.dataset.action;\r\n        if (item) {\r\n            await item.rollExtraTest(type, event);\r\n        }\r\n    });\r\n    html.on('click', '.place-template', (event) => {\r\n        event.preventDefault();\r\n        if (item) {\r\n            const template = Template.fromItem(item);\r\n            template?.drawPreview();\r\n        }\r\n    });\r\n    html.on('click', '.card-title', (event) => {\r\n        event.preventDefault();\r\n        $(event.currentTarget).siblings('.card-description').toggle();\r\n    });\r\n    if (item?.hasRoll && app.isRoll) $(html).find('.card-description').hide();\r\n};\r\n","import { SYSTEM_NAME } from './constants';\r\n\r\nexport const preCombatUpdate = async function (combat, changes, options) {\r\n    // triggers when combat round changes\r\n    if (changes.round && combat.round && changes.round > combat.round) {\r\n        let initPassEnd = true;\r\n        for (const c of combat.combatants) {\r\n            let init = Number(c.initiative);\r\n            init -= 10;\r\n            if (init > 0) initPassEnd = false;\r\n        }\r\n        if (!initPassEnd) {\r\n            changes.round = combat.round;\r\n        }\r\n        // if we are gm, call function normally\r\n        // if not gm, send a socket message for the gm to update the combatants\r\n        // for new initative passes or reroll\r\n        if (game.user.isGM) {\r\n            await shadowrunCombatUpdate(changes, options);\r\n        } else {\r\n            // @ts-ignore\r\n            game.socket.emit('system.shadowrun5e', {\r\n                gmCombatUpdate: {\r\n                    changes,\r\n                    options,\r\n                },\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport const shadowrunCombatUpdate = async (changes, options) => {\r\n    const { combat } = game;\r\n    // subtact 10 from all initiative, we just went into the next initiative pass\r\n    const removedCombatants = combat.getFlag(SYSTEM_NAME, 'removedCombatants') || [];\r\n    const combatants = [];\r\n    for (const c of combat.combatants) {\r\n        let init = Number(c.initiative);\r\n        init -= 10;\r\n        if (init <= 0) removedCombatants.push({ ...c });\r\n        else {\r\n            // @ts-ignore\r\n            combatants.push({ _id: c._id, initiative: init });\r\n        }\r\n    }\r\n    await combat.deleteEmbeddedEntity(\r\n        'Combatant',\r\n        removedCombatants.map((c) => c._id),\r\n        {},\r\n    );\r\n    await combat.updateEmbeddedEntity('Combatant', combatants, {});\r\n    if (combatants.length === 0) {\r\n        const messages = [];\r\n        const messageOptions = options.messageOptions || {};\r\n\r\n        for (const c of removedCombatants) {\r\n            const actorData = c.actor ? c.actor.data : {};\r\n            // @ts-ignore\r\n            const formula = combat._getInitiativeFormula(c);\r\n\r\n            const roll: Roll = new Roll(formula, actorData).roll();\r\n            c.initiative = roll.total;\r\n\r\n            const rollMode = messageOptions.rollMode || c.token.hidden || c.hidden ? 'gmroll' : 'roll';\r\n            const messageData = mergeObject(\r\n                {\r\n                    speaker: {\r\n                        scene: canvas.scene._id,\r\n                        actor: c.actor ? c.actor._id : null,\r\n                        token: c.token._id,\r\n                        alias: c.token.name,\r\n                    },\r\n                    flavor: `${c.token.name} rolls for Initiative!`,\r\n                },\r\n                messageOptions,\r\n            );\r\n            await roll.toMessage(messageData, {\r\n                rollMode,\r\n            });\r\n        }\r\n        await combat.createEmbeddedEntity('Combatant', removedCombatants, {});\r\n        await ChatMessage.create(messages);\r\n        await combat.unsetFlag(SYSTEM_NAME, 'removedCombatants');\r\n        // @ts-ignore\r\n        await combat.resetAll();\r\n        await combat.rollAll();\r\n        await combat.update({ turn: 0 });\r\n    } else if (removedCombatants.length) {\r\n        await combat.setFlag(SYSTEM_NAME, 'removedCombatants', removedCombatants);\r\n        await combat.update({ turn: 0 });\r\n    }\r\n};\r\n","export const SR5 = {};\r\n\r\nSR5['attributes'] = {\r\n    body: 'SR5.AttrBody',\r\n    agility: 'SR5.AttrAgility',\r\n    reaction: 'SR5.AttrReaction',\r\n    strength: 'SR5.AttrStrength',\r\n    willpower: 'SR5.AttrWillpower',\r\n    logic: 'SR5.AttrLogic',\r\n    intuition: 'SR5.AttrIntuition',\r\n    charisma: 'SR5.AttrCharisma',\r\n    magic: 'SR5.AttrMagic',\r\n    resonance: 'SR5.AttrResonance',\r\n    edge: 'SR5.AttrEdge',\r\n    essence: 'SR5.AttrEssence',\r\n    attack: 'SR5.MatrixAttrAttack',\r\n    sleaze: 'SR5.MatrixAttrSleaze',\r\n    data_processing: 'SR5.MatrixAttrDataProc',\r\n    firewall: 'SR5.MatrixAttrFirewall',\r\n};\r\n\r\nSR5['limits'] = {\r\n    physical: 'SR5.LimitPhysical',\r\n    social: 'SR5.LimitSocial',\r\n    mental: 'SR5.LimitMental',\r\n    attack: 'SR5.MatrixAttrAttack',\r\n    sleaze: 'SR5.MatrixAttrSleaze',\r\n    data_processing: 'SR5.MatrixAttrDataProc',\r\n    firewall: 'SR5.MatrixAttrFirewall',\r\n};\r\n\r\nSR5['specialTypes'] = {\r\n    mundane: 'SR5.Mundane',\r\n    magic: 'SR5.Awakened',\r\n    resonance: 'SR5.Emerged',\r\n};\r\n\r\nSR5['damageTypes'] = {\r\n    physical: 'SR5.DmgTypePhysical',\r\n    stun: 'SR5.DmgTypeStun',\r\n    matrix: 'SR5.DmgTypeMatrix',\r\n};\r\n\r\nSR5['elementTypes'] = {\r\n    fire: 'SR5.ElementFire',\r\n    cold: 'SR5.ElementCold',\r\n    acid: 'SR5.ElementAcid',\r\n    electricity: 'SR5.ElementElectricity',\r\n    radiation: 'SR5.ElementRadiation',\r\n};\r\n\r\nSR5['spellCategories'] = {\r\n    combat: 'SR5.SpellCatCombat',\r\n    detection: 'SR5.SpellCatDetection',\r\n    health: 'SR5.SpellCatHealth',\r\n    illusion: 'SR5.SpellCatIllusion',\r\n    manipulation: 'SR5.SpellCatManipulation',\r\n};\r\n\r\nSR5['spellTypes'] = {\r\n    physical: 'SR5.SpellTypePhysical',\r\n    mana: 'SR5.SpellTypeMana',\r\n};\r\n\r\nSR5['spellRanges'] = {\r\n    touch: 'SR5.SpellRangeTouch',\r\n    los: 'SR5.SpellRangeLos',\r\n    los_a: 'SR5.SpellRangeLosA',\r\n};\r\n\r\nSR5['combatSpellTypes'] = {\r\n    direct: 'SR5.SpellCombatDirect',\r\n    indirect: 'SR5.SpellCombatIndirect',\r\n};\r\n\r\nSR5['detectionSpellTypes'] = {\r\n    directional: 'SR5.SpellDetectionDirectional',\r\n    psychic: 'SR5.SpellDetectionPsychic',\r\n    area: 'SR5.SpellDetectionArea',\r\n};\r\n\r\nSR5['illusionSpellTypes'] = {\r\n    obvious: 'SR5.SpellIllusionObvious',\r\n    realistic: 'SR5.SpellIllusionRealistic',\r\n};\r\n\r\nSR5['illusionSpellSenses'] = {\r\n    'single-sense': 'SR5.SpellIllusionSingleSense',\r\n    'multi-sense': 'SR5.SpellIllusionMultiSense',\r\n};\r\n\r\nSR5['attributeRolls'] = {\r\n    composure: 'SR5.RollComposure',\r\n    lift_carry: 'SR5.RollLiftCarry',\r\n    judge_intentions: 'SR5.RollJudgeIntentions',\r\n    memory: 'SR5.RollMemory',\r\n};\r\n\r\nSR5['matrixTargets'] = {\r\n    persona: 'SR5.TargetPersona',\r\n    device: 'SR5.TargetDevice',\r\n    file: 'SR5.TargetFile',\r\n    self: 'SR5.TargetSelf',\r\n    sprite: 'SR5.TargetSprite',\r\n    other: 'SR5.TargetOther',\r\n};\r\n\r\nSR5['durations'] = {\r\n    instant: 'SR5.DurationInstant',\r\n    sustained: 'SR5.DurationSustained',\r\n    permanent: 'SR5.DurationPermanent',\r\n};\r\n\r\nSR5['weaponCategories'] = {\r\n    range: 'SR5.WeaponCatRange',\r\n    melee: 'SR5.WeaponCatMelee',\r\n    thrown: 'SR5.WeaponCatThrown',\r\n};\r\n\r\nSR5['weaponRanges'] = {\r\n    short: 'SR5.WeaponRangeShort',\r\n    medium: 'SR5.WeaponRangeMedium',\r\n    long: 'SR5.WeaponRangeLong',\r\n    extreme: 'SR5.WeaponRangeExtreme',\r\n};\r\n\r\nSR5['qualityTypes'] = {\r\n    positive: 'SR5.QualityTypePositive',\r\n    negative: 'SR5.QualityTypeNegative',\r\n};\r\n\r\nSR5['deviceCategories'] = {\r\n    commlink: 'SR5.DeviceCatCommlink',\r\n    cyberdeck: 'SR5.DeviceCatCyberdeck',\r\n};\r\n\r\nSR5['cyberwareGrades'] = {\r\n    standard: 'SR5.CyberwareGradeStandard',\r\n    alpha: 'SR5.CyberwareGradeAlpha',\r\n    beta: 'SR5.CyberwareGradeBeta',\r\n    delta: 'SR5.CyberwareGradeDelta',\r\n    used: 'SR5.CyberwareGradeUsed',\r\n};\r\n\r\nSR5['knowledgeSkillCategories'] = {\r\n    street: 'SR5.KnowledgeSkillStreet',\r\n    academic: 'SR5.KnowledgeSkillAcademic',\r\n    professional: 'SR5.KnowledgeSkillProfessional',\r\n    interests: 'SR5.KnowledgeSkillInterests',\r\n};\r\n\r\nSR5['activeSkills'] = {\r\n    archery: 'SR5.SkillArchery',\r\n    automatics: 'SR5.SkillAutomatics',\r\n    blades: 'SR5.SkillBlades',\r\n    clubs: 'SR5.SkillClubs',\r\n    exotic_melee: 'SR5.SkillExoticMelee',\r\n    exotic_range: 'SR5.SkillExoticRange',\r\n    heavy_weapons: 'SR5.SkillHeavyWeapons',\r\n    longarms: 'SR5.SkillLongarms',\r\n    pistols: 'SR5.SkillPistols',\r\n    throwing_weapons: 'SR5.SkillThrowingWeapons',\r\n    unarmed_combat: 'SR5.SkillUnarmedCombat',\r\n    disguise: 'SR5.SkillDisguise',\r\n    diving: 'SR5.SkillDiving',\r\n    escape_artist: 'SR5.SkillEscapeArtist',\r\n    free_fall: 'SR5.SkillFreeFall',\r\n    gymnastics: 'SR5.SkillGymnastics',\r\n    palming: 'SR5.SkillPalming',\r\n    perception: 'SR5.SkillPerception',\r\n    running: 'SR5.SkillRunning',\r\n    sneaking: 'SR5.SkillSneaking',\r\n    survival: 'SR5.SkillSurvival',\r\n    swimming: 'SR5.SkillSwimming',\r\n    tracking: 'SR5.SkillTracking',\r\n    con: 'SR5.SkillCon',\r\n    etiquette: 'SR5.SkillEtiquette',\r\n    impersonation: 'SR5.SkillImpersonation',\r\n    instruction: 'SR5.SkillInstruction',\r\n    intimidation: 'SR5.SkillIntimidation',\r\n    leadership: 'SR5.SkillLeadership',\r\n    negotiation: 'SR5.SkillNegotiation',\r\n    performance: 'SR5.SkillPerformance',\r\n    alchemy: 'SR5.SkillAlchemy',\r\n    arcana: 'SR5.SkillArcana',\r\n    artificing: 'SR5.SkillArtificing',\r\n    assensing: 'SR5.SkillAssensing',\r\n    astral_combat: 'SR5.SkillAstralCombat',\r\n    banishing: 'SR5.SkillBanishing',\r\n    binding: 'SR5.SkillBinding',\r\n    counterspelling: 'SR5.SkillCounterspelling',\r\n    disenchanting: 'SR5.SkillDisenchanting',\r\n    ritual_spellcasting: 'SR5.SkillRitualSpellcasting',\r\n    spellcasting: 'SR5.SkillSpellcasting',\r\n    summoning: 'SR5.SkillSummoning',\r\n    compiling: 'SR5.SkillCompiling',\r\n    decompiling: 'SR5.SkillDecompiling',\r\n    registering: 'SR5.SkillRegistering',\r\n    aeronautics_mechanic: 'SR5.SkillAeronauticsMechanic',\r\n    automotive_mechanic: 'SR5.SkillAutomotiveMechanic',\r\n    industrial_mechanic: 'SR5.SkillIndustrialMechanic',\r\n    nautical_mechanic: 'SR5.SkillNauticalMechanic',\r\n    animal_handling: 'SR5.SkillAnimalHandling',\r\n    armorer: 'SR5.SkillArmorer',\r\n    artisan: 'SR5.SkillArtisan',\r\n    biotechnology: 'SR5.SkillBiotechnology',\r\n    chemistry: 'SR5.SkillChemistry',\r\n    computer: 'SR5.SkillComputer',\r\n    cybercombat: 'SR5.SkillCybercombat',\r\n    cybertechnology: 'SR5.SkillCybertechnology',\r\n    demolitions: 'SR5.SkillDemolitions',\r\n    electronic_warfare: 'SR5.SkillElectronicWarfare',\r\n    first_aid: 'SR5.SkillFirstAid',\r\n    forgery: 'SR5.SkillForgery',\r\n    hacking: 'SR5.SkillHacking',\r\n    hardware: 'SR5.SkillHardware',\r\n    locksmith: 'SR5.SkillLocksmith',\r\n    medicine: 'SR5.SkillMedicine',\r\n    navigation: 'SR5.SkillNavigation',\r\n    software: 'SR5.SkillSoftware',\r\n    gunnery: 'SR5.SkillGunnery',\r\n    pilot_aerospace: 'SR5.SkillPilotAerospace',\r\n    pilot_aircraft: 'SR5.SkillPilotAircraft',\r\n    pilot_walker: 'SR5.SkillPilotWalker',\r\n    pilot_ground_craft: 'SR5.SkillPilotGroundCraft',\r\n    pilot_water_craft: 'SR5.SkillPilotWaterCraft',\r\n    pilot_exotic_vehicle: 'SR5.SkillPilotExoticVehicle',\r\n};\r\n\r\nSR5['actionTypes'] = {\r\n    none: 'SR5.ActionTypeNone',\r\n    free: 'SR5.ActionTypeFree',\r\n    simple: 'SR5.ActionTypeSimple',\r\n    complex: 'SR5.ActionTypeComplex',\r\n    varies: 'SR5.ActionTypeVaries',\r\n};\r\n\r\nSR5['matrixAttributes'] = {\r\n    attack: 'SR5.MatrixAttrAttack',\r\n    sleaze: 'SR5.MatrixAttrSleaze',\r\n    data_processing: 'SR5.MatrixAttrDataProc',\r\n    firewall: 'SR5.MatrixAttrFirewall',\r\n};\r\n\r\nSR5['initiativeCategories'] = {\r\n    meatspace: 'SR5.InitCatMeatspace',\r\n    astral: 'SR5.InitCatAstral',\r\n    matrix: 'SR5.InitCatMatrix',\r\n};\r\n\r\nSR5['modificationTypes'] = {\r\n    weapon: 'SR5.Weapon',\r\n    armor: 'SR5.Armor',\r\n};\r\n\r\nSR5['mountPoints'] = {\r\n    barrel: 'SR5.Barrel',\r\n    stock: 'SR5.Stock',\r\n    top: 'SR5.Top',\r\n    side: 'SR5.Side',\r\n    internal: 'SR5.Internal',\r\n};\r\n\r\nSR5['lifestyleTypes'] = {\r\n    street: 'SR5.LifestyleStreet',\r\n    squatter: 'SR5.LifestyleSquatter',\r\n    low: 'SR5.LifestyleLow',\r\n    medium: 'SR5.LifestyleMiddle',\r\n    high: 'SR5.LifestyleHigh',\r\n    luxory: 'SR5.LifestyleLuxory',\r\n    other: 'SR5.LifestyleOther',\r\n};\r\n\r\nSR5['kbmod'] = {\r\n    STANDARD: 'shiftKey',\r\n    EDGE: 'altKey',\r\n    SPEC: 'ctrlKey',\r\n};\r\n\r\nSR5['actorModifiers'] = {\r\n    soak: 'SR5.RollSoak',\r\n    drain: 'SR5.Drain',\r\n    armor: 'SR5.Armor',\r\n    physical_limit: 'SR5.PhysicalLimit',\r\n    social_limit: 'SR5.SocialLimit',\r\n    mental_limit: 'SR5.MentalLimit',\r\n    stun_track: 'SR5.StunTrack',\r\n    physical_track: 'SR5.PhysicalTrack',\r\n    meat_initiative: 'SR5.MeatSpaceInit',\r\n    meat_initiative_dice: 'SR5.MeatSpaceDice',\r\n    astral_initiative: 'SR5.AstralInit',\r\n    astral_initiative_dice: 'SR5.AstralDice',\r\n    matrix_initiative: 'SR5.MatrixInit',\r\n    matrix_initiative_dice: 'SR5.MatrixDice',\r\n    composure: 'SR5.RollComposure',\r\n    lift_carry: 'SR5.RollLiftCarry',\r\n    judge_intentions: 'SR5.RollJudgeIntentions',\r\n    memory: 'SR5.RollMemory',\r\n    walk: 'SR5.Walk',\r\n    run: 'SR5.Run',\r\n    defense: 'SR5.RollDefense',\r\n    wound_tolerance: 'SR5.WoundTolerance',\r\n    essence: 'SR5.AttrEssence',\r\n    fade: 'SR5.RollFade',\r\n    global: 'SR5.Global',\r\n};\r\n\r\nSR5['programTypes'] = {\r\n    common_program: 'SR5.CommonProgram',\r\n    hacking_program: 'SR5.HackingProgram',\r\n    agent: 'SR5.Agent',\r\n};\r\n","export const SYSTEM_NAME = 'shadowrun5e';\r\nexport const FLAGS = {\r\n    ShowGlitchAnimation: 'showGlitchAnimation',\r\n};\r\n","export abstract class DataWrapper<DataType> {\r\n    constructor(protected data: DataType) {}\r\n}\r\n","import { Helpers } from '../helpers';\r\n\r\nexport const registerBasicHelpers = () => {\r\n    Handlebars.registerHelper('localizeOb', function (strId, obj) {\r\n        if (obj) strId = obj[strId];\r\n        return game.i18n.localize(strId);\r\n    });\r\n\r\n    Handlebars.registerHelper('toHeaderCase', function (str) {\r\n        if (str) return Helpers.label(str);\r\n        return '';\r\n    });\r\n\r\n    Handlebars.registerHelper('concatStrings', function (...args) {\r\n        return args.join(' ');\r\n    });\r\n\r\n    Handlebars.registerHelper('concat', function (strs, c = ',') {\r\n        if (Array.isArray(strs)) {\r\n            return strs.join(c);\r\n        }\r\n        return strs;\r\n    });\r\n\r\n    Handlebars.registerHelper('for', function (from: number, to: number, options) {\r\n        let accum = '';\r\n        for (let i = from; i < to; i += 1) {\r\n            accum += options.fn(i);\r\n        }\r\n\r\n        return accum;\r\n    });\r\n    Handlebars.registerHelper('modulo', function (v1: number, v2: number) {\r\n        return v1 % v2;\r\n    });\r\n    Handlebars.registerHelper('divide', function (v1: number, v2: number) {\r\n        if (v2 === 0) return 0;\r\n        return v1 / v2;\r\n    });\r\n    Handlebars.registerHelper('hasprop', function (obj, prop, options) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            return options.fn(this);\r\n        } else return options.inverse(this);\r\n    });\r\n    Handlebars.registerHelper('ifin', function (val, arr, options) {\r\n        if (arr.includes(val)) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if greater than\r\n    Handlebars.registerHelper('ifgt', function (v1, v2, options) {\r\n        if (v1 > v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than\r\n    Handlebars.registerHelper('iflt', function (v1, v2, options) {\r\n        if (v1 < v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than or equal\r\n    Handlebars.registerHelper('iflte', function (v1, v2, options) {\r\n        if (v1 <= v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if not equal\r\n    Handlebars.registerHelper('ifne', function (v1, v2, options) {\r\n        if (v1 !== v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if equal\r\n    Handlebars.registerHelper('ife', function (v1, v2, options) {\r\n        if (v1 === v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    Handlebars.registerHelper('not', function (v1) {\r\n        return !v1;\r\n    });\r\n    Handlebars.registerHelper('sum', function (v1, v2) {\r\n        return v1 + v2;\r\n    });\r\n\r\n    Handlebars.registerHelper('isDefined', function (value) {\r\n        return value !== undefined && value !== null;\r\n    });\r\n    /**\r\n     * Return a default value if the provided value is not defined (null or undefined)\r\n     */\r\n    Handlebars.registerHelper('default', function (value: string, defaultValue: string) {\r\n        return new Handlebars.SafeString(value ?? defaultValue);\r\n    });\r\n\r\n    Handlebars.registerHelper('log', function (value: string) {\r\n        console.log(value);\r\n    });\r\n    Handlebars.registerHelper('buildName', function (options) {\r\n        const hash: string[] = Helpers.orderKeys(options.hash);\r\n        const name = Object.values(hash).reduce((retVal, current, index) => {\r\n            if (index > 0) retVal += '.';\r\n            return retVal + current;\r\n        }, '');\r\n        return new Handlebars.SafeString(name);\r\n    });\r\n    Handlebars.registerHelper('disabledHelper', function (value) {\r\n        const val = Boolean(value);\r\n        return val ? val : undefined;\r\n    });\r\n};\r\n","import { preloadHandlebarsTemplates } from './HandlebarTemplates';\r\nimport { registerBasicHelpers } from './BasicHelpers';\r\nimport { registerRollAndLabelHelpers } from './RollAndLabelHelpers';\r\nimport { registerItemLineHelpers } from './ItemLineHelpers';\r\nimport { registerSkillLineHelpers } from './SkillLineHelpers';\r\n\r\nexport class HandlebarManager {\r\n    static loadTemplates(): void {\r\n        preloadHandlebarsTemplates();\r\n    }\r\n    static registerHelpers(): void {\r\n        registerBasicHelpers();\r\n        registerRollAndLabelHelpers();\r\n        registerItemLineHelpers();\r\n        registerSkillLineHelpers();\r\n    }\r\n}","export const preloadHandlebarsTemplates = async () => {\r\n    const templatePaths = [\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-equipment.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-spellbook.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-skills.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-matrix.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-actions.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-config.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-bio.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/actor-social.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/MatrixAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/ActorAttribute.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/item/parts/description.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/technology.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/header.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-ammo-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-mods-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/action.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/damage.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/opposed.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/spell.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/complex_form.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/armor.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/matrix.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/sin.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/contact.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/lifestyle.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/ammo.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/modification.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/program.html',\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/parts-list.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/common/ValueInput.html',\r\n        'systems/shadowrun5e/dist/templates/common/ConditionMonitor.html',\r\n        'systems/shadowrun5e/dist/templates/common/ValueMaxAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/UsesAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/Attribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/HorizontalCellInput.html',\r\n        'systems/shadowrun5e/dist/templates/common/HeaderBlock.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/common/List/ListItem.html',\r\n        'systems/shadowrun5e/dist/templates/common/List/ListHeader.html',\r\n    ];\r\n\r\n    return loadTemplates(templatePaths);\r\n};\r\n","import SR5ItemType = Shadowrun.SR5ItemType;\r\nimport { SR5ItemDataWrapper } from '../item/SR5ItemDataWrapper';\r\n\r\nexport const registerItemLineHelpers = () => {\r\n    Handlebars.registerHelper('ItemHeaderIcons', function (id) {\r\n        const PlusIcon = 'fas fa-plus';\r\n        const AddText = game.i18n.localize('SR5.Add');\r\n        const addIcon = {\r\n            icon: PlusIcon,\r\n            text: AddText,\r\n            title: game.i18n.localize('SR5.CreateItem'),\r\n        };\r\n        switch (id) {\r\n            case 'lifestyle':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLifestyle');\r\n                return [addIcon];\r\n            case 'contact':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemContact');\r\n                return [addIcon];\r\n            case 'sin':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSIN');\r\n                return [addIcon];\r\n            case 'license':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLicense');\r\n                return [addIcon];\r\n            case 'quality':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemQuality');\r\n                return [addIcon];\r\n            case 'adept_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAdeptPower');\r\n                return [addIcon];\r\n            case 'action':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAction');\r\n                return [addIcon];\r\n            case 'spell':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpell');\r\n                return [addIcon];\r\n            case 'gear':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemGear');\r\n                return [addIcon];\r\n            case 'complex_form':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemComplexForm');\r\n                return [addIcon];\r\n            case 'program':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemProgram');\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemHeaderRightSide', function (id) {\r\n        switch (id) {\r\n            case 'action':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Skill'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Limit'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Modifier'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Target'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Duration'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Fade'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'program':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemRightSide', function (item: SR5ItemType) {\r\n        const wrapper = new SR5ItemDataWrapper(item);\r\n        switch (item.type) {\r\n            case 'action':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.activeSkills[wrapper.getActionSkill() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute2() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getLimitAttribute()\r\n                                ? game.i18n.localize(CONFIG.SR5.attributes[wrapper.getLimitAttribute() ?? ''])\r\n                                : wrapper.getActionLimit(),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getActionDicePoolMod(),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.matrixTargets[item.data.target ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.durations[item.data.duration ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: String(item.data.fade),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'program':\r\n                return [\r\n                    {\r\n                        button: {\r\n                            cssClass: `item-equip-toggle ${wrapper.isEquipped() ? 'light' : ''}`,\r\n                            short: true,\r\n                            text: wrapper.isEquipped() ? game.i18n.localize('SR5.Loaded') : game.i18n.localize('SR5.Load') + ' >>',\r\n                        },\r\n                    },\r\n                ];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemIcons', function (item: SR5ItemType) {\r\n        const addIcon = {\r\n            icon: 'fas fa-plus',\r\n            title: game.i18n.localize('SR5.AddItem'),\r\n        };\r\n        const editIcon = {\r\n            icon: 'fas fa-edit',\r\n            title: game.i18n.localize('SR5.EditItem'),\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash',\r\n            title: game.i18n.localize('SR5.DeleteItem'),\r\n        };\r\n        const equipIcon = {\r\n            icon: `${item.data.technology?.equipped ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\r\n            title: game.i18n.localize('SR5.ToggleEquip'),\r\n        };\r\n\r\n        switch (item.type) {\r\n            case 'program':\r\n                return [equipIcon, editIcon, removeIcon];\r\n            default:\r\n                return [editIcon, removeIcon];\r\n        }\r\n    });\r\n};\r\n","import { PartsList } from '../parts/PartsList';\r\nimport ModList = Shadowrun.ModList;\r\n\r\nexport const registerRollAndLabelHelpers = () => {\r\n    Handlebars.registerHelper('damageAbbreviation', function (damage) {\r\n        if (damage === 'physical') return 'P';\r\n        if (damage === 'stun') return 'S';\r\n        if (damage === 'matrix') return 'M';\r\n        return '';\r\n    });\r\n    Handlebars.registerHelper('diceIcon', function (roll) {\r\n        if (roll.roll) {\r\n            switch (roll.roll) {\r\n                case 1:\r\n                    return 'red';\r\n                case 2:\r\n                    return 'grey';\r\n                case 3:\r\n                    return 'grey';\r\n                case 4:\r\n                    return 'grey';\r\n                case 5:\r\n                    return 'green';\r\n                case 6:\r\n                    return 'green';\r\n            }\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('elementIcon', function (element) {\r\n        let icon = '';\r\n        if (element === 'electricity') {\r\n            icon = 'fas fa-bolt';\r\n        } else if (element === 'radiation') {\r\n            icon = 'fas fa-radiation-alt';\r\n        } else if (element === 'fire') {\r\n            icon = 'fas fa-fire';\r\n        } else if (element === 'acid') {\r\n            icon = 'fas fa-vials';\r\n        } else if (element === 'cold') {\r\n            icon = 'fas fa-snowflake';\r\n        }\r\n        return icon;\r\n    });\r\n\r\n    Handlebars.registerHelper('partsTotal', function (partsList: ModList<number>) {\r\n        const parts = new PartsList(partsList);\r\n        return parts.total;\r\n    });\r\n};\r\n","import SkillField = Shadowrun.SkillField;\r\nimport { Helpers } from '../helpers';\r\n\r\nexport const registerSkillLineHelpers = () => {\r\n    Handlebars.registerHelper('SkillHeaderIcons', function (id) {\r\n        const addIcon = {\r\n            icon: 'fas fa-plus',\r\n            title: game.i18n.localize('SR5.AddSkill'),\r\n            text: game.i18n.localize('SR5.Add'),\r\n            cssClass: '',\r\n        };\r\n        switch (id) {\r\n            case 'active':\r\n                return [{}];\r\n            case 'language':\r\n                addIcon.cssClass = 'add-language';\r\n                return [addIcon];\r\n            case 'knowledge':\r\n                addIcon.cssClass = 'add-knowledge';\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillHeaderRightSide', function (id) {\r\n        const specs = {\r\n            text: {\r\n                text: game.i18n.localize('SR5.Specialization'),\r\n                cssClass: 'skill-spec-item',\r\n            },\r\n        };\r\n        const rtg = {\r\n            text: {\r\n                text: game.i18n.localize('SR5.Rtg'),\r\n                cssClass: 'rtg',\r\n            },\r\n        };\r\n\r\n        switch (id) {\r\n            case 'active':\r\n            case 'knowledge':\r\n            case 'language':\r\n                return [specs, rtg];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n    Handlebars.registerHelper('SkillRightSide', function (skillType: string, skill: SkillField) {\r\n        const specs = Array.isArray(skill.specs) ? skill.specs : [skill.specs];\r\n        return [\r\n            {\r\n                text: {\r\n                    text: specs.join(', ') ?? '',\r\n                    cssClass: 'skill-spec-item',\r\n                },\r\n            },\r\n            {\r\n                text: {\r\n                    text: Helpers.calcTotal(skill),\r\n                    cssClass: 'rtg',\r\n                },\r\n            },\r\n        ];\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillIcons', function (skillType: string, skill: SkillField) {\r\n        const editIcon = {\r\n            icon: 'fas fa-edit',\r\n            title: game.i18n.localize('SR5.EditSkill'),\r\n            cssClass: '',\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash',\r\n            title: game.i18n.localize('SR5.DeleteSkill'),\r\n            cssClass: '',\r\n        };\r\n        switch (skillType) {\r\n            case 'active':\r\n                editIcon.cssClass = 'skill-edit';\r\n                return [editIcon];\r\n            case 'language':\r\n                editIcon.cssClass = 'language-skill-edit';\r\n                removeIcon.cssClass = 'remove-language';\r\n                return [editIcon, removeIcon];\r\n            case 'knowledge':\r\n                editIcon.cssClass = 'knowledge-skill-edit';\r\n                removeIcon.cssClass = 'remove-knowledge';\r\n                return [editIcon, removeIcon];\r\n            default:\r\n                return [editIcon];\r\n        }\r\n    });\r\n\r\n};\r\n","import AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport { PartsList } from './parts/PartsList';\r\n\r\nexport class Helpers {\r\n    /**\r\n     * Calculate the total value for a data object\r\n     * - stores the total value and returns it\r\n     * @param data\r\n     */\r\n    static calcTotal(data: ModifiableValue): number {\r\n        if (data.mod === undefined) data.mod = [];\r\n        const parts = new PartsList(data.mod);\r\n        data.value = parts.total + data.base;\r\n        data.mod = parts.list;\r\n        return data.value;\r\n    }\r\n\r\n    // replace 'SR5.'s on keys with 'SR5_DOT_'\r\n    static onSetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5.', 'SR5_DOT_');\r\n            newData[newKey] = this.onSetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n    // replace 'SR5_DOT_' with 'SR5.' on keys\r\n    static onGetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5_DOT_', 'SR5.');\r\n            newData[newKey] = this.onGetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n\r\n    static isMatrix(atts?: boolean | (AttributeField | SkillField)[] | AttributeField | SkillField) {\r\n        if (!atts) return false;\r\n        if (typeof atts === 'boolean' && atts) return true;\r\n        const matrixAtts = ['firewall', 'data_processing', 'sleaze', 'attack', 'computer', 'hacking', 'cybercombat', 'electronic_warfare', 'software'];\r\n        const matrixLabels = matrixAtts.map((s) => this.label(s));\r\n        if (!Array.isArray(atts)) atts = [atts];\r\n        atts = atts.filter((att) => att);\r\n        atts.forEach((att) => {\r\n            if (typeof att === 'string' && matrixAtts.includes(att)) return true;\r\n            else if (matrixLabels.includes(att.label)) return true;\r\n        });\r\n        return false;\r\n    }\r\n\r\n    static parseInputToString(val: number | string | string[] | undefined): string {\r\n        if (val === undefined) return '';\r\n        if (typeof val === 'number') return val.toString();\r\n        if (typeof val === 'string') return val;\r\n        if (Array.isArray(val)) {\r\n            return val.join(',');\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static parseInputToNumber(val: number | string | string[] | undefined): number {\r\n        if (typeof val === 'number') return val;\r\n        if (typeof val === 'string') {\r\n            const ret = +val;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        if (Array.isArray(val)) {\r\n            const str = val.join('');\r\n            const ret = +str;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static setupCustomCheckbox(app, html) {\r\n        const setContent = (el) => {\r\n            const checkbox = $(el).children('input[type=checkbox]');\r\n            const checkmark = $(el).children('.checkmark');\r\n            if ($(checkbox).prop('checked')) {\r\n                $(checkmark).addClass('fa-check-circle');\r\n                $(checkmark).removeClass('fa-circle');\r\n            } else {\r\n                $(checkmark).addClass('fa-circle');\r\n                $(checkmark).removeClass('fa-check-circle');\r\n            }\r\n        };\r\n        html.find('label.checkbox').each(function () {\r\n            setContent(this);\r\n        });\r\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\r\n        html.find('.submit-checkbox').change((event) => app._onSubmit(event));\r\n    }\r\n\r\n    static mapRoundsToDefenseMod(rounds) {\r\n        if (rounds === 1) return 0;\r\n        if (rounds === 3) return -2;\r\n        if (rounds === 6) return -5;\r\n        if (rounds === 10) return -9;\r\n        return 0;\r\n    }\r\n\r\n    static mapRoundsToDefenseDesc(rounds) {\r\n        if (rounds === 1) return '';\r\n        if (rounds === 3) return '-2';\r\n        if (rounds === 6) return '-5';\r\n        if (rounds === 10) return '-9';\r\n        if (rounds === 20) return 'SR5.DuckOrCover';\r\n        return '';\r\n    }\r\n\r\n    static label(str) {\r\n        const frags = str.split('_');\r\n        for (let i = 0; i < frags.length; i++) {\r\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\r\n        }\r\n        frags.forEach((frag, idx) => {\r\n            if (frag === 'Processing') frags[idx] = 'Proc.';\r\n            if (frag === 'Mechanic') frags[idx] = 'Mech.';\r\n        });\r\n        return frags.join(' ');\r\n    }\r\n\r\n    static orderKeys(obj) {\r\n        const keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\r\n            if (k1 < k2) return -1;\r\n            if (k1 > k2) return +1;\r\n            return 0;\r\n        });\r\n\r\n        let i;\r\n        const after = {};\r\n        for (i = 0; i < keys.length; i++) {\r\n            after[keys[i]] = obj[keys[i]];\r\n            delete obj[keys[i]];\r\n        }\r\n\r\n        for (i = 0; i < keys.length; i++) {\r\n            obj[keys[i]] = after[keys[i]];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    static setNestedValue(obj, prop, val) {\r\n        console.log(obj);\r\n        console.log(prop);\r\n        console.log(val);\r\n        const props = prop.split('.');\r\n        props.forEach((p) => (obj = p in obj ? obj[p] : null));\r\n        if (obj) {\r\n            console.log(`setting ${obj} to ${val}`);\r\n            obj = val;\r\n        }\r\n    }\r\n\r\n    static hasModifiers(event) {\r\n        return event && (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\r\n    }\r\n\r\n    static filter(obj, comp) {\r\n        const retObj = {};\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            Object.entries(obj).forEach(([key, value]) => {\r\n                if (comp([key, value])) retObj[key] = value;\r\n            });\r\n        }\r\n        return retObj;\r\n    }\r\n\r\n    static addLabels(obj, label) {\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            if (!obj.hasOwnProperty('label') && obj.hasOwnProperty('value') && label !== '') {\r\n                obj.label = label;\r\n            }\r\n            Object.entries(obj)\r\n                .filter(([, value]) => typeof value === 'object')\r\n                .forEach(([key, value]) => Helpers.addLabels(value, key));\r\n        }\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport DeviceData = Shadowrun.DeviceData;\r\n\r\nexport const ChatData = {\r\n    action: (data, labels, props) => {\r\n        if (data.action) {\r\n            const labelStringList: string[] = [];\r\n            if (data.action.skill) {\r\n                labelStringList.push(Helpers.label(data.action.skill));\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n            } else if (data.action.attribute2) {\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n                labelStringList.push(Helpers.label(data.action.attribute2));\r\n            } else if (data.action.attribute) {\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n            }\r\n            if (data.action.mod) {\r\n                labelStringList.push(`${game.i18n.localize('SR5.ItemMod')} (${data.action.mod})`);\r\n                // TODO when all mods are modlists\r\n                // Object.entries(data.action.mod).forEach(([key, value]) =>\r\n                //     labelStringList.push(`${game.i18n.localize(key)} (${value})`)\r\n                // );\r\n            }\r\n            if (labelStringList.length) {\r\n                labels.roll = labelStringList.join(' + ');\r\n            }\r\n\r\n            if (data.action.opposed.type) {\r\n                const { opposed } = data.action;\r\n                if (opposed.type !== 'custom') labels.opposedRoll = `vs. ${Helpers.label(opposed.type)}`;\r\n                else if (opposed.skill) labels.opposedRoll = `vs. ${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\r\n                else if (opposed.attribute2) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\r\n                else if (opposed.attribute) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}`;\r\n            }\r\n\r\n            // setup action props\r\n            // go in order of \"Limit/Accuracy\" \"Damage\" \"AP\"\r\n            // don't add action type if set to 'varies' or 'none' as that's pretty much useless info\r\n            if (data.action.type !== '' && data.action.type !== 'varies' && data.action.type !== 'none') {\r\n                props.push(`${Helpers.label(data.action.type)} Action`);\r\n            }\r\n            if (data.action.limit.value) props.push(`Limit ${data.action.limit.value}`);\r\n            if (data.action.damage.type.value) {\r\n                const { damage } = data.action;\r\n                let damageString = '';\r\n                let elementString = '';\r\n                if (damage.value) {\r\n                    damageString = `DV ${damage.value}${damage.type.value ? damage.type.value.toUpperCase().charAt(0) : ''}`;\r\n                }\r\n                if (damage.element.value) {\r\n                    // if we have a damage value and are electric, follow the convention of (e) after\r\n                    if (damage.value) {\r\n                        if (damage.element.value === 'electricity') {\r\n                            damageString += ' (e)';\r\n                        } else {\r\n                            elementString = Helpers.label(damage.element.value);\r\n                        }\r\n                    } else {\r\n                        elementString = Helpers.label(damage.element.value);\r\n                    }\r\n                }\r\n                if (damageString) props.push(damageString);\r\n                if (elementString) props.push(elementString);\r\n                if (damage.ap && damage.ap.value) props.push(`AP ${damage.ap.value}`);\r\n            }\r\n        }\r\n    },\r\n    sin: (data, labels, props) => {\r\n        props.push(`Rating ${data.technology.rating}`);\r\n        data.licenses.forEach((license) => {\r\n            props.push(`${license.name} R${license.rtg}`);\r\n        });\r\n    },\r\n\r\n    contact: (data, labels, props) => {\r\n        props.push(data.type);\r\n        props.push(`${game.i18n.localize('SR5.Connection')} ${data.connection}`);\r\n        props.push(`${game.i18n.localize('SR5.Loyalty')} ${data.loyalty}`);\r\n        if (data.blackmail) {\r\n            props.push(`${game.i18n.localize('SR5.Blackmail')}`);\r\n        }\r\n        if (data.family) {\r\n            props.push(game.i18n.localize('SR5.Family'));\r\n        }\r\n    },\r\n\r\n    lifestyle: (data, labels, props) => {\r\n        props.push(Helpers.label(data.type));\r\n        if (data.cost) props.push(`¥${data.cost}`);\r\n        if (data.comforts) props.push(`Comforts ${data.comforts}`);\r\n        if (data.security) props.push(`Security ${data.security}`);\r\n        if (data.neighborhood) props.push(`Neighborhood ${data.neighborhood}`);\r\n        if (data.guests) props.push(`Guests ${data.guests}`);\r\n    },\r\n\r\n    adept_power: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(`PP ${data.pp}`);\r\n        props.push(Helpers.label(data.type));\r\n    },\r\n\r\n    armor: (data, labels, props) => {\r\n        if (data.armor) {\r\n            if (data.armor.value) props.push(`Armor ${data.armor.mod ? '+' : ''}${data.armor.value}`);\r\n            if (data.armor.acid) props.push(`Acid ${data.armor.acid}`);\r\n            if (data.armor.cold) props.push(`Cold ${data.armor.cold}`);\r\n            if (data.armor.fire) props.push(`Fire ${data.armor.fire}`);\r\n            if (data.armor.electricity) props.push(`Electricity ${data.armor.electricity}`);\r\n            if (data.armor.radiation) props.push(`Radiation ${data.armor.radiation}`);\r\n        }\r\n    },\r\n\r\n    program: (data, labels, props) => {\r\n        props.push(game.i18n.localize(CONFIG.SR5.programTypes[data.type]));\r\n    },\r\n\r\n    complex_form: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(Helpers.label(data.target), Helpers.label(data.duration));\r\n        const { fade } = data;\r\n        if (fade > 0) props.push(`Fade L+${fade}`);\r\n        else if (fade < 0) props.push(`Fade L${fade}`);\r\n        else props.push('Fade L');\r\n    },\r\n\r\n    cyberware: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        ChatData.armor(data, labels, props);\r\n        if (data.essence) props.push(`Ess ${data.essence}`);\r\n    },\r\n\r\n    device: (data: DeviceData, labels, props) => {\r\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\r\n        if (data.category === 'cyberdeck') {\r\n            for (const attN of Object.values(data.atts)) {\r\n                props.push(`${Helpers.label(attN.att)} ${attN.value}`);\r\n            }\r\n        }\r\n    },\r\n\r\n    equipment: (data, labels, props) => {\r\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\r\n    },\r\n\r\n    quality: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(Helpers.label(data.type));\r\n    },\r\n\r\n    // add properties for spell data, follow order in book\r\n    spell: (data, labels, props) => {\r\n        // first category and type\r\n        props.push(Helpers.label(data.category), Helpers.label(data.type));\r\n\r\n        // add subtype tags\r\n        if (data.category === 'combat') {\r\n            props.push(Helpers.label(data.combat.type));\r\n        } else if (data.category === 'health') {\r\n        } else if (data.category === 'illusion') {\r\n            props.push(data.illusion.type);\r\n            props.push(data.illusion.sense);\r\n        } else if (data.category === 'manipulation') {\r\n            if (data.manipulation.damaging) props.push('Damaging');\r\n            if (data.manipulation.mental) props.push('Mental');\r\n            if (data.manipulation.environmental) props.push('Environmental');\r\n            if (data.manipulation.physical) props.push('Physical');\r\n        } else if (data.category === 'detection') {\r\n            props.push(data.illusion.type);\r\n            props.push(data.illusion.passive ? 'Passive' : 'Active');\r\n            if (data.illusion.extended) props.push('Extended');\r\n        }\r\n        // add range\r\n        props.push(Helpers.label(data.range));\r\n\r\n        // add action data\r\n        ChatData.action(data, labels, props);\r\n\r\n        // add duration data\r\n        props.push(Helpers.label(data.duration));\r\n\r\n        // add drain data\r\n        const { drain } = data;\r\n        if (drain > 0) props.push(`Drain F+${drain}`);\r\n        else if (drain < 0) props.push(`Drain F${drain}`);\r\n        else props.push('Drain F');\r\n\r\n        labels.roll = 'Cast';\r\n    },\r\n\r\n    weapon: (data, labels, props, item) => {\r\n        ChatData.action(data, labels, props);\r\n        for (let i = 0; i < props.length; i++) {\r\n            const prop = props[i];\r\n            if (prop.includes('Limit')) {\r\n                props[i] = prop.replace('Limit', 'Accuracy');\r\n            }\r\n        }\r\n\r\n        const equippedAmmo = item?.getEquippedAmmo();\r\n        if (equippedAmmo && data.ammo && data.ammo.current?.max) {\r\n            if (equippedAmmo) {\r\n                const { current, spare_clips } = data.ammo;\r\n                if (equippedAmmo.name) props.push(`${equippedAmmo.name} (${current.value}/${current.max})`);\r\n                if (equippedAmmo.data.data.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${equippedAmmo.data.data.blast.radius}m`);\r\n                if (equippedAmmo.data.data.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${equippedAmmo.data.data.blast.dropoff}/m`);\r\n                if (spare_clips && spare_clips.max) props.push(`${game.i18n.localize('SR5.SpareClips')} (${spare_clips.value}/${spare_clips.max})`);\r\n            }\r\n        }\r\n\r\n        if (data.technology?.conceal?.value) {\r\n            props.push(`${game.i18n.localize('SR5.Conceal')} ${data.technology.conceal.value}`);\r\n        }\r\n\r\n        if (data.category === 'range') {\r\n            if (data.range.rc) {\r\n                let rcString = `${game.i18n.localize('SR5.RecoilCompensation')} ${data.range.rc.value}`;\r\n                if (item?.actor) {\r\n                    rcString += ` (${game.i18n.localize('SR5.Total')} ${item.actor.getRecoilCompensation()})`;\r\n                }\r\n                props.push(rcString);\r\n            }\r\n            if (data.range.modes) {\r\n                const newModes: string[] = [];\r\n                const { modes } = data.range;\r\n                if (modes.single_shot) newModes.push('SR5.WeaponModeSingleShotShort');\r\n                if (modes.semi_auto) newModes.push('SR5.WeaponModeSemiAutoShort');\r\n                if (modes.burst_fire) newModes.push('SR5.WeaponModeBurstFireShort');\r\n                if (modes.full_auto) newModes.push('SR5.WeaponModeFullAutoShort');\r\n                props.push(newModes.map((m) => game.i18n.localize(m)).join('/'));\r\n            }\r\n            if (data.range.ranges) props.push(Array.from(Object.values(data.range.ranges)).join('/'));\r\n        } else if (data.category === 'melee') {\r\n            if (data.melee.reach) {\r\n                const reachString = `${game.i18n.localize('SR5.Reach')} ${data.melee.reach}`;\r\n                // find accuracy in props and insert ourselves after it\r\n                const accIndex = props.findIndex((p) => p.includes('Accuracy'));\r\n                if (accIndex > -1) {\r\n                    props.splice(accIndex + 1, 0, reachString);\r\n                } else {\r\n                    props.push(reachString);\r\n                }\r\n            }\r\n        } else if (data.category === 'thrown') {\r\n            const { blast } = data.thrown;\r\n            if (blast?.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${blast.radius}m`);\r\n            if (blast?.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${blast.dropoff}/m`);\r\n\r\n            if (data.thrown.ranges) {\r\n                const mult = data.thrown.ranges.attribute && item?.actor ? item.actor.data.data.attributes[data.thrown.ranges.attribute].value : 1;\r\n                const ranges = [data.thrown.ranges.short, data.thrown.ranges.medium, data.thrown.ranges.long, data.thrown.ranges.extreme];\r\n                props.push(ranges.map((v) => v * mult).join('/'));\r\n            }\r\n        }\r\n    },\r\n};\r\n","import { Helpers } from '../helpers';\r\nimport { SR5Actor } from '../actor/SR5Actor';\r\nimport { ShadowrunItemDialog } from '../apps/dialogs/ShadowrunItemDialog';\r\nimport ModList = Shadowrun.ModList;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport SpellForceData = Shadowrun.SpellForceData;\r\nimport ComplexFormLevelData = Shadowrun.ComplexFormLevelData;\r\nimport FireRangeData = Shadowrun.FireRangeData;\r\nimport BlastData = Shadowrun.BlastData;\r\nimport { ChatData } from './ChatData';\r\nimport { AdvancedRollProps, ShadowrunRoll, ShadowrunRoller } from '../rolls/ShadowrunRoller';\r\nimport { createChatData } from '../chat';\r\nimport { SYSTEM_NAME } from '../constants';\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport { SR5ItemDataWrapper } from './SR5ItemDataWrapper';\r\nimport SR5ItemType = Shadowrun.SR5ItemType;\r\nimport { PartsList } from '../parts/PartsList';\r\n\r\nexport class SR5Item extends Item {\r\n    labels: {} = {};\r\n    items: SR5Item[];\r\n    actor: SR5Actor;\r\n\r\n    private get wrapper(): SR5ItemDataWrapper {\r\n        // we need to cast here to unknown first to make ts happy\r\n        return new SR5ItemDataWrapper((this.data as unknown) as SR5ItemType);\r\n    }\r\n\r\n    // Flag Functions\r\n    getLastFireMode(): FireModeData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastFireMode') || { value: 0 };\r\n    }\r\n    async setLastFireMode(fireMode: FireModeData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastFireMode', fireMode);\r\n    }\r\n    getLastSpellForce(): SpellForceData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastSpellForce') || { value: 0 };\r\n    }\r\n    async setLastSpellForce(force: SpellForceData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastSpellForce', force);\r\n    }\r\n    getLastComplexFormLevel(): ComplexFormLevelData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastComplexFormLevel') || { value: 0 };\r\n    }\r\n    async setLastComplexFormLevel(level: ComplexFormLevelData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastComplexFormLevel', level);\r\n    }\r\n    getLastFireRangeMod(): FireRangeData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastFireRange') || { value: 0 };\r\n    }\r\n    async setLastFireRangeMod(environmentalMod: FireRangeData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastFireRange', environmentalMod);\r\n    }\r\n\r\n    /**\r\n     * Return an Array of the Embedded Item Data\r\n     * TODO properly types this\r\n     */\r\n    getEmbeddedItems(): any[] {\r\n        let items = this.getFlag(SYSTEM_NAME, 'embeddedItems');\r\n        if (items) {\r\n            // moved this \"hotfix\" to here so that everywhere that accesses the flag just gets an array -- Shawn\r\n            //TODO: This is a hotfix. Items should either always be\r\n            // stored as an array or always be stored as a object.\r\n            if (!Array.isArray(items)) {\r\n                let newItems: any[] = [];\r\n                for (const key of Object.keys(items)) {\r\n                    newItems.push(items[key]);\r\n                }\r\n                return newItems;\r\n            }\r\n            return items;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Set the embedded item data\r\n     * @param items\r\n     */\r\n    async setEmbeddedItems(items: any[]) {\r\n        // clear the flag first to remove the previous items - if we don't do this then it doesn't actually \"delete\" any items\r\n        await this.unsetFlag(SYSTEM_NAME, 'embeddedItems');\r\n        await this.setFlag(SYSTEM_NAME, 'embeddedItems', items);\r\n    }\r\n\r\n    getLastAttack(): AttackData | undefined {\r\n        return this.getFlag(SYSTEM_NAME, 'lastAttack');\r\n    }\r\n    async setLastAttack(attack: AttackData) {\r\n        // unset the flag first to clear old data, data can get weird if not done\r\n        await this.unsetFlag(SYSTEM_NAME, 'lastAttack');\r\n        return this.setFlag(SYSTEM_NAME, 'lastAttack', attack);\r\n    }\r\n\r\n    async update(data, options?) {\r\n        const ret = super.update(data, options);\r\n        ret.then(() => {\r\n            if (this.actor) {\r\n                this.actor.render();\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n    get hasOpposedRoll(): boolean {\r\n        return !!(this.data.data.action && this.data.data.action.opposed.type);\r\n    }\r\n\r\n    get hasRoll(): boolean {\r\n        const { action } = this.data.data;\r\n        return !!(action && action.type !== '' && (action.skill || action.attribute));\r\n    }\r\n    get hasTemplate(): boolean {\r\n        return this.isAreaOfEffect();\r\n    }\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n        const labels = {};\r\n        const item = this.data;\r\n\r\n        if (item.type === 'sin') {\r\n            if (typeof item.data.licenses === 'object') {\r\n                item.data.licenses = Object.values(item.data.licenses);\r\n            }\r\n        }\r\n        const equippedMods = this.getEquippedMods();\r\n        const equippedAmmo = this.getEquippedAmmo();\r\n\r\n        const { technology, range, action } = item.data;\r\n\r\n        if (technology) {\r\n            if (technology.condition_monitor === undefined) {\r\n                technology.condition_monitor = { value: 0 };\r\n            }\r\n            technology.condition_monitor.max = 8 + Math.ceil(technology.rating / 2);\r\n\r\n            if (!technology.conceal) technology.conceal = {};\r\n\r\n            const concealParts = new PartsList<number>();\r\n            equippedMods.forEach((mod) => {\r\n                if (mod.data.data.technology.conceal.value) {\r\n                    concealParts.addUniquePart(mod.name, mod.data.data.technology.conceal.value);\r\n                }\r\n            });\r\n            technology.conceal.mod = concealParts.list;\r\n\r\n            technology.conceal.value = Helpers.calcTotal(technology.conceal);\r\n        }\r\n\r\n        if (action) {\r\n            action.alt_mod = 0;\r\n            action.limit.mod = [];\r\n            action.damage.mod = [];\r\n            action.damage.ap.mod = [];\r\n            action.dice_pool_mod = [];\r\n            // handle overrides from mods\r\n            const limitParts = new PartsList(action.limit.mod);\r\n            const dpParts = new PartsList(action.dice_pool_mod);\r\n            equippedMods.forEach((mod) => {\r\n                if (mod.data.data.accuracy) {\r\n                    limitParts.addUniquePart(mod.name, mod.data.data.accuracy);\r\n                }\r\n                if (mod.data.data.dice_pool) {\r\n                    dpParts.addUniquePart(mod.name, mod.data.data.dice_pool);\r\n                }\r\n            });\r\n\r\n            if (equippedAmmo) {\r\n                // add mods to damage from ammo\r\n                action.damage.mod = PartsList.AddUniquePart(action.damage.mod, equippedAmmo.name, equippedAmmo.data.data.damage);\r\n                // add mods to ap from ammo\r\n                action.damage.ap.mod = PartsList.AddUniquePart(action.damage.ap.mod, equippedAmmo.name, equippedAmmo.data.data.ap);\r\n\r\n                // override element\r\n                if (equippedAmmo.data.data.element) {\r\n                    action.damage.element.value = equippedAmmo.data.data.element;\r\n                } else {\r\n                    action.damage.element.value = action.damage.element.base;\r\n                }\r\n\r\n                // override damage type\r\n                if (equippedAmmo.data.data.damageType) {\r\n                    action.damage.type.value = equippedAmmo.data.data.damageType;\r\n                } else {\r\n                    action.damage.type.value = action.damage.type.base;\r\n                }\r\n            } else {\r\n                // set value if we don't have item overrides\r\n                action.damage.element.value = action.damage.element.base;\r\n                action.damage.type.value = action.damage.type.base;\r\n            }\r\n\r\n            // once all damage mods have been accounted for, sum base and mod to value\r\n            action.damage.value = Helpers.calcTotal(action.damage);\r\n            action.damage.ap.value = Helpers.calcTotal(action.damage.ap);\r\n\r\n            action.limit.value = Helpers.calcTotal(action.limit);\r\n\r\n            if (this.actor) {\r\n                if (action.damage.attribute) {\r\n                    const { attribute } = action.damage;\r\n                    // TODO convert this in the template\r\n                    action.damage.mod = PartsList.AddUniquePart(\r\n                        action.damage.mod,\r\n                        game.i18n.localize(CONFIG.SR5.attributes[attribute]),\r\n                        this.actor.findAttribute(attribute)?.value,\r\n                    );\r\n                    action.damage.value = Helpers.calcTotal(action.damage);\r\n                }\r\n                if (action.limit.attribute) {\r\n                    const { attribute } = action.limit;\r\n                    // TODO convert this in the template\r\n                    action.limit.mod = PartsList.AddUniquePart(\r\n                        action.limit.mod,\r\n                        game.i18n.localize(CONFIG.SR5.limits[attribute]),\r\n                        this.actor.findLimit(attribute)?.value,\r\n                    );\r\n                    action.limit.value = Helpers.calcTotal(action.limit);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (range) {\r\n            if (range.rc) {\r\n                const rangeParts = new PartsList();\r\n                equippedMods.forEach((mod) => {\r\n                    if (mod.data.data.rc) rangeParts.addUniquePart(mod.name, mod.data.data.rc);\r\n                    // handle overrides from ammo\r\n                });\r\n                range.rc.mod = rangeParts.list;\r\n                if (range.rc) range.rc.value = Helpers.calcTotal(range.rc);\r\n            }\r\n        }\r\n\r\n        if (item.type === 'adept_power') {\r\n            item.data.type = item.data.action?.type ? 'active' : 'passive';\r\n        }\r\n\r\n        this.labels = labels;\r\n        item['properties'] = this.getChatData().properties;\r\n    }\r\n\r\n    async postCard(event?) {\r\n        // we won't work if we don't have an actor\r\n        if (!this.actor) return;\r\n\r\n        const postOnly = event?.shiftKey || !this.hasRoll;\r\n\r\n        const post = (bonus = {}) => {\r\n            // if only post, don't roll and post a card version -- otherwise roll\r\n            if (postOnly) {\r\n                const { token } = this.actor;\r\n                const attack = this.getAttackData(0);\r\n                // don't include any hits\r\n                delete attack?.hits;\r\n                // generate chat data\r\n                createChatData({\r\n                    header: {\r\n                        name: this.name,\r\n                        img: this.img,\r\n                    },\r\n                    testName: this.getRollName(),\r\n                    actor: this.actor,\r\n                    tokenId: token ? `${token.scene._id}.${token.id}` : undefined,\r\n                    description: this.getChatData(),\r\n                    item: this,\r\n                    previewTemplate: this.hasTemplate,\r\n                    attack,\r\n                    ...bonus,\r\n                }).then((chatData) => {\r\n                    // create the message\r\n                    return ChatMessage.create(chatData, { displaySheet: false });\r\n                });\r\n            } else {\r\n                this.rollTest(event);\r\n            }\r\n        };\r\n        // prompt user if needed\r\n        const dialogData = await ShadowrunItemDialog.fromItem(this, event);\r\n        if (dialogData) {\r\n            // keep track of old close function\r\n            const oldClose = dialogData.close;\r\n            // call post() after dialog closes\r\n            dialogData.close = async (html) => {\r\n                if (oldClose) {\r\n                    // the oldClose we put on the dialog will return a boolean\r\n                    const ret = ((await oldClose(html)) as unknown) as boolean;\r\n                    if (!ret) return;\r\n                }\r\n                post();\r\n            };\r\n            return new Dialog(dialogData).render(true);\r\n        } else {\r\n            post();\r\n        }\r\n    }\r\n\r\n    getChatData(htmlOptions?) {\r\n        const data = duplicate(this.data.data);\r\n        const { labels } = this;\r\n        if (!data.description) data.description = {};\r\n\r\n        data.description.value = TextEditor.enrichHTML(data.description.value, htmlOptions);\r\n\r\n        const props = [];\r\n        const func = ChatData[this.data.type];\r\n        if (func) func(duplicate(data), labels, props, this);\r\n\r\n        data.properties = props.filter((p) => !!p);\r\n\r\n        return data;\r\n    }\r\n\r\n    getOpposedTestName(): string {\r\n        let name = '';\r\n        if (this.data.data.action?.opposed?.type) {\r\n            const { opposed } = this.data.data.action;\r\n            if (opposed.type !== 'custom') {\r\n                name = `${Helpers.label(opposed.type)}`;\r\n            } else if (opposed.skill) {\r\n                name = `${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\r\n            } else if (opposed.attribute2) {\r\n                name = `${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\r\n            } else if (opposed.attribute) {\r\n                name = `${Helpers.label(opposed.attribute)}`;\r\n            }\r\n        }\r\n        const mod = this.getOpposedTestModifier();\r\n        if (mod) name += ` ${mod}`;\r\n        return name;\r\n    }\r\n\r\n    getOpposedTestMod(): PartsList<number> {\r\n        const parts = new PartsList<number>();\r\n        if (this.hasDefenseTest()) {\r\n            if (this.isAreaOfEffect()) {\r\n                parts.addUniquePart('SR5.Aoe', -2);\r\n            }\r\n            if (this.isRangedWeapon()) {\r\n                const fireModeData = this.getLastFireMode();\r\n                if (fireModeData?.defense) {\r\n                    if (fireModeData.defense !== 'SR5.DuckOrCover') {\r\n                        const fireMode = +fireModeData.defense;\r\n                        parts.addUniquePart('SR5.FireMode', fireMode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return parts;\r\n    }\r\n\r\n    getOpposedTestModifier(): string {\r\n        const testMod = this.getOpposedTestMod();\r\n        const total = testMod.total;\r\n        if (total) return `(${total})`;\r\n        else {\r\n            if (this.isRangedWeapon()) {\r\n                const fireModeData = this.getLastFireMode();\r\n                if (fireModeData?.defense) {\r\n                    if (fireModeData.defense === 'SR5.DuckOrCover') {\r\n                        return game.i18n.localize('SR5.DuckOrCover');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    getBlastData(): BlastData | undefined {\r\n        // can only handle spells and grenade right now\r\n        if (this.isSpell() && this.isAreaOfEffect()) {\r\n            // distance on spells is equal to force\r\n            let distance = this.getLastSpellForce().value;\r\n            // extended spells multiply by 10\r\n            if (this.data.data.extended) distance *= 10;\r\n            return {\r\n                radius: distance,\r\n                dropoff: 0,\r\n            };\r\n        } else if (this.isGrenade()) {\r\n            // use blast radius\r\n            const distance = this.data.data.thrown.blast.radius;\r\n            const dropoff = this.data.data.thrown.blast.dropoff;\r\n            return {\r\n                radius: distance,\r\n                dropoff: dropoff,\r\n            };\r\n        } else if (this.hasExplosiveAmmo()) {\r\n            const ammo = this.getEquippedAmmo();\r\n            const distance = ammo.data.data.blast.radius;\r\n            const dropoff = ammo.data.data.blast.dropoff;\r\n            return {\r\n                radius: distance,\r\n                dropoff,\r\n            };\r\n        }\r\n    }\r\n\r\n    getEquippedAmmo() {\r\n        return (this.items || []).filter((item) => item.type === 'ammo' && item.data.data?.technology?.equipped)[0];\r\n    }\r\n\r\n    getEquippedMods() {\r\n        return (this.items || []).filter((item) => item.type === 'modification' && item.data.data.type === 'weapon' && item.data.data?.technology?.equipped);\r\n    }\r\n\r\n    hasExplosiveAmmo(): boolean {\r\n        const ammo = this.getEquippedAmmo();\r\n        return ammo?.data?.data?.blast?.radius > 0;\r\n    }\r\n\r\n    async equipWeaponMod(iid) {\r\n        const mod = this.getOwnedItem(iid);\r\n        if (mod) {\r\n            const dupData = duplicate(mod.data);\r\n            dupData.data.technology.equipped = !dupData.data.technology.equipped;\r\n            await this.updateOwnedItem(dupData);\r\n        }\r\n    }\r\n\r\n    get hasAmmo() {\r\n        return this.data.data.ammo !== undefined;\r\n    }\r\n\r\n    async useAmmo(fireMode) {\r\n        const dupData = duplicate(this.data);\r\n        const { ammo } = dupData.data;\r\n        if (ammo) {\r\n            ammo.current.value = Math.max(0, ammo.current.value - fireMode);\r\n            return this.update(dupData);\r\n        }\r\n    }\r\n\r\n    async reloadAmmo() {\r\n        const data = duplicate(this.data);\r\n        const { ammo } = data.data;\r\n        const diff = ammo.current.max - ammo.current.value;\r\n        ammo.current.value = ammo.current.max;\r\n\r\n        if (ammo.spare_clips) {\r\n            ammo.spare_clips.value = Math.max(0, ammo.spare_clips.value - 1);\r\n        }\r\n        await this.update(data);\r\n\r\n        const newAmmunition = (this.items || [])\r\n            .filter((i) => i.data.type === 'ammo')\r\n            .reduce((acc: BaseEntityData[], item) => {\r\n                const { technology } = item.data.data;\r\n                if (technology.equipped) {\r\n                    const qty = technology.quantity;\r\n                    technology.quantity = Math.max(0, qty - diff);\r\n                    acc.push(item.data);\r\n                }\r\n                return acc;\r\n            }, []);\r\n        if (newAmmunition.length) await this.updateOwnedItem(newAmmunition);\r\n    }\r\n\r\n    async equipAmmo(iid) {\r\n        // only allow ammo that was just clicked to be equipped\r\n        const ammo = this.items\r\n            ?.filter((item) => item.type === 'ammo')\r\n            .map((item) => {\r\n                const i = this.getOwnedItem(item._id);\r\n                if (i) {\r\n                    i.data.data.technology.equipped = iid === item._id;\r\n                    return i.data;\r\n                }\r\n            });\r\n        await this.updateOwnedItem(ammo);\r\n    }\r\n\r\n    addNewLicense() {\r\n        const data = duplicate(this.data);\r\n        const { licenses } = data.data;\r\n        if (typeof licenses === 'object') {\r\n            data.data.licenses = Object.values(licenses);\r\n        }\r\n        data.data.licenses.push({\r\n            name: '',\r\n            rtg: '',\r\n            description: '',\r\n        });\r\n        this.update(data);\r\n    }\r\n\r\n    getRollPartsList(): ModList<number> {\r\n        // we only have a roll if we have an action or an actor\r\n        if (!this.data.data.action || !this.actor) return [];\r\n\r\n        const parts = new PartsList(duplicate(this.getModifierList()));\r\n\r\n        const skill = this.actor.findActiveSkill(this.getActionSkill());\r\n        const attribute = this.actor.findAttribute(this.getActionAttribute());\r\n        const attribute2 = this.actor.findAttribute(this.getActionAttribute2());\r\n\r\n        if (attribute && attribute.label) parts.addPart(attribute.label, attribute.value);\r\n\r\n        // if we have a valid skill, don't look for a second attribute\r\n        if (skill && skill.label) {\r\n            parts.addUniquePart(skill.label, skill.value);\r\n            if (skill.value === 0) {\r\n                parts.addUniquePart('SR5.Defaulting', -1);\r\n            }\r\n        } else if (attribute2 && attribute2.label) parts.addUniquePart(attribute2.label, attribute2.value);\r\n\r\n        const spec = this.getActionSpecialization();\r\n        if (spec) parts.addUniquePart(spec, 2);\r\n\r\n        const mod = parseInt(this.data.data.action.mod || 0);\r\n        if (mod) parts.addUniquePart('SR5.ItemMod', mod);\r\n\r\n        const atts: (AttributeField | SkillField)[] | boolean = [];\r\n        if (attribute !== undefined) atts.push(attribute);\r\n        if (attribute2 !== undefined) atts.push(attribute2);\r\n        if (skill !== undefined) atts.push(skill);\r\n        // add global parts from actor\r\n        this.actor._addGlobalParts(parts);\r\n        this.actor._addMatrixParts(parts, atts);\r\n        this._addWeaponParts(parts);\r\n\r\n        return parts.list;\r\n    }\r\n\r\n    calculateRecoil() {\r\n        const lastFireMode = this.getLastFireMode();\r\n        if (!lastFireMode) return 0;\r\n        if (lastFireMode.value === 20) return 0;\r\n        return Math.min(this.getRecoilCompensation(true) - (this.getLastFireMode()?.value || 0), 0);\r\n    }\r\n\r\n    _addWeaponParts(parts: PartsList<number>) {\r\n        if (this.isRangedWeapon()) {\r\n            const recoil = this.calculateRecoil();\r\n            if (recoil) parts.addUniquePart('SR5.Recoil', recoil);\r\n        }\r\n    }\r\n\r\n    removeLicense(index) {\r\n        const data = duplicate(this.data);\r\n        const { licenses } = data.data;\r\n        licenses.splice(index, 1);\r\n        this.update(data);\r\n    }\r\n\r\n    async rollOpposedTest(target: SR5Actor, ev) {\r\n        const itemData = this.data.data;\r\n        const options = {\r\n            event: ev,\r\n            fireModeDefense: 0,\r\n            cover: false,\r\n        };\r\n\r\n        const lastAttack = this.getLastAttack();\r\n        const parts = this.getOpposedTestMod();\r\n        const { opposed } = itemData.action;\r\n\r\n        if (opposed.type === 'defense') {\r\n            if (lastAttack) {\r\n                options['incomingAttack'] = lastAttack;\r\n                options.cover = true;\r\n                if (lastAttack.fireMode?.defense) {\r\n                    options.fireModeDefense = +lastAttack.fireMode.defense;\r\n                }\r\n            }\r\n            return target.rollDefense(options, parts.list);\r\n        } else if (opposed.type === 'soak') {\r\n            options['damage'] = lastAttack?.damage;\r\n            options['attackerHits'] = lastAttack?.hits;\r\n            return target.rollSoak(options, parts.list);\r\n        } else if (opposed.type === 'armor') {\r\n            return target.rollArmor(options);\r\n        } else {\r\n            if (opposed.skill && opposed.attribute) {\r\n                return target.rollSkill(opposed.skill, {\r\n                    ...options,\r\n                    attribute: opposed.attribute,\r\n                });\r\n            } else if (opposed.attribute && opposed.attribute2) {\r\n                return target.rollTwoAttributes([opposed.attribute, opposed.attribute2], options);\r\n            } else if (opposed.attribute) {\r\n                return target.rollSingleAttribute(opposed.attribute, options);\r\n            }\r\n        }\r\n    }\r\n\r\n    async rollExtraTest(type: string, event) {\r\n        const targets = SR5Item.getTargets();\r\n        if (type === 'opposed') {\r\n            for (const t of targets) {\r\n                await this.rollOpposedTest(t, event);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rolls a test using the latest stored data on the item (force, fireMode, level)\r\n     * @param event - mouse event\r\n     * @param options - any additional roll options to pass along - note that currently the Item will overwrite -- WIP\r\n     */\r\n    async rollTest(event, options?: Partial<AdvancedRollProps>): Promise<ShadowrunRoll | undefined> {\r\n        const promise = ShadowrunRoller.itemRoll(event, this, options);\r\n\r\n        // handle promise when it resolves for our own stuff\r\n        promise.then(async (roll) => {\r\n            // complex form handles fade\r\n            if (this.isComplexForm()) {\r\n                const totalFade = Math.max(this.getFade() + this.getLastComplexFormLevel().value, 2);\r\n                await this.actor.rollFade({ event }, totalFade);\r\n            } // spells handle drain, force, and attack data\r\n            else if (this.isSpell()) {\r\n                if (this.isCombatSpell() && roll) {\r\n                    const attackData = this.getAttackData(roll.total);\r\n                    if (attackData) {\r\n                        await this.setLastAttack(attackData);\r\n                    }\r\n                }\r\n                const forceData = this.getLastSpellForce();\r\n                const drain = Math.max(this.getDrain() + forceData.value + (forceData.reckless ? 3 : 0), 2);\r\n                await this.actor?.rollDrain({ event }, drain);\r\n            } // weapons handle ammo and attack data\r\n            else if (this.data.type === 'weapon') {\r\n                const attackData = this.getAttackData(roll?.total || 0);\r\n                if (attackData) {\r\n                    await this.setLastAttack(attackData);\r\n                }\r\n                if (this.hasAmmo) {\r\n                    const fireMode = this.getLastFireMode()?.value || 1;\r\n                    await this.useAmmo(fireMode);\r\n                }\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    static getItemFromMessage(html): SR5Item | undefined {\r\n        const card = html.find('.chat-card');\r\n        let actor;\r\n        const tokenKey = card.data('tokenId');\r\n        if (tokenKey) {\r\n            const [sceneId, tokenId] = tokenKey.split('.');\r\n            let token;\r\n            if (sceneId === canvas.scene._id) token = canvas.tokens.get(tokenId);\r\n            else {\r\n                const scene: Scene = game.scenes.get(sceneId);\r\n                if (!scene) return;\r\n                // @ts-ignore\r\n                const tokenData = scene.data.tokens.find((t) => t.id === Number(tokenId));\r\n                if (tokenData) token = new Token(tokenData);\r\n            }\r\n            if (!token) return;\r\n            actor = Actor.fromToken(token);\r\n        } else actor = game.actors.get(card.data('actorId'));\r\n\r\n        if (!actor) return;\r\n        const itemId = card.data('itemId');\r\n        return actor.getOwnedItem(itemId);\r\n    }\r\n\r\n    static getTargets() {\r\n        const { character } = game.user;\r\n        const { controlled } = canvas.tokens;\r\n        const targets = controlled.reduce((arr, t) => (t.actor ? arr.concat([t.actor]) : arr), []);\r\n        if (character && controlled.length === 0) targets.push(character);\r\n        if (!targets.length) throw new Error(`You must designate a specific Token as the roll target`);\r\n        return targets;\r\n    }\r\n\r\n    /**\r\n     * Create an item in this item\r\n     * @param itemData\r\n     * @param options\r\n     */\r\n    async createOwnedItem(itemData, options = {}) {\r\n        if (!Array.isArray(itemData)) itemData = [itemData];\r\n        // weapons accept items\r\n        if (this.type === 'weapon') {\r\n            const currentItems = duplicate(this.getEmbeddedItems());\r\n\r\n            itemData.forEach((ogItem) => {\r\n                const item = duplicate(ogItem);\r\n                item._id = randomID(16);\r\n                if (item.type === 'ammo' || item.type === 'modification') {\r\n                    if (item?.data?.technology?.equipped) {\r\n                        item.data.technology.equipped = false;\r\n                    }\r\n                    currentItems.push(item);\r\n                }\r\n            });\r\n\r\n            await this.setEmbeddedItems(currentItems);\r\n        }\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare embeddedItems\r\n     */\r\n    prepareEmbeddedEntities() {\r\n        super.prepareEmbeddedEntities();\r\n        let items = this.getEmbeddedItems();\r\n        if (items) {\r\n            const existing = (this.items || []).reduce((object, i) => {\r\n                object[i.id] = i;\r\n                return object;\r\n            }, {});\r\n            this.items = items.map((i) => {\r\n                if (i._id in existing) {\r\n                    const a = existing[i._id];\r\n                    a.data = i;\r\n                    a.prepareData();\r\n                    return a;\r\n                } else {\r\n                    // dirty things done here\r\n                    // @ts-ignore\r\n                    return Item.createOwned(i, this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getOwnedItem(itemId) {\r\n        const items = this.items;\r\n        if (!items) return;\r\n        return items.find((i) => i._id === itemId);\r\n    }\r\n\r\n    async updateOwnedItem(changes) {\r\n        const items = duplicate(this.getEmbeddedItems());\r\n        if (!items) return;\r\n        changes = Array.isArray(changes) ? changes : [changes];\r\n        if (!changes || changes.length === 0) return;\r\n        changes.forEach((itemChanges) => {\r\n            const index = items.findIndex((i) => i._id === itemChanges._id);\r\n            if (index === -1) return;\r\n            const item = items[index];\r\n            if (item) {\r\n                itemChanges = expandObject(itemChanges);\r\n                mergeObject(item, itemChanges);\r\n                items[index] = item;\r\n                // this.items[index].data = items[index];\r\n            }\r\n        });\r\n\r\n        await this.setEmbeddedItems(items);\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    async updateEmbeddedEntity(embeddedName: string, updateData: object | object[], options?: object) {\r\n        await this.updateOwnedItem(updateData);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an owned item\r\n     * @param deleted\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async deleteOwnedItem(deleted) {\r\n        const items = duplicate(this.getEmbeddedItems());\r\n        if (!items) return;\r\n\r\n        const idx = items.findIndex((i) => i._id === deleted || Number(i._id) === deleted);\r\n        if (idx === -1) throw new Error(`Shadowrun5e | Couldn't find owned item ${deleted}`);\r\n        items.splice(idx, 1);\r\n        await this.setEmbeddedItems(items);\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    async openPdfSource() {\r\n        const source = this.getBookSource();\r\n        if (source === '') {\r\n            // @ts-ignore\r\n            ui.notifications.error(game.i18n.localize('SR5.SourceFieldEmptyError'));\r\n        }\r\n        // TODO open PDF to correct location\r\n        // parse however you need, all \"buttons\" will lead to this function\r\n        const [code, page] = source.split(' ');\r\n        //@ts-ignore\r\n        ui.PDFoundry.openPDFByCode(code, parseInt(page));\r\n    }\r\n\r\n    getAttackData(hits: number): AttackData | undefined {\r\n        if (!this.data.data.action?.damage) return undefined;\r\n        const damage = this.data.data.action.damage;\r\n        const data: AttackData = {\r\n            hits,\r\n            damage: damage,\r\n        };\r\n\r\n        if (this.isCombatSpell()) {\r\n            const force = this.getLastSpellForce().value;\r\n            const damageParts = new PartsList(data.damage.mod);\r\n            data.force = force;\r\n            data.damage.base = force;\r\n            data.damage.value = force + damageParts.total;\r\n            data.damage.ap.value = -force + damageParts.total;\r\n            data.damage.ap.base = -force;\r\n        }\r\n\r\n        if (this.isComplexForm()) {\r\n            data.level = this.getLastComplexFormLevel().value;\r\n        }\r\n\r\n        if (this.isMeleeWeapon()) {\r\n            data.reach = this.getReach();\r\n            data.accuracy = this.getActionLimit();\r\n        }\r\n\r\n        if (this.isRangedWeapon()) {\r\n            data.fireMode = this.getLastFireMode();\r\n            data.accuracy = this.getActionLimit();\r\n        }\r\n\r\n        const blastData = this.getBlastData();\r\n        if (blastData) data.blast = blastData;\r\n\r\n        return data;\r\n    }\r\n\r\n    getRollName(): string | undefined {\r\n        if (this.isRangedWeapon()) {\r\n            return game.i18n.localize('SR5.RangeWeaponAttack');\r\n        }\r\n        if (this.isMeleeWeapon()) {\r\n            return game.i18n.localize('SR5.MeleeWeaponAttack');\r\n        }\r\n        if (this.isCombatSpell()) {\r\n            return game.i18n.localize('SR5.SpellAttack');\r\n        }\r\n        if (this.isSpell()) {\r\n            return game.i18n.localize('SR5.SpellCast');\r\n        }\r\n        if (this.hasRoll) return this.name;\r\n        return undefined;\r\n    }\r\n\r\n    getLimit(): LimitField | undefined {\r\n        const limit = this.data.data.action?.limit;\r\n        if (!limit) return undefined;\r\n        if (this.data.type === 'weapon') {\r\n            limit.label = 'SR5.Accuracy';\r\n        } else if (limit?.attribute) {\r\n            limit.label = CONFIG.SR5.attributes[limit.attribute];\r\n        } else if (this.isSpell()) {\r\n            limit.value = this.getLastSpellForce().value;\r\n            limit.label = 'SR5.Force';\r\n        } else if (this.isComplexForm()) {\r\n            limit.value = this.getLastComplexFormLevel().value;\r\n            limit.label = 'SR5.Level';\r\n        } else {\r\n            limit.label = 'SR5.Limit';\r\n        }\r\n        return limit;\r\n    }\r\n\r\n    /**\r\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\r\n     * @param scope\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setFlag(scope: string, key: string, value: any): Promise<Entity> {\r\n        const newValue = Helpers.onSetFlag(value);\r\n        return super.setFlag(scope, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\r\n     * @param scope\r\n     * @param key\r\n     */\r\n    getFlag(scope: string, key: string): any {\r\n        const data = super.getFlag(scope, key);\r\n        return Helpers.onGetFlag(data);\r\n    }\r\n\r\n    /**\r\n     * Passthrough functions\r\n     */\r\n    isAreaOfEffect(): boolean {\r\n        return this.wrapper.isAreaOfEffect();\r\n    }\r\n\r\n    isArmor(): boolean {\r\n        return this.wrapper.isArmor();\r\n    }\r\n\r\n    hasArmorBase(): boolean {\r\n        return this.wrapper.hasArmorBase();\r\n    }\r\n\r\n    hasArmorAccessory(): boolean {\r\n        return this.wrapper.hasArmorAccessory();\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return this.wrapper.hasArmor();\r\n    }\r\n\r\n    isGrenade(): boolean {\r\n        return this.wrapper.isGrenade();\r\n    }\r\n\r\n    isWeapon(): boolean {\r\n        return this.wrapper.isWeapon();\r\n    }\r\n\r\n    isCyberware(): boolean {\r\n        return this.wrapper.isCyberware();\r\n    }\r\n\r\n    isCombatSpell(): boolean {\r\n        return this.wrapper.isCombatSpell();\r\n    }\r\n\r\n    isRangedWeapon(): boolean {\r\n        return this.wrapper.isRangedWeapon();\r\n    }\r\n\r\n    isSpell(): boolean {\r\n        return this.wrapper.isSpell();\r\n    }\r\n\r\n    isComplexForm(): boolean {\r\n        return this.wrapper.isComplexForm();\r\n    }\r\n\r\n    isMeleeWeapon(): boolean {\r\n        return this.wrapper.isMeleeWeapon();\r\n    }\r\n\r\n    isDevice(): boolean {\r\n        return this.wrapper.isDevice();\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.wrapper.isEquipped();\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        return this.wrapper.isCyberdeck();\r\n    }\r\n\r\n    getBookSource(): string {\r\n        return this.wrapper.getBookSource();\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.wrapper.getConditionMonitor();\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.wrapper.getRating();\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.wrapper.getArmorValue();\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        return this.wrapper.getArmorElements();\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.wrapper.getEssenceLoss();\r\n    }\r\n\r\n    getASDF() {\r\n        return this.wrapper.getASDF();\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.wrapper.getActionSkill();\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.wrapper.getActionAttribute();\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.wrapper.getActionAttribute2();\r\n    }\r\n\r\n    getActionLimit(): number | undefined {\r\n        return this.wrapper.getActionLimit();\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.wrapper.getModifierList();\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        return this.wrapper.getActionSpecialization();\r\n    }\r\n\r\n    getDrain(): number {\r\n        return this.wrapper.getDrain();\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.wrapper.getFade();\r\n    }\r\n\r\n    getRecoilCompensation(includeActor: boolean = true): number {\r\n        let rc = this.wrapper.getRecoilCompensation();\r\n        if (includeActor && this.actor) {\r\n            rc += this.actor.getRecoilCompensation();\r\n        }\r\n        return rc;\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon()) {\r\n            return this.data.data.melee?.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    hasDefenseTest(): boolean {\r\n        return this.data.data.action?.opposed?.type === 'defense';\r\n    }\r\n}\r\n","import { DataWrapper } from '../dataWrappers/DataWrapper';\r\nimport SR5ItemType = Shadowrun.SR5ItemType;\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport ModList = Shadowrun.ModList;\r\nimport SR5ItemData = Shadowrun.SR5ItemData;\r\n\r\nexport class SR5ItemDataWrapper extends DataWrapper<SR5ItemType> {\r\n    getData(): SR5ItemData {\r\n        return this.data.data;\r\n    }\r\n\r\n    isAreaOfEffect(): boolean {\r\n        // TODO figure out how to detect explosive ammo\r\n        return this.isGrenade() || (this.isSpell() && this.data.data.range === 'los_a'); //|| this.hasExplosiveAmmo();\r\n    }\r\n\r\n    isArmor(): boolean {\r\n        return this.data.type === 'armor';\r\n    }\r\n\r\n    hasArmorBase(): boolean {\r\n        return this.hasArmor() && !this.data.data.armor?.mod;\r\n    }\r\n\r\n    hasArmorAccessory(): boolean {\r\n        return this.hasArmor() && (this.data.data.armor?.mod ?? false);\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return this.getArmorValue() > 0;\r\n    }\r\n\r\n    isGrenade(): boolean {\r\n        return this.isThrownWeapon() && (this.data.data.thrown?.blast.radius ?? 0) > 0;\r\n    }\r\n\r\n    isThrownWeapon(): boolean {\r\n        return this.isWeapon() && this.data.data.category === 'thrown';\r\n    }\r\n\r\n    isWeapon(): boolean {\r\n        return this.data.type === 'weapon';\r\n    }\r\n\r\n    isCyberware(): boolean {\r\n        return this.data.type === 'cyberware';\r\n    }\r\n\r\n    isCombatSpell(): boolean {\r\n        return this.isSpell() && this.data.data.category === 'combat';\r\n    }\r\n\r\n    isRangedWeapon(): boolean {\r\n        return this.isWeapon() && this.data.data.category === 'range';\r\n    }\r\n\r\n    isSpell(): boolean {\r\n        return this.data.type === 'spell';\r\n    }\r\n\r\n    isComplexForm(): boolean {\r\n        return this.data.type === 'complex_form';\r\n    }\r\n\r\n    isMeleeWeapon(): boolean {\r\n        return this.data.type === 'weapon' && this.data.data.category === 'melee';\r\n    }\r\n\r\n    isDevice(): boolean {\r\n        return this.data.type === 'device';\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.data.data.technology?.equipped || false;\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        return this.isDevice() && this.data.data.category === 'cyberdeck';\r\n    }\r\n\r\n    getId(): string {\r\n        return this.data._id;\r\n    }\r\n\r\n    getBookSource(): string {\r\n        return this.data.data.description.source;\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.data.data.technology?.condition_monitor ?? { value: 0, max: 0 };\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.data.data.technology?.rating || 0;\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.data.data?.armor?.value ?? 0;\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        // TODO clean this up\r\n        const { fire, electricity, cold, acid } = this.data.data.armor || {};\r\n        return { fire: fire ?? 0, electricity: electricity ?? 0, cold: cold ?? 0, acid: acid ?? 0 };\r\n    }\r\n\r\n    getName(): string {\r\n        return this.data.name;\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.data.data?.essence ?? 0;\r\n    }\r\n\r\n    getASDF() {\r\n        if (!this.isDevice()) return undefined;\r\n\r\n        // matrix attributes are set up as an object\r\n        const matrix = {\r\n            attack: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            sleaze: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            data_processing: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n            firewall: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n        };\r\n\r\n        if (this.isCyberdeck()) {\r\n            /**\r\n             * {\r\n             *     attN: {\r\n             *         value: number,\r\n             *         att: string (the ASDF attribute)\r\n             *     }\r\n             * }\r\n             */\r\n            const atts: { [key: string]: { value: number; att: string } } | undefined = this.data.data.atts;\r\n            if (atts) {\r\n                for (let [key, att] of Object.entries(atts)) {\r\n                    matrix[att.att].value = att.value;\r\n                    matrix[att.att].device_att = key;\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    getActionDicePoolMod(): number | undefined {\r\n        return this.data.data.action?.mod;\r\n    }\r\n\r\n    getLimitAttribute(): string | undefined {\r\n        return this.data.data.action?.limit?.attribute;\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.data.data.action?.skill;\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.data.data.action?.attribute;\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.data.data.action?.attribute2;\r\n    }\r\n\r\n    getActionLimit(): number | undefined {\r\n        return this.data.data.action?.limit?.value;\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.data.data.action?.dice_pool_mod || [];\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        if (this.data.data.action?.spec) return 'SR5.Specialization';\r\n        return undefined;\r\n    }\r\n\r\n    getDrain(): number {\r\n        return this.data.data.drain || 0;\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.data.data.fade || 0;\r\n    }\r\n\r\n    getRecoilCompensation(): number {\r\n        if (!this.isRangedWeapon()) return 0;\r\n        const base = this.data.data?.range?.rc.value ?? '0';\r\n        return Number(base);\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon()) {\r\n            return this.data.data.melee?.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    hasDefenseTest(): boolean {\r\n        return this.data.data.action?.opposed?.type === 'defense';\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport { SR5Item } from './SR5Item';\r\n\r\n/**\r\n * Extend the basic ItemSheet with some very simple modifications\r\n */\r\nexport class SR5ItemSheet extends ItemSheet {\r\n    item: SR5Item;\r\n    private _shownDesc: any[];\r\n    private _scroll: string;\r\n    constructor(...args) {\r\n        super(...args);\r\n        this._shownDesc = [];\r\n    }\r\n\r\n    getEmbeddedItems() {\r\n        return this.item.items || [];\r\n    }\r\n\r\n    /**\r\n     * Extend and override the default options used by the Simple Item Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'item'],\r\n            width: 650,\r\n            height: 450,\r\n            tabs: [{ navSelector: '.tabs', contentSelector: '.sheetbody' }],\r\n        });\r\n    }\r\n\r\n    get template() {\r\n        const path = 'systems/shadowrun5e/dist/templates/item/';\r\n        return `${path}${this.item.data.type}.html`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Prepare data for rendering the Item sheet\r\n     * The prepared data object contains both the actor data as well as additional sheet options\r\n     */\r\n    getData() {\r\n        const data = super.getData();\r\n        const itemData = data.data;\r\n\r\n        if (itemData.action) {\r\n            try {\r\n                const { action } = itemData;\r\n                if (action.mod === 0) delete action.mod;\r\n                if (action.limit === 0) delete action.limit;\r\n                if (action.damage) {\r\n                    if (action.damage.mod === 0) delete action.damage.mod;\r\n                    if (action.damage.ap.mod === 0) delete action.damage.ap.mod;\r\n                }\r\n                if (action.limit) {\r\n                    if (action.limit.mod === 0) delete action.limit.mod;\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n\r\n        if (itemData.technology) {\r\n            try {\r\n                const tech = itemData.technology;\r\n                if (tech.rating === 0) delete tech.rating;\r\n                if (tech.quantity === 0) delete tech.quantity;\r\n                if (tech.cost === 0) delete tech.cost;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        data['config'] = CONFIG.SR5;\r\n        const items = this.getEmbeddedItems();\r\n        const [ammunition, weaponMods, armorMods] = items.reduce(\r\n            (parts: [BaseEntityData[], BaseEntityData[], BaseEntityData[]], item: SR5Item) => {\r\n                if (item.type === 'ammo') parts[0].push(item.data);\r\n                if (item.type === 'modification' && item.data.data.type === 'weapon') parts[1].push(item.data);\r\n                if (item.type === 'modification' && item.data.data.type === 'armor') parts[2].push(item.data);\r\n                return parts;\r\n            },\r\n            [[], [], []],\r\n        );\r\n        data['ammunition'] = ammunition;\r\n        data['weaponMods'] = weaponMods;\r\n        data['armorMods'] = armorMods;\r\n        // TODO set to the proper boolean for if the source PDF can be accessed\r\n        // I'm thinking maybe check for the mod being installed?\r\n        data['hasSourcePdfAvailable'] = true;\r\n\r\n        return data;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Activate event listeners using the prepared sheet HTML\r\n     * @param html {HTML}   The prepared HTML object ready to be rendered into the DOM\r\n     */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        if (this.item.type === 'weapon') {\r\n            this.form.ondragover = (event) => this._onDragOver(event);\r\n            this.form.ondrop = (event) => this._onDrop(event);\r\n        }\r\n        html.find('.add-new-ammo').click(this._onAddNewAmmo.bind(this));\r\n        html.find('.ammo-equip').click(this._onAmmoEquip.bind(this));\r\n        html.find('.ammo-delete').click(this._onAmmoRemove.bind(this));\r\n        html.find('.ammo-reload').click(this._onAmmoReload.bind(this));\r\n\r\n        html.find('.edit-item').click(this._onEditItem.bind(this));\r\n\r\n        html.find('.add-new-mod').click(this._onAddWeaponMod.bind(this));\r\n        html.find('.mod-equip').click(this._onWeaponModEquip.bind(this));\r\n        html.find('.mod-delete').click(this._onWeaponModRemove.bind(this));\r\n\r\n        html.find('.add-new-license').click(this._onAddLicense.bind(this));\r\n        html.find('.license-delete').on('click', this._onRemoveLicense.bind(this));\r\n\r\n        html.find('.open-source-pdf').on('click', this._onOpenSourcePdf.bind(this));\r\n\r\n        html.find('.has-desc').click((event) => {\r\n            event.preventDefault();\r\n            const item = $(event.currentTarget).parents('.item');\r\n            const iid = $(item).data().item;\r\n            const field = item.next();\r\n            field.toggle();\r\n            if (iid) {\r\n                if (field.is(':visible')) this._shownDesc.push(iid);\r\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n            }\r\n        });\r\n\r\n        html.find('.hidden').hide();\r\n    }\r\n\r\n    _onDragOver(event) {\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    async _onDrop(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        let data;\r\n        try {\r\n            data = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n            if (data.type !== 'Item') {\r\n                console.log('Shadowrun5e | Can only drop Items');\r\n            }\r\n        } catch (err) {\r\n            console.log('Shadowrun5e | drop error');\r\n        }\r\n        let item;\r\n        // Case 1 - Data explicitly provided\r\n        if (data.data) {\r\n            // TODO test\r\n            if (this.item.isOwned && data.actorId === this.item.actor?._id && data.data._id === this.item._id) {\r\n                console.log('Shadowrun5e | Cant drop item on itself');\r\n                // @ts-ignore\r\n                ui.notifications.error('Are you trying to break the game??');\r\n            }\r\n            item = data;\r\n        } else if (data.pack) {\r\n            console.log(data);\r\n            // Case 2 - From a Compendium Pack\r\n            // TODO test\r\n            item = await this._getItemFromCollection(data.pack, data.id);\r\n        } else {\r\n            // Case 3 - From a World Entity\r\n            item = game.items.get(data.id);\r\n        }\r\n\r\n        this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    _getItemFromCollection(collection, itemId) {\r\n        const pack = game.packs.find((p) => p.collection === collection);\r\n        return pack.getEntity(itemId);\r\n    }\r\n\r\n    _eventId(event) {\r\n        event.preventDefault();\r\n        return event.currentTarget.closest('.item').dataset.itemId;\r\n    }\r\n\r\n    async _onOpenSourcePdf(event) {\r\n        event.preventDefault();\r\n        await this.item.openPdfSource();\r\n    }\r\n\r\n    async _onEditItem(event) {\r\n        const item = this.item.getOwnedItem(this._eventId(event));\r\n        if (item) {\r\n            item.sheet.render(true);\r\n        }\r\n    }\r\n\r\n    async _onAddLicense(event) {\r\n        event.preventDefault();\r\n        this.item.addNewLicense();\r\n    }\r\n\r\n    async _onRemoveLicense(event) {\r\n        event.preventDefault();\r\n        const index = event.currentTarget.dataset.index;\r\n        if (index >= 0) this.item.removeLicense(index);\r\n    }\r\n\r\n    async _onWeaponModRemove(event) {\r\n        this.item.deleteOwnedItem(this._eventId(event));\r\n    }\r\n\r\n    async _onWeaponModEquip(event) {\r\n        this.item.equipWeaponMod(this._eventId(event));\r\n    }\r\n\r\n    async _onAddWeaponMod(event) {\r\n        event.preventDefault();\r\n        const type = 'modification';\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            data: duplicate(game.system.model.Item.modification),\r\n        };\r\n        itemData.data.type = 'weapon';\r\n        // @ts-ignore\r\n        const item = Item.createOwned(itemData, this.item);\r\n        this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    async _onAmmoReload(event) {\r\n        event.preventDefault();\r\n        this.item.reloadAmmo();\r\n    }\r\n\r\n    async _onAmmoRemove(event) {\r\n        this.item.deleteOwnedItem(this._eventId(event));\r\n    }\r\n\r\n    async _onAmmoEquip(event) {\r\n        this.item.equipAmmo(this._eventId(event));\r\n    }\r\n\r\n    _onAddNewAmmo(event) {\r\n        event.preventDefault();\r\n        const type = 'ammo';\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            data: duplicate(game.system.model.Item.ammo),\r\n        };\r\n        // @ts-ignore\r\n        const item = Item.createOwned(itemData, this.item);\r\n        this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    async _render(force = false, options = {}) {\r\n        this._saveScrollPositions();\r\n        await super._render(force, options);\r\n        this._restoreScrollPositions();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n}\r\n","import { SR5ItemSheet } from './item/SR5ItemSheet';\r\nimport { SR5ActorSheet } from './actor/SR5ActorSheet';\r\nimport { SR5Actor } from './actor/SR5Actor';\r\nimport { SR5Item } from './item/SR5Item';\r\nimport { SR5 } from './config';\r\nimport { Helpers } from './helpers';\r\nimport { registerSystemSettings } from './settings';\r\nimport { preCombatUpdate, shadowrunCombatUpdate } from './combat';\r\nimport { measureDistance } from './canvas';\r\nimport * as chat from './chat';\r\nimport { OverwatchScoreTracker } from './apps/gmtools/OverwatchScoreTracker';\r\nimport { ShadowrunRoller } from './rolls/ShadowrunRoller';\r\nimport { Migrator } from './migrator/Migrator';\r\nimport { SYSTEM_NAME } from './constants';\r\nimport { HandlebarManager } from './handlebars/HandlebarManager';\r\n\r\n/* -------------------------------------------- */\r\n/*  Foundry VTT Initialization                  */\r\n/* -------------------------------------------- */\r\n\r\nHooks.once('init', function () {\r\n    console.log('Loading Shadowrun 5e System');\r\n\r\n    // Create a shadowrun5e namespace within the game global\r\n    game['shadowrun5e'] = {\r\n        SR5Actor,\r\n        ShadowrunRoller,\r\n        SR5Item,\r\n        rollItemMacro,\r\n    };\r\n\r\n    CONFIG.SR5 = SR5;\r\n    CONFIG.Actor.entityClass = SR5Actor;\r\n    CONFIG.Item.entityClass = SR5Item;\r\n\r\n    registerSystemSettings();\r\n\r\n    // Register sheet application classes\r\n    Actors.unregisterSheet('core', ActorSheet);\r\n    Actors.registerSheet(SYSTEM_NAME, SR5ActorSheet, { makeDefault: true });\r\n    Items.unregisterSheet('core', ItemSheet);\r\n    Items.registerSheet(SYSTEM_NAME, SR5ItemSheet, { makeDefault: true });\r\n\r\n    ['renderSR5ActorSheet', 'renderSR5ItemSheet'].forEach((s) => {\r\n        Hooks.on(s, (app, html) => Helpers.setupCustomCheckbox(app, html));\r\n    });\r\n\r\n    HandlebarManager.loadTemplates();\r\n\r\n    // CONFIG.debug.hooks = true;\r\n});\r\n\r\nHooks.on('canvasInit', function () {\r\n    // this does actually exist. Fix in types?\r\n    // @ts-ignore\r\n    SquareGrid.prototype.measureDistance = measureDistance;\r\n});\r\n\r\nHooks.on('ready', function () {\r\n    // this is correct, will need to be fixed in foundry types\r\n    // @ts-ignore\r\n    game.socket.on('system.shadowrun5e', (data) => {\r\n        if (game.user.isGM && data.gmCombatUpdate) {\r\n            shadowrunCombatUpdate(data.gmCombatUpdate.changes, data.gmCombatUpdate.options);\r\n        }\r\n    });\r\n\r\n    if (game.user.isGM) {\r\n        Migrator.BeginMigration();\r\n    }\r\n    const diceIconSelector = '#chat-controls .roll-type-select .fa-dice-d20';\r\n    $(document).on('click', diceIconSelector, () => ShadowrunRoller.promptRoll());\r\n});\r\n\r\nHooks.on('preUpdateCombat', preCombatUpdate);\r\nHooks.on('renderChatMessage', (app, html) => {\r\n    chat.addRollListeners(app, html);\r\n});\r\n\r\nHooks.on('getChatLogEntryContext', chat.addChatMessageContextOptions);\r\n\r\n/* -------------------------------------------- */\r\n/*  Hotbar Macros                               */\r\n/* -------------------------------------------- */\r\n\r\nHooks.on('hotbarDrop', (bar, data, slot) => {\r\n    if (data.type !== 'Item') return;\r\n\r\n    createItemMacro(data.data, slot);\r\n    return false;\r\n});\r\n\r\nHooks.on('renderSceneControls', (controls, html) => {\r\n    html.find('[data-tool=\"overwatch-score-tracker\"]').on('click', (event) => {\r\n        event.preventDefault();\r\n        new OverwatchScoreTracker().render(true);\r\n    });\r\n});\r\n\r\nHooks.on('getSceneControlButtons', (controls) => {\r\n    if (game.user.isGM) {\r\n        const tokenControls = controls.find((c) => c.name === 'token');\r\n        tokenControls.tools.push({\r\n            name: 'overwatch-score-tracker',\r\n            title: 'CONTROLS.SR5.OverwatchScoreTracker',\r\n            icon: 'fas fa-network-wired',\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {Object} item     The item data\r\n * @param {number} slot     The hotbar slot to use\r\n * @returns {Promise}\r\n */\r\nasync function createItemMacro(item, slot) {\r\n    const command = `game.shadowrun5e.rollItemMacro(\"${item.name}\");`;\r\n    let macro = game.macros.entities.find((m) => m.name === item.name);\r\n    if (!macro) {\r\n        macro = (await Macro.create(\r\n            {\r\n                name: item.name,\r\n                type: 'script',\r\n                img: item.img,\r\n                command: command,\r\n                flags: { 'shadowrun5e.itemMacro': true },\r\n            },\r\n            { displaySheet: false },\r\n        )) as Macro;\r\n    }\r\n    if (macro) game.user.assignHotbarMacro(macro, slot);\r\n}\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {string} itemName\r\n * @return {Promise}\r\n */\r\nfunction rollItemMacro(itemName) {\r\n    const speaker = ChatMessage.getSpeaker();\r\n    let actor;\r\n    if (speaker.token) actor = game.actors.tokens[speaker.token];\r\n    if (!actor) actor = game.actors.get(speaker.actor);\r\n    const item = actor ? actor.items.find((i) => i.name === itemName) : null;\r\n    if (!item) {\r\n        // @ts-ignore\r\n        return ui.notifications.warn(`Your controlled Actor does not have an item named ${itemName}`);\r\n    }\r\n\r\n    return item.postCard();\r\n}\r\n\r\nHandlebarManager.registerHelpers();\r\n\r\n","import { VersionMigration } from './VersionMigration';\r\nimport { LegacyMigration } from './versions/LegacyMigration';\r\nimport { Version0_6_5 } from './versions/Version0_6_5';\r\nimport { Version0_6_10 } from './versions/Version0_6_10';\r\n\r\ntype VersionDefinition = {\r\n    versionNumber: string;\r\n    migration: VersionMigration;\r\n};\r\nexport class Migrator {\r\n    // Map of all version migrations to their target version numbers.\r\n    private static readonly s_Versions: VersionDefinition[] = [\r\n        { versionNumber: LegacyMigration.TargetVersion, migration: new LegacyMigration() },\r\n        { versionNumber: Version0_6_5.TargetVersion, migration: new Version0_6_5() },\r\n        { versionNumber: Version0_6_10.TargetVersion, migration: new Version0_6_10() },\r\n    ];\r\n\r\n    //TODO: Call on Init()\r\n    public static async BeginMigration() {\r\n        let currentVersion = game.settings.get(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION);\r\n        if (currentVersion === undefined || currentVersion === null) {\r\n            currentVersion = VersionMigration.NO_VERSION;\r\n        }\r\n\r\n        const migrations = Migrator.s_Versions.filter(({ versionNumber }) => {\r\n            // if versionNUmber is greater than currentVersion, we need to apply this migration\r\n            return this.compareVersion(versionNumber, currentVersion) === 1;\r\n        });\r\n\r\n        // No migrations are required, exit.\r\n        if (migrations.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.WarningTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.WarningHeader');\r\n        const localizedWarningRequired = game.i18n.localize('SR5.MIGRATION.WarningRequired');\r\n        const localizedWarningDescription = game.i18n.localize('SR5.MIGRATION.WarningDescription');\r\n        const localizedWarningBackup = game.i18n.localize('SR5.MIGRATION.WarningBackup');\r\n        const localizedWarningBegin = game.i18n.localize('SR5.MIGRATION.BeginMigration');\r\n\r\n        const d = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"color: red; text-align: center\">${localizedWarningHeader}</h2>` +\r\n                `<p style=\"text-align: center\"><i>${localizedWarningRequired}</i></p>` +\r\n                `<p>${localizedWarningDescription}</p>` +\r\n                `<h3 style=\"color: red\">${localizedWarningBackup}</h3>`,\r\n            buttons: {\r\n                ok: {\r\n                    label: localizedWarningBegin,\r\n                    callback: () => this.migrate(migrations),\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        d.render(true);\r\n    }\r\n\r\n    private static async migrate(migrations: VersionDefinition[]) {\r\n        // we want to apply migrations in ascending order until we're up to the latest\r\n        migrations.sort((a, b) => {\r\n            return this.compareVersion(a.versionNumber, b.versionNumber);\r\n        });\r\n\r\n        await this.migrateWorld(game, migrations);\r\n        await this.migrateCompendium(game, migrations);\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.SuccessTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.SuccessHeader');\r\n        const localizedSuccessDescription = game.i18n.localize('SR5.MIGRATION.SuccessDescription');\r\n        const localizedSuccessPacksInfo = game.i18n.localize('SR5.MIGRATION.SuccessPacksInfo');\r\n        const localizedSuccessConfirm = game.i18n.localize('SR5.MIGRATION.SuccessConfirm');\r\n        const packsDialog = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"text-align: center; color: green\">${localizedWarningHeader}</h2>` +\r\n                `<p>${localizedSuccessDescription}</p>` +\r\n                `<p style=\"text-align: center\"><i>${localizedSuccessPacksInfo}</i></p>`,\r\n            buttons: {\r\n                ok: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: localizedSuccessConfirm,\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        packsDialog.render(true);\r\n    }\r\n\r\n    /**\r\n     * Migrate all world objects\r\n     * @param game\r\n     * @param migrations\r\n     */\r\n    private static async migrateWorld(game: Game, migrations: VersionDefinition[]) {\r\n        // Run the migrations in order\r\n        for (const { migration } of migrations) {\r\n            await migration.Migrate(game);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over all world compendium packs\r\n     * @param game Game that will be migrated\r\n     * @param migrations Instances of the version migration\r\n     */\r\n    private static async migrateCompendium(game: Game, migrations: VersionDefinition[]) {\r\n        // Migrate World Compendium Packs\r\n        const packs = game.packs.filter((pack) => pack.metadata.package === 'world' && ['Actor', 'Item', 'Scene'].includes(pack.metadata.entity));\r\n\r\n        // Run the migrations in order on each pack.\r\n        for (const pack of packs) {\r\n            for (const { migration } of migrations) {\r\n                await migration.MigrateCompendiumPack(pack);\r\n            }\r\n        }\r\n    }\r\n\r\n    // found at: https://helloacm.com/the-javascript-function-to-compare-version-number-strings/\r\n    // updated for typescript\r\n    /**\r\n     * compare two version numbers, returns 1 if v1 > v2, -1 if v1 < v2, 0 if equal\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    public static compareVersion(v1: string, v2: string) {\r\n        const s1 = v1.split('.').map((s) => parseInt(s, 10));\r\n        const s2 = v2.split('.').map((s) => parseInt(s, 10));\r\n        const k = Math.min(v1.length, v2.length);\r\n        for (let i = 0; i < k; ++i) {\r\n            if (s1[i] > s2[i]) return 1;\r\n            if (s1[i] < s2[i]) return -1;\r\n        }\r\n        return v1.length === v2.length ? 0 : v1.length < v2.length ? -1 : 1;\r\n    }\r\n}\r\n","import { SR5Actor } from '../actor/SR5Actor';\r\n\r\n/**\r\n * Converts a game's data model from source version to a target version.\r\n * Extending classes are only required to handle items, actors, and scenes,\r\n *  other methods are implementable purely for convenience and atomicity.\r\n */\r\nexport abstract class VersionMigration {\r\n    static readonly MODULE_NAME = 'shadowrun5e';\r\n    static readonly KEY_DATA_VERSION = 'systemMigrationVersion';\r\n    static readonly NO_VERSION = '0';\r\n\r\n    private m_Abort: boolean = false;\r\n    private m_AbortReason: string;\r\n\r\n    /**\r\n     * The allowed version this migrator should be able to operate on.\r\n     */\r\n    public abstract get SourceVersion(): string;\r\n    /**\r\n     * The resulting version this migrator will produce.\r\n     */\r\n    public abstract get TargetVersion(): string;\r\n\r\n    public get SourceVersionFriendlyName(): string {\r\n        return `v${this.SourceVersion}`;\r\n    }\r\n    public get TargetVersionFriendlyName(): string {\r\n        return `v${this.TargetVersion}`;\r\n    }\r\n\r\n    /**\r\n     * Flag the migration to be aborted.\r\n     * @param reason The reason that the migration must be aborted, to be displayed\r\n     *  to the user and returned from the migration call.\r\n     */\r\n    protected abort(reason: string): void {\r\n        this.m_Abort = true;\r\n        this.m_AbortReason = reason;\r\n        // @ts-ignore\r\n        ui.notifications.error(`Data migration has been aborted: ${reason}`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Begin migration for the specified game.\r\n     * @param game The world that should be migrated.\r\n     */\r\n    public async Migrate(game: Game) {\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.info(`Beginning Shadowrun system migration from version ${this.SourceVersionFriendlyName} to ${this.TargetVersionFriendlyName}.`);\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.warn(`Please do not close your game or shutdown FoundryVTT.`, {\r\n            permanent: true,\r\n        });\r\n\r\n        // Map of entities to update, store until later to reduce chance of partial updates\r\n        // which may result in impossible game states.\r\n        const entityUpdates: Map<Entity, EntityUpdate> = new Map<Entity, EntityUpdate>();\r\n\r\n        // Migrate World Items\r\n        await this.PreMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateItems(game, entityUpdates);\r\n        await this.PostMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate World Actors\r\n        await this.PreMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateActors(game, entityUpdates);\r\n        await this.PostMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate Actor Tokens\r\n        await this.PreMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateScenes(game, entityUpdates);\r\n        await this.PostMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Apply the updates, this should *always* work, now that parsing is complete.\r\n        await this.Apply(entityUpdates);\r\n\r\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, this.TargetVersion);\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.info(`Shadowrun system migration successfully migrated to version ${this.TargetVersion}.`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Applies the specified mapping of entities, iteratively updating each.\r\n     * @param entityUpdates A mapping of entity updateData pairs.\r\n     */\r\n    protected async Apply(entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const [entity, { updateData, embeddedItems }] of entityUpdates) {\r\n            if (embeddedItems !== null) {\r\n                const actor = entity as SR5Actor;\r\n                await actor.updateOwnedItem(embeddedItems);\r\n            }\r\n            await entity.update(updateData, { enforceTypes: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through all scenes and migrate each if needed.\r\n     * @param game\r\n     * @param entityUpdates\r\n     */\r\n    protected async IterateScenes(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const scene of game.scenes.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateSceneData(scene))) {\r\n                    continue;\r\n                }\r\n\r\n                if (scene._id === 'MAwSFhlXRipixOWw') {\r\n                    console.log('Scene Pre-Update');\r\n                    console.log(scene);\r\n                }\r\n\r\n                console.log(`Migrating Scene entity ${scene.name}`);\r\n                const updateData = await this.MigrateSceneData(duplicate(scene.data));\r\n\r\n                let hasTokenUpdates = false;\r\n                updateData.tokens = await Promise.all(\r\n                    // @ts-ignore\r\n                    scene.data.tokens.map(async (token) => {\r\n                        if (isObjectEmpty(token.actorData)) {\r\n                            return token;\r\n                        }\r\n\r\n                        let tokenDataUpdate = await this.MigrateActorData(token.actorData);\r\n                        if (!isObjectEmpty(tokenDataUpdate)) {\r\n                            hasTokenUpdates = true;\r\n                            tokenDataUpdate['_id'] = token._id;\r\n\r\n                            const newToken = duplicate(token);\r\n                            newToken.actorData = await mergeObject(token.actorData, tokenDataUpdate, {\r\n                                enforceTypes: false,\r\n                                inplace: false,\r\n                            });\r\n                            console.log(newToken);\r\n                            return newToken;\r\n                        } else {\r\n                            return token;\r\n                        }\r\n                    }),\r\n                );\r\n                if (scene._id === 'MAwSFhlXRipixOWw') {\r\n                    console.log('Scene Pre-Update');\r\n                    console.log(scene);\r\n                }\r\n\r\n                if (isObjectEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(scene, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all items and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async IterateItems(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const item of game.items.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateItemData(item.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Item: ${item.name}`);\r\n                const updateData = await this.MigrateItemData(item.data);\r\n\r\n                if (isObjectEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(item, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all actors and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async IterateActors(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const actor of game.actors.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateActorData(actor.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Actor ${actor.name}`);\r\n                console.log(actor);\r\n                const updateData = await this.MigrateActorData(duplicate(actor.data));\r\n                console.log(updateData);\r\n                let items = [];\r\n                if (updateData.items) {\r\n                    items = updateData.items;\r\n                    delete updateData.items;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(actor, {\r\n                    updateData,\r\n                    embeddedItems: items,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over an actor's items, updating those that need updating.\r\n     * @param actorData The actor to iterate over\r\n     * @param updateData The existing update data to merge into\r\n     */\r\n    protected async IterateActorItems(actorData: ActorData, updateData) {\r\n        let hasItemUpdates = false;\r\n        // @ts-ignore\r\n        if (actorData.items !== undefined) {\r\n            const items = await Promise.all(\r\n                // @ts-ignore\r\n                actorData.items.map(async (item) => {\r\n                    let itemUpdate = await this.MigrateItemData(item);\r\n\r\n                    if (!isObjectEmpty(itemUpdate)) {\r\n                        hasItemUpdates = true;\r\n                        itemUpdate['_id'] = item._id;\r\n                        return await mergeObject(item, itemUpdate, {\r\n                            enforceTypes: false,\r\n                            inplace: false,\r\n                        });\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                }),\r\n            );\r\n            if (hasItemUpdates) {\r\n                updateData.items = items;\r\n            }\r\n        }\r\n\r\n        return updateData;\r\n    }\r\n\r\n    /**\r\n     * Check if a scene requires updates.\r\n     * @param scene The scene to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified scene's data.\r\n     * @param scene The scene to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateSceneData(scene: any): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an item requires updates.\r\n     * @param item The item to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateItemData(item: BaseEntityData): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified item's data.\r\n     * @param item The item to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateItemData(item: BaseEntityData): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an actor requires updates.\r\n     * @param actor The actor to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateActorData(actor: ActorData): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified actor's data.\r\n     * @param actor The actor to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateActorData(actor: ActorData): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right after actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Migrate a compendium pack\r\n     * @param pack\r\n     */\r\n    public async MigrateCompendiumPack(pack: Compendium) {\r\n        const entity = pack.metadata.entity;\r\n        if (!['Actor', 'Item', 'Scene'].includes(entity)) return;\r\n\r\n        // Begin by requesting server-side data model migration and get the migrated content\r\n        await pack.migrate({});\r\n        const content = await pack.getContent();\r\n\r\n        // Iterate over compendium entries - applying fine-tuned migration functions\r\n        for (let ent of content) {\r\n            try {\r\n                let updateData: any = null;\r\n                if (entity === 'Item') {\r\n                    updateData = await this.MigrateItemData(ent.data);\r\n\r\n                    if (isObjectEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    expandObject(updateData);\r\n                    updateData['_id'] = ent._id;\r\n                    await pack.updateEntity(updateData);\r\n                    // TODO: Uncomment when foundry allows embeddeds to be updated in packs\r\n                    // } else if (entity === 'Actor') {\r\n                    //     updateData = await this.MigrateActorData(ent.data);\r\n                    //\r\n                    //     if (isObjectEmpty(updateData)) {\r\n                    //         continue;\r\n                    //     }\r\n                    //\r\n                    //     updateData['_id'] = ent._id;\r\n                    //     await pack.updateEntity(updateData);\r\n                } else if (entity === 'Scene') {\r\n                    updateData = await this.MigrateSceneData(ent.data);\r\n\r\n                    if (isObjectEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    expandObject(updateData);\r\n                    updateData['_id'] = ent._id;\r\n                    await pack.updateEntity(updateData);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        console.log(`Migrated all ${entity} entities from Compendium ${pack.collection}`);\r\n    }\r\n}\r\n\r\ntype EntityUpdate = {\r\n    updateData: any;\r\n    embeddedItems: null | any[];\r\n};\r\n","import { VersionMigration } from '../VersionMigration';\r\n\r\n/**\r\n * Migrates the data model for Legacy migrations prior to 0.6.4\r\n */\r\nexport class LegacyMigration extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0';\r\n    }\r\n    get TargetVersion(): string {\r\n        return LegacyMigration.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.4';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: ActorData): Promise<any> {\r\n        let updateData: any = {};\r\n        LegacyMigration.migrateActorOverflow(actorData, updateData);\r\n        LegacyMigration.migrateActorSkills(actorData, updateData);\r\n\r\n        updateData = await this.IterateActorItems(actorData, updateData);\r\n\r\n        return updateData;\r\n    }\r\n\r\n    protected async MigrateItemData(item: BaseEntityData): Promise<any> {\r\n        const updateData = {};\r\n        LegacyMigration.migrateDamageTypeAndElement(item, updateData);\r\n        LegacyMigration.migrateItemsAddActions(item, updateData);\r\n        LegacyMigration.migrateActorOverflow(item, updateData);\r\n        LegacyMigration.migrateItemsAddCapacity(item, updateData);\r\n        LegacyMigration.migrateItemsAmmo(item, updateData);\r\n        LegacyMigration.migrateItemsConceal(item, updateData);\r\n        return updateData;\r\n    }\r\n\r\n    protected async MigrateSceneData(scene: any): Promise<any> {\r\n        return {};\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: ActorData): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    protected async ShouldMigrateItemData(item: BaseEntityData): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Migrate actor overflow from an integer to an object\r\n     * - it wasn't even displayed before so we know it is 0\r\n     * @param actorData\r\n     * @param updateData\r\n     */\r\n    private static migrateActorOverflow(actorData, updateData) {\r\n        if (getProperty(actorData.data, 'track.physical.overflow') === 0) {\r\n            updateData['data.track.physical.overflow.value'] = 0;\r\n            updateData['data.track.physical.overflow.max'] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate actor skills specializations to be a list instead of string\r\n     * @param actorData\r\n     * @param updateData\r\n     */\r\n    private static migrateActorSkills(actorData, updateData) {\r\n        if (!actorData.data?.skills?.active) return;\r\n        const splitRegex = /[,\\/|.]+/;\r\n\r\n        const reducer = (running, [key, val]) => {\r\n            if (!Array.isArray(val.specs) && val.specs) {\r\n                running[key] = {\r\n                    specs: val.specs.split(splitRegex).filter((s) => s !== ''),\r\n                };\r\n            }\r\n            return running;\r\n        };\r\n\r\n        if (actorData.data.skills) {\r\n            updateData['data.skills.active'] = Object.entries(actorData.data.skills.active).reduce(reducer, {});\r\n            if (actorData.data.skills.knowledge) {\r\n                updateData['data.skills.knowledge.street.value'] = Object.entries(actorData.data.skills?.knowledge?.street?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.professional.value'] = Object.entries(actorData.data.skills?.knowledge?.professional?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.academic.value'] = Object.entries(actorData.data.skills?.knowledge?.academic?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.interests.value'] = Object.entries(actorData.data.skills?.knowledge?.interests?.value).reduce(reducer, {});\r\n            }\r\n            if (actorData.data.skills.language) {\r\n                updateData['data.skills.language.value'] = Object.entries(actorData.data.skills?.language?.value).reduce(reducer, {});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateDamageTypeAndElement(item, updateData) {\r\n        // console.log('Migrating Damage and Elements');\r\n        if (item.data.action) {\r\n            const action = item.data.action;\r\n            if (typeof action.damage.type === 'string') {\r\n                updateData['data.action.damage.type.base'] = item.data.action.damage.type;\r\n            }\r\n            if (typeof action.damage.element === 'string') {\r\n                updateData['data.action.damage.element.base'] = item.data.action.damage.element;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate ammo from ranged weapons only to all weapons\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAmmo(item, updateData) {\r\n        // console.log('Migrating Ammo');\r\n        if (item.type === 'weapon' && item.data.ammo === undefined) {\r\n            let currentAmmo = { value: 0, max: 0 };\r\n            if (item.data.category === 'range' && item.data.range && item.data.range.ammo) {\r\n                // copy over ammo count\r\n                const oldAmmo = item.data.range.ammo;\r\n                currentAmmo.value = oldAmmo.value;\r\n                currentAmmo.max = oldAmmo.max;\r\n            }\r\n            updateData['data.ammo'] = {\r\n                spare_clips: {\r\n                    value: 0,\r\n                    max: 0,\r\n                },\r\n                current: {\r\n                    value: currentAmmo.value,\r\n                    max: currentAmmo.max,\r\n                },\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate conceal name\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsConceal(item, updateData) {\r\n        if (item.data.technology?.concealability !== undefined) {\r\n            updateData['data.technology.conceal'] = {\r\n                base: item.data.technology.concealability,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add capacity to items\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAddCapacity(item, updateData) {\r\n        if (['cyberware'].includes(item.type)) {\r\n            if (item.data.capacity === undefined) {\r\n                updateData.data.capacity = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add actions to needed items\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAddActions(item, updateData) {\r\n        if (['quality', 'cyberware'].includes(item.type)) {\r\n            if (item.data.action === undefined) {\r\n                const action = {\r\n                    type: '',\r\n                    category: '',\r\n                    attribute: '',\r\n                    attribute2: '',\r\n                    skill: '',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                    },\r\n                    extended: false,\r\n                    damage: {\r\n                        type: '',\r\n                        element: '',\r\n                        value: 0,\r\n                        ap: {\r\n                            value: 0,\r\n                        },\r\n                        attribute: '',\r\n                    },\r\n                    opposed: {\r\n                        type: '',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                };\r\n                if (!updateData.data) updateData.data = {};\r\n                updateData.data.action = action;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { VersionMigration } from '../VersionMigration';\r\nimport SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\n/**\r\n * Add default value of willpower to the full_defense_attribute field\r\n */\r\nexport class Version0_6_10 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.6.9';\r\n    }\r\n    get TargetVersion(): string {\r\n        return Version0_6_10.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.10';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: SR5ActorData): Promise<any> {\r\n        if (actorData.data?.attributes?.edge === undefined) return {};\r\n        return {\r\n            data: {\r\n                attributes: {\r\n                    edge: {\r\n                        base: actorData.data.attributes.edge.max,\r\n                        value: actorData.data.attributes.edge.max,\r\n                        uses: actorData.data.attributes.edge.value,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: SR5ActorData): Promise<boolean> {\r\n        return actorData.data.attributes.edge.uses === undefined;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n}\r\n","import { VersionMigration } from '../VersionMigration';\r\n\r\n/**\r\n * Add default value of willpower to the full_defense_attribute field\r\n */\r\nexport class Version0_6_5 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.6.4';\r\n    }\r\n    get TargetVersion(): string {\r\n        return Version0_6_5.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.5';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: ActorData): Promise<any> {\r\n        let updateData: any = {};\r\n        if (updateData.data === undefined) updateData.data = {};\r\n        updateData.data.full_defense_attribute = 'willpower';\r\n        return updateData;\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: any): Promise<boolean> {\r\n        return actorData.data.full_defense_attribute === undefined;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n}\r\n","import ModList = Shadowrun.ModList;\r\nimport ModListEntry = Shadowrun.ModListEntry;\r\n\r\nexport class PartsList<TType> {\r\n    get list(): ModList<TType> {\r\n        return this._list.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this._list.length;\r\n    }\r\n\r\n    get total(): number {\r\n        let total = 0;\r\n        for (const part of this._list) {\r\n            if (typeof part.value === 'number') {\r\n                total += part.value;\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getPartValue(name: string): TType | undefined {\r\n        return this._list.find((part) => part.name === name)?.value;\r\n    }\r\n\r\n    clear(): void {\r\n        this._list.length = 0;\r\n    }\r\n\r\n    private _list: ModList<TType>;\r\n\r\n    constructor(parts?: ModList<TType>) {\r\n        let actualParts = [] as ModList<TType>;\r\n        if (parts) {\r\n            if (Array.isArray(parts)) {\r\n                actualParts = parts;\r\n            } else if (typeof parts === 'object') {\r\n                for (const [name, value] of Object.entries(parts)) {\r\n                    if (value !== null && value !== undefined) {\r\n                        // if it's a number, we are dealing with an array as an object\r\n                        if (!isNaN(Number(name)) && typeof value === 'object') {\r\n                            actualParts.push({\r\n                                name: (value as ModListEntry<TType>).name,\r\n                                value: (value as ModListEntry<TType>).value,\r\n                            });\r\n                        } else {\r\n                            actualParts.push({\r\n                                name,\r\n                                value,\r\n                            } as ModListEntry<TType>);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._list = actualParts;\r\n    }\r\n\r\n    addPart(name: string, value: TType): void {\r\n        this._list.push({\r\n            name,\r\n            value,\r\n        });\r\n    }\r\n\r\n    addUniquePart(name: string, value?: TType, overwrite = true): void {\r\n        const index = this._list.findIndex((part) => part.name === name);\r\n        if (index > -1) {\r\n            // if we exist and should've overwrite, return\r\n            if (!overwrite) return;\r\n\r\n            this._list.splice(index, 1);\r\n            // if we are passed undefined, remove the value\r\n            if (value === undefined || value === null) return;\r\n            // recursively go through until we no longer have a part of this name\r\n            this.addUniquePart(name, value);\r\n        } else if (value) {\r\n            this.addPart(name, value);\r\n        }\r\n    }\r\n\r\n    removePart(name: string): boolean {\r\n        const index = this._list.findIndex((part) => part.name === name);\r\n        if (index > -1) {\r\n            this._list.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getMessageOutput() {\r\n        return this.list;\r\n        // const mods = {};\r\n        // for (const part of this._list) {\r\n        //     if (mods[part.name] !== undefined) {\r\n        //     } else {\r\n        //         mods[part.name] = part.value;\r\n        //     }\r\n        // }\r\n        // return mods;\r\n    }\r\n\r\n    static AddUniquePart<TType>(list: ModList<TType>, name: string, value: TType, overwrite = true): ModList<TType> {\r\n        const parts = new PartsList(list);\r\n        parts.addUniquePart(name, value, overwrite);\r\n        return parts._list;\r\n    }\r\n\r\n    static Total(list: ModList<number>) {\r\n        const parts = new PartsList(list);\r\n        return parts.total;\r\n    }\r\n}\r\n","import ModList = Shadowrun.ModList;\r\nimport RollEvent = Shadowrun.RollEvent;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport { Helpers } from '../helpers';\r\nimport { SR5Actor } from '../actor/SR5Actor';\r\nimport { SR5Item } from '../item/SR5Item';\r\nimport { createChatData, TemplateData } from '../chat';\r\nimport { SYSTEM_NAME } from '../constants';\r\nimport { PartsList } from '../parts/PartsList';\r\n\r\nexport interface BasicRollProps {\r\n    name?: string;\r\n    img?: string;\r\n    parts?: ModList<number>;\r\n    limit?: BaseValuePair<number> & LabelField;\r\n    explodeSixes?: boolean;\r\n    title?: string;\r\n    actor?: SR5Actor;\r\n    item?: SR5Item;\r\n    attack?: AttackData;\r\n    incomingAttack?: AttackData;\r\n    incomingDrain?: LabelField & {\r\n        value: number;\r\n    };\r\n    soak?: DamageData;\r\n    tests?: {\r\n        label: string;\r\n        type: string;\r\n    }[];\r\n    description?: object;\r\n    previewTemplate?: boolean;\r\n    hideRollMessage?: boolean;\r\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\r\n}\r\n\r\nexport interface RollDialogOptions {\r\n    environmental?: number | boolean;\r\n    prompt?: boolean;\r\n}\r\n\r\nexport interface AdvancedRollProps extends BasicRollProps {\r\n    event?: RollEvent;\r\n    extended?: boolean;\r\n    wounds?: boolean;\r\n    after?: (roll: Roll | undefined) => void;\r\n    dialogOptions?: RollDialogOptions;\r\n}\r\n\r\nexport class ShadowrunRoll extends Roll {\r\n    templateData: TemplateData | undefined;\r\n    // add class Roll to the json so dice-so-nice works\r\n    toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.class = 'Roll';\r\n        return data;\r\n    }\r\n}\r\n\r\nexport class ShadowrunRoller {\r\n    static itemRoll(event, item: SR5Item, options?: Partial<AdvancedRollProps>): Promise<ShadowrunRoll | undefined> {\r\n        const parts = item.getRollPartsList();\r\n        let limit = item.getLimit();\r\n        let title = item.getRollName();\r\n\r\n        const rollData: AdvancedRollProps = {\r\n            ...options,\r\n            event: event,\r\n            dialogOptions: {\r\n                environmental: true,\r\n            },\r\n            parts,\r\n            actor: item.actor,\r\n            item,\r\n            limit,\r\n            title,\r\n            name: item.name,\r\n            img: item.img,\r\n            previewTemplate: item.hasTemplate,\r\n        };\r\n        rollData['attack'] = item.getAttackData(0);\r\n        rollData['blast'] = item.getBlastData();\r\n\r\n        if (item.hasOpposedRoll) {\r\n            rollData['tests'] = [\r\n                {\r\n                    label: item.getOpposedTestName(),\r\n                    type: 'opposed',\r\n                },\r\n            ];\r\n        }\r\n        if (item.isMeleeWeapon()) {\r\n            rollData['reach'] = item.getReach();\r\n        }\r\n        if (item.isRangedWeapon()) {\r\n            rollData['fireMode'] = item.getLastFireMode()?.label;\r\n            if (rollData.dialogOptions) {\r\n                rollData.dialogOptions.environmental = item.getLastFireRangeMod().value;\r\n            }\r\n        }\r\n        rollData.description = item.getChatData();\r\n\r\n        return ShadowrunRoller.advancedRoll(rollData);\r\n    }\r\n\r\n    static shadowrunFormula({\r\n        parts: partsProps,\r\n        limit,\r\n        explode,\r\n    }: {\r\n        parts: ModList<number>;\r\n        limit?: BaseValuePair<number> & LabelField;\r\n        explode?: boolean;\r\n    }): string {\r\n        const parts = new PartsList(partsProps);\r\n        const count = parts.total;\r\n        if (count <= 0) {\r\n            // @ts-ignore\r\n            ui.notifications.error(game.i18n.localize('SR5.RollOneDie'));\r\n            return '0d6cs>=5';\r\n        }\r\n        let formula = `${count}d6`;\r\n        if (explode) {\r\n            formula += 'x6';\r\n        }\r\n        if (limit?.value) {\r\n            formula += `kh${limit.value}`;\r\n        }\r\n        formula += 'cs>=5';\r\n        return formula;\r\n    }\r\n\r\n    static async basicRoll({\r\n        parts: partsProps = [],\r\n        limit,\r\n        explodeSixes,\r\n        title,\r\n        actor,\r\n        img = actor?.img,\r\n        name = actor?.name,\r\n        hideRollMessage,\r\n        rollMode,\r\n        ...props\r\n    }: BasicRollProps): Promise<ShadowrunRoll | undefined> {\r\n        let roll;\r\n        const parts = new PartsList(partsProps);\r\n        if (parts.length) {\r\n            const formula = this.shadowrunFormula({ parts: parts.list, limit, explode: explodeSixes });\r\n            if (!formula) return;\r\n            roll = new ShadowrunRoll(formula);\r\n            roll.roll();\r\n\r\n            if (game.settings.get(SYSTEM_NAME, 'displayDefaultRollCard')) {\r\n                await roll.toMessage({\r\n                    speaker: ChatMessage.getSpeaker({ actor: actor }),\r\n                    flavor: title,\r\n                    rollMode: rollMode,\r\n                });\r\n            }\r\n        }\r\n\r\n        // start of custom message\r\n        const dice = roll?.parts[0].rolls;\r\n        const token = actor?.token;\r\n\r\n        let glitch = false;\r\n        if (roll !== undefined) {\r\n            let oneCount = 0;\r\n            roll.dice.forEach((die) => {\r\n                die.rolls.forEach((result) => {\r\n                    if (result.roll === 1) {\r\n                        oneCount += 1;\r\n                    }\r\n                });\r\n            });\r\n            glitch = oneCount > Math.floor(parts.total / 2);\r\n        }\r\n\r\n        const templateData = {\r\n            actor: actor,\r\n            header: {\r\n                name: name || '',\r\n                img: img || '',\r\n            },\r\n            tokenId: token ? `${token.scene._id}.${token.id}` : undefined,\r\n            rollMode,\r\n            dice,\r\n            limit,\r\n            testName: title,\r\n            dicePool: parts.total,\r\n            parts: parts.list,\r\n            hits: roll?.total,\r\n            glitch,\r\n            ...props,\r\n        };\r\n\r\n        if (roll) {\r\n            roll.templateData = templateData;\r\n        }\r\n\r\n        if (!hideRollMessage) {\r\n            const chatData = await createChatData(templateData, roll);\r\n            ChatMessage.create(chatData, { displaySheet: false }).then((message) => {\r\n                console.log(message);\r\n            });\r\n        }\r\n        return roll;\r\n    }\r\n\r\n    /**\r\n     * Prompt a roll for the user\r\n     */\r\n    static promptRoll(): Promise<ShadowrunRoll | undefined> {\r\n        const lastRoll = game.user.getFlag(SYSTEM_NAME, 'lastRollPromptValue') || 0;\r\n        const parts = [{ name: 'SR5.LastRoll', value: lastRoll }];\r\n        return ShadowrunRoller.advancedRoll({ parts, title: 'Roll', dialogOptions: { prompt: true } });\r\n    }\r\n\r\n    /**\r\n     * Start an advanced roll\r\n     * - Prompts the user for modifiers\r\n     * @param props\r\n     */\r\n    static advancedRoll(props: AdvancedRollProps): Promise<ShadowrunRoll | undefined> {\r\n        // destructure what we need to use from props\r\n        // any value pulled out needs to be updated back in props if changed\r\n        const { title, actor, parts: partsProps = [], limit, extended, wounds = true, after, dialogOptions } = props;\r\n        const parts = new PartsList(partsProps);\r\n\r\n        // remove limits if game settings is set\r\n        if (!game.settings.get(SYSTEM_NAME, 'applyLimits')) {\r\n            delete props.limit;\r\n        }\r\n\r\n        // TODO create \"fast roll\" option\r\n\r\n        const rollMode = game.settings.get('core', 'rollMode');\r\n\r\n        let dialogData = {\r\n            options: dialogOptions,\r\n            extended,\r\n            dice_pool: parts.total,\r\n            parts: parts.getMessageOutput(),\r\n            limit: limit?.value,\r\n            wounds,\r\n            woundValue: actor?.getWoundModifier(),\r\n            rollMode,\r\n            rollModes: CONFIG.Dice.rollModes,\r\n        };\r\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-dialog.html';\r\n        let edge = false;\r\n        let cancel = true;\r\n\r\n        const buttons = {\r\n            roll: {\r\n                label: game.i18n.localize('SR5.Roll'),\r\n                icon: '<i class=\"fas fa-dice-six\"></i>',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n        if (actor) {\r\n            buttons['edge'] = {\r\n                label: `${game.i18n.localize('SR5.PushTheLimit')} (+${actor.getEdge().value})`,\r\n                icon: '<i class=\"fas fa-bomb\"></i>',\r\n                callback: () => {\r\n                    edge = true;\r\n                    cancel = false;\r\n                },\r\n            };\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            renderTemplate(template, dialogData).then((dlg) => {\r\n                new Dialog({\r\n                    title: title,\r\n                    content: dlg,\r\n                    buttons,\r\n                    default: 'roll',\r\n\r\n                    close: async (html) => {\r\n                        if (cancel) return;\r\n                        // get the actual dice_pool from the difference of initial parts and value in the dialog\r\n\r\n                        const dicePoolValue = Helpers.parseInputToNumber($(html).find('[name=\"dice_pool\"]').val());\r\n\r\n                        if (dialogOptions?.prompt) {\r\n                            parts.clear();\r\n                            await game.user.setFlag(SYSTEM_NAME, 'lastRollPromptValue', dicePoolValue);\r\n                            parts.addUniquePart('SR5.Base', dicePoolValue);\r\n                        }\r\n\r\n                        const limitValue = Helpers.parseInputToNumber($(html).find('[name=\"limit\"]').val());\r\n\r\n                        if (limit && limit.value !== limitValue) {\r\n                            limit.value = limitValue;\r\n                            limit.base = limitValue;\r\n                            limit.label = 'SR5.Override';\r\n                        }\r\n\r\n                        const woundValue = Helpers.parseInputToNumber($(html).find('[name=\"wounds\"]').val());\r\n                        const situationMod = Helpers.parseInputToNumber($(html).find('[name=\"dp_mod\"]').val());\r\n                        const environmentMod = Helpers.parseInputToNumber($(html).find('[name=\"options.environmental\"]').val());\r\n\r\n                        if (wounds && woundValue !== 0) {\r\n                            parts.addUniquePart('SR5.Wounds', woundValue);\r\n                            props.wounds = true;\r\n                        }\r\n                        if (situationMod) {\r\n                            parts.addUniquePart('SR5.SituationalModifier', situationMod);\r\n                        }\r\n                        if (environmentMod) {\r\n                            parts.addUniquePart('SR5.EnvironmentModifier', environmentMod);\r\n                            if (!props.dialogOptions) props.dialogOptions = {};\r\n                            props.dialogOptions.environmental = true;\r\n                        }\r\n\r\n                        const extendedString = Helpers.parseInputToString($(html).find('[name=\"extended\"]').val());\r\n                        const extended = extendedString === 'true';\r\n\r\n                        if (edge && actor) {\r\n                            props.explodeSixes = true;\r\n                            parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\r\n                            delete props.limit;\r\n                            await actor.update({\r\n                                'data.attributes.edge.uses': actor.data.data.attributes.edge.uses - 1,\r\n                            });\r\n                        }\r\n\r\n                        props.rollMode = Helpers.parseInputToString($(html).find('[name=rollMode]').val());\r\n\r\n                        props.parts = parts.list;\r\n                        const r = this.basicRoll({\r\n                            ...props,\r\n                        });\r\n\r\n                        if (extended && r) {\r\n                            const currentExtended = parts.getPartValue('SR5.Extended') ?? 0;\r\n                            parts.addUniquePart('SR5.Extended', currentExtended - 1);\r\n                            props.parts = parts.list;\r\n                            // add a bit of a delay to roll again\r\n                            setTimeout(() => this.advancedRoll(props), 400);\r\n                        }\r\n                        resolve(r);\r\n                        if (after && r) r.then((roll) => after(roll));\r\n                    },\r\n                }).render(true);\r\n            });\r\n        });\r\n    }\r\n}\r\n","// game settings for shadowrun 5e\r\n\r\nimport { VersionMigration } from './migrator/VersionMigration';\r\nimport { FLAGS, SYSTEM_NAME } from './constants';\r\n\r\nexport const registerSystemSettings = () => {\r\n\r\n    /**\r\n     * Register diagonal movement rule setting\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'diagonalMovement', {\r\n        name: 'SETTINGS.DiagonalMovementName',\r\n        hint: 'SETTINGS.DiagonalMovementDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: String,\r\n        default: '1-2-1',\r\n        choices: {\r\n            '1-1-1': 'SETTINGS.IgnoreDiagonal',\r\n            '1-2-1': 'SETTINGS.EstimateDiagonal',\r\n        },\r\n        onChange: (rule) => (canvas.grid.diagonalRule = rule),\r\n    });\r\n\r\n    /**\r\n     * Default limit behavior\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'applyLimits', {\r\n        name: 'SETTINGS.ApplyLimitsName',\r\n        hint: 'SETTINGS.ApplyLimitsDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, 'displayDefaultRollCard', {\r\n        name: 'SETTINGS.DisplayDefaultRollCardName',\r\n        hint: 'SETTINGS.DisplayDefaultRollCardDescription',\r\n        scope: 'user',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false,\r\n    });\r\n\r\n    /**\r\n     * Track system version upon which a migration was last applied\r\n     */\r\n    game.settings.register(SYSTEM_NAME, VersionMigration.KEY_DATA_VERSION, {\r\n        name: 'System Data Version.',\r\n        scope: 'world',\r\n        config: false,\r\n        type: String,\r\n        default: '0',\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowGlitchAnimation, {\r\n        name: 'SETTINGS.ShowGlitchAnimationName',\r\n        hint: 'SETTINGS.ShowGlitchAnimationDescription',\r\n        scope: 'user',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    })\r\n};\r\n","import { SR5Item } from './item/SR5Item';\r\n\r\nexport type ShadowrunTemplateData = {\r\n    t: string;\r\n    user: User | string;\r\n    distance: number;\r\n    x: number;\r\n    y: number;\r\n    fillColor: string;\r\n    direction: number;\r\n};\r\n\r\nexport default // @ts-ignore\r\nclass Template extends MeasuredTemplate {\r\n    data: ShadowrunTemplateData;\r\n    layer: PlaceablesLayer;\r\n    x: number;\r\n    y: number;\r\n    item?: SR5Item;\r\n    onComplete?: () => void;\r\n\r\n    static fromItem(item: SR5Item, onComplete?: () => void): Template | undefined {\r\n        const templateShape = 'circle';\r\n\r\n        const templateData = {\r\n            t: templateShape,\r\n            user: game.user._id,\r\n            direction: 0,\r\n            x: 0,\r\n            y: 0,\r\n            // @ts-ignore\r\n            fillColor: game.user.color,\r\n        };\r\n        const blast = item.getBlastData();\r\n        templateData['distance'] = blast?.radius;\r\n        templateData['dropoff'] = blast?.dropoff;\r\n\r\n        // @ts-ignore\r\n        const template = new this(templateData);\r\n        template.item = item;\r\n        template.onComplete = onComplete;\r\n        return template;\r\n    }\r\n\r\n    drawPreview() {\r\n        const initialLayer = canvas.activeLayer;\r\n        // @ts-ignore\r\n        this.draw();\r\n        // @ts-ignore\r\n        this.layer.activate();\r\n        // @ts-ignore\r\n        this.layer.preview.addChild(this);\r\n        this.activatePreviewListeners(initialLayer);\r\n    }\r\n\r\n    activatePreviewListeners(initialLayer: CanvasLayer) {\r\n        const handlers = {};\r\n        let moveTime = 0;\r\n\r\n        // Update placement (mouse-move)\r\n        handlers['mm'] = (event) => {\r\n            event.stopPropagation();\r\n            let now = Date.now(); // Apply a 20ms throttle\r\n            if (now - moveTime <= 20) return;\r\n            const center = event.data.getLocalPosition(this.layer);\r\n            const snapped = canvas.grid.getSnappedPosition(center.x, center.y, 2);\r\n            this.data.x = snapped.x;\r\n            this.data.y = snapped.y;\r\n            // @ts-ignore\r\n            this.refresh();\r\n            moveTime = now;\r\n        };\r\n\r\n        // Cancel the workflow (right-click)\r\n        handlers['rc'] = () => {\r\n            this.layer.preview.removeChildren();\r\n            canvas.stage.off('mousemove', handlers['mm']);\r\n            canvas.stage.off('mousedown', handlers['lc']);\r\n            canvas.app.view.oncontextmenu = null;\r\n            canvas.app.view.onwheel = null;\r\n            initialLayer.activate();\r\n\r\n            if (this.onComplete) this.onComplete();\r\n        };\r\n\r\n        // Confirm the workflow (left-click)\r\n        handlers['lc'] = (event) => {\r\n            handlers['rc'](event);\r\n\r\n            // Confirm final snapped position\r\n            const destination = canvas.grid.getSnappedPosition(this.x, this.y, 2);\r\n            this.data.x = destination.x;\r\n            this.data.y = destination.y;\r\n\r\n            // Create the template\r\n            canvas.scene.createEmbeddedEntity('MeasuredTemplate', this.data);\r\n        };\r\n\r\n        // Rotate the template by 3 degree increments (mouse-wheel)\r\n        handlers['mw'] = (event) => {\r\n            if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\r\n            event.stopPropagation();\r\n            let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\r\n            let snap = event.shiftKey ? delta : 5;\r\n            this.data.direction += snap * Math.sign(event.deltaY);\r\n            // @ts-ignore\r\n            this.refresh();\r\n        };\r\n\r\n        // Activate listeners\r\n        canvas.stage.on('mousemove', handlers['mm']);\r\n        canvas.stage.on('mousedown', handlers['lc']);\r\n        canvas.app.view.oncontextmenu = handlers['rc'];\r\n        canvas.app.view.onwheel = handlers['mw'];\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}