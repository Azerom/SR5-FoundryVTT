{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/get.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/superPropBase.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/regenerator-runtime/runtime.js","src/module/actor/SR5Actor.ts","src/module/actor/SR5ActorSheet.ts","src/module/actor/prep/ActorPrepFactory.ts","src/module/actor/prep/BaseActorPrep.ts","src/module/actor/prep/CharacterPrep.ts","src/module/actor/prep/SpiritPrep.ts","src/module/actor/prep/functions/AttributesPrep.ts","src/module/actor/prep/functions/ConditionMonitorsPrep.ts","src/module/actor/prep/functions/InitiativePrep.ts","src/module/actor/prep/functions/ItemPrep.ts","src/module/actor/prep/functions/LimitsPrep.ts","src/module/actor/prep/functions/MatrixPrep.ts","src/module/actor/prep/functions/ModifiersPrep.ts","src/module/actor/prep/functions/MovementPrep.ts","src/module/actor/prep/functions/SkillsPrep.ts","src/module/actor/prep/functions/WoundsPrep.ts","src/module/apps/chummer-import-form.js","src/module/apps/dialogs/ShadowrunItemDialog.ts","src/module/apps/gmtools/OverwatchScoreTracker.js","src/module/apps/skills/KnowledgeSkillEditForm.ts","src/module/apps/skills/LanguageSkillEditForm.ts","src/module/apps/skills/SkillEditForm.ts","src/module/canvas.ts","src/module/chat.ts","src/module/combat.ts","src/module/config.ts","src/module/constants.ts","src/module/dataWrappers/DataWrapper.ts","src/module/handlebars/BasicHelpers.ts","src/module/handlebars/HandlebarManager.ts","src/module/handlebars/HandlebarTemplates.ts","src/module/handlebars/ItemLineHelpers.ts","src/module/handlebars/RollAndLabelHelpers.ts","src/module/handlebars/SkillLineHelpers.ts","src/module/helpers.ts","src/module/item/ChatData.ts","src/module/item/SR5Item.ts","src/module/item/SR5ItemDataWrapper.ts","src/module/item/SR5ItemSheet.ts","src/module/main.ts","src/module/migrator/Migrator.ts","src/module/migrator/VersionMigration.ts","src/module/migrator/versions/LegacyMigration.ts","src/module/migrator/versions/Version0_6_10.ts","src/module/migrator/versions/Version0_6_5.ts","src/module/parts/PartsList.ts","src/module/rolls/ShadowrunRoller.ts","src/module/settings.ts","src/module/template.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChztBA,8DAA2D;AAC3D,wCAAqC;AAarC,4CAA2C;AAE3C,kDAA+C;AAC/C,8DAA2D;AAK3D,MAAa,QAAS,SAAQ,KAAK;IACzB,MAAM,CAAC,IAAI,EAAE,OAAQ;;;;;YACvB,MAAM,OAAM,MAAM,YAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAClC,2CAA2C;YAC3C,sEAAsE;YAC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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { ShadowrunRoller } from '../rolls/ShadowrunRoller';\r\nimport { Helpers } from '../helpers';\r\nimport { SR5Item } from '../item/SR5Item';\r\nimport ActorRollOptions = Shadowrun.ActorRollOptions;\r\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\r\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillRollOptions = Shadowrun.SkillRollOptions;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport ModList = Shadowrun.ModList;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport { SYSTEM_NAME } from '../constants';\r\nimport SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { PartsList } from '../parts/PartsList';\r\nimport { ActorPrepFactory } from './prep/ActorPrepFactory';\r\nimport DamageData = Shadowrun.DamageData;\r\nimport DamageElement = Shadowrun.DamageElement;\r\nimport EdgeAttributeField = Shadowrun.EdgeAttributeField;\r\n\r\nexport class SR5Actor extends Actor {\r\n    async update(data, options?) {\r\n        await super.update(data, options);\r\n        // trigger update for all items with action\r\n        // needed for rolls to properly update when items or attributes update\r\n        const itemUpdates: Item[] = [];\r\n        // @ts-ignore\r\n        for (let item of this.data.items) {\r\n            if (item && item.data.action) {\r\n                itemUpdates.push(item);\r\n            }\r\n        }\r\n        await this.updateEmbeddedEntity('OwnedItem', itemUpdates);\r\n        return this;\r\n    }\r\n\r\n    getOverwatchScore() {\r\n        const os = this.getFlag(SYSTEM_NAME, 'overwatchScore');\r\n        return os !== undefined ? os : 0;\r\n    }\r\n\r\n    async setOverwatchScore(value) {\r\n        const num = parseInt(value);\r\n        if (!isNaN(num)) {\r\n            return this.setFlag(SYSTEM_NAME, 'overwatchScore', num);\r\n        }\r\n    }\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n\r\n        const actorData = this.data as SR5ActorType;\r\n        const prepper = ActorPrepFactory.Create(actorData);\r\n        if (prepper) {\r\n            prepper.prepare();\r\n        }\r\n    }\r\n\r\n    getModifier(modifierName: string): number | undefined {\r\n        return this.data.data.modifiers[modifierName];\r\n    }\r\n\r\n    findActiveSkill(skillName?: string): SkillField | undefined {\r\n        if (skillName === undefined) return undefined;\r\n        return this.data.data.skills.active[skillName];\r\n    }\r\n\r\n    findAttribute(attributeName?: string): AttributeField | undefined {\r\n        if (attributeName === undefined) return undefined;\r\n        return this.data.data.attributes[attributeName];\r\n    }\r\n\r\n    getEquippedMatrixDevice(): SR5Item | undefined {\r\n        return this.items.find((item: SR5Item) => item.isDevice());\r\n    }\r\n\r\n    getEquippedArmor(): SR5Item[] | undefined {\r\n        return this.items.filter((item: SR5Item) => item.isArmor());\r\n    }\r\n\r\n    findLimitFromAttribute(attributeName?: string): LimitField | undefined {\r\n        if (attributeName === undefined) return undefined;\r\n        const attribute = this.findAttribute(attributeName);\r\n        if (!attribute?.limit) return undefined;\r\n        return this.findLimit(attribute.limit);\r\n    }\r\n\r\n    findLimit(limitName?: string): LimitField | undefined {\r\n        if (!limitName) return undefined;\r\n        return this.data.data.limits[limitName];\r\n    }\r\n\r\n    getWoundModifier(): number {\r\n        return -1 * this.data.data.wounds?.value || 0;\r\n    }\r\n\r\n    getEdge(): EdgeAttributeField {\r\n        return this.data.data.attributes.edge;\r\n    }\r\n\r\n    getArmor(): BaseValuePair<number> & ModifiableValue & LabelField {\r\n        return this.data.data.armor;\r\n    }\r\n\r\n    getOwnedItem(itemId: string): SR5Item | null {\r\n        return (super.getOwnedItem(itemId) as unknown) as SR5Item;\r\n    }\r\n\r\n    getMatrixDevice(): SR5Item | undefined | null {\r\n        const matrix = this.data.data.matrix;\r\n        if (matrix.device) return this.getOwnedItem(matrix.device);\r\n        return undefined;\r\n    }\r\n\r\n    getFullDefenseAttribute(): AttributeField | undefined {\r\n        let att = this.data.data.full_defense_attribute;\r\n        if (!att) att = 'willpower';\r\n        return this.findAttribute(att);\r\n    }\r\n\r\n    getEquippedWeapons(): SR5Item[] {\r\n        return this.items.filter((item) => item.isEquipped() && item.data.type === 'weapon');\r\n    }\r\n\r\n    getRecoilCompensation(): number {\r\n        let total = 1; // always get 1\r\n        const strength = this.findAttribute('strength');\r\n        if (strength) {\r\n            total += Math.ceil(strength.value / 3);\r\n        }\r\n        return total;\r\n    }\r\n\r\n    addKnowledgeSkill(category, skill?) {\r\n        const defaultSkill = {\r\n            name: '',\r\n            specs: [],\r\n            base: 0,\r\n            value: 0,\r\n            mod: 0,\r\n        };\r\n        skill = {\r\n            ...defaultSkill,\r\n            ...skill,\r\n        };\r\n\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `data.skills.knowledge.${category}.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n        this.update(updateData);\r\n    }\r\n\r\n    removeLanguageSkill(skillId) {\r\n        const value = {};\r\n        value[skillId] = { _delete: true };\r\n        this.update({ 'data.skills.language.value': value });\r\n    }\r\n\r\n    addLanguageSkill(skill) {\r\n        const defaultSkill = {\r\n            name: '',\r\n            specs: [],\r\n            base: 0,\r\n            value: 0,\r\n            mod: 0,\r\n        };\r\n        skill = {\r\n            ...defaultSkill,\r\n            ...skill,\r\n        };\r\n\r\n        const id = randomID(16);\r\n        const value = {};\r\n        value[id] = skill;\r\n        const fieldName = `data.skills.language.value`;\r\n        const updateData = {};\r\n        updateData[fieldName] = value;\r\n        this.update(updateData);\r\n    }\r\n\r\n    removeKnowledgeSkill(skillId, category) {\r\n        const value = {};\r\n        const updateData = {};\r\n\r\n        const dataString = `data.skills.knowledge.${category}.value`;\r\n        value[skillId] = { _delete: true };\r\n        updateData[dataString] = value;\r\n\r\n        this.update(updateData);\r\n    }\r\n\r\n    rollFade(options: ActorRollOptions = {}, incoming = -1) {\r\n        const wil = duplicate(this.data.data.attributes.willpower);\r\n        const res = duplicate(this.data.data.attributes.resonance);\r\n        const data = this.data.data;\r\n\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(wil.label, wil.value);\r\n        parts.addUniquePart(res.label, res.value);\r\n        if (data.modifiers.fade) parts.addUniquePart('SR5.Bonus', data.modifiers.fade);\r\n\r\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Fade')}`;\r\n        const incomingDrain = {\r\n            label: 'SR5.Fade',\r\n            value: incoming,\r\n        };\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            parts: parts.list,\r\n            actor: this,\r\n            title: title,\r\n            wounds: false,\r\n            incomingDrain,\r\n        });\r\n    }\r\n\r\n    rollDrain(options: ActorRollOptions = {}, incoming = -1) {\r\n        const wil = duplicate(this.data.data.attributes.willpower);\r\n        const drainAtt = duplicate(this.data.data.attributes[this.data.data.magic.attribute]);\r\n\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(wil.label, wil.value);\r\n        parts.addPart(drainAtt.label, drainAtt.value);\r\n        if (this.data.data.modifiers.drain) parts.addUniquePart('SR5.Bonus', this.data.data.modifiers.drain);\r\n\r\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Drain')}`;\r\n        const incomingDrain = {\r\n            label: 'SR5.Drain',\r\n            value: incoming,\r\n        };\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            parts: parts.list,\r\n            actor: this,\r\n            title: title,\r\n            wounds: false,\r\n            incomingDrain,\r\n        });\r\n    }\r\n\r\n    rollArmor(options: ActorRollOptions = {}, partsProps: ModList<number> = []) {\r\n        const parts = new PartsList(partsProps);\r\n        this._addArmorParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: game.i18n.localize('SR5.Armor'),\r\n            wounds: false,\r\n        });\r\n    }\r\n\r\n    rollDefense(options: DefenseRollOptions = {}, partsProps: ModList<number> = []) {\r\n        const parts = new PartsList(partsProps);\r\n        this._addDefenseParts(parts);\r\n        // full defense is always added\r\n        const activeDefenses = {\r\n            full_defense: {\r\n                label: 'SR5.FullDefense',\r\n                value: this.getFullDefenseAttribute()?.value,\r\n                initMod: -10,\r\n            },\r\n        };\r\n        // if we have a melee attack\r\n        if (options.incomingAttack?.reach) {\r\n            activeDefenses['dodge'] = {\r\n                label: 'SR5.Dodge',\r\n                value: this.findActiveSkill('gymnastics')?.value,\r\n                initMod: -5,\r\n            };\r\n            activeDefenses['block'] = {\r\n                label: 'SR5.Block',\r\n                value: this.findActiveSkill('unarmed_combat')?.value,\r\n                initMod: -5,\r\n            };\r\n            const equippedMeleeWeapons = this.getEquippedWeapons().filter((w) => w.isMeleeWeapon());\r\n            let defenseReach = 0;\r\n            equippedMeleeWeapons.forEach((weapon) => {\r\n                activeDefenses[`parry-${weapon.name}`] = {\r\n                    label: 'SR5.Parry',\r\n                    weapon: weapon.name,\r\n                    value: this.findActiveSkill(weapon.getActionSkill())?.value,\r\n                    init: -5,\r\n                };\r\n                defenseReach = Math.max(defenseReach, weapon.getReach());\r\n            });\r\n            const incomingReach = options.incomingAttack.reach;\r\n            const netReach = defenseReach - incomingReach;\r\n            if (netReach !== 0) {\r\n                parts.addUniquePart('SR5.Reach', netReach);\r\n            }\r\n        }\r\n        let dialogData = {\r\n            parts: parts.getMessageOutput(),\r\n            cover: options.cover,\r\n            activeDefenses,\r\n        };\r\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-defense.html';\r\n        let cancel = true;\r\n        const incomingAttack = options.incomingAttack;\r\n        const event = options.event;\r\n        return new Promise((resolve) => {\r\n            renderTemplate(template, dialogData).then((dlg) => {\r\n                new Dialog({\r\n                    title: game.i18n.localize('SR5.Defense'),\r\n                    content: dlg,\r\n                    buttons: {\r\n                        continue: {\r\n                            label: game.i18n.localize('SR5.Continue'),\r\n                            callback: () => (cancel = false),\r\n                        },\r\n                    },\r\n                    default: 'normal',\r\n                    close: async (html) => {\r\n                        if (cancel) return;\r\n                        let cover = Helpers.parseInputToNumber($(html).find('[name=cover]').val());\r\n                        let special = Helpers.parseInputToString($(html).find('[name=activeDefense]').val());\r\n                        if (special) {\r\n                            // TODO subtract initiative score when Foundry updates to 0.7.0\r\n                            const defense = activeDefenses[special];\r\n                            parts.addUniquePart(defense.label, defense.value);\r\n                        }\r\n                        if (cover) parts.addUniquePart('SR5.Cover', cover);\r\n\r\n                        resolve(\r\n                            ShadowrunRoller.advancedRoll({\r\n                                event: event,\r\n                                actor: this,\r\n                                parts: parts.list,\r\n                                title: game.i18n.localize('SR5.DefenseTest'),\r\n                                incomingAttack,\r\n                            }).then(async (roll: Roll | undefined) => {\r\n                                if (incomingAttack && roll) {\r\n                                    let defenderHits = roll.total;\r\n                                    let attackerHits = incomingAttack.hits || 0;\r\n                                    let netHits = attackerHits - defenderHits;\r\n\r\n                                    if (netHits >= 0) {\r\n                                        const damage = incomingAttack.damage;\r\n                                        damage.mod = PartsList.AddUniquePart(damage.mod, 'SR5.NetHits', netHits);\r\n                                        damage.value = Helpers.calcTotal(damage);\r\n\r\n                                        const soakRollOptions = {\r\n                                            event: event,\r\n                                            damage: damage,\r\n                                        };\r\n                                        await this.rollSoak(soakRollOptions);\r\n                                    }\r\n                                }\r\n                            }),\r\n                        );\r\n                    },\r\n                }).render(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    rollSoak(options?: SoakRollOptions, partsProps: ModList<number> = []) {\r\n        const parts = new PartsList(partsProps);\r\n        this._addSoakParts(parts);\r\n        let dialogData = {\r\n            damage: options?.damage,\r\n            parts: parts.getMessageOutput(),\r\n            elementTypes: CONFIG.SR5.elementTypes,\r\n        };\r\n        let id = '';\r\n        let cancel = true;\r\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-soak.html';\r\n        return new Promise((resolve) => {\r\n            renderTemplate(template, dialogData).then((dlg) => {\r\n                new Dialog({\r\n                    title: game.i18n.localize('SR5.DamageResistanceTest'),\r\n                    content: dlg,\r\n                    buttons: {\r\n                        continue: {\r\n                            label: game.i18n.localize('SR5.Continue'),\r\n                            callback: () => {\r\n                                id = 'default';\r\n                                cancel = false;\r\n                            },\r\n                        },\r\n                    },\r\n                    close: async (html) => {\r\n                        if (cancel) return;\r\n\r\n                        const soak: DamageData = options?.damage\r\n                            ? options.damage\r\n                            : {\r\n                                  base: 0,\r\n                                  value: 0,\r\n                                  mod: [],\r\n                                  ap: {\r\n                                      base: 0,\r\n                                      value: 0,\r\n                                      mod: [],\r\n                                  },\r\n                                  attribute: '' as const,\r\n                                  type: {\r\n                                      base: '',\r\n                                      value: '',\r\n                                  },\r\n                                  element: {\r\n                                      base: '',\r\n                                      value: '',\r\n                                  },\r\n                              };\r\n\r\n                        const armor = this.getArmor();\r\n\r\n                        // handle element changes\r\n                        const element = Helpers.parseInputToString($(html).find('[name=element]').val());\r\n                        if (element) {\r\n                            soak.element.value = element as DamageElement;\r\n                        }\r\n                        const bonusArmor = armor[element] ?? 0;\r\n                        if (bonusArmor) {\r\n                            parts.addUniquePart(CONFIG.SR5.elementTypes[element], bonusArmor);\r\n                        }\r\n\r\n                        // handle ap changes\r\n                        const ap = Helpers.parseInputToNumber($(html).find('[name=ap]').val());\r\n                        if (ap) {\r\n                            let armorVal = armor.value + bonusArmor;\r\n\r\n                            // don't take more AP than armor\r\n                            parts.addUniquePart('SR5.AP', Math.max(ap, -armorVal));\r\n                        }\r\n\r\n                        // handle incoming damage changes\r\n                        const incomingDamage = Helpers.parseInputToNumber($(html).find('[name=incomingDamage]').val());\r\n                        if (incomingDamage) {\r\n                            const totalDamage = Helpers.calcTotal(soak);\r\n                            if (totalDamage !== incomingDamage) {\r\n                                const diff = incomingDamage - totalDamage;\r\n                                // add part and calc total again\r\n                                soak.mod = PartsList.AddUniquePart(soak.mod, 'SR5.UserInput', diff);\r\n                                soak.value = Helpers.calcTotal(soak);\r\n                                console.log(soak);\r\n                            }\r\n                            console.log(soak);\r\n\r\n                            const totalAp = Helpers.calcTotal(soak.ap);\r\n                            if (totalAp !== ap) {\r\n                                const diff = ap - totalAp;\r\n                                // add part and calc total\r\n                                soak.ap.mod = PartsList.AddUniquePart(soak.ap.mod, 'SR5.UserInput', diff);\r\n                                soak.ap.value = Helpers.calcTotal(soak.ap);\r\n                            }\r\n                        }\r\n\r\n                        let title = game.i18n.localize('SR5.SoakTest');\r\n                        resolve(\r\n                            ShadowrunRoller.advancedRoll({\r\n                                event: options?.event,\r\n                                actor: this,\r\n                                soak: soak,\r\n                                parts: parts.list,\r\n                                title: title,\r\n                                wounds: false,\r\n                            }),\r\n                        );\r\n                    },\r\n                }).render(true);\r\n            });\r\n        });\r\n    }\r\n\r\n    rollSingleAttribute(attId, options: ActorRollOptions) {\r\n        const attr = duplicate(this.data.data.attributes[attId]);\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(attr.label, attr.value);\r\n        this._addMatrixParts(parts, attr);\r\n        this._addGlobalParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: Helpers.label(attId),\r\n        });\r\n    }\r\n\r\n    rollTwoAttributes([id1, id2], options: ActorRollOptions) {\r\n        const attr1 = duplicate(this.data.data.attributes[id1]);\r\n        const attr2 = duplicate(this.data.data.attributes[id2]);\r\n        const label1 = Helpers.label(id1);\r\n        const label2 = Helpers.label(id2);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(attr1.label, attr1.value);\r\n        parts.addPart(attr2.label, attr2.value);\r\n        this._addMatrixParts(parts, [attr1, attr2]);\r\n        this._addGlobalParts(parts);\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: `${label1} + ${label2}`,\r\n        });\r\n    }\r\n\r\n    rollNaturalRecovery(track, options?: ActorRollOptions) {\r\n        let id1 = 'body';\r\n        let id2 = 'willpower';\r\n        let title = 'Natural Recover';\r\n        if (track === 'physical') {\r\n            id2 = 'body';\r\n            title += ' - Physical - 1 Day';\r\n        } else {\r\n            title += ' - Stun - 1 Hour';\r\n        }\r\n        let att1 = duplicate(this.data.data.attributes[id1]);\r\n        let att2 = duplicate(this.data.data.attributes[id2]);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(att1.label, att1.value);\r\n        parts.addPart(att2.label, att2.value);\r\n\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: title,\r\n            extended: true,\r\n            after: async (roll: Roll | undefined) => {\r\n                if (!roll) return;\r\n                let hits = roll.total;\r\n                let current = this.data.data.track[track].value;\r\n\r\n                current = Math.max(current - hits, 0);\r\n\r\n                let key = `data.track.${track}.value`;\r\n\r\n                let u = {};\r\n                u[key] = current;\r\n                await this.update(u);\r\n            },\r\n        });\r\n    }\r\n\r\n    async rollMatrixAttribute(attr, options?: ActorRollOptions) {\r\n        let matrix_att = duplicate(this.data.data.matrix[attr]);\r\n        let title = game.i18n.localize(CONFIG.SR5.matrixAttributes[attr]);\r\n        const parts = new PartsList<number>();\r\n        parts.addPart(CONFIG.SR5.matrixAttributes[attr], matrix_att.value);\r\n\r\n        if (options && options.event && options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\r\n        if (Helpers.hasModifiers(options?.event)) {\r\n            return ShadowrunRoller.advancedRoll({\r\n                event: options?.event,\r\n                actor: this,\r\n                parts: parts.list,\r\n                title: title,\r\n            });\r\n        }\r\n        const attributes = Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0);\r\n        const attribute = 'willpower';\r\n\r\n        let dialogData = {\r\n            attribute: attribute,\r\n            attributes: attributes,\r\n        };\r\n        const buttons = {\r\n            roll: {\r\n                label: 'Continue',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n\r\n        let cancel = true;\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/matrix-roll.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Test`,\r\n                content: dlg,\r\n                buttons: buttons,\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=attribute]').val());\r\n                    let att: AttributeField | undefined = undefined;\r\n                    if (newAtt) {\r\n                        att = this.data.data.attributes[newAtt];\r\n                        title += ` + ${game.i18n.localize(CONFIG.SR5.attributes[newAtt])}`;\r\n                    }\r\n                    if (att !== undefined) {\r\n                        if (att.value && att.label) parts.addPart(att.label, att.value);\r\n                        this._addMatrixParts(parts, true);\r\n                        this._addGlobalParts(parts);\r\n                        return ShadowrunRoller.advancedRoll({\r\n                            event: options?.event,\r\n                            actor: this,\r\n                            parts: parts.list,\r\n                            title: title,\r\n                        });\r\n                    }\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    promptRoll(options?: ActorRollOptions) {\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            title: 'Roll',\r\n            parts: [],\r\n            actor: this,\r\n            dialogOptions: {\r\n                prompt: true,\r\n            },\r\n        });\r\n    }\r\n\r\n    rollAttributesTest(rollId, options?: ActorRollOptions) {\r\n        const title = game.i18n.localize(CONFIG.SR5.attributeRolls[rollId]);\r\n        const atts = this.data.data.attributes;\r\n        const modifiers = this.data.data.modifiers;\r\n        const parts = new PartsList<number>();\r\n        if (rollId === 'composure') {\r\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\r\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\r\n            if (modifiers.composure) parts.addUniquePart('SR5.Bonus', modifiers.composure);\r\n        } else if (rollId === 'judge_intentions') {\r\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\r\n            parts.addUniquePart(atts.intuition.label, atts.intuition.value);\r\n            if (modifiers.judge_intentions) parts.addUniquePart('SR5.Bonus', modifiers.judge_intentions);\r\n        } else if (rollId === 'lift_carry') {\r\n            parts.addUniquePart(atts.strength.label, atts.strength.value);\r\n            parts.addUniquePart(atts.body.label, atts.body.value);\r\n            if (modifiers.lift_carry) parts.addUniquePart('SR5.Bonus', modifiers.lift_carry);\r\n        } else if (rollId === 'memory') {\r\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\r\n            parts.addUniquePart(atts.logic.label, atts.logic.value);\r\n            if (modifiers.memory) parts.addUniquePart('SR5.Bonus', modifiers.memory);\r\n        }\r\n\r\n        return ShadowrunRoller.advancedRoll({\r\n            event: options?.event,\r\n            actor: this,\r\n            parts: parts.list,\r\n            title: `${title} Test`,\r\n        });\r\n    }\r\n\r\n    rollSkill(skill, options?: SkillRollOptions) {\r\n        let att = duplicate(this.data.data.attributes[skill.attribute]);\r\n        let title = game.i18n.localize(skill.label);\r\n\r\n        if (options?.attribute) att = this.data.data.attributes[options.attribute];\r\n        let limit = this.data.data.limits[att.limit];\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(skill.label, skill.value);\r\n\r\n        if (options?.event && Helpers.hasModifiers(options?.event)) {\r\n            parts.addUniquePart(att.label, att.value);\r\n            if (options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\r\n\r\n            this._addMatrixParts(parts, [att, skill]);\r\n            this._addGlobalParts(parts);\r\n            return ShadowrunRoller.advancedRoll({\r\n                event: options.event,\r\n                actor: this,\r\n                parts: parts.list,\r\n                limit,\r\n                title: `${title} Test`,\r\n            });\r\n        }\r\n        let dialogData = {\r\n            attribute: skill.attribute,\r\n            attributes: Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0),\r\n            limit: att.limit,\r\n            limits: this.data.data.limits,\r\n        };\r\n        let cancel = true;\r\n        let spec = '';\r\n\r\n        let buttons = {\r\n            roll: {\r\n                label: 'Normal',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n        // add specializations to dialog as buttons\r\n        if (skill.specs?.length) {\r\n            skill.specs.forEach(\r\n                (s) =>\r\n                    (buttons[s] = {\r\n                        label: s,\r\n                        callback: () => {\r\n                            cancel = false;\r\n                            spec = s;\r\n                        },\r\n                    }),\r\n            );\r\n        }\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/skill-roll.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Test`,\r\n                content: dlg,\r\n                buttons,\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=\"attribute\"]').val());\r\n                    const newLimit = Helpers.parseInputToString($(html).find('[name=\"attribute.limit\"]').val());\r\n                    att = this.data.data.attributes[newAtt];\r\n                    title += ` + ${game.i18n.localize(CONFIG.SR5.attributes[newAtt])}`;\r\n                    limit = this.data.data.limits[newLimit];\r\n                    parts.addUniquePart(att.label, att.value);\r\n                    if (skill.value === 0) parts.addUniquePart('SR5.Defaulting', -1);\r\n                    if (spec) parts.addUniquePart('SR5.Specialization', 2);\r\n                    this._addMatrixParts(parts, [att, skill]);\r\n                    this._addGlobalParts(parts);\r\n                    return ShadowrunRoller.advancedRoll({\r\n                        event: options?.event,\r\n                        actor: this,\r\n                        parts: parts.list,\r\n                        limit,\r\n                        title: `${title} Test`,\r\n                    });\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    rollKnowledgeSkill(catId: string, skillId: string, options?: SkillRollOptions) {\r\n        const category = duplicate(this.data.data.skills.knowledge[catId]);\r\n        const skill = duplicate(category.value[skillId]);\r\n        skill.attribute = category.attribute;\r\n        skill.label = skill.name;\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollLanguageSkill(skillId: string, options?: SkillRollOptions) {\r\n        const skill = duplicate(this.data.data.skills.language.value[skillId]);\r\n        skill.attribute = 'intuition';\r\n        skill.label = skill.name;\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollActiveSkill(skillId: string, options?: SkillRollOptions) {\r\n        const skill = duplicate(this.data.data.skills.active[skillId]);\r\n        return this.rollSkill(skill, options);\r\n    }\r\n\r\n    rollAttribute(attId, options?: ActorRollOptions) {\r\n        let title = game.i18n.localize(CONFIG.SR5.attributes[attId]);\r\n        const att = duplicate(this.data.data.attributes[attId]);\r\n        const atts = duplicate(this.data.data.attributes);\r\n        const parts = new PartsList<number>();\r\n        parts.addUniquePart(att.label, att.value);\r\n        let dialogData = {\r\n            attribute: att,\r\n            attributes: atts,\r\n        };\r\n        let cancel = true;\r\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/single-attribute.html', dialogData).then((dlg) => {\r\n            new Dialog({\r\n                title: `${title} Attribute Test`,\r\n                content: dlg,\r\n                buttons: {\r\n                    roll: {\r\n                        label: 'Continue',\r\n                        callback: () => (cancel = false),\r\n                    },\r\n                },\r\n                default: 'roll',\r\n                close: async (html) => {\r\n                    if (cancel) return;\r\n\r\n                    const att2Id: string = Helpers.parseInputToString($(html).find('[name=attribute2]').val());\r\n                    let att2: AttributeField | undefined = undefined;\r\n                    if (att2Id !== 'none') {\r\n                        att2 = atts[att2Id];\r\n                        if (att2?.label) {\r\n                            parts.addUniquePart(att2.label, att2.value);\r\n                            const att2IdLabel = game.i18n.localize(CONFIG.SR5.attributes[att2Id]);\r\n                            title += ` + ${att2IdLabel}`;\r\n                        }\r\n                    }\r\n                    if (att2Id === 'default') {\r\n                        parts.addUniquePart('SR5.Defaulting', -1);\r\n                    }\r\n                    this._addMatrixParts(parts, [att, att2]);\r\n                    this._addGlobalParts(parts);\r\n                    return ShadowrunRoller.advancedRoll({\r\n                        event: options?.event,\r\n                        title: `${title} Test`,\r\n                        actor: this,\r\n                        parts: parts.list,\r\n                    });\r\n                },\r\n            }).render(true);\r\n        });\r\n    }\r\n\r\n    _addMatrixParts(parts: PartsList<number>, atts) {\r\n        if (Helpers.isMatrix(atts)) {\r\n            const m = this.data.data.matrix;\r\n            if (m.hot_sim) parts.addUniquePart('SR5.HotSim', 2);\r\n            if (m.running_silent) parts.addUniquePart('SR5.RunningSilent', -2);\r\n        }\r\n    }\r\n    _addGlobalParts(parts: PartsList<number>) {\r\n        if (this.data.data.modifiers.global) {\r\n            parts.addUniquePart('SR5.Global', this.data.data.modifiers.global);\r\n        }\r\n    }\r\n\r\n    _addDefenseParts(parts: PartsList<number>) {\r\n        const reaction = this.findAttribute('reaction');\r\n        const intuition = this.findAttribute('intuition');\r\n        const mod = this.getModifier('defense');\r\n\r\n        if (reaction) {\r\n            parts.addUniquePart(reaction.label || 'SR5.Reaction', reaction.value);\r\n        }\r\n        if (intuition) {\r\n            parts.addUniquePart(intuition.label || 'SR5.Intuition', intuition.value);\r\n        }\r\n        if (mod) {\r\n            parts.addUniquePart('SR5.Bonus', mod);\r\n        }\r\n    }\r\n\r\n    _addArmorParts(parts: PartsList<number>) {\r\n        const armor = this.getArmor();\r\n        if (armor) {\r\n            parts.addUniquePart(armor.label || 'SR5.Armor', armor.base);\r\n            for (let part of armor.mod) {\r\n                parts.addUniquePart(part.name, part.value);\r\n            }\r\n        }\r\n    }\r\n\r\n    _addSoakParts(parts: PartsList<number>) {\r\n        const body = this.findAttribute('body');\r\n        if (body) {\r\n            parts.addUniquePart(body.label || 'SR5.Body', body.value);\r\n        }\r\n        this._addArmorParts(parts);\r\n    }\r\n\r\n    static async pushTheLimit(li) {\r\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\r\n\r\n        if (msg.getFlag(SYSTEM_NAME, 'customRoll')) {\r\n            let actor = (msg.user.character as unknown) as SR5Actor;\r\n            if (!actor) {\r\n                // get controlled tokens\r\n                const tokens = canvas.tokens.controlled;\r\n                if (tokens.length > 0) {\r\n                    for (let token of tokens) {\r\n                        if (token.actor.owner) {\r\n                            actor = token.actor;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (actor) {\r\n                const parts = new PartsList<number>();\r\n                parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\r\n                ShadowrunRoller.basicRoll({\r\n                    title: ` - ${game.i18n.localize('SR5.PushTheLimit')}`,\r\n                    parts: parts.list,\r\n                    actor: actor,\r\n                }).then(() => {\r\n                    actor;\r\n                    actor.update({\r\n                        'data.attributes.edge.uses': actor.getEdge().uses - 1,\r\n                    });\r\n                });\r\n            } else {\r\n                // @ts-ignore\r\n                ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\r\n            }\r\n        }\r\n    }\r\n\r\n    static async secondChance(li) {\r\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\r\n        // @ts-ignore\r\n        let roll: Roll = JSON.parse(msg.data?.roll);\r\n        let formula = roll.formula;\r\n        let hits = roll.total;\r\n        let re = /(\\d+)d6/;\r\n        let matches = formula.match(re);\r\n        if (matches && matches[1]) {\r\n            let match = matches[1];\r\n            let pool = parseInt(match.replace('d6', ''));\r\n            if (!isNaN(pool) && !isNaN(hits)) {\r\n                let actor = (msg.user.character as unknown) as SR5Actor;\r\n                if (!actor) {\r\n                    // get controlled tokens\r\n                    const tokens = canvas.tokens.controlled;\r\n                    if (tokens.length > 0) {\r\n                        for (let token of tokens) {\r\n                            if (token.actor.owner) {\r\n                                actor = token.actor;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (actor) {\r\n                    const parts = new PartsList<number>();\r\n                    parts.addUniquePart('SR5.OriginalDicePool', pool);\r\n                    parts.addUniquePart('SR5.Successes', -hits);\r\n\r\n                    return ShadowrunRoller.basicRoll({\r\n                        title: ` - Second Chance`,\r\n                        parts: parts.list,\r\n                        actor: actor,\r\n                    }).then(() => {\r\n                        actor.update({\r\n                            'data.attributes.edge.uses': actor.getEdge().uses - 1,\r\n                        });\r\n                    });\r\n                } else {\r\n                    // @ts-ignore\r\n                    ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\r\n     * @param scope\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setFlag(scope: string, key: string, value: any): Promise<Entity> {\r\n        const newValue = Helpers.onSetFlag(value);\r\n        return super.setFlag(scope, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\r\n     * @param scope\r\n     * @param key\r\n     */\r\n    getFlag(scope: string, key: string): any {\r\n        const data = super.getFlag(scope, key);\r\n        return Helpers.onGetFlag(data);\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport { ChummerImportForm } from '../apps/chummer-import-form';\r\nimport { SkillEditForm } from '../apps/skills/SkillEditForm';\r\nimport { KnowledgeSkillEditForm } from '../apps/skills/KnowledgeSkillEditForm';\r\nimport { LanguageSkillEditForm } from '../apps/skills/LanguageSkillEditForm';\r\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\r\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\r\nimport Skills = Shadowrun.Skills;\r\nimport { SR5Actor } from './SR5Actor';\r\nimport MatrixAttribute = Shadowrun.MatrixAttribute;\r\n\r\n// Use SR5ActorSheet._showSkillEditForm to only ever render one SkillEditForm instance.\r\n// Should multiple instances be open, Foundry will cause cross talk between skills and actors,\r\n// when opened in succession, causing SkillEditForm to wrongfully overwrite the wrong data.\r\nlet globalSkillAppId:number = -1;\r\n\r\n/**\r\n * Extend the basic ActorSheet with some very simple modifications\r\n */\r\nexport class SR5ActorSheet extends ActorSheet {\r\n    _shownUntrainedSkills: boolean;\r\n    _shownDesc: string[];\r\n    _filters: SR5SheetFilters;\r\n    actor: SR5Actor;\r\n    _scroll: string;\r\n\r\n    constructor(...args) {\r\n        super(...args);\r\n\r\n        /**\r\n         * Keep track of the currently active sheet tab\r\n         * @type {string}\r\n         */\r\n        this._shownUntrainedSkills = true;\r\n        this._shownDesc = [];\r\n        this._filters = {\r\n            skills: '',\r\n        };\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Extend and override the default options used by the 5e Actor Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'actor'],\r\n            width: 880,\r\n            height: 690,\r\n            tabs: [\r\n                {\r\n                    navSelector: '.tabs',\r\n                    contentSelector: '.sheetbody',\r\n                    initial: 'skills',\r\n                },\r\n            ],\r\n        });\r\n    }\r\n\r\n    get template() {\r\n        const path = 'systems/shadowrun5e/dist/templates/actor/';\r\n        return `${path}${this.actor.data.type}.html`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Prepare data for rendering the Actor sheet\r\n     * The prepared data object contains both the actor data as well as additional sheet options\r\n     */\r\n    getData() {\r\n        const data: SR5ActorSheetData = (super.getData() as unknown) as SR5ActorSheetData;\r\n\r\n        this._prepareMatrixAttributes(data);\r\n\r\n        const attrs = data.data.attributes;\r\n        for (let [, att] of Object.entries(attrs)) {\r\n            if (!att.hidden) {\r\n                if (att.temp === 0) delete att.temp;\r\n            }\r\n        }\r\n\r\n        /*c\r\n        const { magic } = data.data;\r\n        if (magic.drain && magic.drain.temp === 0) delete magic.drain.temp;\r\n         */\r\n\r\n        const { modifiers: mods } = data.data;\r\n        for (let [key, value] of Object.entries(mods)) {\r\n            if (value === 0) mods[key] = '';\r\n        }\r\n\r\n        this._prepareItems(data);\r\n        this._prepareSkills(data);\r\n\r\n        data['config'] = CONFIG.SR5;\r\n        data['awakened'] = data.data.special === 'magic';\r\n        data['emerged'] = data.data.special === 'resonance';\r\n        data['woundTolerance'] = 3 + (Number(mods['wound_tolerance']) || 0);\r\n\r\n        data.filters = this._filters;\r\n\r\n        data['isCharacter'] = this.actor.data.type === 'character';\r\n        data['isSpirit'] = this.actor.data.type === 'spirit';\r\n\r\n        return data;\r\n    }\r\n\r\n    _isSkillMagic(id, skill) {\r\n        return skill.attribute === 'magic' || id === 'astral_combat' || id === 'assensing';\r\n    }\r\n\r\n    _doesSkillContainText(key, skill, text) {\r\n        let searchString = `${key} ${game.i18n.localize(skill.label)} ${skill?.specs?.join(' ')}`;\r\n        return searchString.toLowerCase().search(text.toLowerCase()) > -1;\r\n    }\r\n\r\n    _prepareMatrixAttributes(data) {\r\n        const { matrix } = data.data;\r\n        if (matrix) {\r\n            const cleanupAttribute = (attribute: MatrixAttribute) => {\r\n                const att = matrix[attribute];\r\n                if (att) {\r\n                    if (!att.mod) att.mod = {};\r\n                    if (att.temp === 0) delete att.temp;\r\n                }\r\n            };\r\n\r\n            ['firewall', 'data_processing', 'sleaze', 'attack'].forEach((att: MatrixAttribute) => cleanupAttribute(att));\r\n        }\r\n    }\r\n\r\n    _prepareSkills(data) {\r\n        const activeSkills = {};\r\n        const oldSkills: Skills = data.data.skills.active;\r\n        for (let [key, skill] of Object.entries(oldSkills)) {\r\n            // if filter isn't empty, we are doing custom filtering\r\n            if (this._filters.skills !== '') {\r\n                if (this._doesSkillContainText(key, skill, this._filters.skills)) {\r\n                    activeSkills[key] = skill;\r\n                }\r\n                // general check if we aren't filtering\r\n            } else if (\r\n                (skill.value > 0 || this._shownUntrainedSkills) &&\r\n                !(this._isSkillMagic(key, skill) && data.data.special !== 'magic') &&\r\n                !(skill.attribute === 'resonance' && data.data.special !== 'resonance')\r\n            ) {\r\n                activeSkills[key] = skill;\r\n            }\r\n        }\r\n        Helpers.orderKeys(activeSkills);\r\n        data.data.skills.active = activeSkills;\r\n    }\r\n\r\n    _prepareItems(data) {\r\n        const inventory = {\r\n            weapon: {\r\n                label: game.i18n.localize('SR5.Weapon'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'weapon',\r\n                },\r\n            },\r\n            armor: {\r\n                label: game.i18n.localize('SR5.Armor'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'armor',\r\n                },\r\n            },\r\n            device: {\r\n                label: game.i18n.localize('SR5.Device'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'device',\r\n                },\r\n            },\r\n            equipment: {\r\n                label: game.i18n.localize('SR5.Equipment'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'equipment',\r\n                },\r\n            },\r\n            cyberware: {\r\n                label: game.i18n.localize('SR5.Cyberware'),\r\n                items: [],\r\n                dataset: {\r\n                    type: 'cyberware',\r\n                },\r\n            },\r\n        };\r\n\r\n        let [items, spells, qualities, adept_powers, actions, complex_forms, lifestyles, contacts, sins, programs] = data.items.reduce(\r\n            (arr, item) => {\r\n                item.isStack = item.data.quantity ? item.data.quantity > 1 : false;\r\n                if (item.type === 'spell') arr[1].push(item);\r\n                else if (item.type === 'quality') arr[2].push(item);\r\n                else if (item.type === 'adept_power') arr[3].push(item);\r\n                else if (item.type === 'action') arr[4].push(item);\r\n                else if (item.type === 'complex_form') arr[5].push(item);\r\n                else if (item.type === 'lifestyle') arr[6].push(item);\r\n                else if (item.type === 'contact') arr[7].push(item);\r\n                else if (item.type === 'sin') arr[8].push(item);\r\n                else if (item.type === 'program') arr[9].push(item);\r\n                else if (Object.keys(inventory).includes(item.type)) arr[0].push(item);\r\n                return arr;\r\n            },\r\n            [[], [], [], [], [], [], [], [], [], []],\r\n        );\r\n\r\n        const sortByName = (i1, i2) => {\r\n            if (i1.name > i2.name) return 1;\r\n            if (i1.name < i2.name) return -1;\r\n            return 0;\r\n        };\r\n        const sortByEquipped = (left, right) => {\r\n            const leftEquipped = left.data?.technology?.equipped;\r\n            const rightEquipped = right.data?.technology?.equipped;\r\n            if (leftEquipped && !rightEquipped) return -1;\r\n            if (rightEquipped && !leftEquipped) return 1;\r\n            if (left.name > right.name) return 1;\r\n            if (left.name < right.name) return -1;\r\n            return 0;\r\n        };\r\n        actions.sort(sortByName);\r\n        adept_powers.sort(sortByName);\r\n        complex_forms.sort(sortByName);\r\n        items.sort(sortByEquipped);\r\n        spells.sort(sortByName);\r\n        contacts.sort(sortByName);\r\n        lifestyles.sort(sortByName);\r\n        sins.sort(sortByName);\r\n        programs.sort(sortByEquipped);\r\n\r\n        items.forEach((item) => {\r\n            inventory[item.type].items.push(item);\r\n        });\r\n\r\n        data.inventory = Object.values(inventory);\r\n        data.magic = {\r\n            spellbook: spells,\r\n            powers: adept_powers,\r\n        };\r\n        data.actions = actions;\r\n        data.complex_forms = complex_forms;\r\n        data.lifestyles = lifestyles;\r\n        data.contacts = contacts;\r\n        data.sins = sins;\r\n        data.programs = programs;\r\n\r\n        qualities.sort((a, b) => {\r\n            if (a.data.type === 'positive' && b.data.type === 'negative') return -1;\r\n            if (a.data.type === 'negative' && b.data.type === 'positive') return 1;\r\n            return a.name < b.name ? -1 : 1;\r\n        });\r\n        data.qualities = qualities;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Activate event listeners using the prepared sheet HTML\r\n     * @param html The prepared HTML object ready to be rendered into the DOM\r\n     */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n\r\n        html.find('.hidden').hide();\r\n\r\n        html.find('.skill-header').click((event) => {\r\n            event.preventDefault();\r\n            this._shownUntrainedSkills = !this._shownUntrainedSkills;\r\n            this._render(true);\r\n        });\r\n\r\n        html.find('.has-desc').click((event) => {\r\n            event.preventDefault();\r\n            const item = $(event.currentTarget).parents('.list-item');\r\n            const iid = $(item).data().item;\r\n            const field = item.next();\r\n            field.toggle();\r\n            if (iid) {\r\n                if (field.is(':visible')) this._shownDesc.push(iid);\r\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n            }\r\n        });\r\n\r\n        html.find('#filter-skills').on('input', this._onFilterSkills.bind(this));\r\n        html.find('.cell-input-roll').click(this._onRollCellInput.bind(this));\r\n        html.find('.attribute-roll').click(this._onRollAttribute.bind(this));\r\n        html.find('.skill-roll').click(this._onRollActiveSkill.bind(this));\r\n        html.find('.defense-roll').click(this._onRollDefense.bind(this));\r\n        html.find('.attribute-only-roll').click(this._onRollAttributesOnly.bind(this));\r\n        html.find('.soak-roll').click(this._onRollSoak.bind(this));\r\n        html.find('.drain-roll').click(this._onRollDrain.bind(this));\r\n        html.find('.fade-roll').click(this._onRollFade.bind(this));\r\n        html.find('.item-roll').click(this._onRollItem.bind(this));\r\n        // $(html).find('.item-roll').on('contextmenu', () => console.log('TEST'));\r\n        html.find('.item-equip-toggle').click(this._onEquipItem.bind(this));\r\n        html.find('.item-qty').change(this._onChangeQty.bind(this));\r\n        html.find('.item-rtg').change(this._onChangeRtg.bind(this));\r\n        html.find('.item-create').click(this._onItemCreate.bind(this));\r\n        html.find('.matrix-roll').click(this._onRollMatrixAttribute.bind(this));\r\n        html.find('.matrix-att-selector').change(this._onMatrixAttributeSelected.bind(this));\r\n        html.find('.basic-roll').click(this._onRollPrompt.bind(this));\r\n        html.find('.armor-roll').click(this._onRollArmor.bind(this));\r\n        html.find('.add-knowledge').click(this._onAddKnowledgeSkill.bind(this));\r\n        html.find('.knowledge-skill').click(this._onRollKnowledgeSkill.bind(this));\r\n        html.find('.remove-knowledge').click(this._onRemoveKnowledgeSkill.bind(this));\r\n        html.find('.add-language').click(this._onAddLanguageSkill.bind(this));\r\n        html.find('.language-skill').click(this._onRollLanguageSkill.bind(this));\r\n        html.find('.remove-language').click(this._onRemoveLanguageSkill.bind(this));\r\n        html.find('.import-character').click(this._onShowImportCharacter.bind(this));\r\n        html.find('.reload-ammo').click(this._onReloadAmmo.bind(this));\r\n        html.find('.skill-edit').click(this._onShowEditSkill.bind(this));\r\n        html.find('.knowledge-skill-edit').click(this._onShowEditKnowledgeSkill.bind(this));\r\n        html.find('.language-skill-edit').click(this._onShowEditLanguageSkill.bind(this));\r\n\r\n        $(html).find('.horizontal-cell-input .cell').on('click', this._onSetCellInput.bind(this));\r\n\r\n        $(html).find('.horizontal-cell-input .cell').on('contextmenu', this._onClearCellInput.bind(this));\r\n\r\n        // updates matrix condition monitor on the device the actor has equippe\r\n        $(html)\r\n            .find('[name=\"data.matrix.condition_monitor.value\"]')\r\n            .on('change', async (event: any) => {\r\n                event.preventDefault();\r\n                const value = Helpers.parseInputToNumber(event.currentTarget.value);\r\n                const matrixDevice = this.actor.getMatrixDevice();\r\n                if (matrixDevice && !isNaN(value)) {\r\n                    const updateData = {};\r\n                    updateData['data.technology.condition_monitor.value'] = value;\r\n                    await matrixDevice.update(updateData);\r\n                }\r\n            });\r\n\r\n        // Update Inventory Item\r\n        html.find('.item-edit').click((event) => {\r\n            event.preventDefault();\r\n            const iid = Helpers.listItemId(event);\r\n            const item = this.actor.getOwnedItem(iid);\r\n            if (item) item.sheet.render(true);\r\n        });\r\n        // Delete Inventory Item\r\n        html.find('.item-delete').click((event) => {\r\n            event.preventDefault();\r\n            const iid = Helpers.listItemId(event);\r\n            const el = $(event.currentTarget).parents('.list-item');\r\n            this.actor.deleteOwnedItem(iid);\r\n            el.slideUp(200, () => this.render(false));\r\n        });\r\n        // Drag inventory item\r\n        let handler = (ev) => this._onDragItemStart(ev);\r\n        html.find('.list-item').each((i, item) => {\r\n            if (item.dataset && item.dataset.itemId) {\r\n                item.setAttribute('draggable', true);\r\n                item.addEventListener('dragstart', handler, false);\r\n            }\r\n        });\r\n    }\r\n\r\n    async _onFilterSkills(event) {\r\n        this._filters.skills = event.currentTarget.value;\r\n        this.render();\r\n    }\r\n\r\n    async _onReloadAmmo(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedItem(iid);\r\n        if (item) return item.reloadAmmo();\r\n    }\r\n\r\n    async _onMatrixAttributeSelected(event) {\r\n        let iid = this.actor.data.data.matrix.device;\r\n        let item = this.actor.getOwnedItem(iid);\r\n        if (!item) {\r\n            console.error('could not find item');\r\n            return;\r\n        }\r\n        // grab matrix attribute (sleaze, attack, etc.)\r\n        let att = event.currentTarget.dataset.att;\r\n        // grab device attribute (att1, att2, ...)\r\n        let deviceAtt = event.currentTarget.value;\r\n\r\n        // get current matrix attribute on the device\r\n        let oldVal = item.data.data.atts[deviceAtt].att;\r\n        let data = {\r\n            _id: iid,\r\n        };\r\n\r\n        // go through atts on device, setup matrix attributes on it\r\n        for (let i = 1; i <= 4; i++) {\r\n            let tmp = `att${i}`;\r\n            let key = `data.atts.att${i}.att`;\r\n            if (tmp === deviceAtt) {\r\n                data[key] = att;\r\n            } else if (item.data.data.atts[`att${i}`].att === att) {\r\n                data[key] = oldVal;\r\n            }\r\n        }\r\n        await this.actor.updateOwnedItem(data);\r\n    }\r\n\r\n    _onItemCreate(event) {\r\n        event.preventDefault();\r\n        const type = Helpers.listItemId(event);\r\n        console.log(type);\r\n        const itemData = {\r\n            name: `New ${type}`,\r\n            type: type,\r\n        };\r\n        return this.actor.createOwnedItem(itemData, { renderSheet: true });\r\n    }\r\n\r\n    async _onAddLanguageSkill(event) {\r\n        event.preventDefault();\r\n        this.actor.addLanguageSkill({ name: '' });\r\n    }\r\n\r\n    async _onRemoveLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skillId = Helpers.listItemId(event);\r\n        this.actor.removeLanguageSkill(skillId);\r\n    }\r\n\r\n    async _onAddKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const category = Helpers.listItemId(event);\r\n        this.actor.addKnowledgeSkill(category);\r\n    }\r\n\r\n    async _onRemoveKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const [skillId, category] = Helpers.listItemId(event).split('.');\r\n        this.actor.removeKnowledgeSkill(skillId, category);\r\n    }\r\n\r\n    async _onChangeRtg(event) {\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedItem(iid);\r\n        const rtg = parseInt(event.currentTarget.value);\r\n        if (item && rtg) {\r\n            item.update({ 'data.technology.rating': rtg });\r\n        }\r\n    }\r\n\r\n    async _onChangeQty(event) {\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedItem(iid);\r\n        const qty = parseInt(event.currentTarget.value);\r\n        if (item && qty) {\r\n            item.data.data.technology.quantity = qty;\r\n            item.update({ 'data.technology.quantity': qty });\r\n        }\r\n    }\r\n\r\n    async _onEquipItem(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedItem(iid);\r\n        if (item) {\r\n            const itemData = item.data.data;\r\n            const newItems = [] as any[];\r\n            if (item.type === 'device') {\r\n                // turn off all other devices than the one that is being equipped\r\n                // if clicking the equipped, toggle it\r\n                for (let ite of this.actor.items.filter((i) => i.type === 'device')) {\r\n                    newItems.push({\r\n                        '_id': ite._id,\r\n                        'data.technology.equipped': ite._id === iid ? !itemData.technology.equipped : false,\r\n                    });\r\n                }\r\n            } else {\r\n                newItems.push({\r\n                    '_id': iid,\r\n                    'data.technology.equipped': !itemData.technology.equipped,\r\n                });\r\n            }\r\n            await this.actor.updateEmbeddedEntity('OwnedItem', newItems);\r\n            this.actor.render();\r\n        }\r\n    }\r\n\r\n    async _onSetCellInput(event) {\r\n        const value = Number(event.currentTarget.dataset.value);\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun' || cmId === 'physical') {\r\n            const property = `data.track.${cmId}.value`;\r\n            data[property] = value;\r\n        } else if (cmId === 'edge') {\r\n            const property = `data.attributes.edge.uses`;\r\n            data[property] = value;\r\n        } else if (cmId === 'overflow') {\r\n            const property = 'data.track.physical.overflow.value';\r\n            data[property] = value;\r\n        } else if (cmId === 'matrix') {\r\n            const matrixDevice = this.actor.getMatrixDevice();\r\n            if (matrixDevice && !isNaN(value)) {\r\n                const updateData = {};\r\n                updateData['data.technology.condition_monitor.value'] = value;\r\n                await matrixDevice.update(updateData);\r\n            }\r\n        }\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    async _onClearCellInput(event) {\r\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        const data = {};\r\n        if (cmId === 'stun' || cmId === 'physical') {\r\n            const property = `data.track.${cmId}.value`;\r\n            data[property] = 0;\r\n        } else if (cmId === 'edge') {\r\n            const property = `data.attributes.edge.uses`;\r\n            data[property] = 0;\r\n        } else if (cmId === 'overflow') {\r\n            const property = 'data.track.physical.overflow.value';\r\n            data[property] = 0;\r\n        } else if (cmId === 'matrix') {\r\n            const matrixDevice = this.actor.getMatrixDevice();\r\n            if (matrixDevice) {\r\n                const updateData = {};\r\n                updateData['data.technology.condition_monitor.value'] = 0;\r\n                await matrixDevice.update(updateData);\r\n            }\r\n        }\r\n        await this.actor.update(data);\r\n    }\r\n\r\n    async _onRollCellInput(event) {\r\n        event.preventDefault();\r\n        let track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\r\n        if (track === 'stun' || track === 'physical') {\r\n            await this.actor.rollNaturalRecovery(track, event);\r\n        } else if (track === 'edge') {\r\n            await this.actor.rollAttribute('edge');\r\n        }\r\n    }\r\n\r\n    async _onRollPrompt(event) {\r\n        event.preventDefault();\r\n        await this.actor.promptRoll({ event: event });\r\n    }\r\n\r\n    async _onRollItem(event) {\r\n        event.preventDefault();\r\n        const iid = Helpers.listItemId(event);\r\n        const item = this.actor.getOwnedItem(iid);\r\n        if (item) {\r\n            await item.postCard(event);\r\n        }\r\n    }\r\n\r\n    async _onRollFade(event) {\r\n        event.preventDefault();\r\n        this.actor.rollFade({ event: event });\r\n    }\r\n\r\n    async _onRollDrain(event) {\r\n        event.preventDefault();\r\n        this.actor.rollDrain({ event: event });\r\n    }\r\n\r\n    async _onRollArmor(event) {\r\n        event.preventDefault();\r\n        return this.actor.rollArmor({ event: event });\r\n    }\r\n\r\n    async _onRollDefense(event) {\r\n        event.preventDefault();\r\n        return this.actor.rollDefense({ event: event });\r\n    }\r\n\r\n    async _onRollMatrixAttribute(event) {\r\n        event.preventDefault();\r\n        const attr = event.currentTarget.dataset.attribute;\r\n        return this.actor.rollMatrixAttribute(attr, { event: event });\r\n    }\r\n\r\n    async _onRollSoak(event: MouseEvent) {\r\n        event.preventDefault();\r\n        return this.actor.rollSoak({ event: event });\r\n    }\r\n\r\n    async _onRollAttributesOnly(event) {\r\n        event.preventDefault();\r\n        const roll = event.currentTarget.dataset.roll;\r\n        return this.actor.rollAttributesTest(roll, { event: event });\r\n    }\r\n\r\n    async _onRollKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const id = Helpers.listItemId(event);\r\n        const [skill, category] = id.split('.');\r\n        return this.actor.rollKnowledgeSkill(category, skill, { event: event });\r\n    }\r\n\r\n    async _onRollLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        return this.actor.rollLanguageSkill(skill, { event: event });\r\n    }\r\n\r\n    async _onRollActiveSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        return this.actor.rollActiveSkill(skill, { event: event });\r\n    }\r\n\r\n    async _onRollAttribute(event) {\r\n        event.preventDefault();\r\n        const attr = event.currentTarget.closest('.attribute').dataset.attribute;\r\n        return this.actor.rollAttribute(attr, { event: event });\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    async _render(...args) {\r\n        const focusList = $(this.element).find(':focus');\r\n        const focus: any = focusList.length ? focusList[0] : null;\r\n\r\n        this._saveScrollPositions();\r\n        await super._render(...args);\r\n        this._restoreScrollPositions();\r\n\r\n        if (focus && focus.name) {\r\n            const element = this.form[focus.name];\r\n            if (element) {\r\n                element.focus();\r\n                // set the selection range on the focus formed from before (keeps track of cursor in input)\r\n                element.setSelectionRange && element.setSelectionRange(focus.selectionStart, focus.selectionEnd);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n\r\n    async _closeOpenSkillApp() {\r\n        if (globalSkillAppId !== -1) {\r\n            if (ui.windows[globalSkillAppId]) {\r\n                await ui.windows[globalSkillAppId].close();\r\n            }\r\n            globalSkillAppId = -1;\r\n        }\r\n    }\r\n\r\n    /** Keep track of each SkillEditForm instance and close before opening another.\r\n     *\r\n     * @param skillEditFormImplementation Any extending class! of SkillEditForm\r\n     * @param actor\r\n     * @param options\r\n     * @param args Collect arguments of the different renderWithSkill implementations.\r\n     */\r\n    async _showSkillEditForm(skillEditFormImplementation, actor: SR5Actor, options: object, ...args) {\r\n        await this._closeOpenSkillApp();\r\n\r\n        const skillEditForm = new skillEditFormImplementation(actor, options, ...args);\r\n        globalSkillAppId = skillEditForm.appId;\r\n        await skillEditForm.render(true)\r\n    }\r\n\r\n    _onShowEditKnowledgeSkill(event) {\r\n        event.preventDefault();\r\n        const [skill, category] = Helpers.listItemId(event).split('.');\r\n        this._showSkillEditForm(KnowledgeSkillEditForm, this.actor, {\r\n            event: event}, skill, category);\r\n    }\r\n\r\n    _onShowEditLanguageSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        // new LanguageSkillEditForm(this.actor, skill, { event: event }).render(true);\r\n        this._showSkillEditForm(LanguageSkillEditForm, this.actor, {event: event}, skill);\r\n    }\r\n\r\n    _onShowEditSkill(event) {\r\n        event.preventDefault();\r\n        const skill = Helpers.listItemId(event);\r\n        // new SkillEditForm(this.actor, skill, { event: event }).render(true);\r\n        this._showSkillEditForm(SkillEditForm, this.actor, {event: event}, skill);\r\n    }\r\n\r\n    _onShowImportCharacter(event) {\r\n        event.preventDefault();\r\n        const options = {\r\n            name: 'chummer-import',\r\n            title: 'Chummer Import',\r\n        };\r\n        new ChummerImportForm(this.actor, options).render(true);\r\n    }\r\n}\r\n","import SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { CharacterPrep } from './CharacterPrep';\r\nimport { SpiritPrep } from './SpiritPrep';\r\n\r\nexport class ActorPrepFactory {\r\n    static Create(data: SR5ActorType) {\r\n        if (data.type === 'character') {\r\n            return new CharacterPrep(data);\r\n        } else if (data.type === 'spirit') {\r\n            return new SpiritPrep(data);\r\n        }\r\n    }\r\n}\r\n","import SR5ActorType = Shadowrun.SR5ActorType;\r\nimport { SR5ItemDataWrapper } from '../../item/SR5ItemDataWrapper';\r\nimport SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport abstract class BaseActorPrep<ActorType extends SR5ActorType, DataType extends SR5ActorData> {\r\n    data: DataType;\r\n    items: SR5ItemDataWrapper[];\r\n\r\n    constructor(data: ActorType) {\r\n        this.data = data.data;\r\n        this.items = data.items.map((item) => new SR5ItemDataWrapper(item));\r\n    }\r\n\r\n    // override with the correct order and fucntions to prepare the actor\r\n    abstract prepare(): void;\r\n}\r\n","import { BaseActorPrep } from './BaseActorPrep';\r\nimport SR5CharacterType = Shadowrun.SR5CharacterType;\r\nimport CharacterActorData = Shadowrun.CharacterActorData;\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { MatrixPrep } from './functions/MatrixPrep';\r\nimport { ItemPrep } from './functions/ItemPrep';\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\r\nimport { MovementPrep } from './functions/MovementPrep';\r\nimport { WoundsPrep } from './functions/WoundsPrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\n\r\nexport class CharacterPrep extends BaseActorPrep<SR5CharacterType, CharacterActorData> {\r\n    prepare() {\r\n        ModifiersPrep.prepareModifiers(this.data);\r\n\r\n        ItemPrep.prepareArmor(this.data, this.items);\r\n        ItemPrep.prepareCyberware(this.data, this.items);\r\n\r\n        SkillsPrep.prepareSkills(this.data);\r\n        AttributesPrep.prepareAttributes(this.data);\r\n        LimitsPrep.prepareLimits(this.data);\r\n\r\n        MatrixPrep.prepareMatrix(this.data, this.items);\r\n\r\n        ConditionMonitorsPrep.preparePhysical(this.data);\r\n        ConditionMonitorsPrep.prepareStun(this.data);\r\n\r\n        MovementPrep.prepareMovement(this.data);\r\n        WoundsPrep.prepareWounds(this.data);\r\n\r\n        InitiativePrep.prepareMeatspaceInit(this.data);\r\n        InitiativePrep.prepareAstralInit(this.data);\r\n        InitiativePrep.prepareMatrixInit(this.data);\r\n        InitiativePrep.prepareCurrentInitiative(this.data);\r\n    }\r\n}\r\n","import { BaseActorPrep } from './BaseActorPrep';\r\nimport SpiritActorData = Shadowrun.SpiritActorData;\r\nimport SR5SpiritType = Shadowrun.SR5SpiritType;\r\nimport { ItemPrep } from './functions/ItemPrep';\r\nimport { SkillsPrep } from './functions/SkillsPrep';\r\nimport { AttributesPrep } from './functions/AttributesPrep';\r\nimport { LimitsPrep } from './functions/LimitsPrep';\r\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\r\nimport { MovementPrep } from './functions/MovementPrep';\r\nimport { WoundsPrep } from './functions/WoundsPrep';\r\nimport { ModifiersPrep } from './functions/ModifiersPrep';\r\nimport { InitiativePrep } from './functions/InitiativePrep';\r\nimport SpiritType = Shadowrun.SpiritType;\r\nimport { Helpers } from '../../helpers';\r\n\r\nexport class SpiritPrep extends BaseActorPrep<SR5SpiritType, SpiritActorData> {\r\n    prepare() {\r\n        ModifiersPrep.prepareModifiers(this.data);\r\n\r\n        SpiritPrep.prepareSpiritBaseData(this.data);\r\n\r\n        SkillsPrep.prepareSkills(this.data);\r\n        AttributesPrep.prepareAttributes(this.data);\r\n        LimitsPrep.prepareLimits(this.data);\r\n\r\n        SpiritPrep.prepareSpiritArmor(this.data);\r\n\r\n        ConditionMonitorsPrep.prepareStun(this.data);\r\n        ConditionMonitorsPrep.preparePhysical(this.data);\r\n\r\n        MovementPrep.prepareMovement(this.data);\r\n        WoundsPrep.prepareWounds(this.data);\r\n\r\n        InitiativePrep.prepareCurrentInitiative(this.data);\r\n\r\n        this.data.special = 'magic';\r\n    }\r\n\r\n    static prepareSpiritBaseData(data: SpiritActorData) {\r\n        const overrides = this.getSpiritStatModifiers(data.spiritType);\r\n\r\n        if (overrides) {\r\n            const { attributes, skills, initiative, force, modifiers, armor } = data;\r\n\r\n            // set the base of attributes to the provided value\r\n            for (const [attId, value] of Object.entries(overrides.attributes)) {\r\n                if (attributes[attId] !== undefined) {\r\n                    attributes[attId].base = value + force;\r\n                }\r\n            }\r\n\r\n            for (const [skillId, skill] of Object.entries(skills.active)) {\r\n                skill.base = overrides.skills.find((s) => s === skillId) ? force : 0;\r\n            }\r\n\r\n            // prepare initiative data\r\n            initiative.meatspace.base.base = force * 2 + overrides.init + Number(modifiers['astral_initiative']);\r\n            initiative.meatspace.dice.base = 2;\r\n            initiative.astral.base.base = force * 2 + overrides.astral_init + Number(modifiers['astral_initiative_dice']);\r\n            initiative.astral.dice.base = 3;\r\n        }\r\n    }\r\n\r\n    static prepareSpiritArmor(data: SpiritActorData) {\r\n        const { armor, attributes } = data;\r\n        armor.base = (attributes.essence.value ?? 0) * 2;\r\n        armor.value = Helpers.calcTotal(armor);\r\n    }\r\n\r\n    /**\r\n    // base types\r\n    air: 'SR5.Spirit.Air',\r\n    beasts: 'SR5.Spirit.Beasts',\r\n    earth: 'SR5.Spirit.Earth',\r\n    fire: 'SR5.Spirit.Fire',\r\n    guardian: 'SR5.Spirit.Guardian',\r\n    guidance: 'SR5.Spirit.Guidance',\r\n    man: 'SR5.Spirit.Man',\r\n    plant: 'SR5.Spirit.Plant',\r\n    task: 'SR5.Spirit.Task',\r\n    water: 'SR5.Spirit.Water',\r\n\r\n    // toxic types\r\n    toxic_air: 'SR5.Spirit.ToxicAir',\r\n    toxic_beasts: 'SR5.Spirit.ToxicBeasts',\r\n    toxic_earth: 'SR5.Spirit.ToxicEarth',\r\n    toxic_fire: 'SR5.Spirit.ToxicFire',\r\n    toxic_man: 'SR5.Spirit.ToxicMan',\r\n    toxic_water: 'SR5.Spirit.ToxicWater',\r\n\r\n    // blood types\r\n    blood: 'SR5.Spirit.Blood',\r\n\r\n    // shadow types\r\n    muse: 'SR5.Spirit.Muse',\r\n    nightmare: 'SR5.Spirit.Nightmare',\r\n    shade: 'SR5.Spirit.Shade',\r\n    succubus: 'SR5.Spirit.Succubus',\r\n    wraith: 'SR5.Spirit.Wraith',\r\n\r\n    // shedim types\r\n    shedim: 'SR5.Spirit.Shedim',\r\n    master_shedim: 'SR5.Spirit.MasterShedim',\r\n\r\n    // insect types\r\n    caretaker: 'SR5.Spirit.Caretaker',\r\n    nymph: 'SR5.Spirit.Nymph',\r\n    scout: 'SR5.Spirit.Scout',\r\n    soldier: 'SR5.Spirit.Soldier',\r\n    worker: 'SR5.Spirit.Worker',\r\n    queen: 'SR5.Spirit.Queen',\r\n     */\r\n    static getSpiritStatModifiers(spiritType: SpiritType) {\r\n        const overrides = {\r\n            // value of 0 for attribute makes it equal to the Force\r\n            attributes: {\r\n                body: 0,\r\n                agility: 0,\r\n                reaction: 0,\r\n                strength: 0,\r\n                willpower: 0,\r\n                logic: 0,\r\n                intuition: 0,\r\n                charisma: 0,\r\n                magic: 0,\r\n                essence: 0,\r\n            },\r\n            // modifiers for after the Force x 2 calculation\r\n            init: 0,\r\n            astral_init: 0,\r\n            // skills are all set to Force\r\n            skills: [] as string[],\r\n        };\r\n        switch (spiritType) {\r\n            case 'air':\r\n                overrides.attributes.body = -2;\r\n                overrides.attributes.agility = 3;\r\n                overrides.attributes.reaction = 4;\r\n                overrides.attributes.strength = -3;\r\n                overrides.init = 4;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'beasts':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.strength = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'earth':\r\n                overrides.attributes.body = 4;\r\n                overrides.attributes.agility = -2;\r\n                overrides.attributes.reaction = -1;\r\n                overrides.attributes.strength = 4;\r\n                overrides.attributes.logic = -1;\r\n                overrides.init = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'fire':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.intuition = 1;\r\n                overrides.init = 3;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'flight', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'guardian':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.agility = 2;\r\n                overrides.attributes.reaction = 3;\r\n                overrides.attributes.strength = 2;\r\n                overrides.init = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'blades', 'clubs', 'counter_spelling', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'guidance':\r\n                overrides.attributes.body = 3;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 1;\r\n                overrides.skills.push('arcana', 'assensing', 'astral_combat', 'counter_spelling', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'man':\r\n                overrides.attributes.body = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = -2;\r\n                overrides.attributes.logic = 1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spellcasting', 'unarmed_combat');\r\n                break;\r\n            case 'plant':\r\n                overrides.attributes.body = 2;\r\n                overrides.attributes.agility = -1;\r\n                overrides.attributes.strength = 1;\r\n                overrides.attributes.logic = -1;\r\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'exotic_range', 'unarmed_combat');\r\n                break;\r\n            case 'task':\r\n                overrides.attributes.reaction = 2;\r\n                overrides.attributes.strength = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('artisan', 'assensing', 'astral_combat', 'perception', 'unarmed_combat');\r\n                break;\r\n            case 'water':\r\n                overrides.attributes.agility = 1;\r\n                overrides.attributes.reaction = 2;\r\n                overrides.init = 2;\r\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\r\n                break;\r\n        }\r\n        return overrides;\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { PartsList } from '../../../parts/PartsList';\r\nimport { Helpers } from '../../../helpers';\r\n\r\nexport class AttributesPrep {\r\n    /**\r\n     * Prepare actor data for attributes\r\n     */\r\n    static prepareAttributes(data: SR5ActorData) {\r\n        const { attributes } = data;\r\n\r\n        // always have special attributes set to hidden\r\n        attributes.magic.hidden = true;\r\n        attributes.resonance.hidden = true;\r\n        attributes.edge.hidden = true;\r\n        attributes.essence.hidden = true;\r\n\r\n        // set the value for the attributes\r\n        for (let [key, attribute] of Object.entries(attributes)) {\r\n            // don't manage the attribute if it is using the old method of edge tracking\r\n            // needed to be able to migrate things correctly\r\n            if (key === 'edge' && attribute['uses'] === undefined) return;\r\n            // this turns the Object model into the list mod\r\n            if (typeof attribute.mod === 'object') {\r\n                attribute.mod = new PartsList(attribute.mod).list;\r\n            }\r\n            const parts = new PartsList(attribute.mod);\r\n\r\n            parts.addUniquePart('SR5.Temporary', attribute.temp ?? 0);\r\n            // TODO legacy from previous sheet\r\n            parts.removePart('Temporary');\r\n\r\n            attribute.mod = parts.list;\r\n            Helpers.calcTotal(attribute);\r\n            // add labels\r\n            attribute.label = CONFIG.SR5.attributes[key];\r\n        }\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport class ConditionMonitorsPrep {\r\n    static prepareStun(data: SR5ActorData) {\r\n        const { track, attributes, modifiers } = data;\r\n\r\n        track.stun.max = 8 + Math.ceil(attributes.willpower.value / 2) + Number(modifiers['stun_track']);\r\n        track.stun.label = CONFIG.SR5.damageTypes.stun;\r\n    }\r\n\r\n    static preparePhysical(data: SR5ActorData) {\r\n        const { track, attributes, modifiers } = data;\r\n\r\n        track.physical.max = 8 + Math.ceil(attributes.body.value / 2) + Number(modifiers['physical_track']);\r\n        track.physical.overflow.max = attributes.body.value;\r\n        track.physical.label = CONFIG.SR5.damageTypes.physical;\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport MagicActorData = Shadowrun.MagicActorData;\r\nimport MatrixActorData = Shadowrun.MatrixActorData;\r\n\r\nexport class InitiativePrep {\r\n    static prepareCurrentInitiative(data: SR5ActorData) {\r\n        const { initiative } = data;\r\n\r\n        if (initiative.perception === 'matrix') initiative.current = initiative.matrix;\r\n        else if (initiative.perception === 'astral') initiative.current = initiative.astral;\r\n        else {\r\n            initiative.current = initiative.meatspace;\r\n            initiative.perception = 'meatspace';\r\n        }\r\n\r\n        initiative.current.dice.value = initiative.current.dice.base;\r\n        if (initiative.edge) initiative.current.dice.value = 5;\r\n        initiative.current.dice.value = Math.min(5, initiative.current.dice.value); // maximum of 5d6 for initiative\r\n        initiative.current.dice.text = `${initiative.current.dice.value}d6`;\r\n        initiative.current.base.value = initiative.current.base.base;\r\n    }\r\n\r\n    static prepareMeatspaceInit(data: SR5ActorData) {\r\n        const { initiative, attributes, modifiers } = data;\r\n        initiative.meatspace.base.base = attributes.intuition.value + attributes.reaction.value + Number(modifiers['meat_initiative']);\r\n        initiative.meatspace.dice.base = 1 + Number(modifiers['meat_initiative_dice']);\r\n    }\r\n\r\n    static prepareAstralInit(data: SR5ActorData & MagicActorData) {\r\n        const { initiative, attributes, modifiers } = data;\r\n        initiative.astral.base.base = attributes.intuition.value * 2 + Number(modifiers['astral_initiative']);\r\n        initiative.astral.dice.base = 2 + Number(modifiers['astral_initiative_dice']);\r\n    }\r\n\r\n    static prepareMatrixInit(data: SR5ActorData & MatrixActorData) {\r\n        const { initiative, attributes, modifiers, matrix } = data;\r\n        if (matrix) {\r\n            initiative.matrix.base.base = attributes.intuition.value + data.matrix.data_processing.value + Number(modifiers['matrix_initiative']);\r\n            initiative.matrix.dice.base = (matrix.hot_sim ? 4 : 3) + Number(modifiers['matrix_initiative_dice']);\r\n        }\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { SR5ItemDataWrapper } from '../../../item/SR5ItemDataWrapper';\r\nimport { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\n\r\nexport class ItemPrep {\r\n    /**\r\n     * Prepare the armor data for the Item\r\n     * - will only allow one \"Base\" armor item to be used\r\n     * - all \"accessories\" will be added to the armor\r\n     */\r\n    static prepareArmor(data: SR5ActorData, items: SR5ItemDataWrapper[]) {\r\n        const { armor } = data;\r\n        armor.base = 0;\r\n        armor.value = 0;\r\n        armor.mod = [];\r\n        for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\r\n            armor[element] = 0;\r\n        }\r\n\r\n        const equippedArmor = items.filter((item) => item.hasArmor() && item.isEquipped());\r\n        const armorModParts = new PartsList<number>(armor.mod);\r\n        equippedArmor?.forEach((item) => {\r\n            if (item.hasArmorAccessory()) {\r\n                armorModParts.addUniquePart(item.getName(), item.getArmorValue());\r\n            } // if not a mod, set armor.value to the items value\r\n            else {\r\n                armor.base = item.getArmorValue();\r\n                armor.label = item.getName();\r\n                for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\r\n                    armor[element] = item.getArmorElements()[element];\r\n                }\r\n            }\r\n        });\r\n\r\n        if (data.modifiers['armor']) armorModParts.addUniquePart(game.i18n.localize('SR5.Bonus'), data.modifiers['armor']);\r\n        // SET ARMOR\r\n        armor.value = Helpers.calcTotal(armor);\r\n    }\r\n    /**\r\n     * Prepare actor data for cyberware changes\r\n     * - this calculates the actors essence\r\n     */\r\n    static prepareCyberware(data: SR5ActorData, items: SR5ItemDataWrapper[]) {\r\n        const { attributes } = data;\r\n        const parts = new PartsList<number>();\r\n        // add Items as values to lower the total value of essence\r\n        items\r\n            .filter((item) => item.isCyberware() && item.isEquipped())\r\n            .forEach((item) => {\r\n                if (item.getEssenceLoss()) {\r\n                    parts.addUniquePart(item.getName(), -Number(item.getEssenceLoss()));\r\n                }\r\n            });\r\n        // add the bonus from the misc tab if applied\r\n        const essenceMod = data.modifiers['essence'];\r\n        if (essenceMod && !Number.isNaN(essenceMod)) {\r\n            parts.addUniquePart('SR5.Bonus', Number(essenceMod));\r\n        }\r\n\r\n        attributes.essence.base = 6;\r\n        attributes.essence.mod = parts.list;\r\n        attributes.essence.value = Helpers.calcTotal(attributes.essence);\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport class LimitsPrep {\r\n    static prepareLimits(data: SR5ActorData) {\r\n        const { limits, attributes, modifiers } = data;\r\n\r\n        // SETUP LIMITS\r\n        limits.physical.value =\r\n            Math.ceil((2 * attributes.strength.value + attributes.body.value + attributes.reaction.value) / 3) + Number(modifiers['physical_limit']);\r\n        limits.mental.value =\r\n            Math.ceil((2 * attributes.logic.value + attributes.intuition.value + attributes.willpower.value) / 3) + Number(modifiers['mental_limit']);\r\n        limits.social.value =\r\n            Math.ceil((2 * attributes.charisma.value + attributes.willpower.value + attributes.essence.value) / 3) + Number(modifiers['social_limit']);\r\n\r\n        // limit labels\r\n        for (let [limitKey, limitValue] of Object.entries(limits)) {\r\n            limitValue.label = CONFIG.SR5.limits[limitKey];\r\n        }\r\n    }\r\n}\r\n\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport MatrixActorData = Shadowrun.MatrixActorData;\r\nimport { Helpers } from '../../../helpers';\r\nimport { SR5ItemDataWrapper } from '../../../item/SR5ItemDataWrapper';\r\nimport { PartsList } from '../../../parts/PartsList';\r\n\r\nexport class MatrixPrep {\r\n    /**\r\n     * Prepare Matrix data on the actor\r\n     * - if an item is equipped, it will use that data\r\n     * - if it isn't and player is technomancer, it will use that data\r\n     */\r\n    static prepareMatrix(actorData: SR5ActorData & MatrixActorData, items: SR5ItemDataWrapper[]) {\r\n        const { matrix, attributes, limits } = actorData;\r\n\r\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\r\n\r\n        // clear matrix data to defaults\r\n        MatrixList.forEach((key) => {\r\n            const parts = new PartsList(matrix[key].mod);\r\n            parts.addUniquePart('SR5.Temporary', matrix[key].temp);\r\n            // TODO LEGACY from when the sheet used 'mod.Temporary'\r\n            parts.removePart('Temporary');\r\n            matrix[key].mod = parts.list;\r\n            matrix[key].value = parts.total;\r\n        });\r\n        matrix.condition_monitor.max = 0;\r\n        matrix.rating = 0;\r\n        matrix.name = '';\r\n        matrix.device = '';\r\n        matrix.condition_monitor.label = 'SR5.ConditionMonitor';\r\n\r\n        // get the first equipped device, we don't care if they have more equipped -- it shouldn't happen\r\n        const device = items.find((item) => item.isEquipped() && item.isDevice());\r\n\r\n        if (device) {\r\n            const conditionMonitor = device.getConditionMonitor();\r\n            matrix.device = device.getId();\r\n            matrix.condition_monitor.max = conditionMonitor.max;\r\n            matrix.condition_monitor.value = conditionMonitor.value;\r\n            matrix.rating = device.getRating();\r\n            matrix.is_cyberdeck = device.isCyberdeck();\r\n            matrix.name = device.getName();\r\n            matrix.item = device.getData();\r\n            const deviceAtts = device.getASDF();\r\n            if (deviceAtts) {\r\n                // setup the actual matrix attributes for the actor\r\n                for (const [key, value] of Object.entries(deviceAtts)) {\r\n                    if (value && matrix[key]) {\r\n                        matrix[key].base = value.value;\r\n                        matrix[key].device_att = value.device_att;\r\n                    }\r\n                }\r\n            }\r\n        } // if we don't have a device, use living persona\r\n        else if (actorData.special === 'resonance') {\r\n            matrix.firewall.base = Helpers.calcTotal(attributes.willpower);\r\n            matrix.data_processing.base = Helpers.calcTotal(attributes.logic);\r\n            matrix.rating = Helpers.calcTotal(attributes.resonance);\r\n            matrix.attack.base = Helpers.calcTotal(attributes.charisma);\r\n            matrix.sleaze.base = Helpers.calcTotal(attributes.intuition);\r\n            matrix.name = game.i18n.localize('SR5.LivingPersona');\r\n        }\r\n\r\n        // set matrix condition monitor to max if greater than\r\n        if (matrix.condition_monitor.value > matrix.condition_monitor.max) {\r\n            matrix.condition_monitor.value = matrix.condition_monitor.max;\r\n        }\r\n\r\n        // add matrix attributes to both limits and attributes as hidden entries\r\n        MatrixList.forEach((key) => {\r\n            Helpers.calcTotal(matrix[key]);\r\n            if (matrix[key]) {\r\n                const label = CONFIG.SR5.matrixAttributes[key];\r\n                const { value, base, mod } = matrix[key];\r\n                const hidden = true;\r\n\r\n                limits[key] = {\r\n                    value,\r\n                    base,\r\n                    mod,\r\n                    label,\r\n                    hidden,\r\n                };\r\n                attributes[key] = {\r\n                    value,\r\n                    base,\r\n                    mod,\r\n                    label,\r\n                    hidden,\r\n                };\r\n            }\r\n        });\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport class ModifiersPrep {\r\n    /**\r\n     * Prepare the modifiers that are displayed in the Misc. tab\r\n     */\r\n    static prepareModifiers(data: SR5ActorData) {\r\n        if (!data.modifiers) data.modifiers = {};\r\n        const modifiers = {};\r\n        let miscTabModifiers = [\r\n            'soak',\r\n            'drain',\r\n            'armor',\r\n            'physical_limit',\r\n            'social_limit',\r\n            'mental_limit',\r\n            'stun_track',\r\n            'physical_track',\r\n            'meat_initiative',\r\n            'meat_initiative_dice',\r\n            'astral_initiative',\r\n            'astral_initiative_dice',\r\n            'matrix_initiative',\r\n            'matrix_initiative_dice',\r\n            'composure',\r\n            'lift_carry',\r\n            'judge_intentions',\r\n            'memory',\r\n            'walk',\r\n            'run',\r\n            'defense',\r\n            'wound_tolerance',\r\n            'essence',\r\n            'fade',\r\n        ];\r\n        miscTabModifiers.sort();\r\n        // force global to the top\r\n        miscTabModifiers.unshift('global');\r\n\r\n        for (let item of miscTabModifiers) {\r\n            modifiers[item] = Number(data.modifiers[item]) || 0;\r\n        }\r\n\r\n        data.modifiers = modifiers;\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport class MovementPrep {\r\n    static prepareMovement(data: SR5ActorData) {\r\n        const { attributes, modifiers } = data;\r\n        const movement = data.movement;\r\n        // default movement: WALK = AGI * 2, RUN = AGI * 4\r\n        movement.walk.value = attributes.agility.value * (2 + Number(modifiers['walk']));\r\n        movement.run.value = attributes.agility.value * (4 + Number(modifiers['run']));\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\nimport { Helpers } from '../../../helpers';\r\nimport { PartsList } from '../../../parts/PartsList';\r\n\r\nexport class SkillsPrep {\r\n    /**\r\n     * Prepare actor data for skills\r\n     */\r\n    static prepareSkills(data: SR5ActorData) {\r\n        const { language, active, knowledge } = data.skills;\r\n        if (language) {\r\n            if (!language.value) language.value = {};\r\n            language.attribute = 'intuition';\r\n        }\r\n\r\n        // function that will set the total of a skill correctly\r\n        const prepareSkill = (skill) => {\r\n            skill.mod = [];\r\n            if (!skill.base) skill.base = 0;\r\n            if (skill.bonus?.length) {\r\n                for (let bonus of skill.bonus) {\r\n                    skill.mod = PartsList.AddUniquePart(skill.mod, bonus.key, bonus.value);\r\n                }\r\n            }\r\n            Helpers.calcTotal(skill);\r\n        };\r\n\r\n        // setup active skills\r\n        for (const skill of Object.values(active)) {\r\n            if (!skill.hidden) {\r\n                prepareSkill(skill);\r\n            }\r\n        }\r\n\r\n        const entries = Object.entries(data.skills.language.value);\r\n        // remove entries which are deleted TODO figure out how to delete these from the data\r\n        entries.forEach(([key, val]: [string, { _delete?: boolean }]) => val._delete && delete data.skills.language.value[key]);\r\n\r\n        for (let skill of Object.values(language.value)) {\r\n            prepareSkill(skill);\r\n            skill.attribute = 'intuition';\r\n        }\r\n\r\n        // setup knowledge skills\r\n        for (let [, group] of Object.entries(knowledge)) {\r\n            const entries = Object.entries(group.value);\r\n            // remove entries which are deleted TODO figure out how to delete these from the data\r\n            group.value = entries\r\n                .filter(([, val]) => !val._delete)\r\n                .reduce((acc, [id, skill]) => {\r\n                    prepareSkill(skill);\r\n\r\n                    // set the attribute on the skill\r\n                    skill.attribute = group.attribute;\r\n                    acc[id] = skill;\r\n                    return acc;\r\n                }, {});\r\n        }\r\n\r\n        // skill labels\r\n        for (let [skillKey, skillValue] of Object.entries(active)) {\r\n            skillValue.label = CONFIG.SR5.activeSkills[skillKey];\r\n        }\r\n    }\r\n}\r\n","import SR5ActorData = Shadowrun.SR5ActorData;\r\n\r\nexport class WoundsPrep {\r\n    static prepareWounds(data: SR5ActorData) {\r\n        const { modifiers, track } = data;\r\n        const count = 3 + Number(modifiers['wound_tolerance']);\r\n        const stunWounds = Math.floor(data.track.stun.value / count);\r\n        const physicalWounds = Math.floor(data.track.physical.value / count);\r\n\r\n        track.stun.wounds = stunWounds;\r\n        track.physical.wounds = physicalWounds;\r\n\r\n        data.wounds = {\r\n            value: stunWounds + physicalWounds,\r\n        };\r\n    }\r\n}\r\n","export class ChummerImportForm extends FormApplication {\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'chummer-import';\r\n        options.classes = ['shadowrun5e'];\r\n        options.title = 'Chummer/Hero Lab Import';\r\n        options.template = 'systems/shadowrun5e/dist/templates/apps/import.html';\r\n        options.width = 600;\r\n        options.height = 'auto';\r\n        return options;\r\n    }\r\n\r\n    getData() {\r\n        return {};\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.submit-chummer-import').click(async (event) => {\r\n            event.preventDefault();\r\n            const chummerfile = JSON.parse($('.chummer-text').val());\r\n            const weapons = $('.weapons').is(':checked');\r\n            const armor = $('.armor').is(':checked');\r\n            const cyberware = $('.cyberware').is(':checked');\r\n            const equipment = $('.gear').is(':checked');\r\n            const qualities = $('.qualities').is(':checked');\r\n            const powers = $('.powers').is(':checked');\r\n            const spells = $('.spells').is(':checked');\r\n\r\n            console.log(chummerfile);\r\n\r\n            const parseAtt = (att) => {\r\n                if (att.toLowerCase() === 'bod') {\r\n                    return 'body';\r\n                }\r\n                if (att.toLowerCase() === 'agi') {\r\n                    return 'agility';\r\n                }\r\n                if (att.toLowerCase() === 'rea') {\r\n                    return 'reaction';\r\n                }\r\n                if (att.toLowerCase() === 'str') {\r\n                    return 'strength';\r\n                }\r\n                if (att.toLowerCase() === 'cha') {\r\n                    return 'charisma';\r\n                }\r\n                if (att.toLowerCase() === 'int') {\r\n                    return 'intuition';\r\n                }\r\n                if (att.toLowerCase() === 'log') {\r\n                    return 'logic';\r\n                }\r\n                if (att.toLowerCase() === 'wil') {\r\n                    return 'willpower';\r\n                }\r\n                if (att.toLowerCase() === 'edg') {\r\n                    return 'edge';\r\n                }\r\n                if (att.toLowerCase() === 'mag') {\r\n                    return 'magic';\r\n                }\r\n                if (att.toLowerCase() === 'res') {\r\n                    return 'resonance';\r\n                }\r\n            };\r\n\r\n            const parseDamage = (val) => {\r\n                const damage = {\r\n                    damage: 0,\r\n                    type: 'physical',\r\n                    radius: 0,\r\n                    dropoff: 0,\r\n                };\r\n                const split = val.split(',');\r\n                if (split.length > 0) {\r\n                    const l = split[0].match(/(\\d+)(\\w+)/);\r\n                    if (l && l[1]) damage.damage = parseInt(l[1]);\r\n                    if (l && l[2]) damage.type = l[2] === 'P' ? 'physical' : 'stun';\r\n                }\r\n                for (let i = 1; i < split.length; i++) {\r\n                    const l = split[i].match(/(-?\\d+)(.*)/);\r\n                    if (l && l[2]) {\r\n                        if (l[2].toLowerCase().includes('/m')) damage.dropoff = parseInt(l[1]);\r\n                        else damage.radius = parseInt(l[1]);\r\n                    }\r\n                }\r\n                return damage;\r\n            };\r\n\r\n            const getValues = (val) => {\r\n                const regex = /(-?[0-9]+)(?:([0-9]+))*/g;\r\n                const l = val.match(regex);\r\n                return l || ['0'];\r\n            };\r\n\r\n            const getArray = (value) => {\r\n                return Array.isArray(value) ? value : [value];\r\n            };\r\n            const updateData = duplicate(this.object.data);\r\n            const update = updateData.data;\r\n            const items = [];\r\n            let error = '';\r\n            // character info stuff, also techno/magic and essence\r\n            if (chummerfile.characters && chummerfile.characters.character) {\r\n                const c = chummerfile.characters.character;\r\n                try {\r\n                    if (c.playername) {\r\n                        update.player_name = c.playername;\r\n                    }\r\n                    if (c.alias) {\r\n                        update.name = c.alias;\r\n                        updateData.name = c.alias;\r\n                    }\r\n                    if (c.metatype) {\r\n                        update.metatype = c.metatype;\r\n                    }\r\n                    if (c.sex) {\r\n                        update.sex = c.sex;\r\n                    }\r\n                    if (c.age) {\r\n                        update.age = c.age;\r\n                    }\r\n                    if (c.height) {\r\n                        update.height = c.height;\r\n                    }\r\n                    if (c.weight) {\r\n                        update.weight = c.weight;\r\n                    }\r\n                    if (c.calculatedstreetcred) {\r\n                        update.street_cred = c.calculatedstreetcred;\r\n                    }\r\n                    if (c.calculatednotoriety) {\r\n                        update.notoriety = c.calculatednotoriety;\r\n                    }\r\n                    if (c.calculatedpublicawareness) {\r\n                        update.public_awareness = c.calculatedpublicawareness;\r\n                    }\r\n                    if (c.karma) {\r\n                        update.karma.value = c.karma;\r\n                    }\r\n                    if (c.totalkarma) {\r\n                        update.karma.max = c.totalkarma;\r\n                    }\r\n                    if (c.technomancer && c.technomancer.toLowerCase() === 'true') {\r\n                        update.special = 'resonance';\r\n                    }\r\n                    if (\r\n                        (c.magician && c.magician.toLowerCase() === 'true') ||\r\n                        (c.adept && c.adept.toLowerCase() === 'true')\r\n                    ) {\r\n                        update.special = 'magic';\r\n                        let attr = [];\r\n                        if (\r\n                            c.tradition &&\r\n                            c.tradition.drainattribute &&\r\n                            c.tradition.drainattribute.attr\r\n                        ) {\r\n                            attr = c.tradition.drainattribute.attr;\r\n                        } else if (c.tradition && c.tradition.drainattributes) {\r\n                            attr = c.tradition.drainattributes\r\n                                .split('+')\r\n                                .map((item) => item.trim());\r\n                        }\r\n                        attr.forEach((att) => {\r\n                            att = parseAtt(att);\r\n                            if (att !== 'willpower') update.magic.attribute = att;\r\n                        });\r\n                    }\r\n                    if (c.totaless) {\r\n                        update.attributes.essence.value = c.totaless;\r\n                    }\r\n                    if (c.nuyen) {\r\n                        update.nuyen = parseInt(c.nuyen.replace(',', ''));\r\n                    }\r\n                } catch (e) {\r\n                    error += `Error with character info: ${e}. `;\r\n                }\r\n                // update attributes\r\n                const atts = chummerfile.characters.character.attributes[1].attribute;\r\n                atts.forEach((att) => {\r\n                    try {\r\n                        const newAtt = parseAtt(att.name);\r\n                        if (newAtt) update.attributes[newAtt].base = parseInt(att.total);\r\n                    } catch (e) {\r\n                        error += `Error with attributes: ${e}. `;\r\n                    }\r\n                });\r\n                // initiative stuff\r\n                try {\r\n                    if (c.initbonus) {\r\n                        // not sure if this one is correct\r\n                        update.mods.initiative = c.initbonus;\r\n                    }\r\n                    if (c.initdice) {\r\n                        update.mods.initiative_dice = c.initdice - 1;\r\n                    }\r\n                } catch (e) {\r\n                    error += `Error with initiative: ${e}. `;\r\n                }\r\n                // skills...\r\n                const skills = c.skills.skill;\r\n                for (let i = 0; i < skills.length; i++) {\r\n                    try {\r\n                        const s = skills[i];\r\n                        if (s.rating > 0 && s.islanguage) {\r\n                            let group = 'active';\r\n                            let skill = null;\r\n                            const id = randomID(16);\r\n                            if (s.islanguage && s.islanguage.toLowerCase() === 'true') {\r\n                                skill = {};\r\n                                update.skills.language.value[id] = skill;\r\n                                group = 'language';\r\n                            } else if (s.knowledge && s.knowledge.toLowerCase() === 'true') {\r\n                                const category = s.skillcategory_english;\r\n                                console.log(category);\r\n                                skill = {};\r\n                                let skillCategory;\r\n                                if (category) {\r\n                                    console.log('found category', category);\r\n                                    const cat = category.toLowerCase();\r\n                                    if (cat === 'street')\r\n                                        skillCategory = update.skills.knowledge.street.value;\r\n                                    if (cat === 'academic')\r\n                                        skillCategory = update.skills.knowledge.academic.value;\r\n                                    if (cat === 'professional')\r\n                                        skillCategory = update.skills.knowledge.professional.value;\r\n                                    if (cat === 'interest')\r\n                                        skillCategory = update.skills.knowledge.interests.value;\r\n                                    if (skillCategory) skillCategory[id] = skill;\r\n                                } else {\r\n                                    if (s.attribute.toLowerCase() === 'int') {\r\n                                        update.skills.knowledge.street.value[id] = skill;\r\n                                    }\r\n                                    if (s.attribute.toLowerCase() === 'log') {\r\n                                        update.skills.knowledge.professional.value[id] = skill;\r\n                                    }\r\n                                }\r\n                                group = 'knowledge';\r\n                            } else {\r\n                                let name = s.name\r\n                                    .toLowerCase()\r\n                                    .trim()\r\n                                    .replace(/\\s/g, '_')\r\n                                    .replace(/-/g, '_');\r\n                                if (name.includes('exotic') && name.includes('_weapon'))\r\n                                    name = name.replace('_weapon', '');\r\n                                skill = update.skills.active[name];\r\n                            }\r\n                            if (!skill) console.error(`Couldn't parse skill ${s.name}`);\r\n                            if (skill) {\r\n                                if (group !== 'active') skill.name = s.name;\r\n                                skill.base = parseInt(s.rating);\r\n                                if (s.skillspecializations) {\r\n                                    skill.specs = getArray(\r\n                                        s.skillspecializations.skillspecialization.name\r\n                                    );\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (e) {\r\n                        console.error(e);\r\n                    }\r\n                }\r\n                // qualities\r\n                if (qualities && c.qualities && c.qualities.quality) {\r\n                    const qualities = getArray(c.qualities.quality);\r\n                    qualities.forEach((q) => {\r\n                        try {\r\n                            const data = {};\r\n                            data.type = q.qualitytype.toLowerCase();\r\n                            if (q.description)\r\n                                data.description = {\r\n                                    value: TextEditor.enrichHTML(q.description),\r\n                                };\r\n\r\n                            const itemData = {\r\n                                name: q.name,\r\n                                type: 'quality',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // weapons\r\n                if (weapons && c.weapons != null && c.weapons.weapon != null) {\r\n                    const weapons = getArray(c.weapons.weapon);\r\n                    weapons.forEach((w) => {\r\n                        try {\r\n                            const data = {};\r\n                            const action = {};\r\n                            const damage = {};\r\n                            action.damage = damage;\r\n                            data.action = action;\r\n\r\n                            if (w.description) {\r\n                                data.description = {\r\n                                    value: TextEditor.enrichHTML(w.description),\r\n                                };\r\n                            }\r\n\r\n                            damage.ap = {\r\n                                base: parseInt(getValues(w.ap)[0]),\r\n                            };\r\n                            action.type = 'varies';\r\n                            if (w.skill) action.skill = w.skill.toLowerCase().replace(/\\s/g, '_');\r\n                            else if (w.category && w.category.toLowerCase().includes('exotic'))\r\n                                action.skill = w.category\r\n                                    .toLowerCase()\r\n                                    .replace(' weapons', '')\r\n                                    .replace(/\\s/g, '_');\r\n                            if (action.skill.includes('exotic'))\r\n                                action.skill = action.skill.replace('_weapon', '');\r\n                            action.attribute = 'agility';\r\n                            action.limit = {\r\n                                base: parseInt(getValues(w.accuracy)[0]),\r\n                            };\r\n                            action.opposed = {\r\n                                type: 'defense',\r\n                            };\r\n\r\n                            if (w.type.toLowerCase() === 'melee') {\r\n                                action.type = 'complex';\r\n                                data.category = 'melee';\r\n                                const melee = {};\r\n                                data.melee = melee;\r\n                                melee.reach = parseInt(w.reach);\r\n                            } else if (w.type.toLowerCase() === 'ranged') {\r\n                                data.category = 'range';\r\n                                if (w.skill.toLowerCase().includes('throw')) {\r\n                                    data.category = 'thrown'; // TODO clean this up\r\n                                }\r\n                                const range = {};\r\n                                data.range = range;\r\n                                range.rc = {\r\n                                    base: parseInt(getValues(w.rc)[0]),\r\n                                };\r\n                                if (w.mode) {\r\n                                    // HeroLab export doesn't have mode\r\n                                    const lower = w.mode.toLowerCase();\r\n                                    range.modes = {\r\n                                        single_shot: lower.includes('ss'),\r\n                                        semi_auto: lower.includes('sa'),\r\n                                        burst_fire: lower.includes('bf'),\r\n                                        full_auto: lower.includes('fa'),\r\n                                    };\r\n                                }\r\n                                if (w.clips != null && w.clips.clip != null) {\r\n                                    // HeroLab export doesn't have clips\r\n                                    const clips = Array.isArray(w.clips.clip)\r\n                                        ? w.clips.clip\r\n                                        : [w.clips.clip];\r\n                                    clips.forEach((clip) => {\r\n                                        console.log(clip);\r\n                                    });\r\n                                }\r\n                                if (\r\n                                    w.ranges &&\r\n                                    w.ranges.short &&\r\n                                    w.ranges.medium &&\r\n                                    w.ranges.long &&\r\n                                    w.ranges.extreme\r\n                                ) {\r\n                                    console.log(w.ranges);\r\n                                    range.ranges = {\r\n                                        short: parseInt(w.ranges.short.split('-')[1]),\r\n                                        medium: parseInt(w.ranges.medium.split('-')[1]),\r\n                                        long: parseInt(w.ranges.long.split('-')[1]),\r\n                                        extreme: parseInt(w.ranges.extreme.split('-')[1]),\r\n                                    };\r\n                                }\r\n                                // TODO figure out how to add mods to weapons\r\n                                // if (w.accessories && w.accessories.accessory) {\r\n                                //     range.mods = [];\r\n                                //     const accessories = getArray(w.accessories.accessory);\r\n                                //     accessories.forEach((a) => {\r\n                                //         if (a) {\r\n                                //             range.mods.push({\r\n                                //                 name: a.name,\r\n                                //             });\r\n                                //         }\r\n                                //     });\r\n                                // }\r\n                            } else if (w.type.toLowerCase() === 'thrown') {\r\n                                data.category = 'thrown';\r\n                            }\r\n                            {\r\n                                // TODO handle raw damage if present\r\n                                const d = parseDamage(w.damage_english);\r\n                                damage.base = d.damage;\r\n                                damage.type = {};\r\n                                damage.type.base = d.type;\r\n                                if (d.dropoff || d.radius) {\r\n                                    const thrown = {};\r\n                                    data.thrown = thrown;\r\n                                    thrown.blast = {\r\n                                        radius: d.radius,\r\n                                        dropoff: d.dropoff,\r\n                                    };\r\n                                }\r\n                            }\r\n\r\n                            const itemData = {\r\n                                name: w.name,\r\n                                type: 'weapon',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // armors\r\n                if (armor && c.armors && c.armors.armor) {\r\n                    const armors = getArray(c.armors.armor);\r\n                    armors.forEach((a) => {\r\n                        try {\r\n                            const data = {};\r\n                            const armor = {};\r\n                            data.armor = armor;\r\n\r\n                            let desc = '';\r\n                            armor.mod = a.armor.includes('+');\r\n                            armor.value = parseInt(a.armor.replace('+', ''));\r\n                            if (a.description) desc = a.description;\r\n\r\n                            console.log(a);\r\n                            if (a.armormods && a.armormods.armormod) {\r\n                                armor.fire = 0;\r\n                                armor.electricity = 0;\r\n                                armor.cold = 0;\r\n                                armor.acid = 0;\r\n                                armor.radiation = 0;\r\n\r\n                                const modDesc = [];\r\n                                const mods = getArray(a.armormods.armormod);\r\n                                mods.forEach((mod) => {\r\n                                    if (mod.name.toLowerCase().includes('fire resistance')) {\r\n                                        armor.fire += parseInt(mod.rating);\r\n                                    } else if (mod.name.toLowerCase().includes('nonconductivity')) {\r\n                                        armor.electricity += parseInt(mod.rating);\r\n                                    } else if (mod.name.toLowerCase().includes('insulation')) {\r\n                                        armor.cold += parseInt(mod.rating);\r\n                                    } else if (\r\n                                        mod.name.toLowerCase().includes('radiation shielding')\r\n                                    ) {\r\n                                        armor.radiation += parseInt(mod.rating);\r\n                                    }\r\n                                    if (mod.rating !== '') {\r\n                                        modDesc.push(`${mod.name} R${mod.rating}`);\r\n                                    } else {\r\n                                        modDesc.push(mod.name);\r\n                                    }\r\n                                });\r\n                                if (modDesc.length > 0) {\r\n                                    // add desc to beginning\r\n                                    desc = `${modDesc.join(',')}\\n\\n${desc}`;\r\n                                }\r\n                            }\r\n                            if (a.equipped.toLowerCase() === 'true') {\r\n                                data.technology = {\r\n                                    equipped: true,\r\n                                };\r\n                            }\r\n                            data.description = {\r\n                                value: TextEditor.enrichHTML(desc),\r\n                            };\r\n\r\n                            const itemData = {\r\n                                name: a.name,\r\n                                type: 'armor',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // cyberware\r\n                if (cyberware && c.cyberwares && c.cyberwares.cyberware) {\r\n                    const cyberwares = getArray(c.cyberwares.cyberware);\r\n                    cyberwares.forEach((cy) => {\r\n                        try {\r\n                            const data = {};\r\n                            data.description = {\r\n                                rating: cy.rating,\r\n                                value: cy.description,\r\n                            };\r\n                            data.technology = {\r\n                                equipped: true,\r\n                            };\r\n                            data.essence = cy.ess;\r\n                            data.grade = cy.grade;\r\n                            const itemData = {\r\n                                name: cy.name,\r\n                                type: 'cyberware',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // powers\r\n                if (powers && c.powers && c.powers.power) {\r\n                    const powers = getArray(c.powers.power);\r\n                    powers.forEach((p) => {\r\n                        const data = {};\r\n                        if (p.description)\r\n                            data.description = {\r\n                                value: TextEditor.enrichHTML(p.description),\r\n                            };\r\n                        data.level = parseInt(p.rating);\r\n                        p.pp = parseInt(p.totalpoints);\r\n\r\n                        const itemData = {\r\n                            name: p.name,\r\n                            type: 'adept_power',\r\n                            data,\r\n                        };\r\n                        items.push(itemData);\r\n                    });\r\n                }\r\n                // gear\r\n                if (equipment && c.gears && c.gears.gear) {\r\n                    const gears = getArray(c.gears.gear);\r\n                    gears.forEach((g) => {\r\n                        try {\r\n                            const data = {};\r\n                            let { name } = g;\r\n                            if (g.extra) name += ` (${g.extra})`;\r\n                            data.technology = {\r\n                                rating: g.rating,\r\n                                quantity: g.qty,\r\n                            };\r\n                            data.description = {\r\n                                value: g.description,\r\n                            };\r\n                            const itemData = {\r\n                                name,\r\n                                type: 'equipment',\r\n                                data,\r\n                            };\r\n                            items.push(itemData);\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n                // spells\r\n                if (spells && c.spells && c.spells.spell) {\r\n                    const spells = getArray(c.spells.spell);\r\n                    spells.forEach((s) => {\r\n                        try {\r\n                            if (s.alchemy.toLowerCase() !== 'true') {\r\n                                const action = {};\r\n                                const data = {};\r\n                                data.action = action;\r\n                                data.category = s.category.toLowerCase().replace(/\\s/g, '_');\r\n                                data.name = s.name;\r\n                                data.type = s.type === 'M' ? 'mana' : 'physical';\r\n                                data.range =\r\n                                    s.range === 'T'\r\n                                        ? 'touch'\r\n                                        : s.range\r\n                                              .toLowerCase()\r\n                                              .replace(/\\s/g, '_')\r\n                                              .replace('(', '')\r\n                                              .replace(')', '');\r\n                                data.drain = parseInt(s.dv.replace('F', ''));\r\n                                let description = '';\r\n                                if (s.descriptors) description = s.descriptors;\r\n                                if (s.description) description += `\\n${s.description}`;\r\n                                data.description = {};\r\n                                data.description.value = TextEditor.enrichHTML(description);\r\n\r\n                                if (s.duration.toLowerCase() === 's') data.duration = 'sustained';\r\n                                else if (s.duration.toLowerCase() === 'i')\r\n                                    data.duration = 'instant';\r\n                                else if (s.duration.toLowerCase() === 'p')\r\n                                    data.duration = 'permanent';\r\n\r\n                                action.type = 'varies';\r\n                                action.skill = 'spellcasting';\r\n                                action.attribute = 'magic';\r\n\r\n                                if (s.descriptors) {\r\n                                    const desc = s.descriptors.toLowerCase();\r\n                                    if (s.category.toLowerCase() === 'combat') {\r\n                                        data.combat = {};\r\n                                        if (desc.includes('direct')) {\r\n                                            data.combat.type = 'indirect';\r\n                                            action.opposed = {\r\n                                                type: 'defense',\r\n                                            };\r\n                                        } else {\r\n                                            data.combat.type = 'direct';\r\n                                            if (data.type === 'mana') {\r\n                                                action.opposed = {\r\n                                                    type: 'custom',\r\n                                                    attribute: 'willpower',\r\n                                                };\r\n                                            } else if (data.type === 'physical') {\r\n                                                action.opposed = {\r\n                                                    type: 'custom',\r\n                                                    attribute: 'body',\r\n                                                };\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    if (s.category.toLowerCase() === 'detection') {\r\n                                        data.detection = {};\r\n                                        const split = desc.split(',');\r\n                                        split.forEach((token) => {\r\n                                            token = token || '';\r\n                                            token = token.replace(' detection spell', '');\r\n                                            if (!token) return;\r\n                                            if (token.includes('area')) return;\r\n\r\n                                            if (token.includes('passive'))\r\n                                                data.detection.passive = true;\r\n                                            else if (token.includes('active'))\r\n                                                data.detection.passive = false;\r\n                                            else if (token)\r\n                                                data.detection.type = token.toLowerCase();\r\n                                        });\r\n                                        if (!data.detection.passive) {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'willpower',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                    if (s.category.toLowerCase() === 'illusion') {\r\n                                        data.illusion = {};\r\n                                        const split = desc.split(',');\r\n                                        split.forEach((token) => {\r\n                                            token = token || '';\r\n                                            token = token.replace(' illusion spell', '');\r\n                                            if (!token) return;\r\n                                            if (token.includes('area')) return;\r\n\r\n                                            if (token.includes('sense'))\r\n                                                data.illusion.sense = token.toLowerCase();\r\n                                            else if (token)\r\n                                                data.illusion.type = token.toLowerCase();\r\n                                        });\r\n                                        if (data.type === 'mana') {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'willpower',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        } else {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'intuition',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                    if (s.category.toLowerCase() === 'manipulation') {\r\n                                        data.manipulation = {};\r\n                                        if (desc.includes('environmental'))\r\n                                            data.manipulation.environmental = true;\r\n                                        if (desc.includes('physical'))\r\n                                            data.manipulation.physical = true;\r\n                                        if (desc.includes('mental'))\r\n                                            data.manipulation.mental = true;\r\n                                        // TODO figure out how to parse damaging\r\n\r\n                                        if (data.manipulation.mental) {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'willpower',\r\n                                                attribute2: 'logic',\r\n                                            };\r\n                                        }\r\n                                        if (data.manipulation.physical) {\r\n                                            action.opposed = {\r\n                                                type: 'custom',\r\n                                                attribute: 'body',\r\n                                                attribute2: 'strength',\r\n                                            };\r\n                                        }\r\n                                    }\r\n                                }\r\n                                const itemData = {\r\n                                    name: s.name,\r\n                                    type: 'spell',\r\n                                    data,\r\n                                };\r\n                                items.push(itemData);\r\n                            }\r\n                        } catch (e) {\r\n                            console.error(e);\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            await this.object.update(updateData);\r\n            await this.object.createEmbeddedEntity('OwnedItem', items);\r\n            ui.notifications.info(\r\n                'Complete! Check everything. Notably: Ranged weapon mods and ammo; Strength based weapon damage; Specializations on all spells, powers, and weapons;'\r\n            );\r\n            this.close();\r\n        });\r\n    }\r\n}\r\n","import { SR5Item } from '../../item/SR5Item';\r\nimport { Helpers } from '../../helpers';\r\n\r\nexport class ShadowrunItemDialog extends Dialog {\r\n    static async fromItem(item: SR5Item, event?: MouseEvent): Promise<DialogData | undefined> {\r\n        const dialogData: DialogData = {\r\n            title: item.name,\r\n            buttons: {},\r\n        };\r\n        if (event) dialogData['event'] = event;\r\n\r\n        const templateData = {};\r\n        let templatePath = '';\r\n\r\n        if (item.isRangedWeapon()) {\r\n            ShadowrunItemDialog.addRangedWeaponData(templateData, dialogData, item);\r\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/range-weapon-roll.html';\r\n        } else if (item.isSpell()) {\r\n            ShadowrunItemDialog.addSpellData(templateData, dialogData, item);\r\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-spell.html';\r\n        } else if (item.isComplexForm()) {\r\n            ShadowrunItemDialog.addComplexFormData(templateData, dialogData, item);\r\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-complex-form.html';\r\n        }\r\n\r\n        if (templatePath) {\r\n            const dialog = await renderTemplate(templatePath, templateData);\r\n            return mergeObject(dialogData, {\r\n                content: dialog,\r\n            });\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    /*\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        return mergeObject(options, {\r\n            classes: ['sr5', 'sheet'],\r\n        });\r\n    }\r\n     */\r\n\r\n    static addComplexFormData(templateData: object, dialogData: DialogData, item: SR5Item): void {\r\n        const fade = item.getFade();\r\n        const title = `${Helpers.label(item.name)} Level`;\r\n\r\n        const level = item.getLastComplexFormLevel()?.value || 2 - fade;\r\n\r\n        templateData['fade'] = fade >= 0 ? `+${fade}` : fade;\r\n        templateData['level'] = level;\r\n        templateData['title'] = title;\r\n\r\n        let cancel = true;\r\n        dialogData.buttons = {\r\n            roll: {\r\n                label: 'Continue',\r\n                icon: '<i class=\"fas fa-dice-six\"></i>',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n        dialogData.close = async (html) => {\r\n            if (cancel) return false;\r\n            const level = Helpers.parseInputToNumber($(html).find('[name=level]').val());\r\n            await item.setLastComplexFormLevel({ value: level });\r\n            return true;\r\n        };\r\n    }\r\n\r\n    static addSpellData(templateData: object, dialogData: DialogData, item: SR5Item): void {\r\n        const title = `${Helpers.label(item.name)} Force`;\r\n        const drain = item.getDrain();\r\n\r\n        const force = item.getLastSpellForce()?.value || 2 - drain;\r\n\r\n        templateData['drain'] = drain >= 0 ? `+${drain}` : `${drain}`;\r\n        templateData['force'] = force;\r\n        templateData['title'] = title;\r\n\r\n        dialogData.title = title;\r\n        let cancel = true;\r\n        let reckless = false;\r\n        dialogData.buttons = {\r\n            normal: {\r\n                label: game.i18n.localize('SR5.NormalSpellButton'),\r\n                callback: () => (cancel = false),\r\n            },\r\n            reckless: {\r\n                label: game.i18n.localize('SR5.RecklessSpellButton'),\r\n                callback: () => {\r\n                    reckless = true;\r\n                    cancel = false;\r\n                },\r\n            },\r\n        };\r\n        dialogData.default = 'normal';\r\n        dialogData.close = async (html) => {\r\n            if (cancel) return false;\r\n            const force = Helpers.parseInputToNumber($(html).find('[name=force]').val());\r\n            await item.setLastSpellForce({ value: force, reckless });\r\n            return true;\r\n        };\r\n    }\r\n\r\n    static addRangedWeaponData(templateData: object, dialogData: DialogData, item: SR5Item): void {\r\n        let title = dialogData.title || item.name;\r\n\r\n        const itemData = item.data.data;\r\n        const fireModes = {};\r\n\r\n        const { modes, ranges } = itemData.range;\r\n        const { ammo } = itemData;\r\n        if (modes.single_shot) {\r\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSingleShotShort\");\r\n        }\r\n        if (modes.semi_auto) {\r\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoShort\");\r\n            fireModes['3'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\");\r\n        }\r\n        if (modes.burst_fire) {\r\n            fireModes['3'] = `${modes.semi_auto ? `${game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\")}/` : ''}${game.i18n.localize(\"SR5.WeaponModeBurstFireShort\")}`;\r\n            fireModes['6'] = game.i18n.localize(\"SR5.WeaponModeBurstFireLong\");\r\n        }\r\n        if (modes.full_auto) {\r\n            fireModes['6'] = `${modes.burst_fire ? 'LB/' : ''}${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(s)`;\r\n            fireModes['10'] = `${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(c)`;\r\n            fireModes['20'] = game.i18n.localize('SR5.Suppressing');\r\n        }\r\n\r\n        const templateRanges = this._getRangeWeaponTemplateData(ranges);\r\n        const fireMode = item.getLastFireMode();\r\n        const rc = item.getRecoilCompensation(true);\r\n        templateData['fireModes'] = fireModes;\r\n        templateData['fireMode'] = fireMode?.value;\r\n        templateData['rc'] = rc;\r\n        templateData['ammo'] = ammo;\r\n        templateData['title'] = title;\r\n        templateData['ranges'] = templateRanges;\r\n        templateData['targetRange'] = item.getLastFireRangeMod();\r\n\r\n        let cancel = true;\r\n        dialogData.buttons = {\r\n            continue: {\r\n                label: game.i18n.localize('SR5.Continue'),\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n\r\n        dialogData.close = async (html) => {\r\n            if (cancel) return false;\r\n            const fireMode = Helpers.parseInputToNumber($(html).find('[name=\"fireMode\"]').val());\r\n            const range = Helpers.parseInputToNumber($(html).find('[name=\"range\"]').val());\r\n\r\n            if (range) {\r\n                await item.setLastFireRangeMod({ value: range });\r\n            }\r\n\r\n            if (fireMode) {\r\n                const fireModeString = fireModes[fireMode];\r\n                const defenseModifier = Helpers.mapRoundsToDefenseDesc(fireMode);\r\n                const fireModeData = {\r\n                    label: fireModeString,\r\n                    value: fireMode,\r\n                    defense: defenseModifier,\r\n                };\r\n                await item.setLastFireMode(fireModeData);\r\n            }\r\n            return true;\r\n        };\r\n    }\r\n\r\n    static _getRangeWeaponTemplateData(ranges) {\r\n        const lookup = {\r\n            short: 0,\r\n            medium: -1,\r\n            long: -3,\r\n            extreme: -6,\r\n        };\r\n        const newRanges = {};\r\n        for (const [key, value] of Object.entries(ranges)) {\r\n            newRanges[key] = {\r\n                distance: value,\r\n                label: CONFIG.SR5.weaponRanges[key],\r\n                modifier: lookup[key],\r\n            };\r\n        }\r\n        return newRanges;\r\n    }\r\n}\r\n","/**\r\n * A GM-Tool to keep track of all players overwatch scores\r\n */\r\nexport class OverwatchScoreTracker extends Application {\r\n    static MatrixOverwatchDiceCount = '2d6';\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        options.id = 'overwatch-score-tracker';\r\n        options.classes = ['sr5'];\r\n        options.title = game.i18n.localize('SR5.OverwatchScoreTrackerTitle');\r\n        options.template =\r\n            'systems/shadowrun5e/dist/templates/apps/gmtools/overwatch-score-tracker.html';\r\n        options.width = 450;\r\n        options.height = 'auto';\r\n        options.resizable = true;\r\n        return options;\r\n    }\r\n\r\n    getData() {\r\n        // get list of actors that belong to users\r\n        const actors = game.users.reduce((acc, user) => {\r\n            if (!user.isGM && user.character) {\r\n                acc.push(user.character.data);\r\n            }\r\n            return acc;\r\n        }, []);\r\n\r\n        return {\r\n            actors,\r\n        };\r\n    }\r\n\r\n    activateListeners(html) {\r\n        html.find('.overwatch-score-reset').on('click', this._resetOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-add').on('click', this._addOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-input').on('change', this._setOverwatchScore.bind(this));\r\n        html.find('.overwatch-score-roll-15-minutes').on(\r\n            'click',\r\n            this._rollFor15Minutes.bind(this)\r\n        );\r\n    }\r\n\r\n    // returns the actor that this event is acting on\r\n    _getActorFromEvent(event) {\r\n        const id = event.currentTarget.closest('.item').dataset.actorId;\r\n        if (id) return game.actors.find((a) => a._id === id);\r\n    }\r\n\r\n    _setOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = event.currentTarget.value;\r\n        if (amount && actor) {\r\n            actor.setOverwatchScore(amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _addOverwatchScore(event) {\r\n        const actor = this._getActorFromEvent(event);\r\n        const amount = parseInt(event.currentTarget.dataset.amount);\r\n        if (amount && actor) {\r\n            const os = actor.getOverwatchScore();\r\n            actor.setOverwatchScore(os + amount).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _resetOverwatchScore(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            actor.setOverwatchScore(0).then(() => this.render());\r\n        }\r\n    }\r\n\r\n    _rollFor15Minutes(event) {\r\n        event.preventDefault();\r\n        const actor = this._getActorFromEvent(event);\r\n        if (actor) {\r\n            //  use static value so it can be modified in modules\r\n            const roll = new Roll(OverwatchScoreTracker.MatrixOverwatchDiceCount);\r\n            roll.roll();\r\n\r\n            // use GM Roll Mode so players don't see\r\n            // const rollMode = CONFIG.Dice.rollModes.gmroll;\r\n            // roll.toMessage({ rollMode });\r\n\r\n            if (roll.total) {\r\n                const os = actor.getOverwatchScore();\r\n                actor.setOverwatchScore(os + roll.total).then(() => this.render());\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { LanguageSkillEditForm } from './LanguageSkillEditForm';\r\nimport KnowledgeSkillCategory = Shadowrun.KnowledgeSkillCategory;\r\n\r\nexport class KnowledgeSkillEditForm extends LanguageSkillEditForm {\r\n    category: KnowledgeSkillCategory;\r\n    constructor(actor, options, skillId, category) {\r\n        super(actor, options, skillId);\r\n        this.category = category;\r\n    }\r\n    _updateString() {\r\n        return `data.skills.knowledge.${this.category}.value.${this.skillId}`;\r\n    }\r\n}\r\n","import { SkillEditForm } from './SkillEditForm';\r\n\r\nexport class LanguageSkillEditForm extends SkillEditForm {\r\n    _updateString() {\r\n        return `data.skills.language.value.${this.skillId}`;\r\n    }\r\n\r\n    getData() {\r\n        return mergeObject(super.getData(), {\r\n            editable_name: true,\r\n        });\r\n    }\r\n\r\n    /** @override */\r\n    _onUpdateObject(event, formData, updateData) {\r\n        super._onUpdateObject(event, formData, updateData);\r\n        const name = formData['data.name'];\r\n        const currentData = updateData[this._updateString()] || {};\r\n        updateData[this._updateString()] = {\r\n            ...currentData,\r\n            name,\r\n        };\r\n    }\r\n}\r\n","import SkillEditFormData = Shadowrun.SkillEditFormData;\r\n\r\nexport class SkillEditForm extends BaseEntitySheet {\r\n    skillId: string;\r\n\r\n    constructor(actor, options, skillId) {\r\n        super(actor, options);\r\n        this.skillId = skillId;\r\n    }\r\n\r\n    _updateString() {\r\n        return `data.skills.active.${this.skillId}`;\r\n    }\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n        return mergeObject(options, {\r\n            id: 'skill-editor',\r\n            classes: ['sr5', 'sheet', 'skill-edit-window'],\r\n            template: 'systems/shadowrun5e/dist/templates/apps/skill-edit.html',\r\n            width: 300,\r\n            submitOnClose: true,\r\n            submitOnChange: true,\r\n            closeOnSubmit: false,\r\n            resizable: true,\r\n        });\r\n    }\r\n\r\n    get title(): string {\r\n        const data = this.getData().data;\r\n        return `${game.i18n.localize('SR5.EditSkill')} - ${data?.label ? game.i18n.localize(data.label) : ''}`;\r\n    }\r\n\r\n    _onUpdateObject(event, formData, updateData) {\r\n        // get base value\r\n        const base = formData['data.base'];\r\n\r\n        // process specializations\r\n        const specsRegex = /data\\.specs\\.(\\d+)/;\r\n        const specs = Object.entries(formData).reduce((running, [key, val]: [string, any]) => {\r\n            const found = key.match(specsRegex);\r\n            if (found && found[0]) {\r\n                running.push(val);\r\n            }\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        // process bonuses\r\n        const bonusKeyRegex = /data\\.bonus\\.(\\d+).key/;\r\n        const bonusValueRegex = /data\\.bonus\\.(\\d+).value/;\r\n        const bonus = Object.entries(formData).reduce((running, [key, value]: [string, any]) => {\r\n            const foundKey = key.match(bonusKeyRegex);\r\n            const foundVal = key.match(bonusValueRegex);\r\n            if (foundKey && foundKey[0] && foundKey[1]) {\r\n                const index = foundKey[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].key = value;\r\n            } else if (foundVal && foundVal[0] && foundVal[1]) {\r\n                const index = foundVal[1];\r\n                if (running[index] === undefined) running[index] = {};\r\n                running[index].value = value;\r\n            }\r\n\r\n            return running;\r\n        }, [] as any[]);\r\n\r\n        const currentData = updateData[this._updateString()] || {};\r\n        updateData[this._updateString()] = {\r\n            ...currentData,\r\n            base,\r\n            specs,\r\n            bonus,\r\n        };\r\n    }\r\n\r\n    /** @override */\r\n    async _updateObject(event, formData) {\r\n        const updateData = {};\r\n        this._onUpdateObject(event, formData, updateData);\r\n        console.log(formData);\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        $(html).find('.add-spec').on('click', this._addNewSpec.bind(this));\r\n        $(html).find('.remove-spec').on('click', this._removeSpec.bind(this));\r\n        $(html).find('.add-bonus').on('click', this._addNewBonus.bind(this));\r\n        $(html).find('.remove-bonus').on('click', this._removeBonus.bind(this));\r\n    }\r\n\r\n    async _addNewBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (!data) return;\r\n        const { bonus = [] } = data;\r\n        // add blank line for new bonus\r\n        updateData[`${this._updateString()}.bonus`] = [...bonus, { key: '', value: 0 }];\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    async _removeBonus(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.bonus) {\r\n            const { bonus } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                bonus.splice(index, 1);\r\n                updateData[`${this._updateString()}.bonus`] = bonus;\r\n                await this.entity.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    async _addNewSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.specs) {\r\n            // add a blank line to specs\r\n            const { specs } = data;\r\n            updateData[`${this._updateString()}.specs`] = [...specs, ''];\r\n        }\r\n        await this.entity.update(updateData);\r\n    }\r\n\r\n    async _removeSpec(event) {\r\n        event.preventDefault();\r\n        const updateData = {};\r\n        const data = this.getData().data;\r\n        if (data?.specs) {\r\n            const { specs } = data;\r\n            const index = event.currentTarget.dataset.spec;\r\n            if (index >= 0) {\r\n                specs.splice(index, 1);\r\n                updateData[`${this._updateString()}.specs`] = specs;\r\n                await this.entity.update(updateData);\r\n            }\r\n        }\r\n    }\r\n\r\n    getData(): SkillEditFormData {\r\n        const data = super.getData();\r\n        const actor = super.getData().entity;\r\n        data['data'] = actor ? getProperty(actor, this._updateString()) : {};\r\n        return data;\r\n    }\r\n}\r\n","/**\r\n * Measure the distance between two pixel coordinates\r\n * See BaseGrid.measureDistance for more details\r\n *\r\n * @param {Object} p0           The origin coordinate {x, y}\r\n * @param {Object} p1           The destination coordinate {x, y}\r\n * @param {boolean} gridSpaces  Enforce grid distance (if true) vs. direct point-to-point (if false)\r\n * @return {number}             The distance between p1 and p0\r\n */\r\nimport { SYSTEM_NAME } from './constants';\r\n\r\nexport const measureDistance = function (p0, p1, { gridSpaces = true } = {}) {\r\n    if (!gridSpaces)\r\n        {  // BaseGrid exists... fix in foundry types\r\n            // @ts-ignore\r\n            return BaseGrid.prototype.measureDistance.bind(this)(p0, p1, {\r\n                        gridSpaces,\r\n                    });\r\n        }\r\n    const gs = canvas.dimensions.size;\r\n    const ray = new Ray(p0, p1);\r\n    const nx = Math.abs(Math.ceil(ray.dx / gs));\r\n    const ny = Math.abs(Math.ceil(ray.dy / gs));\r\n\r\n    // Get the number of straight and diagonal moves\r\n    const nDiagonal = Math.min(nx, ny);\r\n    const nStraight = Math.abs(ny - nx);\r\n\r\n    const diagonalRule = game.settings.get(SYSTEM_NAME, 'diagonalMovement');\r\n\r\n    if (diagonalRule === '1-2-1') {\r\n        const nd10 = Math.floor(nDiagonal / 2);\r\n        const spaces = nd10 * 2 + (nDiagonal - nd10) + nStraight;\r\n        return spaces * canvas.dimensions.distance;\r\n    }\r\n    return (nStraight + nDiagonal) * canvas.scene.data.gridDistance;\r\n};\r\n","import { SR5Actor } from './actor/SR5Actor';\r\nimport { SR5Item } from './item/SR5Item';\r\nimport Template from './template';\r\nimport ModList = Shadowrun.ModList;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport { FLAGS, SYSTEM_NAME } from './constants';\r\nimport { PartsList } from './parts/PartsList';\r\n\r\nexport type TemplateData = {\r\n    header: {\r\n        name: string;\r\n        img: string;\r\n    };\r\n    tokenId?: string;\r\n    dice?: Die[];\r\n    parts?: ModList<number>;\r\n    limit?: BaseValuePair<number> & LabelField;\r\n    testName?: string;\r\n    actor?: SR5Actor;\r\n    item?: SR5Item;\r\n    attack?: AttackData;\r\n    incomingAttack?: AttackData;\r\n    incomingDrain?: LabelField & {\r\n        value: number;\r\n    };\r\n    hits?: number;\r\n    soak?: DamageData;\r\n    tests?: {\r\n        label: string;\r\n        type: string;\r\n    }[];\r\n    description?: object;\r\n    previewTemplate?: boolean;\r\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\r\n};\r\n\r\nexport const createChatData = async (templateData: TemplateData, roll?: Roll) => {\r\n    const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\r\n    const hackyTemplateData = {\r\n        ...templateData,\r\n        parts: new PartsList(templateData.parts).getMessageOutput(),\r\n        showGlitchAnimation: game.settings.get(SYSTEM_NAME, FLAGS.ShowGlitchAnimation),\r\n    };\r\n    const html = await renderTemplate(template, hackyTemplateData);\r\n    const actor = templateData.actor;\r\n\r\n    const chatData = {\r\n        user: game.user._id,\r\n        type: roll ? CONST.CHAT_MESSAGE_TYPES.ROLL : CONST.CHAT_MESSAGE_TYPES.OTHER,\r\n        content: html,\r\n        roll: roll ? JSON.stringify(roll) : undefined,\r\n        speaker: {\r\n            actor: actor?._id,\r\n            token: actor?.token,\r\n            alias: actor?.name,\r\n        },\r\n        flags: {\r\n            shadowrun5e: {\r\n                customRoll: true,\r\n            },\r\n        },\r\n    };\r\n    if (roll) {\r\n        chatData['sound'] = CONFIG.sounds.dice;\r\n    }\r\n    const rollMode = templateData.rollMode ?? game.settings.get('core', 'rollMode');\r\n\r\n    if (['gmroll', 'blindroll'].includes(rollMode)) chatData['whisper'] = ChatMessage.getWhisperIDs('GM');\r\n    if (rollMode === 'blindroll') chatData['blind'] = true;\r\n\r\n    return chatData;\r\n};\r\n\r\nexport const addChatMessageContextOptions = (html, options) => {\r\n    const canRoll = (li) => {\r\n        const msg = game.messages.get(li.data().messageId);\r\n\r\n        return msg.getFlag(SYSTEM_NAME, 'customRoll');\r\n    };\r\n\r\n    options.push(\r\n        {\r\n            name: 'Push the Limit',\r\n            callback: (li) => SR5Actor.pushTheLimit(li),\r\n            condition: canRoll,\r\n            icon: '<i class=\"fas fa-meteor\"></i>',\r\n        },\r\n        {\r\n            name: 'Second Chance',\r\n            callback: (li) => SR5Actor.secondChance(li),\r\n            condition: canRoll,\r\n            icon: '<i class=\"fas fa-dice-d6\"></i>',\r\n        },\r\n    );\r\n    return options;\r\n};\r\n\r\nexport const addRollListeners = (app: ChatMessage, html) => {\r\n    if (!app.getFlag(SYSTEM_NAME, 'customRoll')) return;\r\n    const item = SR5Item.getItemFromMessage(html);\r\n    html.on('click', '.test-roll', async (event) => {\r\n        event.preventDefault();\r\n        if (item) {\r\n            const roll = await item.rollTest(event, { hideRollMessage: true });\r\n            if (roll && roll.templateData) {\r\n                const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\r\n                const html = await renderTemplate(template, roll.templateData);\r\n                const data = {};\r\n                data['content'] = html;\r\n                await app.update(data);\r\n            }\r\n        }\r\n    });\r\n    html.on('click', '.test', async (event) => {\r\n        event.preventDefault();\r\n        const type = event.currentTarget.dataset.action;\r\n        if (item) {\r\n            await item.rollExtraTest(type, event);\r\n        }\r\n    });\r\n    html.on('click', '.place-template', (event) => {\r\n        event.preventDefault();\r\n        if (item) {\r\n            const template = Template.fromItem(item);\r\n            template?.drawPreview();\r\n        }\r\n    });\r\n    html.on('click', '.card-title', (event) => {\r\n        event.preventDefault();\r\n        $(event.currentTarget).siblings('.card-description').toggle();\r\n    });\r\n    if (item?.hasRoll && app.isRoll) $(html).find('.card-description').hide();\r\n};\r\n","import { SYSTEM_NAME } from './constants';\r\n\r\nexport const preCombatUpdate = async function (combat, changes, options) {\r\n    // triggers when combat round changes\r\n    if (changes.round && combat.round && changes.round > combat.round) {\r\n        let initPassEnd = true;\r\n        for (const c of combat.combatants) {\r\n            let init = Number(c.initiative);\r\n            init -= 10;\r\n            if (init > 0) initPassEnd = false;\r\n        }\r\n        if (!initPassEnd) {\r\n            changes.round = combat.round;\r\n        }\r\n        // if we are gm, call function normally\r\n        // if not gm, send a socket message for the gm to update the combatants\r\n        // for new initative passes or reroll\r\n        if (game.user.isGM) {\r\n            await shadowrunCombatUpdate(changes, options);\r\n        } else {\r\n            // @ts-ignore\r\n            game.socket.emit('system.shadowrun5e', {\r\n                gmCombatUpdate: {\r\n                    changes,\r\n                    options,\r\n                },\r\n            });\r\n        }\r\n    }\r\n};\r\n\r\nexport const shadowrunCombatUpdate = async (changes, options) => {\r\n    const { combat } = game;\r\n    // subtact 10 from all initiative, we just went into the next initiative pass\r\n    const removedCombatants = combat.getFlag(SYSTEM_NAME, 'removedCombatants') || [];\r\n    const combatants = [];\r\n    for (const c of combat.combatants) {\r\n        let init = Number(c.initiative);\r\n        init -= 10;\r\n        if (init <= 0) removedCombatants.push({ ...c });\r\n        else {\r\n            // @ts-ignore\r\n            combatants.push({ _id: c._id, initiative: init });\r\n        }\r\n    }\r\n    await combat.deleteEmbeddedEntity(\r\n        'Combatant',\r\n        removedCombatants.map((c) => c._id),\r\n        {},\r\n    );\r\n    await combat.updateEmbeddedEntity('Combatant', combatants, {});\r\n    if (combatants.length === 0) {\r\n        const messages = [];\r\n        const messageOptions = options.messageOptions || {};\r\n\r\n        for (const c of removedCombatants) {\r\n            const actorData = c.actor ? c.actor.data : {};\r\n            // @ts-ignore\r\n            const formula = combat._getInitiativeFormula(c);\r\n\r\n            const roll: Roll = new Roll(formula, actorData).roll();\r\n            c.initiative = roll.total;\r\n\r\n            const rollMode = messageOptions.rollMode || c.token.hidden || c.hidden ? 'gmroll' : 'roll';\r\n            const messageData = mergeObject(\r\n                {\r\n                    speaker: {\r\n                        scene: canvas.scene._id,\r\n                        actor: c.actor ? c.actor._id : null,\r\n                        token: c.token._id,\r\n                        alias: c.token.name,\r\n                    },\r\n                    flavor: `${c.token.name} rolls for Initiative!`,\r\n                },\r\n                messageOptions,\r\n            );\r\n            await roll.toMessage(messageData, {\r\n                rollMode,\r\n            });\r\n        }\r\n        await combat.createEmbeddedEntity('Combatant', removedCombatants, {});\r\n        await ChatMessage.create(messages);\r\n        await combat.unsetFlag(SYSTEM_NAME, 'removedCombatants');\r\n        // @ts-ignore\r\n        await combat.resetAll();\r\n        await combat.rollAll();\r\n        await combat.update({ turn: 0 });\r\n    } else if (removedCombatants.length) {\r\n        await combat.setFlag(SYSTEM_NAME, 'removedCombatants', removedCombatants);\r\n        await combat.update({ turn: 0 });\r\n    }\r\n};\r\n","export const SR5 = {};\r\n\r\nSR5['attributes'] = {\r\n    body: 'SR5.AttrBody',\r\n    agility: 'SR5.AttrAgility',\r\n    reaction: 'SR5.AttrReaction',\r\n    strength: 'SR5.AttrStrength',\r\n    willpower: 'SR5.AttrWillpower',\r\n    logic: 'SR5.AttrLogic',\r\n    intuition: 'SR5.AttrIntuition',\r\n    charisma: 'SR5.AttrCharisma',\r\n    magic: 'SR5.AttrMagic',\r\n    resonance: 'SR5.AttrResonance',\r\n    edge: 'SR5.AttrEdge',\r\n    essence: 'SR5.AttrEssence',\r\n    attack: 'SR5.MatrixAttrAttack',\r\n    sleaze: 'SR5.MatrixAttrSleaze',\r\n    data_processing: 'SR5.MatrixAttrDataProc',\r\n    firewall: 'SR5.MatrixAttrFirewall',\r\n};\r\n\r\nSR5['limits'] = {\r\n    physical: 'SR5.LimitPhysical',\r\n    social: 'SR5.LimitSocial',\r\n    mental: 'SR5.LimitMental',\r\n    attack: 'SR5.MatrixAttrAttack',\r\n    sleaze: 'SR5.MatrixAttrSleaze',\r\n    data_processing: 'SR5.MatrixAttrDataProc',\r\n    firewall: 'SR5.MatrixAttrFirewall',\r\n};\r\n\r\nSR5['specialTypes'] = {\r\n    mundane: 'SR5.Mundane',\r\n    magic: 'SR5.Awakened',\r\n    resonance: 'SR5.Emerged',\r\n};\r\n\r\nSR5['damageTypes'] = {\r\n    physical: 'SR5.DmgTypePhysical',\r\n    stun: 'SR5.DmgTypeStun',\r\n    matrix: 'SR5.DmgTypeMatrix',\r\n};\r\n\r\nSR5['elementTypes'] = {\r\n    fire: 'SR5.ElementFire',\r\n    cold: 'SR5.ElementCold',\r\n    acid: 'SR5.ElementAcid',\r\n    electricity: 'SR5.ElementElectricity',\r\n    radiation: 'SR5.ElementRadiation',\r\n};\r\n\r\nSR5['spellCategories'] = {\r\n    combat: 'SR5.SpellCatCombat',\r\n    detection: 'SR5.SpellCatDetection',\r\n    health: 'SR5.SpellCatHealth',\r\n    illusion: 'SR5.SpellCatIllusion',\r\n    manipulation: 'SR5.SpellCatManipulation',\r\n};\r\n\r\nSR5['spellTypes'] = {\r\n    physical: 'SR5.SpellTypePhysical',\r\n    mana: 'SR5.SpellTypeMana',\r\n};\r\n\r\nSR5['spellRanges'] = {\r\n    touch: 'SR5.SpellRangeTouch',\r\n    los: 'SR5.SpellRangeLos',\r\n    los_a: 'SR5.SpellRangeLosA',\r\n};\r\n\r\nSR5['combatSpellTypes'] = {\r\n    direct: 'SR5.SpellCombatDirect',\r\n    indirect: 'SR5.SpellCombatIndirect',\r\n};\r\n\r\nSR5['detectionSpellTypes'] = {\r\n    directional: 'SR5.SpellDetectionDirectional',\r\n    psychic: 'SR5.SpellDetectionPsychic',\r\n    area: 'SR5.SpellDetectionArea',\r\n};\r\n\r\nSR5['illusionSpellTypes'] = {\r\n    obvious: 'SR5.SpellIllusionObvious',\r\n    realistic: 'SR5.SpellIllusionRealistic',\r\n};\r\n\r\nSR5['illusionSpellSenses'] = {\r\n    'single-sense': 'SR5.SpellIllusionSingleSense',\r\n    'multi-sense': 'SR5.SpellIllusionMultiSense',\r\n};\r\n\r\nSR5['attributeRolls'] = {\r\n    composure: 'SR5.RollComposure',\r\n    lift_carry: 'SR5.RollLiftCarry',\r\n    judge_intentions: 'SR5.RollJudgeIntentions',\r\n    memory: 'SR5.RollMemory',\r\n};\r\n\r\nSR5['matrixTargets'] = {\r\n    persona: 'SR5.TargetPersona',\r\n    device: 'SR5.TargetDevice',\r\n    file: 'SR5.TargetFile',\r\n    self: 'SR5.TargetSelf',\r\n    sprite: 'SR5.TargetSprite',\r\n    other: 'SR5.TargetOther',\r\n};\r\n\r\nSR5['durations'] = {\r\n    instant: 'SR5.DurationInstant',\r\n    sustained: 'SR5.DurationSustained',\r\n    permanent: 'SR5.DurationPermanent',\r\n};\r\n\r\nSR5['weaponCategories'] = {\r\n    range: 'SR5.WeaponCatRange',\r\n    melee: 'SR5.WeaponCatMelee',\r\n    thrown: 'SR5.WeaponCatThrown',\r\n};\r\n\r\nSR5['weaponRanges'] = {\r\n    short: 'SR5.WeaponRangeShort',\r\n    medium: 'SR5.WeaponRangeMedium',\r\n    long: 'SR5.WeaponRangeLong',\r\n    extreme: 'SR5.WeaponRangeExtreme',\r\n};\r\n\r\nSR5['qualityTypes'] = {\r\n    positive: 'SR5.QualityTypePositive',\r\n    negative: 'SR5.QualityTypeNegative',\r\n};\r\n\r\nSR5['deviceCategories'] = {\r\n    commlink: 'SR5.DeviceCatCommlink',\r\n    cyberdeck: 'SR5.DeviceCatCyberdeck',\r\n};\r\n\r\nSR5['cyberwareGrades'] = {\r\n    standard: 'SR5.CyberwareGradeStandard',\r\n    alpha: 'SR5.CyberwareGradeAlpha',\r\n    beta: 'SR5.CyberwareGradeBeta',\r\n    delta: 'SR5.CyberwareGradeDelta',\r\n    used: 'SR5.CyberwareGradeUsed',\r\n};\r\n\r\nSR5['knowledgeSkillCategories'] = {\r\n    street: 'SR5.KnowledgeSkillStreet',\r\n    academic: 'SR5.KnowledgeSkillAcademic',\r\n    professional: 'SR5.KnowledgeSkillProfessional',\r\n    interests: 'SR5.KnowledgeSkillInterests',\r\n};\r\n\r\nSR5['activeSkills'] = {\r\n    archery: 'SR5.SkillArchery',\r\n    automatics: 'SR5.SkillAutomatics',\r\n    blades: 'SR5.SkillBlades',\r\n    clubs: 'SR5.SkillClubs',\r\n    exotic_melee: 'SR5.SkillExoticMelee',\r\n    exotic_range: 'SR5.SkillExoticRange',\r\n    heavy_weapons: 'SR5.SkillHeavyWeapons',\r\n    longarms: 'SR5.SkillLongarms',\r\n    pistols: 'SR5.SkillPistols',\r\n    throwing_weapons: 'SR5.SkillThrowingWeapons',\r\n    unarmed_combat: 'SR5.SkillUnarmedCombat',\r\n    disguise: 'SR5.SkillDisguise',\r\n    diving: 'SR5.SkillDiving',\r\n    escape_artist: 'SR5.SkillEscapeArtist',\r\n    free_fall: 'SR5.SkillFreeFall',\r\n    gymnastics: 'SR5.SkillGymnastics',\r\n    palming: 'SR5.SkillPalming',\r\n    perception: 'SR5.SkillPerception',\r\n    running: 'SR5.SkillRunning',\r\n    sneaking: 'SR5.SkillSneaking',\r\n    survival: 'SR5.SkillSurvival',\r\n    swimming: 'SR5.SkillSwimming',\r\n    tracking: 'SR5.SkillTracking',\r\n    con: 'SR5.SkillCon',\r\n    etiquette: 'SR5.SkillEtiquette',\r\n    impersonation: 'SR5.SkillImpersonation',\r\n    instruction: 'SR5.SkillInstruction',\r\n    intimidation: 'SR5.SkillIntimidation',\r\n    leadership: 'SR5.SkillLeadership',\r\n    negotiation: 'SR5.SkillNegotiation',\r\n    performance: 'SR5.SkillPerformance',\r\n    alchemy: 'SR5.SkillAlchemy',\r\n    arcana: 'SR5.SkillArcana',\r\n    artificing: 'SR5.SkillArtificing',\r\n    assensing: 'SR5.SkillAssensing',\r\n    astral_combat: 'SR5.SkillAstralCombat',\r\n    banishing: 'SR5.SkillBanishing',\r\n    binding: 'SR5.SkillBinding',\r\n    counterspelling: 'SR5.SkillCounterspelling',\r\n    disenchanting: 'SR5.SkillDisenchanting',\r\n    ritual_spellcasting: 'SR5.SkillRitualSpellcasting',\r\n    spellcasting: 'SR5.SkillSpellcasting',\r\n    summoning: 'SR5.SkillSummoning',\r\n    compiling: 'SR5.SkillCompiling',\r\n    decompiling: 'SR5.SkillDecompiling',\r\n    registering: 'SR5.SkillRegistering',\r\n    aeronautics_mechanic: 'SR5.SkillAeronauticsMechanic',\r\n    automotive_mechanic: 'SR5.SkillAutomotiveMechanic',\r\n    industrial_mechanic: 'SR5.SkillIndustrialMechanic',\r\n    nautical_mechanic: 'SR5.SkillNauticalMechanic',\r\n    animal_handling: 'SR5.SkillAnimalHandling',\r\n    armorer: 'SR5.SkillArmorer',\r\n    artisan: 'SR5.SkillArtisan',\r\n    biotechnology: 'SR5.SkillBiotechnology',\r\n    chemistry: 'SR5.SkillChemistry',\r\n    computer: 'SR5.SkillComputer',\r\n    cybercombat: 'SR5.SkillCybercombat',\r\n    cybertechnology: 'SR5.SkillCybertechnology',\r\n    demolitions: 'SR5.SkillDemolitions',\r\n    electronic_warfare: 'SR5.SkillElectronicWarfare',\r\n    first_aid: 'SR5.SkillFirstAid',\r\n    forgery: 'SR5.SkillForgery',\r\n    hacking: 'SR5.SkillHacking',\r\n    hardware: 'SR5.SkillHardware',\r\n    locksmith: 'SR5.SkillLocksmith',\r\n    medicine: 'SR5.SkillMedicine',\r\n    navigation: 'SR5.SkillNavigation',\r\n    software: 'SR5.SkillSoftware',\r\n    gunnery: 'SR5.SkillGunnery',\r\n    pilot_aerospace: 'SR5.SkillPilotAerospace',\r\n    pilot_aircraft: 'SR5.SkillPilotAircraft',\r\n    pilot_walker: 'SR5.SkillPilotWalker',\r\n    pilot_ground_craft: 'SR5.SkillPilotGroundCraft',\r\n    pilot_water_craft: 'SR5.SkillPilotWaterCraft',\r\n    pilot_exotic_vehicle: 'SR5.SkillPilotExoticVehicle',\r\n};\r\n\r\nSR5['actionTypes'] = {\r\n    none: 'SR5.ActionTypeNone',\r\n    free: 'SR5.ActionTypeFree',\r\n    simple: 'SR5.ActionTypeSimple',\r\n    complex: 'SR5.ActionTypeComplex',\r\n    varies: 'SR5.ActionTypeVaries',\r\n};\r\n\r\nSR5['matrixAttributes'] = {\r\n    attack: 'SR5.MatrixAttrAttack',\r\n    sleaze: 'SR5.MatrixAttrSleaze',\r\n    data_processing: 'SR5.MatrixAttrDataProc',\r\n    firewall: 'SR5.MatrixAttrFirewall',\r\n};\r\n\r\nSR5['initiativeCategories'] = {\r\n    meatspace: 'SR5.InitCatMeatspace',\r\n    astral: 'SR5.InitCatAstral',\r\n    matrix: 'SR5.InitCatMatrix',\r\n};\r\n\r\nSR5['modificationTypes'] = {\r\n    weapon: 'SR5.Weapon',\r\n    armor: 'SR5.Armor',\r\n};\r\n\r\nSR5['mountPoints'] = {\r\n    barrel: 'SR5.Barrel',\r\n    stock: 'SR5.Stock',\r\n    top: 'SR5.Top',\r\n    side: 'SR5.Side',\r\n    internal: 'SR5.Internal',\r\n};\r\n\r\nSR5['lifestyleTypes'] = {\r\n    street: 'SR5.LifestyleStreet',\r\n    squatter: 'SR5.LifestyleSquatter',\r\n    low: 'SR5.LifestyleLow',\r\n    medium: 'SR5.LifestyleMiddle',\r\n    high: 'SR5.LifestyleHigh',\r\n    luxory: 'SR5.LifestyleLuxory',\r\n    other: 'SR5.LifestyleOther',\r\n};\r\n\r\nSR5['kbmod'] = {\r\n    STANDARD: 'shiftKey',\r\n    EDGE: 'altKey',\r\n    SPEC: 'ctrlKey',\r\n};\r\n\r\nSR5['actorModifiers'] = {\r\n    soak: 'SR5.RollSoak',\r\n    drain: 'SR5.Drain',\r\n    armor: 'SR5.Armor',\r\n    physical_limit: 'SR5.PhysicalLimit',\r\n    social_limit: 'SR5.SocialLimit',\r\n    mental_limit: 'SR5.MentalLimit',\r\n    stun_track: 'SR5.StunTrack',\r\n    physical_track: 'SR5.PhysicalTrack',\r\n    meat_initiative: 'SR5.MeatSpaceInit',\r\n    meat_initiative_dice: 'SR5.MeatSpaceDice',\r\n    astral_initiative: 'SR5.AstralInit',\r\n    astral_initiative_dice: 'SR5.AstralDice',\r\n    matrix_initiative: 'SR5.MatrixInit',\r\n    matrix_initiative_dice: 'SR5.MatrixDice',\r\n    composure: 'SR5.RollComposure',\r\n    lift_carry: 'SR5.RollLiftCarry',\r\n    judge_intentions: 'SR5.RollJudgeIntentions',\r\n    memory: 'SR5.RollMemory',\r\n    walk: 'SR5.Walk',\r\n    run: 'SR5.Run',\r\n    defense: 'SR5.RollDefense',\r\n    wound_tolerance: 'SR5.WoundTolerance',\r\n    essence: 'SR5.AttrEssence',\r\n    fade: 'SR5.RollFade',\r\n    global: 'SR5.Global',\r\n};\r\n\r\nSR5['programTypes'] = {\r\n    common_program: 'SR5.CommonProgram',\r\n    hacking_program: 'SR5.HackingProgram',\r\n    agent: 'SR5.Agent',\r\n};\r\n\r\nSR5['spiritTypes'] = {\r\n    // base types\r\n    air: 'SR5.Spirit.Air',\r\n    beasts: 'SR5.Spirit.Beasts',\r\n    earth: 'SR5.Spirit.Earth',\r\n    fire: 'SR5.Spirit.Fire',\r\n    guardian: 'SR5.Spirit.Guardian',\r\n    guidance: 'SR5.Spirit.Guidance',\r\n    man: 'SR5.Spirit.Man',\r\n    plant: 'SR5.Spirit.Plant',\r\n    task: 'SR5.Spirit.Task',\r\n    water: 'SR5.Spirit.Water',\r\n\r\n    // toxic types\r\n    toxic_air: 'SR5.Spirit.ToxicAir',\r\n    toxic_beasts: 'SR5.Spirit.ToxicBeasts',\r\n    toxic_earth: 'SR5.Spirit.ToxicEarth',\r\n    toxic_fire: 'SR5.Spirit.ToxicFire',\r\n    toxic_man: 'SR5.Spirit.ToxicMan',\r\n    toxic_water: 'SR5.Spirit.ToxicWater',\r\n\r\n    // blood types\r\n    blood: 'SR5.Spirit.Blood',\r\n\r\n    // shadow types\r\n    muse: 'SR5.Spirit.Muse',\r\n    nightmare: 'SR5.Spirit.Nightmare',\r\n    shade: 'SR5.Spirit.Shade',\r\n    succubus: 'SR5.Spirit.Succubus',\r\n    wraith: 'SR5.Spirit.Wraith',\r\n\r\n    // shedim types\r\n    shedim: 'SR5.Spirit.Shedim',\r\n    master_shedim: 'SR5.Spirit.MasterShedim',\r\n\r\n    // insect types\r\n    caretaker: 'SR5.Spirit.Caretaker',\r\n    nymph: 'SR5.Spirit.Nymph',\r\n    scout: 'SR5.Spirit.Scout',\r\n    soldier: 'SR5.Spirit.Soldier',\r\n    worker: 'SR5.Spirit.Worker',\r\n    queen: 'SR5.Spirit.Queen',\r\n};\r\n","export const SYSTEM_NAME = 'shadowrun5e';\r\nexport const FLAGS = {\r\n    ShowGlitchAnimation: 'showGlitchAnimation',\r\n};\r\n","export abstract class DataWrapper<DataType> {\r\n    constructor(protected data: DataType) {}\r\n}\r\n","import { Helpers } from '../helpers';\r\n\r\nexport const registerBasicHelpers = () => {\r\n    Handlebars.registerHelper('localizeOb', function (strId, obj) {\r\n        if (obj) strId = obj[strId];\r\n        return game.i18n.localize(strId);\r\n    });\r\n\r\n    Handlebars.registerHelper('toHeaderCase', function (str) {\r\n        if (str) return Helpers.label(str);\r\n        return '';\r\n    });\r\n\r\n    Handlebars.registerHelper('concatStrings', function (...args) {\r\n        return args.join(' ');\r\n    });\r\n\r\n    Handlebars.registerHelper('concat', function (strs, c = ',') {\r\n        if (Array.isArray(strs)) {\r\n            return strs.join(c);\r\n        }\r\n        return strs;\r\n    });\r\n\r\n    Handlebars.registerHelper('for', function (from: number, to: number, options) {\r\n        let accum = '';\r\n        for (let i = from; i < to; i += 1) {\r\n            accum += options.fn(i);\r\n        }\r\n\r\n        return accum;\r\n    });\r\n    Handlebars.registerHelper('modulo', function (v1: number, v2: number) {\r\n        return v1 % v2;\r\n    });\r\n    Handlebars.registerHelper('divide', function (v1: number, v2: number) {\r\n        if (v2 === 0) return 0;\r\n        return v1 / v2;\r\n    });\r\n    Handlebars.registerHelper('hasprop', function (obj, prop, options) {\r\n        if (obj.hasOwnProperty(prop)) {\r\n            return options.fn(this);\r\n        } else return options.inverse(this);\r\n    });\r\n    Handlebars.registerHelper('ifin', function (val, arr, options) {\r\n        if (arr.includes(val)) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if greater than\r\n    Handlebars.registerHelper('ifgt', function (v1, v2, options) {\r\n        if (v1 > v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than\r\n    Handlebars.registerHelper('iflt', function (v1, v2, options) {\r\n        if (v1 < v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if less than or equal\r\n    Handlebars.registerHelper('iflte', function (v1, v2, options) {\r\n        if (v1 <= v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if not equal\r\n    Handlebars.registerHelper('ifne', function (v1, v2, options) {\r\n        if (v1 !== v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    // if equal\r\n    Handlebars.registerHelper('ife', function (v1, v2, options) {\r\n        if (v1 === v2) return options.fn(this);\r\n        else return options.inverse(this);\r\n    });\r\n    Handlebars.registerHelper('not', function (v1) {\r\n        return !v1;\r\n    });\r\n    Handlebars.registerHelper('sum', function (v1, v2) {\r\n        return v1 + v2;\r\n    });\r\n\r\n    Handlebars.registerHelper('isDefined', function (value) {\r\n        return value !== undefined && value !== null;\r\n    });\r\n    /**\r\n     * Return a default value if the provided value is not defined (null or undefined)\r\n     */\r\n    Handlebars.registerHelper('default', function (value: string, defaultValue: string) {\r\n        return new Handlebars.SafeString(value ?? defaultValue);\r\n    });\r\n\r\n    Handlebars.registerHelper('log', function (value: string) {\r\n        console.log(value);\r\n    });\r\n    Handlebars.registerHelper('buildName', function (options) {\r\n        const hash: string[] = Helpers.orderKeys(options.hash);\r\n        const name = Object.values(hash).reduce((retVal, current, index) => {\r\n            if (index > 0) retVal += '.';\r\n            return retVal + current;\r\n        }, '');\r\n        return new Handlebars.SafeString(name);\r\n    });\r\n    Handlebars.registerHelper('disabledHelper', function (value) {\r\n        const val = Boolean(value);\r\n        return val ? val : undefined;\r\n    });\r\n};\r\n","import { preloadHandlebarsTemplates } from './HandlebarTemplates';\r\nimport { registerBasicHelpers } from './BasicHelpers';\r\nimport { registerRollAndLabelHelpers } from './RollAndLabelHelpers';\r\nimport { registerItemLineHelpers } from './ItemLineHelpers';\r\nimport { registerSkillLineHelpers } from './SkillLineHelpers';\r\n\r\nexport class HandlebarManager {\r\n    static loadTemplates(): void {\r\n        preloadHandlebarsTemplates();\r\n    }\r\n    static registerHelpers(): void {\r\n        registerBasicHelpers();\r\n        registerRollAndLabelHelpers();\r\n        registerItemLineHelpers();\r\n        registerSkillLineHelpers();\r\n    }\r\n}","export const preloadHandlebarsTemplates = async () => {\r\n    const templatePaths = [\r\n        // actor tabs\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/ActionsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/BioTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/GearTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MagicTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MatrixTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/MiscTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SkillsTab.html',\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/SocialTab.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/actor/tabs/spirit/SpiritSkillsTab.html',\r\n\r\n        // uncategorized lists\r\n        'systems/shadowrun5e/dist/templates/actor/parts/Initiative.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/Movement.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ProfileImage.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/NameInput.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ActionList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/ContactList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/SinAndLifestyleList.html',\r\n\r\n        // magic\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/AdeptPowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellAndAdeptPowerList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpiritOptions.html',\r\n\r\n        // matrix\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ProgramList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ComplexFormList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/MatrixAttribute.html',\r\n\r\n        // attributes\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Attribute.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/AttributeList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/SpecialAttributeList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Limits.html',\r\n\r\n        // skills\r\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/ActiveSkillList.html',\r\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/LanguageAndKnowledgeSkillList.html',\r\n\r\n        'systems/shadowrun5e/dist/templates/item/parts/description.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/technology.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/header.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-ammo-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-mods-list.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/action.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/damage.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/opposed.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/spell.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/complex_form.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/weapon.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/armor.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/matrix.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/sin.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/contact.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/lifestyle.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/ammo.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/modification.html',\r\n        'systems/shadowrun5e/dist/templates/item/parts/program.html',\r\n        'systems/shadowrun5e/dist/templates/rolls/parts/parts-list.html',\r\n\r\n        // to wrap the bodies of tabs\r\n        'systems/shadowrun5e/dist/templates/common/TabWrapper.html',\r\n        'systems/shadowrun5e/dist/templates/common/ValueInput.html',\r\n\r\n        // Useful wrapper and implemented components\r\n        'systems/shadowrun5e/dist/templates/common/ValueMaxAttribute.html',\r\n        'systems/shadowrun5e/dist/templates/common/Attribute.html',\r\n\r\n        // to create the condition monitors and edge counter\r\n        'systems/shadowrun5e/dist/templates/common/HorizontalCellInput.html',\r\n\r\n        // looks like a ListHeader\r\n        'systems/shadowrun5e/dist/templates/common/HeaderBlock.html',\r\n\r\n        // list components\r\n        'systems/shadowrun5e/dist/templates/common/List/ListItem.html',\r\n        'systems/shadowrun5e/dist/templates/common/List/ListHeader.html',\r\n    ];\r\n\r\n    return loadTemplates(templatePaths);\r\n};\r\n","import SR5ItemType = Shadowrun.SR5ItemType;\r\nimport { SR5ItemDataWrapper } from '../item/SR5ItemDataWrapper';\r\n\r\nexport const registerItemLineHelpers = () => {\r\n    Handlebars.registerHelper('ItemHeaderIcons', function (id) {\r\n        const PlusIcon = 'fas fa-plus';\r\n        const AddText = game.i18n.localize('SR5.Add');\r\n        const addIcon = {\r\n            icon: PlusIcon,\r\n            text: AddText,\r\n            title: game.i18n.localize('SR5.CreateItem'),\r\n            cssClass: 'item-create',\r\n        };\r\n        switch (id) {\r\n            case 'lifestyle':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLifestyle');\r\n                return [addIcon];\r\n            case 'contact':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemContact');\r\n                return [addIcon];\r\n            case 'sin':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSIN');\r\n                return [addIcon];\r\n            case 'license':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemLicense');\r\n                return [addIcon];\r\n            case 'quality':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemQuality');\r\n                return [addIcon];\r\n            case 'adept_power':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAdeptPower');\r\n                return [addIcon];\r\n            case 'action':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemAction');\r\n                return [addIcon];\r\n            case 'spell':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpell');\r\n                return [addIcon];\r\n            case 'gear':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemGear');\r\n                return [addIcon];\r\n            case 'complex_form':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemComplexForm');\r\n                return [addIcon];\r\n            case 'program':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemProgram');\r\n                return [addIcon];\r\n            case 'weapon':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemWeapon');\r\n                return [addIcon];\r\n            case 'armor':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemArmor');\r\n                return [addIcon];\r\n            case 'device':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemDevice');\r\n                return [addIcon];\r\n            case 'equipment':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemEquipment');\r\n                return [addIcon];\r\n            case 'cyberware':\r\n                addIcon.title = game.i18n.localize('SR5.CreateItemCyberware');\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemHeaderRightSide', function (id) {\r\n        switch (id) {\r\n            case 'action':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Skill'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Attribute'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Limit'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Modifier'),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'weapon':\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Qty'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Target'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Duration'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Fade'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'adept_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.PowerType'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'spell':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.SpellType'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.SpellRange'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Duration'),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.Drain'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'quality':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize('SR5.QualityType'),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'program':\r\n                return [];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemRightSide', function (item: SR5ItemType) {\r\n        const wrapper = new SR5ItemDataWrapper(item);\r\n        const qtyInput = {\r\n            input: {\r\n                type: 'number',\r\n                value: wrapper.getQuantity(),\r\n                cssClass: 'item-qty',\r\n            },\r\n        };\r\n        switch (item.type) {\r\n            case 'action':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.activeSkills[wrapper.getActionSkill() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute2() ?? '']),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getLimitAttribute()\r\n                                ? game.i18n.localize(CONFIG.SR5.attributes[wrapper.getLimitAttribute() ?? ''])\r\n                                : wrapper.getActionLimit(),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getActionDicePoolMod(),\r\n                            cssClass: 'six',\r\n                        },\r\n                    },\r\n                ];\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n                return [qtyInput];\r\n            case 'weapon':\r\n                if (wrapper.isRangedWeapon()) {\r\n                    const count = wrapper.getAmmo()?.current.value ?? 0;\r\n                    const max = wrapper.getAmmo()?.current.max ?? 0;\r\n                    const text = count < max ? `${game.i18n.localize('SR5.WeaponReload')} (${count}/${max})` : game.i18n.localize('SR5.AmmoFull');\r\n                    const cssClass = 'no-break' + (count < max ? ' reload-ammo roll' : ' faded');\r\n                    return [\r\n                        {\r\n                            text: {\r\n                                title: `${game.i18n.localize('SR5.WeaponAmmoCount')}: ${count}`,\r\n                                text,\r\n                                cssClass,\r\n                            },\r\n                        },\r\n                        {\r\n                            text: {\r\n                                text: '',\r\n                            },\r\n                        },\r\n                        qtyInput,\r\n                    ];\r\n                } else {\r\n                    return [qtyInput];\r\n                }\r\n\r\n            case 'quality':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.qualityTypes[item.data.type ?? '']),\r\n                        },\r\n                    },\r\n                ];\r\n\r\n            case 'adept_power':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(item.data.type ?? ''),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'spell':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.spellTypes[item.data.type ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.spellRanges[item.data.range ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.durations[item.data.duration ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: wrapper.getDrain(),\r\n                        },\r\n                    },\r\n                ];\r\n\r\n            case 'complex_form':\r\n                return [\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.matrixTargets[item.data.target ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: game.i18n.localize(CONFIG.SR5.durations[item.data.duration ?? '']),\r\n                        },\r\n                    },\r\n                    {\r\n                        text: {\r\n                            text: String(item.data.fade),\r\n                        },\r\n                    },\r\n                ];\r\n            case 'program':\r\n                return [\r\n                    {\r\n                        button: {\r\n                            cssClass: `item-equip-toggle ${wrapper.isEquipped() ? 'light' : ''}`,\r\n                            short: true,\r\n                            text: wrapper.isEquipped() ? game.i18n.localize('SR5.Loaded') : game.i18n.localize('SR5.Load') + ' >>',\r\n                        },\r\n                    },\r\n                ];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('ItemIcons', function (item: SR5ItemType) {\r\n        const editIcon = {\r\n            icon: 'fas fa-edit item-edit',\r\n            title: game.i18n.localize('SR5.EditItem'),\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash item-delete',\r\n            title: game.i18n.localize('SR5.DeleteItem'),\r\n        };\r\n        const equipIcon = {\r\n            icon: `${item.data.technology?.equipped ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\r\n            title: game.i18n.localize('SR5.ToggleEquip'),\r\n        };\r\n\r\n        switch (item.type) {\r\n            case 'program':\r\n            case 'armor':\r\n            case 'device':\r\n            case 'equipment':\r\n            case 'cyberware':\r\n            case 'weapon':\r\n                return [equipIcon, editIcon, removeIcon];\r\n            default:\r\n                return [editIcon, removeIcon];\r\n        }\r\n    });\r\n};\r\n","import { PartsList } from '../parts/PartsList';\r\nimport ModList = Shadowrun.ModList;\r\n\r\nexport const registerRollAndLabelHelpers = () => {\r\n    Handlebars.registerHelper('damageAbbreviation', function (damage) {\r\n        if (damage === 'physical') return 'P';\r\n        if (damage === 'stun') return 'S';\r\n        if (damage === 'matrix') return 'M';\r\n        return '';\r\n    });\r\n    Handlebars.registerHelper('diceIcon', function (roll) {\r\n        if (roll.roll) {\r\n            switch (roll.roll) {\r\n                case 1:\r\n                    return 'red';\r\n                case 2:\r\n                    return 'grey';\r\n                case 3:\r\n                    return 'grey';\r\n                case 4:\r\n                    return 'grey';\r\n                case 5:\r\n                    return 'green';\r\n                case 6:\r\n                    return 'green';\r\n            }\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('elementIcon', function (element) {\r\n        let icon = '';\r\n        if (element === 'electricity') {\r\n            icon = 'fas fa-bolt';\r\n        } else if (element === 'radiation') {\r\n            icon = 'fas fa-radiation-alt';\r\n        } else if (element === 'fire') {\r\n            icon = 'fas fa-fire';\r\n        } else if (element === 'acid') {\r\n            icon = 'fas fa-vials';\r\n        } else if (element === 'cold') {\r\n            icon = 'fas fa-snowflake';\r\n        }\r\n        return icon;\r\n    });\r\n\r\n    Handlebars.registerHelper('partsTotal', function (partsList: ModList<number>) {\r\n        const parts = new PartsList(partsList);\r\n        return parts.total;\r\n    });\r\n};\r\n","import SkillField = Shadowrun.SkillField;\r\nimport { Helpers } from '../helpers';\r\n\r\nexport const registerSkillLineHelpers = () => {\r\n    Handlebars.registerHelper('SkillHeaderIcons', function (id) {\r\n        const addIcon = {\r\n            icon: 'fas fa-plus',\r\n            title: game.i18n.localize('SR5.AddSkill'),\r\n            text: game.i18n.localize('SR5.Add'),\r\n            cssClass: '',\r\n        };\r\n        switch (id) {\r\n            case 'active':\r\n                return [{}];\r\n            case 'language':\r\n                addIcon.cssClass = 'add-language';\r\n                return [addIcon];\r\n            case 'knowledge':\r\n                addIcon.cssClass = 'add-knowledge';\r\n                return [addIcon];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillHeaderRightSide', function (id) {\r\n        const specs = {\r\n            text: {\r\n                text: game.i18n.localize('SR5.Specialization'),\r\n                cssClass: 'skill-spec-item',\r\n            },\r\n        };\r\n        const rtg = {\r\n            text: {\r\n                text: game.i18n.localize('SR5.Rtg'),\r\n                cssClass: 'rtg',\r\n            },\r\n        };\r\n\r\n        switch (id) {\r\n            case 'active':\r\n            case 'knowledge':\r\n            case 'language':\r\n                return [specs, rtg];\r\n            default:\r\n                return [];\r\n        }\r\n    });\r\n    Handlebars.registerHelper('SkillRightSide', function (skillType: string, skill: SkillField) {\r\n        const specs = Array.isArray(skill.specs) ? skill.specs : [skill.specs];\r\n        return [\r\n            {\r\n                text: {\r\n                    text: specs.join(', ') ?? '',\r\n                    cssClass: 'skill-spec-item',\r\n                },\r\n            },\r\n            {\r\n                text: {\r\n                    text: Helpers.calcTotal(skill),\r\n                    cssClass: 'rtg',\r\n                },\r\n            },\r\n        ];\r\n    });\r\n\r\n    Handlebars.registerHelper('SkillIcons', function (skillType: string, skill: SkillField) {\r\n        const editIcon = {\r\n            icon: 'fas fa-edit',\r\n            title: game.i18n.localize('SR5.EditSkill'),\r\n            cssClass: '',\r\n        };\r\n        const removeIcon = {\r\n            icon: 'fas fa-trash',\r\n            title: game.i18n.localize('SR5.DeleteSkill'),\r\n            cssClass: '',\r\n        };\r\n        switch (skillType) {\r\n            case 'active':\r\n                editIcon.cssClass = 'skill-edit';\r\n                return [editIcon];\r\n            case 'language':\r\n                editIcon.cssClass = 'language-skill-edit';\r\n                removeIcon.cssClass = 'remove-language';\r\n                return [editIcon, removeIcon];\r\n            case 'knowledge':\r\n                editIcon.cssClass = 'knowledge-skill-edit';\r\n                removeIcon.cssClass = 'remove-knowledge';\r\n                return [editIcon, removeIcon];\r\n            default:\r\n                return [editIcon];\r\n        }\r\n    });\r\n\r\n};\r\n","import AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport ModifiableValue = Shadowrun.ModifiableValue;\r\nimport { PartsList } from './parts/PartsList';\r\nimport LabelField = Shadowrun.LabelField;\r\n\r\nexport class Helpers {\r\n    /**\r\n     * Calculate the total value for a data object\r\n     * - stores the total value and returns it\r\n     * @param data\r\n     */\r\n    static calcTotal(data: ModifiableValue): number {\r\n        if (data.mod === undefined) data.mod = [];\r\n        const parts = new PartsList(data.mod);\r\n        data.value = parts.total + data.base;\r\n        data.mod = parts.list;\r\n        return data.value;\r\n    }\r\n\r\n    static listItemId(event) {\r\n        return event.currentTarget.closest('.list-item').dataset.itemId;\r\n    }\r\n\r\n    // replace 'SR5.'s on keys with 'SR5_DOT_'\r\n    static onSetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5.', 'SR5_DOT_');\r\n            newData[newKey] = this.onSetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n    // replace 'SR5_DOT_' with 'SR5.' on keys\r\n    static onGetFlag(data) {\r\n        if (typeof data !== 'object') return data;\r\n        if (data === undefined || data === null) return data;\r\n        const newData = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            const newKey = key.replace('SR5_DOT_', 'SR5.');\r\n            newData[newKey] = this.onGetFlag(value);\r\n        }\r\n        return newData;\r\n    }\r\n\r\n    static isMatrix(atts?: boolean | (AttributeField | string | SkillField)[] | AttributeField | string | SkillField) {\r\n        if (!atts) return false;\r\n        if (typeof atts === 'boolean') return atts;\r\n        // array of labels to check for on the incoming data\r\n        const matrixLabels = [\r\n            'SR5.MatrixAttrFirewall',\r\n            'SR5.MatrixAttrDataProcessing',\r\n            'SR5.MatrixAttrSleaze',\r\n            'SR5.MatrixAttrAttack',\r\n            'SR5.SkillComputer',\r\n            'SR5.SkillHacking',\r\n            'SR5.SkillCybercombat',\r\n            'SR5.SkillElectronicWarfare',\r\n            'SR5.Software',\r\n        ];\r\n        if (!Array.isArray(atts)) atts = [atts];\r\n        atts = atts.filter((att) => att);\r\n        // iterate over the attributes and return true if we find a matrix att\r\n        for (const att of atts) {\r\n            if (typeof att === 'string') {\r\n                if (matrixLabels.indexOf(att) >= 0) {\r\n                    return true;\r\n                }\r\n            } else if (typeof att === 'object' && (att as LabelField).label !== undefined) {\r\n                if (matrixLabels.indexOf(att.label ?? '') >= 0) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        // if we don't find anything return false\r\n        return false;\r\n    }\r\n\r\n    static parseInputToString(val: number | string | string[] | undefined): string {\r\n        if (val === undefined) return '';\r\n        if (typeof val === 'number') return val.toString();\r\n        if (typeof val === 'string') return val;\r\n        if (Array.isArray(val)) {\r\n            return val.join(',');\r\n        }\r\n        return '';\r\n    }\r\n\r\n    static parseInputToNumber(val: number | string | string[] | undefined): number {\r\n        if (typeof val === 'number') return val;\r\n        if (typeof val === 'string') {\r\n            const ret = +val;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        if (Array.isArray(val)) {\r\n            const str = val.join('');\r\n            const ret = +str;\r\n            if (!isNaN(ret)) return ret;\r\n            return 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    static setupCustomCheckbox(app, html) {\r\n        const setContent = (el) => {\r\n            const checkbox = $(el).children('input[type=checkbox]');\r\n            const checkmark = $(el).children('.checkmark');\r\n            if ($(checkbox).prop('checked')) {\r\n                $(checkmark).addClass('fa-check-circle');\r\n                $(checkmark).removeClass('fa-circle');\r\n            } else {\r\n                $(checkmark).addClass('fa-circle');\r\n                $(checkmark).removeClass('fa-check-circle');\r\n            }\r\n        };\r\n        html.find('label.checkbox').each(function () {\r\n            setContent(this);\r\n        });\r\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\r\n        html.find('.submit-checkbox').change((event) => app._onSubmit(event));\r\n    }\r\n\r\n    static mapRoundsToDefenseMod(rounds) {\r\n        if (rounds === 1) return 0;\r\n        if (rounds === 3) return -2;\r\n        if (rounds === 6) return -5;\r\n        if (rounds === 10) return -9;\r\n        return 0;\r\n    }\r\n\r\n    static mapRoundsToDefenseDesc(rounds) {\r\n        if (rounds === 1) return '';\r\n        if (rounds === 3) return '-2';\r\n        if (rounds === 6) return '-5';\r\n        if (rounds === 10) return '-9';\r\n        if (rounds === 20) return 'SR5.DuckOrCover';\r\n        return '';\r\n    }\r\n\r\n    static label(str) {\r\n        const frags = str.split('_');\r\n        for (let i = 0; i < frags.length; i++) {\r\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\r\n        }\r\n        frags.forEach((frag, idx) => {\r\n            if (frag === 'Processing') frags[idx] = 'Proc.';\r\n            if (frag === 'Mechanic') frags[idx] = 'Mech.';\r\n        });\r\n        return frags.join(' ');\r\n    }\r\n\r\n    static orderKeys(obj) {\r\n        const keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\r\n            if (k1 < k2) return -1;\r\n            if (k1 > k2) return +1;\r\n            return 0;\r\n        });\r\n\r\n        let i;\r\n        const after = {};\r\n        for (i = 0; i < keys.length; i++) {\r\n            after[keys[i]] = obj[keys[i]];\r\n            delete obj[keys[i]];\r\n        }\r\n\r\n        for (i = 0; i < keys.length; i++) {\r\n            obj[keys[i]] = after[keys[i]];\r\n        }\r\n        return obj;\r\n    }\r\n\r\n    static setNestedValue(obj, prop, val) {\r\n        console.log(obj);\r\n        console.log(prop);\r\n        console.log(val);\r\n        const props = prop.split('.');\r\n        props.forEach((p) => (obj = p in obj ? obj[p] : null));\r\n        if (obj) {\r\n            console.log(`setting ${obj} to ${val}`);\r\n            obj = val;\r\n        }\r\n    }\r\n\r\n    static hasModifiers(event) {\r\n        return event && (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\r\n    }\r\n\r\n    static filter(obj, comp) {\r\n        const retObj = {};\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            Object.entries(obj).forEach(([key, value]) => {\r\n                if (comp([key, value])) retObj[key] = value;\r\n            });\r\n        }\r\n        return retObj;\r\n    }\r\n\r\n    static addLabels(obj, label) {\r\n        if (typeof obj === 'object' && obj !== null) {\r\n            if (!obj.hasOwnProperty('label') && obj.hasOwnProperty('value') && label !== '') {\r\n                obj.label = label;\r\n            }\r\n            Object.entries(obj)\r\n                .filter(([, value]) => typeof value === 'object')\r\n                .forEach(([key, value]) => Helpers.addLabels(value, key));\r\n        }\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport DeviceData = Shadowrun.DeviceData;\r\n\r\nexport const ChatData = {\r\n    action: (data, labels, props) => {\r\n        if (data.action) {\r\n            const labelStringList: string[] = [];\r\n            if (data.action.skill) {\r\n                labelStringList.push(Helpers.label(data.action.skill));\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n            } else if (data.action.attribute2) {\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n                labelStringList.push(Helpers.label(data.action.attribute2));\r\n            } else if (data.action.attribute) {\r\n                labelStringList.push(Helpers.label(data.action.attribute));\r\n            }\r\n            if (data.action.mod) {\r\n                labelStringList.push(`${game.i18n.localize('SR5.ItemMod')} (${data.action.mod})`);\r\n                // TODO when all mods are modlists\r\n                // Object.entries(data.action.mod).forEach(([key, value]) =>\r\n                //     labelStringList.push(`${game.i18n.localize(key)} (${value})`)\r\n                // );\r\n            }\r\n            if (labelStringList.length) {\r\n                labels.roll = labelStringList.join(' + ');\r\n            }\r\n\r\n            if (data.action.opposed.type) {\r\n                const { opposed } = data.action;\r\n                if (opposed.type !== 'custom') labels.opposedRoll = `vs. ${Helpers.label(opposed.type)}`;\r\n                else if (opposed.skill) labels.opposedRoll = `vs. ${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\r\n                else if (opposed.attribute2) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\r\n                else if (opposed.attribute) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}`;\r\n            }\r\n\r\n            // setup action props\r\n            // go in order of \"Limit/Accuracy\" \"Damage\" \"AP\"\r\n            // don't add action type if set to 'varies' or 'none' as that's pretty much useless info\r\n            if (data.action.type !== '' && data.action.type !== 'varies' && data.action.type !== 'none') {\r\n                props.push(`${Helpers.label(data.action.type)} Action`);\r\n            }\r\n            if (data.action.limit.value) props.push(`Limit ${data.action.limit.value}`);\r\n            if (data.action.damage.type.value) {\r\n                const { damage } = data.action;\r\n                let damageString = '';\r\n                let elementString = '';\r\n                if (damage.value) {\r\n                    damageString = `DV ${damage.value}${damage.type.value ? damage.type.value.toUpperCase().charAt(0) : ''}`;\r\n                }\r\n                if (damage.element.value) {\r\n                    // if we have a damage value and are electric, follow the convention of (e) after\r\n                    if (damage.value) {\r\n                        if (damage.element.value === 'electricity') {\r\n                            damageString += ' (e)';\r\n                        } else {\r\n                            elementString = Helpers.label(damage.element.value);\r\n                        }\r\n                    } else {\r\n                        elementString = Helpers.label(damage.element.value);\r\n                    }\r\n                }\r\n                if (damageString) props.push(damageString);\r\n                if (elementString) props.push(elementString);\r\n                if (damage.ap && damage.ap.value) props.push(`AP ${damage.ap.value}`);\r\n            }\r\n        }\r\n    },\r\n    sin: (data, labels, props) => {\r\n        props.push(`Rating ${data.technology.rating}`);\r\n        data.licenses.forEach((license) => {\r\n            props.push(`${license.name} R${license.rtg}`);\r\n        });\r\n    },\r\n\r\n    contact: (data, labels, props) => {\r\n        props.push(data.type);\r\n        props.push(`${game.i18n.localize('SR5.Connection')} ${data.connection}`);\r\n        props.push(`${game.i18n.localize('SR5.Loyalty')} ${data.loyalty}`);\r\n        if (data.blackmail) {\r\n            props.push(`${game.i18n.localize('SR5.Blackmail')}`);\r\n        }\r\n        if (data.family) {\r\n            props.push(game.i18n.localize('SR5.Family'));\r\n        }\r\n    },\r\n\r\n    lifestyle: (data, labels, props) => {\r\n        props.push(Helpers.label(data.type));\r\n        if (data.cost) props.push(`¥${data.cost}`);\r\n        if (data.comforts) props.push(`Comforts ${data.comforts}`);\r\n        if (data.security) props.push(`Security ${data.security}`);\r\n        if (data.neighborhood) props.push(`Neighborhood ${data.neighborhood}`);\r\n        if (data.guests) props.push(`Guests ${data.guests}`);\r\n    },\r\n\r\n    adept_power: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(`PP ${data.pp}`);\r\n        props.push(Helpers.label(data.type));\r\n    },\r\n\r\n    armor: (data, labels, props) => {\r\n        if (data.armor) {\r\n            if (data.armor.value) props.push(`Armor ${data.armor.mod ? '+' : ''}${data.armor.value}`);\r\n            if (data.armor.acid) props.push(`Acid ${data.armor.acid}`);\r\n            if (data.armor.cold) props.push(`Cold ${data.armor.cold}`);\r\n            if (data.armor.fire) props.push(`Fire ${data.armor.fire}`);\r\n            if (data.armor.electricity) props.push(`Electricity ${data.armor.electricity}`);\r\n            if (data.armor.radiation) props.push(`Radiation ${data.armor.radiation}`);\r\n        }\r\n    },\r\n\r\n    program: (data, labels, props) => {\r\n        props.push(game.i18n.localize(CONFIG.SR5.programTypes[data.type]));\r\n    },\r\n\r\n    complex_form: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(Helpers.label(data.target), Helpers.label(data.duration));\r\n        const { fade } = data;\r\n        if (fade > 0) props.push(`Fade L+${fade}`);\r\n        else if (fade < 0) props.push(`Fade L${fade}`);\r\n        else props.push('Fade L');\r\n    },\r\n\r\n    cyberware: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        ChatData.armor(data, labels, props);\r\n        if (data.essence) props.push(`Ess ${data.essence}`);\r\n    },\r\n\r\n    device: (data: DeviceData, labels, props) => {\r\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\r\n        if (data.category === 'cyberdeck') {\r\n            for (const attN of Object.values(data.atts)) {\r\n                props.push(`${Helpers.label(attN.att)} ${attN.value}`);\r\n            }\r\n        }\r\n    },\r\n\r\n    equipment: (data, labels, props) => {\r\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\r\n    },\r\n\r\n    quality: (data, labels, props) => {\r\n        ChatData.action(data, labels, props);\r\n        props.push(Helpers.label(data.type));\r\n    },\r\n\r\n    // add properties for spell data, follow order in book\r\n    spell: (data, labels, props) => {\r\n        // first category and type\r\n        props.push(Helpers.label(data.category), Helpers.label(data.type));\r\n\r\n        // add subtype tags\r\n        if (data.category === 'combat') {\r\n            props.push(Helpers.label(data.combat.type));\r\n        } else if (data.category === 'health') {\r\n        } else if (data.category === 'illusion') {\r\n            props.push(data.illusion.type);\r\n            props.push(data.illusion.sense);\r\n        } else if (data.category === 'manipulation') {\r\n            if (data.manipulation.damaging) props.push('Damaging');\r\n            if (data.manipulation.mental) props.push('Mental');\r\n            if (data.manipulation.environmental) props.push('Environmental');\r\n            if (data.manipulation.physical) props.push('Physical');\r\n        } else if (data.category === 'detection') {\r\n            props.push(data.illusion.type);\r\n            props.push(data.illusion.passive ? 'Passive' : 'Active');\r\n            if (data.illusion.extended) props.push('Extended');\r\n        }\r\n        // add range\r\n        props.push(Helpers.label(data.range));\r\n\r\n        // add action data\r\n        ChatData.action(data, labels, props);\r\n\r\n        // add duration data\r\n        props.push(Helpers.label(data.duration));\r\n\r\n        // add drain data\r\n        const { drain } = data;\r\n        if (drain > 0) props.push(`Drain F+${drain}`);\r\n        else if (drain < 0) props.push(`Drain F${drain}`);\r\n        else props.push('Drain F');\r\n\r\n        labels.roll = 'Cast';\r\n    },\r\n\r\n    weapon: (data, labels, props, item) => {\r\n        ChatData.action(data, labels, props);\r\n        for (let i = 0; i < props.length; i++) {\r\n            const prop = props[i];\r\n            if (prop.includes('Limit')) {\r\n                props[i] = prop.replace('Limit', 'Accuracy');\r\n            }\r\n        }\r\n\r\n        const equippedAmmo = item?.getEquippedAmmo();\r\n        if (equippedAmmo && data.ammo && data.ammo.current?.max) {\r\n            if (equippedAmmo) {\r\n                const { current, spare_clips } = data.ammo;\r\n                if (equippedAmmo.name) props.push(`${equippedAmmo.name} (${current.value}/${current.max})`);\r\n                if (equippedAmmo.data.data.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${equippedAmmo.data.data.blast.radius}m`);\r\n                if (equippedAmmo.data.data.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${equippedAmmo.data.data.blast.dropoff}/m`);\r\n                if (spare_clips && spare_clips.max) props.push(`${game.i18n.localize('SR5.SpareClips')} (${spare_clips.value}/${spare_clips.max})`);\r\n            }\r\n        }\r\n\r\n        if (data.technology?.conceal?.value) {\r\n            props.push(`${game.i18n.localize('SR5.Conceal')} ${data.technology.conceal.value}`);\r\n        }\r\n\r\n        if (data.category === 'range') {\r\n            if (data.range.rc) {\r\n                let rcString = `${game.i18n.localize('SR5.RecoilCompensation')} ${data.range.rc.value}`;\r\n                if (item?.actor) {\r\n                    rcString += ` (${game.i18n.localize('SR5.Total')} ${item.actor.getRecoilCompensation()})`;\r\n                }\r\n                props.push(rcString);\r\n            }\r\n            if (data.range.modes) {\r\n                const newModes: string[] = [];\r\n                const { modes } = data.range;\r\n                if (modes.single_shot) newModes.push('SR5.WeaponModeSingleShotShort');\r\n                if (modes.semi_auto) newModes.push('SR5.WeaponModeSemiAutoShort');\r\n                if (modes.burst_fire) newModes.push('SR5.WeaponModeBurstFireShort');\r\n                if (modes.full_auto) newModes.push('SR5.WeaponModeFullAutoShort');\r\n                props.push(newModes.map((m) => game.i18n.localize(m)).join('/'));\r\n            }\r\n            if (data.range.ranges) props.push(Array.from(Object.values(data.range.ranges)).join('/'));\r\n        } else if (data.category === 'melee') {\r\n            if (data.melee.reach) {\r\n                const reachString = `${game.i18n.localize('SR5.Reach')} ${data.melee.reach}`;\r\n                // find accuracy in props and insert ourselves after it\r\n                const accIndex = props.findIndex((p) => p.includes('Accuracy'));\r\n                if (accIndex > -1) {\r\n                    props.splice(accIndex + 1, 0, reachString);\r\n                } else {\r\n                    props.push(reachString);\r\n                }\r\n            }\r\n        } else if (data.category === 'thrown') {\r\n            const { blast } = data.thrown;\r\n            if (blast?.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${blast.radius}m`);\r\n            if (blast?.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${blast.dropoff}/m`);\r\n\r\n            if (data.thrown.ranges) {\r\n                const mult = data.thrown.ranges.attribute && item?.actor ? item.actor.data.data.attributes[data.thrown.ranges.attribute].value : 1;\r\n                const ranges = [data.thrown.ranges.short, data.thrown.ranges.medium, data.thrown.ranges.long, data.thrown.ranges.extreme];\r\n                props.push(ranges.map((v) => v * mult).join('/'));\r\n            }\r\n        }\r\n    },\r\n};\r\n","import { Helpers } from '../helpers';\r\nimport { SR5Actor } from '../actor/SR5Actor';\r\nimport { ShadowrunItemDialog } from '../apps/dialogs/ShadowrunItemDialog';\r\nimport ModList = Shadowrun.ModList;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport AttributeField = Shadowrun.AttributeField;\r\nimport SkillField = Shadowrun.SkillField;\r\nimport LimitField = Shadowrun.LimitField;\r\nimport FireModeData = Shadowrun.FireModeData;\r\nimport SpellForceData = Shadowrun.SpellForceData;\r\nimport ComplexFormLevelData = Shadowrun.ComplexFormLevelData;\r\nimport FireRangeData = Shadowrun.FireRangeData;\r\nimport BlastData = Shadowrun.BlastData;\r\nimport { ChatData } from './ChatData';\r\nimport { AdvancedRollProps, ShadowrunRoll, ShadowrunRoller } from '../rolls/ShadowrunRoller';\r\nimport { createChatData } from '../chat';\r\nimport { SYSTEM_NAME } from '../constants';\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport { SR5ItemDataWrapper } from './SR5ItemDataWrapper';\r\nimport SR5ItemType = Shadowrun.SR5ItemType;\r\nimport { PartsList } from '../parts/PartsList';\r\n\r\nexport class SR5Item extends Item {\r\n    labels: {} = {};\r\n    items: SR5Item[];\r\n    actor: SR5Actor;\r\n\r\n    private get wrapper(): SR5ItemDataWrapper {\r\n        // we need to cast here to unknown first to make ts happy\r\n        return new SR5ItemDataWrapper((this.data as unknown) as SR5ItemType);\r\n    }\r\n\r\n    // Flag Functions\r\n    getLastFireMode(): FireModeData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastFireMode') || { value: 0 };\r\n    }\r\n    async setLastFireMode(fireMode: FireModeData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastFireMode', fireMode);\r\n    }\r\n    getLastSpellForce(): SpellForceData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastSpellForce') || { value: 0 };\r\n    }\r\n    async setLastSpellForce(force: SpellForceData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastSpellForce', force);\r\n    }\r\n    getLastComplexFormLevel(): ComplexFormLevelData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastComplexFormLevel') || { value: 0 };\r\n    }\r\n    async setLastComplexFormLevel(level: ComplexFormLevelData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastComplexFormLevel', level);\r\n    }\r\n    getLastFireRangeMod(): FireRangeData {\r\n        return this.getFlag(SYSTEM_NAME, 'lastFireRange') || { value: 0 };\r\n    }\r\n    async setLastFireRangeMod(environmentalMod: FireRangeData) {\r\n        return this.setFlag(SYSTEM_NAME, 'lastFireRange', environmentalMod);\r\n    }\r\n\r\n    /**\r\n     * Return an Array of the Embedded Item Data\r\n     * TODO properly types this\r\n     */\r\n    getEmbeddedItems(): any[] {\r\n        let items = this.getFlag(SYSTEM_NAME, 'embeddedItems');\r\n        if (items) {\r\n            // moved this \"hotfix\" to here so that everywhere that accesses the flag just gets an array -- Shawn\r\n            //TODO: This is a hotfix. Items should either always be\r\n            // stored as an array or always be stored as a object.\r\n            if (!Array.isArray(items)) {\r\n                let newItems: any[] = [];\r\n                for (const key of Object.keys(items)) {\r\n                    newItems.push(items[key]);\r\n                }\r\n                return newItems;\r\n            }\r\n            return items;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    /**\r\n     * Set the embedded item data\r\n     * @param items\r\n     */\r\n    async setEmbeddedItems(items: any[]) {\r\n        // clear the flag first to remove the previous items - if we don't do this then it doesn't actually \"delete\" any items\r\n        await this.unsetFlag(SYSTEM_NAME, 'embeddedItems');\r\n        await this.setFlag(SYSTEM_NAME, 'embeddedItems', items);\r\n    }\r\n\r\n    getLastAttack(): AttackData | undefined {\r\n        return this.getFlag(SYSTEM_NAME, 'lastAttack');\r\n    }\r\n    async setLastAttack(attack: AttackData) {\r\n        // unset the flag first to clear old data, data can get weird if not done\r\n        await this.unsetFlag(SYSTEM_NAME, 'lastAttack');\r\n        return this.setFlag(SYSTEM_NAME, 'lastAttack', attack);\r\n    }\r\n\r\n    async update(data, options?) {\r\n        const ret = super.update(data, options);\r\n        ret.then(() => {\r\n            if (this.actor) {\r\n                this.actor.render();\r\n            }\r\n        });\r\n        return ret;\r\n    }\r\n    get hasOpposedRoll(): boolean {\r\n        return !!(this.data.data.action && this.data.data.action.opposed.type);\r\n    }\r\n\r\n    get hasRoll(): boolean {\r\n        const { action } = this.data.data;\r\n        return !!(action && action.type !== '' && (action.skill || action.attribute));\r\n    }\r\n    get hasTemplate(): boolean {\r\n        return this.isAreaOfEffect();\r\n    }\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n        const labels = {};\r\n        const item = this.data;\r\n\r\n        if (item.type === 'sin') {\r\n            if (typeof item.data.licenses === 'object') {\r\n                item.data.licenses = Object.values(item.data.licenses);\r\n            }\r\n        }\r\n        const equippedMods = this.getEquippedMods();\r\n        const equippedAmmo = this.getEquippedAmmo();\r\n\r\n        const { technology, range, action } = item.data;\r\n\r\n        if (technology) {\r\n            if (technology.condition_monitor === undefined) {\r\n                technology.condition_monitor = { value: 0 };\r\n            }\r\n            technology.condition_monitor.max = 8 + Math.ceil(technology.rating / 2);\r\n\r\n            if (!technology.conceal) technology.conceal = {};\r\n\r\n            const concealParts = new PartsList<number>();\r\n            equippedMods.forEach((mod) => {\r\n                if (mod.data.data.technology.conceal.value) {\r\n                    concealParts.addUniquePart(mod.name, mod.data.data.technology.conceal.value);\r\n                }\r\n            });\r\n            technology.conceal.mod = concealParts.list;\r\n\r\n            technology.conceal.value = Helpers.calcTotal(technology.conceal);\r\n        }\r\n\r\n        if (action) {\r\n            action.alt_mod = 0;\r\n            action.limit.mod = [];\r\n            action.damage.mod = [];\r\n            action.damage.ap.mod = [];\r\n            action.dice_pool_mod = [];\r\n            // handle overrides from mods\r\n            const limitParts = new PartsList(action.limit.mod);\r\n            const dpParts = new PartsList(action.dice_pool_mod);\r\n            equippedMods.forEach((mod) => {\r\n                if (mod.data.data.accuracy) {\r\n                    limitParts.addUniquePart(mod.name, mod.data.data.accuracy);\r\n                }\r\n                if (mod.data.data.dice_pool) {\r\n                    dpParts.addUniquePart(mod.name, mod.data.data.dice_pool);\r\n                }\r\n            });\r\n\r\n            if (equippedAmmo) {\r\n                // add mods to damage from ammo\r\n                action.damage.mod = PartsList.AddUniquePart(action.damage.mod, equippedAmmo.name, equippedAmmo.data.data.damage);\r\n                // add mods to ap from ammo\r\n                action.damage.ap.mod = PartsList.AddUniquePart(action.damage.ap.mod, equippedAmmo.name, equippedAmmo.data.data.ap);\r\n\r\n                // override element\r\n                if (equippedAmmo.data.data.element) {\r\n                    action.damage.element.value = equippedAmmo.data.data.element;\r\n                } else {\r\n                    action.damage.element.value = action.damage.element.base;\r\n                }\r\n\r\n                // override damage type\r\n                if (equippedAmmo.data.data.damageType) {\r\n                    action.damage.type.value = equippedAmmo.data.data.damageType;\r\n                } else {\r\n                    action.damage.type.value = action.damage.type.base;\r\n                }\r\n            } else {\r\n                // set value if we don't have item overrides\r\n                action.damage.element.value = action.damage.element.base;\r\n                action.damage.type.value = action.damage.type.base;\r\n            }\r\n\r\n            // once all damage mods have been accounted for, sum base and mod to value\r\n            action.damage.value = Helpers.calcTotal(action.damage);\r\n            action.damage.ap.value = Helpers.calcTotal(action.damage.ap);\r\n\r\n            action.limit.value = Helpers.calcTotal(action.limit);\r\n\r\n            if (this.actor) {\r\n                if (action.damage.attribute) {\r\n                    const { attribute } = action.damage;\r\n                    // TODO convert this in the template\r\n                    action.damage.mod = PartsList.AddUniquePart(\r\n                        action.damage.mod,\r\n                        game.i18n.localize(CONFIG.SR5.attributes[attribute]),\r\n                        this.actor.findAttribute(attribute)?.value,\r\n                    );\r\n                    action.damage.value = Helpers.calcTotal(action.damage);\r\n                }\r\n                if (action.limit.attribute) {\r\n                    const { attribute } = action.limit;\r\n                    // TODO convert this in the template\r\n                    action.limit.mod = PartsList.AddUniquePart(\r\n                        action.limit.mod,\r\n                        game.i18n.localize(CONFIG.SR5.limits[attribute]),\r\n                        this.actor.findLimit(attribute)?.value,\r\n                    );\r\n                    action.limit.value = Helpers.calcTotal(action.limit);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (range) {\r\n            if (range.rc) {\r\n                const rangeParts = new PartsList();\r\n                equippedMods.forEach((mod) => {\r\n                    if (mod.data.data.rc) rangeParts.addUniquePart(mod.name, mod.data.data.rc);\r\n                    // handle overrides from ammo\r\n                });\r\n                range.rc.mod = rangeParts.list;\r\n                if (range.rc) range.rc.value = Helpers.calcTotal(range.rc);\r\n            }\r\n        }\r\n\r\n        if (item.type === 'adept_power') {\r\n            item.data.type = item.data.action?.type ? 'active' : 'passive';\r\n        }\r\n\r\n        this.labels = labels;\r\n        item['properties'] = this.getChatData().properties;\r\n    }\r\n\r\n    async postCard(event?) {\r\n        // we won't work if we don't have an actor\r\n        if (!this.actor) return;\r\n\r\n        const postOnly = event?.shiftKey || !this.hasRoll;\r\n\r\n        const post = (bonus = {}) => {\r\n            // if only post, don't roll and post a card version -- otherwise roll\r\n            if (postOnly) {\r\n                const { token } = this.actor;\r\n                const attack = this.getAttackData(0);\r\n                // don't include any hits\r\n                delete attack?.hits;\r\n                // generate chat data\r\n                createChatData({\r\n                    header: {\r\n                        name: this.name,\r\n                        img: this.img,\r\n                    },\r\n                    testName: this.getRollName(),\r\n                    actor: this.actor,\r\n                    tokenId: token ? `${token.scene._id}.${token.id}` : undefined,\r\n                    description: this.getChatData(),\r\n                    item: this,\r\n                    previewTemplate: this.hasTemplate,\r\n                    attack,\r\n                    ...bonus,\r\n                }).then((chatData) => {\r\n                    // create the message\r\n                    return ChatMessage.create(chatData, { displaySheet: false });\r\n                });\r\n            } else {\r\n                this.rollTest(event);\r\n            }\r\n        };\r\n        // prompt user if needed\r\n        const dialogData = await ShadowrunItemDialog.fromItem(this, event);\r\n        if (dialogData) {\r\n            // keep track of old close function\r\n            const oldClose = dialogData.close;\r\n            // call post() after dialog closes\r\n            dialogData.close = async (html) => {\r\n                if (oldClose) {\r\n                    // the oldClose we put on the dialog will return a boolean\r\n                    const ret = ((await oldClose(html)) as unknown) as boolean;\r\n                    if (!ret) return;\r\n                }\r\n                post();\r\n            };\r\n            return new Dialog(dialogData).render(true);\r\n        } else {\r\n            post();\r\n        }\r\n    }\r\n\r\n    getChatData(htmlOptions?) {\r\n        const data = duplicate(this.data.data);\r\n        const { labels } = this;\r\n        if (!data.description) data.description = {};\r\n\r\n        data.description.value = TextEditor.enrichHTML(data.description.value, htmlOptions);\r\n\r\n        const props = [];\r\n        const func = ChatData[this.data.type];\r\n        if (func) func(duplicate(data), labels, props, this);\r\n\r\n        data.properties = props.filter((p) => !!p);\r\n\r\n        return data;\r\n    }\r\n\r\n    getOpposedTestName(): string {\r\n        let name = '';\r\n        if (this.data.data.action?.opposed?.type) {\r\n            const { opposed } = this.data.data.action;\r\n            if (opposed.type !== 'custom') {\r\n                name = `${Helpers.label(opposed.type)}`;\r\n            } else if (opposed.skill) {\r\n                name = `${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\r\n            } else if (opposed.attribute2) {\r\n                name = `${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\r\n            } else if (opposed.attribute) {\r\n                name = `${Helpers.label(opposed.attribute)}`;\r\n            }\r\n        }\r\n        const mod = this.getOpposedTestModifier();\r\n        if (mod) name += ` ${mod}`;\r\n        return name;\r\n    }\r\n\r\n    getOpposedTestMod(): PartsList<number> {\r\n        const parts = new PartsList<number>();\r\n        if (this.hasDefenseTest()) {\r\n            if (this.isAreaOfEffect()) {\r\n                parts.addUniquePart('SR5.Aoe', -2);\r\n            }\r\n            if (this.isRangedWeapon()) {\r\n                const fireModeData = this.getLastFireMode();\r\n                if (fireModeData?.defense) {\r\n                    if (fireModeData.defense !== 'SR5.DuckOrCover') {\r\n                        const fireMode = +fireModeData.defense;\r\n                        parts.addUniquePart('SR5.FireMode', fireMode);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return parts;\r\n    }\r\n\r\n    getOpposedTestModifier(): string {\r\n        const testMod = this.getOpposedTestMod();\r\n        const total = testMod.total;\r\n        if (total) return `(${total})`;\r\n        else {\r\n            if (this.isRangedWeapon()) {\r\n                const fireModeData = this.getLastFireMode();\r\n                if (fireModeData?.defense) {\r\n                    if (fireModeData.defense === 'SR5.DuckOrCover') {\r\n                        return game.i18n.localize('SR5.DuckOrCover');\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    getBlastData(): BlastData | undefined {\r\n        // can only handle spells and grenade right now\r\n        if (this.isSpell() && this.isAreaOfEffect()) {\r\n            // distance on spells is equal to force\r\n            let distance = this.getLastSpellForce().value;\r\n            // extended spells multiply by 10\r\n            if (this.data.data.extended) distance *= 10;\r\n            return {\r\n                radius: distance,\r\n                dropoff: 0,\r\n            };\r\n        } else if (this.isGrenade()) {\r\n            // use blast radius\r\n            const distance = this.data.data.thrown.blast.radius;\r\n            const dropoff = this.data.data.thrown.blast.dropoff;\r\n            return {\r\n                radius: distance,\r\n                dropoff: dropoff,\r\n            };\r\n        } else if (this.hasExplosiveAmmo()) {\r\n            const ammo = this.getEquippedAmmo();\r\n            const distance = ammo.data.data.blast.radius;\r\n            const dropoff = ammo.data.data.blast.dropoff;\r\n            return {\r\n                radius: distance,\r\n                dropoff,\r\n            };\r\n        }\r\n    }\r\n\r\n    getEquippedAmmo() {\r\n        return (this.items || []).filter((item) => item.type === 'ammo' && item.data.data?.technology?.equipped)[0];\r\n    }\r\n\r\n    getEquippedMods() {\r\n        return (this.items || []).filter((item) => item.type === 'modification' && item.data.data.type === 'weapon' && item.data.data?.technology?.equipped);\r\n    }\r\n\r\n    hasExplosiveAmmo(): boolean {\r\n        const ammo = this.getEquippedAmmo();\r\n        return ammo?.data?.data?.blast?.radius > 0;\r\n    }\r\n\r\n    async equipWeaponMod(iid) {\r\n        const mod = this.getOwnedItem(iid);\r\n        if (mod) {\r\n            const dupData = duplicate(mod.data);\r\n            dupData.data.technology.equipped = !dupData.data.technology.equipped;\r\n            await this.updateOwnedItem(dupData);\r\n        }\r\n    }\r\n\r\n    get hasAmmo() {\r\n        return this.data.data.ammo !== undefined;\r\n    }\r\n\r\n    async useAmmo(fireMode) {\r\n        const dupData = duplicate(this.data);\r\n        const { ammo } = dupData.data;\r\n        if (ammo) {\r\n            ammo.current.value = Math.max(0, ammo.current.value - fireMode);\r\n            return this.update(dupData);\r\n        }\r\n    }\r\n\r\n    async reloadAmmo() {\r\n        const data = duplicate(this.data);\r\n        const { ammo } = data.data;\r\n        const diff = ammo.current.max - ammo.current.value;\r\n        ammo.current.value = ammo.current.max;\r\n\r\n        if (ammo.spare_clips) {\r\n            ammo.spare_clips.value = Math.max(0, ammo.spare_clips.value - 1);\r\n        }\r\n        await this.update(data);\r\n\r\n        const newAmmunition = (this.items || [])\r\n            .filter((i) => i.data.type === 'ammo')\r\n            .reduce((acc: BaseEntityData[], item) => {\r\n                const { technology } = item.data.data;\r\n                if (technology.equipped) {\r\n                    const qty = technology.quantity;\r\n                    technology.quantity = Math.max(0, qty - diff);\r\n                    acc.push(item.data);\r\n                }\r\n                return acc;\r\n            }, []);\r\n        if (newAmmunition.length) await this.updateOwnedItem(newAmmunition);\r\n    }\r\n\r\n    async equipAmmo(iid) {\r\n        // only allow ammo that was just clicked to be equipped\r\n        const ammo = this.items\r\n            ?.filter((item) => item.type === 'ammo')\r\n            .map((item) => {\r\n                const i = this.getOwnedItem(item._id);\r\n                if (i) {\r\n                    i.data.data.technology.equipped = iid === item._id;\r\n                    return i.data;\r\n                }\r\n            });\r\n        await this.updateOwnedItem(ammo);\r\n    }\r\n\r\n    addNewLicense() {\r\n        const data = duplicate(this.data);\r\n        const { licenses } = data.data;\r\n        if (typeof licenses === 'object') {\r\n            data.data.licenses = Object.values(licenses);\r\n        }\r\n        data.data.licenses.push({\r\n            name: '',\r\n            rtg: '',\r\n            description: '',\r\n        });\r\n        this.update(data);\r\n    }\r\n\r\n    getRollPartsList(): ModList<number> {\r\n        // we only have a roll if we have an action or an actor\r\n        if (!this.data.data.action || !this.actor) return [];\r\n\r\n        const parts = new PartsList(duplicate(this.getModifierList()));\r\n\r\n        const skill = this.actor.findActiveSkill(this.getActionSkill());\r\n        const attribute = this.actor.findAttribute(this.getActionAttribute());\r\n        const attribute2 = this.actor.findAttribute(this.getActionAttribute2());\r\n\r\n        if (attribute && attribute.label) parts.addPart(attribute.label, attribute.value);\r\n\r\n        // if we have a valid skill, don't look for a second attribute\r\n        if (skill && skill.label) {\r\n            parts.addUniquePart(skill.label, skill.value);\r\n            if (skill.value === 0) {\r\n                parts.addUniquePart('SR5.Defaulting', -1);\r\n            }\r\n        } else if (attribute2 && attribute2.label) parts.addUniquePart(attribute2.label, attribute2.value);\r\n\r\n        const spec = this.getActionSpecialization();\r\n        if (spec) parts.addUniquePart(spec, 2);\r\n\r\n        const mod = parseInt(this.data.data.action.mod || 0);\r\n        if (mod) parts.addUniquePart('SR5.ItemMod', mod);\r\n\r\n        const atts: (AttributeField | SkillField)[] | boolean = [];\r\n        if (attribute !== undefined) atts.push(attribute);\r\n        if (attribute2 !== undefined) atts.push(attribute2);\r\n        if (skill !== undefined) atts.push(skill);\r\n        // add global parts from actor\r\n        this.actor._addGlobalParts(parts);\r\n        this.actor._addMatrixParts(parts, atts);\r\n        this._addWeaponParts(parts);\r\n\r\n        return parts.list;\r\n    }\r\n\r\n    calculateRecoil() {\r\n        const lastFireMode = this.getLastFireMode();\r\n        if (!lastFireMode) return 0;\r\n        if (lastFireMode.value === 20) return 0;\r\n        return Math.min(this.getRecoilCompensation(true) - (this.getLastFireMode()?.value || 0), 0);\r\n    }\r\n\r\n    _addWeaponParts(parts: PartsList<number>) {\r\n        if (this.isRangedWeapon()) {\r\n            const recoil = this.calculateRecoil();\r\n            if (recoil) parts.addUniquePart('SR5.Recoil', recoil);\r\n        }\r\n    }\r\n\r\n    removeLicense(index) {\r\n        const data = duplicate(this.data);\r\n        const { licenses } = data.data;\r\n        licenses.splice(index, 1);\r\n        this.update(data);\r\n    }\r\n\r\n    async rollOpposedTest(target: SR5Actor, ev) {\r\n        const itemData = this.data.data;\r\n        const options = {\r\n            event: ev,\r\n            fireModeDefense: 0,\r\n            cover: false,\r\n        };\r\n\r\n        const lastAttack = this.getLastAttack();\r\n        const parts = this.getOpposedTestMod();\r\n        const { opposed } = itemData.action;\r\n\r\n        if (opposed.type === 'defense') {\r\n            if (lastAttack) {\r\n                options['incomingAttack'] = lastAttack;\r\n                options.cover = true;\r\n                if (lastAttack.fireMode?.defense) {\r\n                    options.fireModeDefense = +lastAttack.fireMode.defense;\r\n                }\r\n            }\r\n            return target.rollDefense(options, parts.list);\r\n        } else if (opposed.type === 'soak') {\r\n            options['damage'] = lastAttack?.damage;\r\n            options['attackerHits'] = lastAttack?.hits;\r\n            return target.rollSoak(options, parts.list);\r\n        } else if (opposed.type === 'armor') {\r\n            return target.rollArmor(options);\r\n        } else {\r\n            if (opposed.skill && opposed.attribute) {\r\n                return target.rollSkill(opposed.skill, {\r\n                    ...options,\r\n                    attribute: opposed.attribute,\r\n                });\r\n            } else if (opposed.attribute && opposed.attribute2) {\r\n                return target.rollTwoAttributes([opposed.attribute, opposed.attribute2], options);\r\n            } else if (opposed.attribute) {\r\n                return target.rollSingleAttribute(opposed.attribute, options);\r\n            }\r\n        }\r\n    }\r\n\r\n    async rollExtraTest(type: string, event) {\r\n        const targets = SR5Item.getTargets();\r\n        if (type === 'opposed') {\r\n            for (const t of targets) {\r\n                await this.rollOpposedTest(t, event);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Rolls a test using the latest stored data on the item (force, fireMode, level)\r\n     * @param event - mouse event\r\n     * @param options - any additional roll options to pass along - note that currently the Item will overwrite -- WIP\r\n     */\r\n    async rollTest(event, options?: Partial<AdvancedRollProps>): Promise<ShadowrunRoll | undefined> {\r\n        const promise = ShadowrunRoller.itemRoll(event, this, options);\r\n\r\n        // handle promise when it resolves for our own stuff\r\n        promise.then(async (roll) => {\r\n            // complex form handles fade\r\n            if (this.isComplexForm()) {\r\n                const totalFade = Math.max(this.getFade() + this.getLastComplexFormLevel().value, 2);\r\n                await this.actor.rollFade({ event }, totalFade);\r\n            } // spells handle drain, force, and attack data\r\n            else if (this.isSpell()) {\r\n                if (this.isCombatSpell() && roll) {\r\n                    const attackData = this.getAttackData(roll.total);\r\n                    if (attackData) {\r\n                        await this.setLastAttack(attackData);\r\n                    }\r\n                }\r\n                const forceData = this.getLastSpellForce();\r\n                const drain = Math.max(this.getDrain() + forceData.value + (forceData.reckless ? 3 : 0), 2);\r\n                await this.actor?.rollDrain({ event }, drain);\r\n            } // weapons handle ammo and attack data\r\n            else if (this.data.type === 'weapon') {\r\n                const attackData = this.getAttackData(roll?.total || 0);\r\n                if (attackData) {\r\n                    await this.setLastAttack(attackData);\r\n                }\r\n                if (this.hasAmmo) {\r\n                    const fireMode = this.getLastFireMode()?.value || 1;\r\n                    await this.useAmmo(fireMode);\r\n                }\r\n            }\r\n        });\r\n\r\n        return promise;\r\n    }\r\n\r\n    static getItemFromMessage(html): SR5Item | undefined {\r\n        const card = html.find('.chat-card');\r\n        let actor;\r\n        const tokenKey = card.data('tokenId');\r\n        if (tokenKey) {\r\n            const [sceneId, tokenId] = tokenKey.split('.');\r\n            let token;\r\n            if (sceneId === canvas.scene._id) token = canvas.tokens.get(tokenId);\r\n            else {\r\n                const scene: Scene = game.scenes.get(sceneId);\r\n                if (!scene) return;\r\n                // @ts-ignore\r\n                const tokenData = scene.data.tokens.find((t) => t.id === Number(tokenId));\r\n                if (tokenData) token = new Token(tokenData);\r\n            }\r\n            if (!token) return;\r\n            actor = Actor.fromToken(token);\r\n        } else actor = game.actors.get(card.data('actorId'));\r\n\r\n        if (!actor) return;\r\n        const itemId = card.data('itemId');\r\n        return actor.getOwnedItem(itemId);\r\n    }\r\n\r\n    static getTargets() {\r\n        const { character } = game.user;\r\n        const { controlled } = canvas.tokens;\r\n        const targets = controlled.reduce((arr, t) => (t.actor ? arr.concat([t.actor]) : arr), []);\r\n        if (character && controlled.length === 0) targets.push(character);\r\n        if (!targets.length) throw new Error(`You must designate a specific Token as the roll target`);\r\n        return targets;\r\n    }\r\n\r\n    /**\r\n     * Create an item in this item\r\n     * @param itemData\r\n     * @param options\r\n     */\r\n    async createOwnedItem(itemData, options = {}) {\r\n        if (!Array.isArray(itemData)) itemData = [itemData];\r\n        // weapons accept items\r\n        if (this.type === 'weapon') {\r\n            const currentItems = duplicate(this.getEmbeddedItems());\r\n\r\n            itemData.forEach((ogItem) => {\r\n                const item = duplicate(ogItem);\r\n                item._id = randomID(16);\r\n                if (item.type === 'ammo' || item.type === 'modification') {\r\n                    if (item?.data?.technology?.equipped) {\r\n                        item.data.technology.equipped = false;\r\n                    }\r\n                    currentItems.push(item);\r\n                }\r\n            });\r\n\r\n            await this.setEmbeddedItems(currentItems);\r\n        }\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Prepare embeddedItems\r\n     */\r\n    prepareEmbeddedEntities() {\r\n        super.prepareEmbeddedEntities();\r\n        let items = this.getEmbeddedItems();\r\n        if (items) {\r\n            const existing = (this.items || []).reduce((object, i) => {\r\n                object[i.id] = i;\r\n                return object;\r\n            }, {});\r\n            this.items = items.map((i) => {\r\n                if (i._id in existing) {\r\n                    const a = existing[i._id];\r\n                    a.data = i;\r\n                    a.prepareData();\r\n                    return a;\r\n                } else {\r\n                    // dirty things done here\r\n                    // @ts-ignore\r\n                    return Item.createOwned(i, this);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    getOwnedItem(itemId) {\r\n        const items = this.items;\r\n        if (!items) return;\r\n        return items.find((i) => i._id === itemId);\r\n    }\r\n\r\n    async updateOwnedItem(changes) {\r\n        const items = duplicate(this.getEmbeddedItems());\r\n        if (!items) return;\r\n        changes = Array.isArray(changes) ? changes : [changes];\r\n        if (!changes || changes.length === 0) return;\r\n        changes.forEach((itemChanges) => {\r\n            const index = items.findIndex((i) => i._id === itemChanges._id);\r\n            if (index === -1) return;\r\n            const item = items[index];\r\n            if (item) {\r\n                itemChanges = expandObject(itemChanges);\r\n                mergeObject(item, itemChanges);\r\n                items[index] = item;\r\n                // this.items[index].data = items[index];\r\n            }\r\n        });\r\n\r\n        await this.setEmbeddedItems(items);\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    async updateEmbeddedEntity(embeddedName: string, updateData: object | object[], options?: object) {\r\n        await this.updateOwnedItem(updateData);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Remove an owned item\r\n     * @param deleted\r\n     * @returns {Promise<boolean>}\r\n     */\r\n    async deleteOwnedItem(deleted) {\r\n        const items = duplicate(this.getEmbeddedItems());\r\n        if (!items) return;\r\n\r\n        const idx = items.findIndex((i) => i._id === deleted || Number(i._id) === deleted);\r\n        if (idx === -1) throw new Error(`Shadowrun5e | Couldn't find owned item ${deleted}`);\r\n        items.splice(idx, 1);\r\n        await this.setEmbeddedItems(items);\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n        await this.render(false);\r\n        return true;\r\n    }\r\n\r\n    async openPdfSource() {\r\n        const source = this.getBookSource();\r\n        if (source === '') {\r\n            // @ts-ignore\r\n            ui.notifications.error(game.i18n.localize('SR5.SourceFieldEmptyError'));\r\n        }\r\n        // TODO open PDF to correct location\r\n        // parse however you need, all \"buttons\" will lead to this function\r\n        const [code, page] = source.split(' ');\r\n        //@ts-ignore\r\n        ui.PDFoundry.openPDFByCode(code, parseInt(page));\r\n    }\r\n\r\n    getAttackData(hits: number): AttackData | undefined {\r\n        if (!this.data.data.action?.damage) return undefined;\r\n        const damage = this.data.data.action.damage;\r\n        const data: AttackData = {\r\n            hits,\r\n            damage: damage,\r\n        };\r\n\r\n        if (this.isCombatSpell()) {\r\n            const force = this.getLastSpellForce().value;\r\n            const damageParts = new PartsList(data.damage.mod);\r\n            data.force = force;\r\n            data.damage.base = force;\r\n            data.damage.value = force + damageParts.total;\r\n            data.damage.ap.value = -force + damageParts.total;\r\n            data.damage.ap.base = -force;\r\n        }\r\n\r\n        if (this.isComplexForm()) {\r\n            data.level = this.getLastComplexFormLevel().value;\r\n        }\r\n\r\n        if (this.isMeleeWeapon()) {\r\n            data.reach = this.getReach();\r\n            data.accuracy = this.getActionLimit();\r\n        }\r\n\r\n        if (this.isRangedWeapon()) {\r\n            data.fireMode = this.getLastFireMode();\r\n            data.accuracy = this.getActionLimit();\r\n        }\r\n\r\n        const blastData = this.getBlastData();\r\n        if (blastData) data.blast = blastData;\r\n\r\n        return data;\r\n    }\r\n\r\n    getRollName(): string | undefined {\r\n        if (this.isRangedWeapon()) {\r\n            return game.i18n.localize('SR5.RangeWeaponAttack');\r\n        }\r\n        if (this.isMeleeWeapon()) {\r\n            return game.i18n.localize('SR5.MeleeWeaponAttack');\r\n        }\r\n        if (this.isCombatSpell()) {\r\n            return game.i18n.localize('SR5.SpellAttack');\r\n        }\r\n        if (this.isSpell()) {\r\n            return game.i18n.localize('SR5.SpellCast');\r\n        }\r\n        if (this.hasRoll) return this.name;\r\n        return undefined;\r\n    }\r\n\r\n    getLimit(): LimitField | undefined {\r\n        const limit = this.data.data.action?.limit;\r\n        if (!limit) return undefined;\r\n        if (this.data.type === 'weapon') {\r\n            limit.label = 'SR5.Accuracy';\r\n        } else if (limit?.attribute) {\r\n            limit.label = CONFIG.SR5.attributes[limit.attribute];\r\n        } else if (this.isSpell()) {\r\n            limit.value = this.getLastSpellForce().value;\r\n            limit.label = 'SR5.Force';\r\n        } else if (this.isComplexForm()) {\r\n            limit.value = this.getLastComplexFormLevel().value;\r\n            limit.label = 'SR5.Level';\r\n        } else {\r\n            limit.label = 'SR5.Limit';\r\n        }\r\n        return limit;\r\n    }\r\n\r\n    /**\r\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\r\n     * @param scope\r\n     * @param key\r\n     * @param value\r\n     */\r\n    setFlag(scope: string, key: string, value: any): Promise<Entity> {\r\n        const newValue = Helpers.onSetFlag(value);\r\n        return super.setFlag(scope, key, newValue);\r\n    }\r\n\r\n    /**\r\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\r\n     * @param scope\r\n     * @param key\r\n     */\r\n    getFlag(scope: string, key: string): any {\r\n        const data = super.getFlag(scope, key);\r\n        return Helpers.onGetFlag(data);\r\n    }\r\n\r\n    /**\r\n     * Passthrough functions\r\n     */\r\n    isAreaOfEffect(): boolean {\r\n        return this.wrapper.isAreaOfEffect();\r\n    }\r\n\r\n    isArmor(): boolean {\r\n        return this.wrapper.isArmor();\r\n    }\r\n\r\n    hasArmorBase(): boolean {\r\n        return this.wrapper.hasArmorBase();\r\n    }\r\n\r\n    hasArmorAccessory(): boolean {\r\n        return this.wrapper.hasArmorAccessory();\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return this.wrapper.hasArmor();\r\n    }\r\n\r\n    isGrenade(): boolean {\r\n        return this.wrapper.isGrenade();\r\n    }\r\n\r\n    isWeapon(): boolean {\r\n        return this.wrapper.isWeapon();\r\n    }\r\n\r\n    isCyberware(): boolean {\r\n        return this.wrapper.isCyberware();\r\n    }\r\n\r\n    isCombatSpell(): boolean {\r\n        return this.wrapper.isCombatSpell();\r\n    }\r\n\r\n    isRangedWeapon(): boolean {\r\n        return this.wrapper.isRangedWeapon();\r\n    }\r\n\r\n    isSpell(): boolean {\r\n        return this.wrapper.isSpell();\r\n    }\r\n\r\n    isComplexForm(): boolean {\r\n        return this.wrapper.isComplexForm();\r\n    }\r\n\r\n    isMeleeWeapon(): boolean {\r\n        return this.wrapper.isMeleeWeapon();\r\n    }\r\n\r\n    isDevice(): boolean {\r\n        return this.wrapper.isDevice();\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.wrapper.isEquipped();\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        return this.wrapper.isCyberdeck();\r\n    }\r\n\r\n    getBookSource(): string {\r\n        return this.wrapper.getBookSource();\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.wrapper.getConditionMonitor();\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.wrapper.getRating();\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.wrapper.getArmorValue();\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        return this.wrapper.getArmorElements();\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.wrapper.getEssenceLoss();\r\n    }\r\n\r\n    getASDF() {\r\n        return this.wrapper.getASDF();\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.wrapper.getActionSkill();\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.wrapper.getActionAttribute();\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.wrapper.getActionAttribute2();\r\n    }\r\n\r\n    getActionLimit(): number | undefined {\r\n        return this.wrapper.getActionLimit();\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.wrapper.getModifierList();\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        return this.wrapper.getActionSpecialization();\r\n    }\r\n\r\n    getDrain(): number {\r\n        return this.wrapper.getDrain();\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.wrapper.getFade();\r\n    }\r\n\r\n    getRecoilCompensation(includeActor: boolean = true): number {\r\n        let rc = this.wrapper.getRecoilCompensation();\r\n        if (includeActor && this.actor) {\r\n            rc += this.actor.getRecoilCompensation();\r\n        }\r\n        return rc;\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon()) {\r\n            return this.data.data.melee?.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    hasDefenseTest(): boolean {\r\n        return this.data.data.action?.opposed?.type === 'defense';\r\n    }\r\n}\r\n","import { DataWrapper } from '../dataWrappers/DataWrapper';\r\nimport SR5ItemType = Shadowrun.SR5ItemType;\r\nimport ConditionData = Shadowrun.ConditionData;\r\nimport ModList = Shadowrun.ModList;\r\nimport SR5ItemData = Shadowrun.SR5ItemData;\r\n\r\nexport class SR5ItemDataWrapper extends DataWrapper<SR5ItemType> {\r\n    getData(): SR5ItemData {\r\n        return this.data.data;\r\n    }\r\n\r\n    isAreaOfEffect(): boolean {\r\n        // TODO figure out how to detect explosive ammo\r\n        return this.isGrenade() || (this.isSpell() && this.data.data.range === 'los_a'); //|| this.hasExplosiveAmmo();\r\n    }\r\n\r\n    isArmor(): boolean {\r\n        return this.data.type === 'armor';\r\n    }\r\n\r\n    hasArmorBase(): boolean {\r\n        return this.hasArmor() && !this.data.data.armor?.mod;\r\n    }\r\n\r\n    hasArmorAccessory(): boolean {\r\n        return this.hasArmor() && (this.data.data.armor?.mod ?? false);\r\n    }\r\n\r\n    hasArmor(): boolean {\r\n        return this.getArmorValue() > 0;\r\n    }\r\n\r\n    isGrenade(): boolean {\r\n        return this.isThrownWeapon() && (this.data.data.thrown?.blast.radius ?? 0) > 0;\r\n    }\r\n\r\n    isThrownWeapon(): boolean {\r\n        return this.isWeapon() && this.data.data.category === 'thrown';\r\n    }\r\n\r\n    isWeapon(): boolean {\r\n        return this.data.type === 'weapon';\r\n    }\r\n\r\n    isCyberware(): boolean {\r\n        return this.data.type === 'cyberware';\r\n    }\r\n\r\n    isCombatSpell(): boolean {\r\n        return this.isSpell() && this.data.data.category === 'combat';\r\n    }\r\n\r\n    isRangedWeapon(): boolean {\r\n        return this.isWeapon() && this.data.data.category === 'range';\r\n    }\r\n\r\n    isSpell(): boolean {\r\n        return this.data.type === 'spell';\r\n    }\r\n\r\n    isComplexForm(): boolean {\r\n        return this.data.type === 'complex_form';\r\n    }\r\n\r\n    isMeleeWeapon(): boolean {\r\n        return this.data.type === 'weapon' && this.data.data.category === 'melee';\r\n    }\r\n\r\n    isDevice(): boolean {\r\n        return this.data.type === 'device';\r\n    }\r\n\r\n    isEquipped(): boolean {\r\n        return this.data.data.technology?.equipped || false;\r\n    }\r\n\r\n    isCyberdeck(): boolean {\r\n        return this.isDevice() && this.data.data.category === 'cyberdeck';\r\n    }\r\n\r\n    getId(): string {\r\n        return this.data._id;\r\n    }\r\n\r\n    getBookSource(): string {\r\n        return this.data.data.description.source;\r\n    }\r\n\r\n    getConditionMonitor(): ConditionData {\r\n        return this.data.data.technology?.condition_monitor ?? { value: 0, max: 0 };\r\n    }\r\n\r\n    getRating(): number {\r\n        return this.data.data.technology?.rating || 0;\r\n    }\r\n\r\n    getArmorValue(): number {\r\n        return this.data.data?.armor?.value ?? 0;\r\n    }\r\n\r\n    getArmorElements(): { [key: string]: number } {\r\n        // TODO clean this up\r\n        const { fire, electricity, cold, acid } = this.data.data.armor || {};\r\n        return { fire: fire ?? 0, electricity: electricity ?? 0, cold: cold ?? 0, acid: acid ?? 0 };\r\n    }\r\n\r\n    getName(): string {\r\n        return this.data.name;\r\n    }\r\n\r\n    getEssenceLoss(): number {\r\n        return this.data.data?.essence ?? 0;\r\n    }\r\n\r\n    getAmmo() {\r\n        return this.data.data.ammo;\r\n    }\r\n\r\n    getASDF() {\r\n        if (!this.isDevice()) return undefined;\r\n\r\n        // matrix attributes are set up as an object\r\n        const matrix = {\r\n            attack: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            sleaze: {\r\n                value: 0,\r\n                device_att: '',\r\n            },\r\n            data_processing: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n            firewall: {\r\n                value: this.getRating(),\r\n                device_att: '',\r\n            },\r\n        };\r\n\r\n        if (this.isCyberdeck()) {\r\n            /**\r\n             * {\r\n             *     attN: {\r\n             *         value: number,\r\n             *         att: string (the ASDF attribute)\r\n             *     }\r\n             * }\r\n             */\r\n            const atts: { [key: string]: { value: number; att: string } } | undefined = this.data.data.atts;\r\n            if (atts) {\r\n                for (let [key, att] of Object.entries(atts)) {\r\n                    matrix[att.att].value = att.value;\r\n                    matrix[att.att].device_att = key;\r\n                }\r\n            }\r\n        }\r\n\r\n        return matrix;\r\n    }\r\n\r\n    getQuantity(): number | undefined {\r\n        return this.data.data?.technology?.quantity || 1;\r\n    }\r\n\r\n    getActionDicePoolMod(): number | undefined {\r\n        return this.data.data.action?.mod;\r\n    }\r\n\r\n    getLimitAttribute(): string | undefined {\r\n        return this.data.data.action?.limit?.attribute;\r\n    }\r\n\r\n    getActionSkill(): string | undefined {\r\n        return this.data.data.action?.skill;\r\n    }\r\n\r\n    getActionAttribute(): string | undefined {\r\n        return this.data.data.action?.attribute;\r\n    }\r\n\r\n    getActionAttribute2(): string | undefined {\r\n        return this.data.data.action?.attribute2;\r\n    }\r\n\r\n    getActionLimit(): number | undefined {\r\n        return this.data.data.action?.limit?.value;\r\n    }\r\n\r\n    getModifierList(): ModList<number> {\r\n        return this.data.data.action?.dice_pool_mod || [];\r\n    }\r\n\r\n    getActionSpecialization(): string | undefined {\r\n        if (this.data.data.action?.spec) return 'SR5.Specialization';\r\n        return undefined;\r\n    }\r\n\r\n    getDrain(): number {\r\n        return this.data.data.drain || 0;\r\n    }\r\n\r\n    getFade(): number {\r\n        return this.data.data.fade || 0;\r\n    }\r\n\r\n    getRecoilCompensation(): number {\r\n        if (!this.isRangedWeapon()) return 0;\r\n        const base = this.data.data?.range?.rc.value ?? '0';\r\n        return Number(base);\r\n    }\r\n\r\n    getReach(): number {\r\n        if (this.isMeleeWeapon()) {\r\n            return this.data.data.melee?.reach ?? 0;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    hasDefenseTest(): boolean {\r\n        return this.data.data.action?.opposed?.type === 'defense';\r\n    }\r\n}\r\n","import { Helpers } from '../helpers';\r\nimport { SR5Item } from './SR5Item';\r\n\r\n/**\r\n * Extend the basic ItemSheet with some very simple modifications\r\n */\r\nexport class SR5ItemSheet extends ItemSheet {\r\n    item: SR5Item;\r\n    private _shownDesc: any[];\r\n    private _scroll: string;\r\n    constructor(...args) {\r\n        super(...args);\r\n        this._shownDesc = [];\r\n    }\r\n\r\n    getEmbeddedItems() {\r\n        return this.item.items || [];\r\n    }\r\n\r\n    /**\r\n     * Extend and override the default options used by the Simple Item Sheet\r\n     * @returns {Object}\r\n     */\r\n    static get defaultOptions() {\r\n        return mergeObject(super.defaultOptions, {\r\n            classes: ['sr5', 'sheet', 'item'],\r\n            width: 650,\r\n            height: 450,\r\n            tabs: [{ navSelector: '.tabs', contentSelector: '.sheetbody' }],\r\n        });\r\n    }\r\n\r\n    get template() {\r\n        const path = 'systems/shadowrun5e/dist/templates/item/';\r\n        return `${path}${this.item.data.type}.html`;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Prepare data for rendering the Item sheet\r\n     * The prepared data object contains both the actor data as well as additional sheet options\r\n     */\r\n    getData() {\r\n        const data = super.getData();\r\n        const itemData = data.data;\r\n\r\n        if (itemData.action) {\r\n            try {\r\n                const { action } = itemData;\r\n                if (action.mod === 0) delete action.mod;\r\n                if (action.limit === 0) delete action.limit;\r\n                if (action.damage) {\r\n                    if (action.damage.mod === 0) delete action.damage.mod;\r\n                    if (action.damage.ap.mod === 0) delete action.damage.ap.mod;\r\n                }\r\n                if (action.limit) {\r\n                    if (action.limit.mod === 0) delete action.limit.mod;\r\n                }\r\n            } catch (e) {\r\n                console.error(e);\r\n            }\r\n        }\r\n\r\n        if (itemData.technology) {\r\n            try {\r\n                const tech = itemData.technology;\r\n                if (tech.rating === 0) delete tech.rating;\r\n                if (tech.quantity === 0) delete tech.quantity;\r\n                if (tech.cost === 0) delete tech.cost;\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n\r\n        data['config'] = CONFIG.SR5;\r\n        const items = this.getEmbeddedItems();\r\n        const [ammunition, weaponMods, armorMods] = items.reduce(\r\n            (parts: [BaseEntityData[], BaseEntityData[], BaseEntityData[]], item: SR5Item) => {\r\n                if (item.type === 'ammo') parts[0].push(item.data);\r\n                if (item.type === 'modification' && item.data.data.type === 'weapon') parts[1].push(item.data);\r\n                if (item.type === 'modification' && item.data.data.type === 'armor') parts[2].push(item.data);\r\n                return parts;\r\n            },\r\n            [[], [], []],\r\n        );\r\n        data['ammunition'] = ammunition;\r\n        data['weaponMods'] = weaponMods;\r\n        data['armorMods'] = armorMods;\r\n        // TODO set to the proper boolean for if the source PDF can be accessed\r\n        // I'm thinking maybe check for the mod being installed?\r\n        data['hasSourcePdfAvailable'] = true;\r\n\r\n        return data;\r\n    }\r\n\r\n    /* -------------------------------------------- */\r\n\r\n    /**\r\n     * Activate event listeners using the prepared sheet HTML\r\n     * @param html {HTML}   The prepared HTML object ready to be rendered into the DOM\r\n     */\r\n    activateListeners(html) {\r\n        super.activateListeners(html);\r\n        if (this.item.type === 'weapon') {\r\n            this.form.ondragover = (event) => this._onDragOver(event);\r\n            this.form.ondrop = (event) => this._onDrop(event);\r\n        }\r\n        html.find('.add-new-ammo').click(this._onAddNewAmmo.bind(this));\r\n        html.find('.ammo-equip').click(this._onAmmoEquip.bind(this));\r\n        html.find('.ammo-delete').click(this._onAmmoRemove.bind(this));\r\n        html.find('.ammo-reload').click(this._onAmmoReload.bind(this));\r\n\r\n        html.find('.edit-item').click(this._onEditItem.bind(this));\r\n\r\n        html.find('.add-new-mod').click(this._onAddWeaponMod.bind(this));\r\n        html.find('.mod-equip').click(this._onWeaponModEquip.bind(this));\r\n        html.find('.mod-delete').click(this._onWeaponModRemove.bind(this));\r\n\r\n        html.find('.add-new-license').click(this._onAddLicense.bind(this));\r\n        html.find('.license-delete').on('click', this._onRemoveLicense.bind(this));\r\n\r\n        html.find('.open-source-pdf').on('click', this._onOpenSourcePdf.bind(this));\r\n\r\n        html.find('.has-desc').click((event) => {\r\n            event.preventDefault();\r\n            const item = $(event.currentTarget).parents('.list-item');\r\n            const iid = $(item).data().item;\r\n            const field = item.next();\r\n            field.toggle();\r\n            if (iid) {\r\n                if (field.is(':visible')) this._shownDesc.push(iid);\r\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\r\n            }\r\n        });\r\n\r\n        html.find('.hidden').hide();\r\n    }\r\n\r\n    _onDragOver(event) {\r\n        event.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    async _onDrop(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n        let data;\r\n        try {\r\n            data = JSON.parse(event.dataTransfer.getData('text/plain'));\r\n            if (data.type !== 'Item') {\r\n                console.log('Shadowrun5e | Can only drop Items');\r\n            }\r\n        } catch (err) {\r\n            console.log('Shadowrun5e | drop error');\r\n        }\r\n        let item;\r\n        // Case 1 - Data explicitly provided\r\n        if (data.data) {\r\n            // TODO test\r\n            if (this.item.isOwned && data.actorId === this.item.actor?._id && data.data._id === this.item._id) {\r\n                console.log('Shadowrun5e | Cant drop item on itself');\r\n                // @ts-ignore\r\n                ui.notifications.error('Are you trying to break the game??');\r\n            }\r\n            item = data;\r\n        } else if (data.pack) {\r\n            console.log(data);\r\n            // Case 2 - From a Compendium Pack\r\n            // TODO test\r\n            item = await this._getItemFromCollection(data.pack, data.id);\r\n        } else {\r\n            // Case 3 - From a World Entity\r\n            item = game.items.get(data.id);\r\n        }\r\n\r\n        this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    _getItemFromCollection(collection, itemId) {\r\n        const pack = game.packs.find((p) => p.collection === collection);\r\n        return pack.getEntity(itemId);\r\n    }\r\n\r\n    _eventId(event) {\r\n        event.preventDefault();\r\n        return event.currentTarget.closest('.list-item').dataset.itemId;\r\n    }\r\n\r\n    async _onOpenSourcePdf(event) {\r\n        event.preventDefault();\r\n        await this.item.openPdfSource();\r\n    }\r\n\r\n    async _onEditItem(event) {\r\n        const item = this.item.getOwnedItem(this._eventId(event));\r\n        if (item) {\r\n            item.sheet.render(true);\r\n        }\r\n    }\r\n\r\n    async _onAddLicense(event) {\r\n        event.preventDefault();\r\n        this.item.addNewLicense();\r\n    }\r\n\r\n    async _onRemoveLicense(event) {\r\n        event.preventDefault();\r\n        const index = event.currentTarget.dataset.index;\r\n        if (index >= 0) this.item.removeLicense(index);\r\n    }\r\n\r\n    async _onWeaponModRemove(event) {\r\n        this.item.deleteOwnedItem(this._eventId(event));\r\n    }\r\n\r\n    async _onWeaponModEquip(event) {\r\n        this.item.equipWeaponMod(this._eventId(event));\r\n    }\r\n\r\n    async _onAddWeaponMod(event) {\r\n        event.preventDefault();\r\n        const type = 'modification';\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            data: duplicate(game.system.model.Item.modification),\r\n        };\r\n        itemData.data.type = 'weapon';\r\n        // @ts-ignore\r\n        const item = Item.createOwned(itemData, this.item);\r\n        this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    async _onAmmoReload(event) {\r\n        event.preventDefault();\r\n        this.item.reloadAmmo();\r\n    }\r\n\r\n    async _onAmmoRemove(event) {\r\n        this.item.deleteOwnedItem(this._eventId(event));\r\n    }\r\n\r\n    async _onAmmoEquip(event) {\r\n        this.item.equipAmmo(this._eventId(event));\r\n    }\r\n\r\n    _onAddNewAmmo(event) {\r\n        event.preventDefault();\r\n        const type = 'ammo';\r\n        const itemData = {\r\n            name: `New ${Helpers.label(type)}`,\r\n            type: type,\r\n            data: duplicate(game.system.model.Item.ammo),\r\n        };\r\n        // @ts-ignore\r\n        const item = Item.createOwned(itemData, this.item);\r\n        this.item.createOwnedItem(item.data);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _findActiveList() {\r\n        return $(this.element).find('.tab.active .scroll-area');\r\n    }\r\n\r\n    /** This is needed to circumvent Application.close setting closed state early, due to it's async animation\r\n     * - The length of the closing animation can't be longer then any await time in the closing cycle\r\n     * - FormApplication._onSubmit will otherwise set ._state to RENDERED even if the Application window has closed already\r\n     * - Subsequent render calls then will show the window again, due to it's state\r\n     *\r\n     * @private\r\n     */\r\n    private fixStaleRenderedState() {\r\n        if (this._state === Application.RENDER_STATES.RENDERED && ui.windows[this.appId] === undefined) {\r\n            console.warn(`SR5ItemSheet app for ${this.entity.name} is set as RENDERED but has no window registered. Fixing app internal render state. This is a known bug.`);\r\n            // Hotfixing instead of this.close() since FormApplication.close() expects form elements, which don't exist anymore.\r\n            this._state = Application.RENDER_STATES.CLOSED;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    async _render(force = false, options = {}) {\r\n        // NOTE: This is for a timing bug. See function doc for code removal. Good luck, there be dragons here. - taM\r\n        this.fixStaleRenderedState();\r\n\r\n        this._saveScrollPositions();\r\n        await super._render(force, options);\r\n        this._restoreScrollPositions();\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _restoreScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length && this._scroll != null) {\r\n            activeList.prop('scrollTop', this._scroll);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     */\r\n    _saveScrollPositions() {\r\n        const activeList = this._findActiveList();\r\n        if (activeList.length) {\r\n            this._scroll = activeList.prop('scrollTop');\r\n        }\r\n    }\r\n}\r\n","import { SR5ItemSheet } from './item/SR5ItemSheet';\r\nimport { SR5ActorSheet } from './actor/SR5ActorSheet';\r\nimport { SR5Actor } from './actor/SR5Actor';\r\nimport { SR5Item } from './item/SR5Item';\r\nimport { SR5 } from './config';\r\nimport { Helpers } from './helpers';\r\nimport { registerSystemSettings } from './settings';\r\nimport { preCombatUpdate, shadowrunCombatUpdate } from './combat';\r\nimport { measureDistance } from './canvas';\r\nimport * as chat from './chat';\r\nimport { OverwatchScoreTracker } from './apps/gmtools/OverwatchScoreTracker';\r\nimport { ShadowrunRoller } from './rolls/ShadowrunRoller';\r\nimport { Migrator } from './migrator/Migrator';\r\nimport { SYSTEM_NAME } from './constants';\r\nimport { HandlebarManager } from './handlebars/HandlebarManager';\r\n\r\n/* -------------------------------------------- */\r\n/*  Foundry VTT Initialization                  */\r\n/* -------------------------------------------- */\r\n\r\nHooks.once('init', function () {\r\n    console.log('Loading Shadowrun 5e System');\r\n\r\n    // Create a shadowrun5e namespace within the game global\r\n    game['shadowrun5e'] = {\r\n        SR5Actor,\r\n        ShadowrunRoller,\r\n        SR5Item,\r\n        rollItemMacro,\r\n    };\r\n\r\n    CONFIG.SR5 = SR5;\r\n    CONFIG.Actor.entityClass = SR5Actor;\r\n    CONFIG.Item.entityClass = SR5Item;\r\n\r\n    registerSystemSettings();\r\n\r\n    // Register sheet application classes\r\n    Actors.unregisterSheet('core', ActorSheet);\r\n    Actors.registerSheet(SYSTEM_NAME, SR5ActorSheet, { makeDefault: true });\r\n    Items.unregisterSheet('core', ItemSheet);\r\n    Items.registerSheet(SYSTEM_NAME, SR5ItemSheet, { makeDefault: true });\r\n\r\n    ['renderSR5ActorSheet', 'renderSR5ItemSheet'].forEach((s) => {\r\n        Hooks.on(s, (app, html) => Helpers.setupCustomCheckbox(app, html));\r\n    });\r\n\r\n    HandlebarManager.loadTemplates();\r\n\r\n    // CONFIG.debug.hooks = true;\r\n});\r\n\r\nHooks.on('canvasInit', function () {\r\n    // this does actually exist. Fix in types?\r\n    // @ts-ignore\r\n    SquareGrid.prototype.measureDistance = measureDistance;\r\n});\r\n\r\nHooks.on('ready', function () {\r\n    // this is correct, will need to be fixed in foundry types\r\n    // @ts-ignore\r\n    game.socket.on('system.shadowrun5e', (data) => {\r\n        if (game.user.isGM && data.gmCombatUpdate) {\r\n            shadowrunCombatUpdate(data.gmCombatUpdate.changes, data.gmCombatUpdate.options);\r\n        }\r\n    });\r\n\r\n    if (game.user.isGM) {\r\n        Migrator.BeginMigration();\r\n    }\r\n    const diceIconSelector = '#chat-controls .roll-type-select .fa-dice-d20';\r\n    $(document).on('click', diceIconSelector, () => ShadowrunRoller.promptRoll());\r\n});\r\n\r\nHooks.on('preUpdateCombat', preCombatUpdate);\r\nHooks.on('renderChatMessage', (app, html) => {\r\n    chat.addRollListeners(app, html);\r\n});\r\n\r\nHooks.on('getChatLogEntryContext', chat.addChatMessageContextOptions);\r\n\r\n/* -------------------------------------------- */\r\n/*  Hotbar Macros                               */\r\n/* -------------------------------------------- */\r\n\r\nHooks.on('hotbarDrop', (bar, data, slot) => {\r\n    if (data.type !== 'Item') return;\r\n\r\n    createItemMacro(data.data, slot);\r\n    return false;\r\n});\r\n\r\nHooks.on('renderSceneControls', (controls, html) => {\r\n    html.find('[data-tool=\"overwatch-score-tracker\"]').on('click', (event) => {\r\n        event.preventDefault();\r\n        new OverwatchScoreTracker().render(true);\r\n    });\r\n});\r\n\r\nHooks.on('getSceneControlButtons', (controls) => {\r\n    if (game.user.isGM) {\r\n        const tokenControls = controls.find((c) => c.name === 'token');\r\n        tokenControls.tools.push({\r\n            name: 'overwatch-score-tracker',\r\n            title: 'CONTROLS.SR5.OverwatchScoreTracker',\r\n            icon: 'fas fa-network-wired',\r\n        });\r\n    }\r\n});\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {Object} item     The item data\r\n * @param {number} slot     The hotbar slot to use\r\n * @returns {Promise}\r\n */\r\nasync function createItemMacro(item, slot) {\r\n    const command = `game.shadowrun5e.rollItemMacro(\"${item.name}\");`;\r\n    let macro = game.macros.entities.find((m) => m.name === item.name);\r\n    if (!macro) {\r\n        macro = (await Macro.create(\r\n            {\r\n                name: item.name,\r\n                type: 'script',\r\n                img: item.img,\r\n                command: command,\r\n                flags: { 'shadowrun5e.itemMacro': true },\r\n            },\r\n            { displaySheet: false },\r\n        )) as Macro;\r\n    }\r\n    if (macro) game.user.assignHotbarMacro(macro, slot);\r\n}\r\n\r\n/**\r\n * Create a Macro from an Item drop.\r\n * Get an existing item macro if one exists, otherwise create a new one.\r\n * @param {string} itemName\r\n * @return {Promise}\r\n */\r\nfunction rollItemMacro(itemName) {\r\n    const speaker = ChatMessage.getSpeaker();\r\n    let actor;\r\n    if (speaker.token) actor = game.actors.tokens[speaker.token];\r\n    if (!actor) actor = game.actors.get(speaker.actor);\r\n    const item = actor ? actor.items.find((i) => i.name === itemName) : null;\r\n    if (!item) {\r\n        // @ts-ignore\r\n        return ui.notifications.warn(`Your controlled Actor does not have an item named ${itemName}`);\r\n    }\r\n\r\n    return item.postCard();\r\n}\r\n\r\nHandlebarManager.registerHelpers();\r\n\r\n","import { VersionMigration } from './VersionMigration';\r\nimport { LegacyMigration } from './versions/LegacyMigration';\r\nimport { Version0_6_5 } from './versions/Version0_6_5';\r\nimport { Version0_6_10 } from './versions/Version0_6_10';\r\n\r\ntype VersionDefinition = {\r\n    versionNumber: string;\r\n    migration: VersionMigration;\r\n};\r\nexport class Migrator {\r\n    // Map of all version migrations to their target version numbers.\r\n    private static readonly s_Versions: VersionDefinition[] = [\r\n        { versionNumber: LegacyMigration.TargetVersion, migration: new LegacyMigration() },\r\n        { versionNumber: Version0_6_5.TargetVersion, migration: new Version0_6_5() },\r\n        { versionNumber: Version0_6_10.TargetVersion, migration: new Version0_6_10() },\r\n    ];\r\n\r\n    //TODO: Call on Init()\r\n    public static async BeginMigration() {\r\n        let currentVersion = game.settings.get(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION);\r\n        if (currentVersion === undefined || currentVersion === null) {\r\n            currentVersion = VersionMigration.NO_VERSION;\r\n        }\r\n\r\n        const migrations = Migrator.s_Versions.filter(({ versionNumber }) => {\r\n            // if versionNUmber is greater than currentVersion, we need to apply this migration\r\n            return this.compareVersion(versionNumber, currentVersion) === 1;\r\n        });\r\n\r\n        // No migrations are required, exit.\r\n        if (migrations.length === 0) {\r\n            return;\r\n        }\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.WarningTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.WarningHeader');\r\n        const localizedWarningRequired = game.i18n.localize('SR5.MIGRATION.WarningRequired');\r\n        const localizedWarningDescription = game.i18n.localize('SR5.MIGRATION.WarningDescription');\r\n        const localizedWarningBackup = game.i18n.localize('SR5.MIGRATION.WarningBackup');\r\n        const localizedWarningBegin = game.i18n.localize('SR5.MIGRATION.BeginMigration');\r\n\r\n        const d = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"color: red; text-align: center\">${localizedWarningHeader}</h2>` +\r\n                `<p style=\"text-align: center\"><i>${localizedWarningRequired}</i></p>` +\r\n                `<p>${localizedWarningDescription}</p>` +\r\n                `<h3 style=\"color: red\">${localizedWarningBackup}</h3>`,\r\n            buttons: {\r\n                ok: {\r\n                    label: localizedWarningBegin,\r\n                    callback: () => this.migrate(migrations),\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        d.render(true);\r\n    }\r\n\r\n    private static async migrate(migrations: VersionDefinition[]) {\r\n        // we want to apply migrations in ascending order until we're up to the latest\r\n        migrations.sort((a, b) => {\r\n            return this.compareVersion(a.versionNumber, b.versionNumber);\r\n        });\r\n\r\n        await this.migrateWorld(game, migrations);\r\n        await this.migrateCompendium(game, migrations);\r\n\r\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.SuccessTitle');\r\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.SuccessHeader');\r\n        const localizedSuccessDescription = game.i18n.localize('SR5.MIGRATION.SuccessDescription');\r\n        const localizedSuccessPacksInfo = game.i18n.localize('SR5.MIGRATION.SuccessPacksInfo');\r\n        const localizedSuccessConfirm = game.i18n.localize('SR5.MIGRATION.SuccessConfirm');\r\n        const packsDialog = new Dialog({\r\n            title: localizedWarningTitle,\r\n            content:\r\n                `<h2 style=\"text-align: center; color: green\">${localizedWarningHeader}</h2>` +\r\n                `<p>${localizedSuccessDescription}</p>` +\r\n                `<p style=\"text-align: center\"><i>${localizedSuccessPacksInfo}</i></p>`,\r\n            buttons: {\r\n                ok: {\r\n                    icon: '<i class=\"fas fa-check\"></i>',\r\n                    label: localizedSuccessConfirm,\r\n                },\r\n            },\r\n            default: 'ok',\r\n        });\r\n        packsDialog.render(true);\r\n    }\r\n\r\n    /**\r\n     * Migrate all world objects\r\n     * @param game\r\n     * @param migrations\r\n     */\r\n    private static async migrateWorld(game: Game, migrations: VersionDefinition[]) {\r\n        // Run the migrations in order\r\n        for (const { migration } of migrations) {\r\n            await migration.Migrate(game);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over all world compendium packs\r\n     * @param game Game that will be migrated\r\n     * @param migrations Instances of the version migration\r\n     */\r\n    private static async migrateCompendium(game: Game, migrations: VersionDefinition[]) {\r\n        // Migrate World Compendium Packs\r\n        const packs = game.packs.filter((pack) => pack.metadata.package === 'world' && ['Actor', 'Item', 'Scene'].includes(pack.metadata.entity));\r\n\r\n        // Run the migrations in order on each pack.\r\n        for (const pack of packs) {\r\n            for (const { migration } of migrations) {\r\n                await migration.MigrateCompendiumPack(pack);\r\n            }\r\n        }\r\n    }\r\n\r\n    // found at: https://helloacm.com/the-javascript-function-to-compare-version-number-strings/\r\n    // updated for typescript\r\n    /**\r\n     * compare two version numbers, returns 1 if v1 > v2, -1 if v1 < v2, 0 if equal\r\n     * @param v1\r\n     * @param v2\r\n     */\r\n    public static compareVersion(v1: string, v2: string) {\r\n        const s1 = v1.split('.').map((s) => parseInt(s, 10));\r\n        const s2 = v2.split('.').map((s) => parseInt(s, 10));\r\n        const k = Math.min(v1.length, v2.length);\r\n        for (let i = 0; i < k; ++i) {\r\n            if (s1[i] > s2[i]) return 1;\r\n            if (s1[i] < s2[i]) return -1;\r\n        }\r\n        return v1.length === v2.length ? 0 : v1.length < v2.length ? -1 : 1;\r\n    }\r\n}\r\n","import { SR5Actor } from '../actor/SR5Actor';\r\n\r\n/**\r\n * Converts a game's data model from source version to a target version.\r\n * Extending classes are only required to handle items, actors, and scenes,\r\n *  other methods are implementable purely for convenience and atomicity.\r\n */\r\nexport abstract class VersionMigration {\r\n    static readonly MODULE_NAME = 'shadowrun5e';\r\n    static readonly KEY_DATA_VERSION = 'systemMigrationVersion';\r\n    static readonly NO_VERSION = '0';\r\n\r\n    private m_Abort: boolean = false;\r\n    private m_AbortReason: string;\r\n\r\n    /**\r\n     * The allowed version this migrator should be able to operate on.\r\n     */\r\n    public abstract get SourceVersion(): string;\r\n    /**\r\n     * The resulting version this migrator will produce.\r\n     */\r\n    public abstract get TargetVersion(): string;\r\n\r\n    public get SourceVersionFriendlyName(): string {\r\n        return `v${this.SourceVersion}`;\r\n    }\r\n    public get TargetVersionFriendlyName(): string {\r\n        return `v${this.TargetVersion}`;\r\n    }\r\n\r\n    /**\r\n     * Flag the migration to be aborted.\r\n     * @param reason The reason that the migration must be aborted, to be displayed\r\n     *  to the user and returned from the migration call.\r\n     */\r\n    protected abort(reason: string): void {\r\n        this.m_Abort = true;\r\n        this.m_AbortReason = reason;\r\n        // @ts-ignore\r\n        ui.notifications.error(`Data migration has been aborted: ${reason}`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Begin migration for the specified game.\r\n     * @param game The world that should be migrated.\r\n     */\r\n    public async Migrate(game: Game) {\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.info(`Beginning Shadowrun system migration from version ${this.SourceVersionFriendlyName} to ${this.TargetVersionFriendlyName}.`);\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.warn(`Please do not close your game or shutdown FoundryVTT.`, {\r\n            permanent: true,\r\n        });\r\n\r\n        // Map of entities to update, store until later to reduce chance of partial updates\r\n        // which may result in impossible game states.\r\n        const entityUpdates: Map<Entity, EntityUpdate> = new Map<Entity, EntityUpdate>();\r\n\r\n        // Migrate World Items\r\n        await this.PreMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateItems(game, entityUpdates);\r\n        await this.PostMigrateItemData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate World Actors\r\n        await this.PreMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateActors(game, entityUpdates);\r\n        await this.PostMigrateActorData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Migrate Actor Tokens\r\n        await this.PreMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n        await this.IterateScenes(game, entityUpdates);\r\n        await this.PostMigrateSceneData(game, entityUpdates);\r\n        if (this.m_Abort) {\r\n            return Promise.reject(this.m_AbortReason);\r\n        }\r\n\r\n        // Apply the updates, this should *always* work, now that parsing is complete.\r\n        await this.Apply(entityUpdates);\r\n\r\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, this.TargetVersion);\r\n        // @ts-ignore TODO Unignore when Foundry Types updates\r\n        ui.notifications.info(`Shadowrun system migration successfully migrated to version ${this.TargetVersion}.`, { permanent: true });\r\n    }\r\n\r\n    /**\r\n     * Applies the specified mapping of entities, iteratively updating each.\r\n     * @param entityUpdates A mapping of entity updateData pairs.\r\n     */\r\n    protected async Apply(entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const [entity, { updateData, embeddedItems }] of entityUpdates) {\r\n            if (embeddedItems !== null) {\r\n                const actor = entity as SR5Actor;\r\n                await actor.updateOwnedItem(embeddedItems);\r\n            }\r\n            await entity.update(updateData, { enforceTypes: false });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate through all scenes and migrate each if needed.\r\n     * @param game\r\n     * @param entityUpdates\r\n     */\r\n    protected async IterateScenes(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const scene of game.scenes.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateSceneData(scene))) {\r\n                    continue;\r\n                }\r\n\r\n                if (scene._id === 'MAwSFhlXRipixOWw') {\r\n                    console.log('Scene Pre-Update');\r\n                    console.log(scene);\r\n                }\r\n\r\n                console.log(`Migrating Scene entity ${scene.name}`);\r\n                const updateData = await this.MigrateSceneData(duplicate(scene.data));\r\n\r\n                let hasTokenUpdates = false;\r\n                updateData.tokens = await Promise.all(\r\n                    // @ts-ignore\r\n                    scene.data.tokens.map(async (token) => {\r\n                        if (isObjectEmpty(token.actorData)) {\r\n                            return token;\r\n                        }\r\n\r\n                        let tokenDataUpdate = await this.MigrateActorData(token.actorData);\r\n                        if (!isObjectEmpty(tokenDataUpdate)) {\r\n                            hasTokenUpdates = true;\r\n                            tokenDataUpdate['_id'] = token._id;\r\n\r\n                            const newToken = duplicate(token);\r\n                            newToken.actorData = await mergeObject(token.actorData, tokenDataUpdate, {\r\n                                enforceTypes: false,\r\n                                inplace: false,\r\n                            });\r\n                            console.log(newToken);\r\n                            return newToken;\r\n                        } else {\r\n                            return token;\r\n                        }\r\n                    }),\r\n                );\r\n                if (scene._id === 'MAwSFhlXRipixOWw') {\r\n                    console.log('Scene Pre-Update');\r\n                    console.log(scene);\r\n                }\r\n\r\n                if (isObjectEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(scene, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all items and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async IterateItems(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const item of game.items.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateItemData(item.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Item: ${item.name}`);\r\n                const updateData = await this.MigrateItemData(item.data);\r\n\r\n                if (isObjectEmpty(updateData)) {\r\n                    continue;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(item, {\r\n                    updateData,\r\n                    embeddedItems: null,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Iterate through all actors and migrate each if needed.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async IterateActors(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\r\n        for (const actor of game.actors.entities) {\r\n            try {\r\n                if (!(await this.ShouldMigrateActorData(actor.data))) {\r\n                    continue;\r\n                }\r\n\r\n                console.log(`Migrating Actor ${actor.name}`);\r\n                console.log(actor);\r\n                const updateData = await this.MigrateActorData(duplicate(actor.data));\r\n                console.log(updateData);\r\n                let items = [];\r\n                if (updateData.items) {\r\n                    items = updateData.items;\r\n                    delete updateData.items;\r\n                }\r\n\r\n                expandObject(updateData);\r\n                entityUpdates.set(actor, {\r\n                    updateData,\r\n                    embeddedItems: items,\r\n                });\r\n            } catch (error) {\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Iterate over an actor's items, updating those that need updating.\r\n     * @param actorData The actor to iterate over\r\n     * @param updateData The existing update data to merge into\r\n     */\r\n    protected async IterateActorItems(actorData: ActorData, updateData) {\r\n        let hasItemUpdates = false;\r\n        // @ts-ignore\r\n        if (actorData.items !== undefined) {\r\n            const items = await Promise.all(\r\n                // @ts-ignore\r\n                actorData.items.map(async (item) => {\r\n                    let itemUpdate = await this.MigrateItemData(item);\r\n\r\n                    if (!isObjectEmpty(itemUpdate)) {\r\n                        hasItemUpdates = true;\r\n                        itemUpdate['_id'] = item._id;\r\n                        return await mergeObject(item, itemUpdate, {\r\n                            enforceTypes: false,\r\n                            inplace: false,\r\n                        });\r\n                    } else {\r\n                        return item;\r\n                    }\r\n                }),\r\n            );\r\n            if (hasItemUpdates) {\r\n                updateData.items = items;\r\n            }\r\n        }\r\n\r\n        return updateData;\r\n    }\r\n\r\n    /**\r\n     * Check if a scene requires updates.\r\n     * @param scene The scene to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified scene's data.\r\n     * @param scene The scene to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateSceneData(scene: any): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before scene data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an item requires updates.\r\n     * @param item The item to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateItemData(item: BaseEntityData): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified item's data.\r\n     * @param item The item to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateItemData(item: BaseEntityData): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right before item data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Check if an actor requires updates.\r\n     * @param actor The actor to check.\r\n     * @return A promise that resolves true or false.\r\n     */\r\n    protected async ShouldMigrateActorData(actor: ActorData): Promise<boolean> {\r\n        return false;\r\n    }\r\n    /**\r\n     * Migrate the specified actor's data.\r\n     * @param actor The actor to migrate.\r\n     * @return A promise that resolves with the update data.\r\n     */\r\n    protected async MigrateActorData(actor: ActorData): Promise<any> {\r\n        return {};\r\n    }\r\n    /**\r\n     * Do something right before actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PreMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n    /**\r\n     * Do something right after actor data is migrated.\r\n     * @param game The game to be updated.\r\n     * @param entityUpdates The current map of entity updates.\r\n     */\r\n    protected async PostMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\r\n\r\n    /**\r\n     * Migrate a compendium pack\r\n     * @param pack\r\n     */\r\n    public async MigrateCompendiumPack(pack: Compendium) {\r\n        const entity = pack.metadata.entity;\r\n        if (!['Actor', 'Item', 'Scene'].includes(entity)) return;\r\n\r\n        // Begin by requesting server-side data model migration and get the migrated content\r\n        await pack.migrate({});\r\n        const content = await pack.getContent();\r\n\r\n        // Iterate over compendium entries - applying fine-tuned migration functions\r\n        for (let ent of content) {\r\n            try {\r\n                let updateData: any = null;\r\n                if (entity === 'Item') {\r\n                    updateData = await this.MigrateItemData(ent.data);\r\n\r\n                    if (isObjectEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    expandObject(updateData);\r\n                    updateData['_id'] = ent._id;\r\n                    await pack.updateEntity(updateData);\r\n                    // TODO: Uncomment when foundry allows embeddeds to be updated in packs\r\n                    // } else if (entity === 'Actor') {\r\n                    //     updateData = await this.MigrateActorData(ent.data);\r\n                    //\r\n                    //     if (isObjectEmpty(updateData)) {\r\n                    //         continue;\r\n                    //     }\r\n                    //\r\n                    //     updateData['_id'] = ent._id;\r\n                    //     await pack.updateEntity(updateData);\r\n                } else if (entity === 'Scene') {\r\n                    updateData = await this.MigrateSceneData(ent.data);\r\n\r\n                    if (isObjectEmpty(updateData)) {\r\n                        continue;\r\n                    }\r\n\r\n                    expandObject(updateData);\r\n                    updateData['_id'] = ent._id;\r\n                    await pack.updateEntity(updateData);\r\n                }\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        console.log(`Migrated all ${entity} entities from Compendium ${pack.collection}`);\r\n    }\r\n}\r\n\r\ntype EntityUpdate = {\r\n    updateData: any;\r\n    embeddedItems: null | any[];\r\n};\r\n","import { VersionMigration } from '../VersionMigration';\r\n\r\n/**\r\n * Migrates the data model for Legacy migrations prior to 0.6.4\r\n */\r\nexport class LegacyMigration extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0';\r\n    }\r\n    get TargetVersion(): string {\r\n        return LegacyMigration.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.4';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: ActorData): Promise<any> {\r\n        let updateData: any = {};\r\n        LegacyMigration.migrateActorOverflow(actorData, updateData);\r\n        LegacyMigration.migrateActorSkills(actorData, updateData);\r\n\r\n        updateData = await this.IterateActorItems(actorData, updateData);\r\n\r\n        return updateData;\r\n    }\r\n\r\n    protected async MigrateItemData(item: BaseEntityData): Promise<any> {\r\n        const updateData = {};\r\n        LegacyMigration.migrateDamageTypeAndElement(item, updateData);\r\n        LegacyMigration.migrateItemsAddActions(item, updateData);\r\n        LegacyMigration.migrateActorOverflow(item, updateData);\r\n        LegacyMigration.migrateItemsAddCapacity(item, updateData);\r\n        LegacyMigration.migrateItemsAmmo(item, updateData);\r\n        LegacyMigration.migrateItemsConceal(item, updateData);\r\n        return updateData;\r\n    }\r\n\r\n    protected async MigrateSceneData(scene: any): Promise<any> {\r\n        return {};\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: ActorData): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    protected async ShouldMigrateItemData(item: BaseEntityData): Promise<boolean> {\r\n        return true;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n\r\n    /**\r\n     * Migrate actor overflow from an integer to an object\r\n     * - it wasn't even displayed before so we know it is 0\r\n     * @param actorData\r\n     * @param updateData\r\n     */\r\n    private static migrateActorOverflow(actorData, updateData) {\r\n        if (getProperty(actorData.data, 'track.physical.overflow') === 0) {\r\n            updateData['data.track.physical.overflow.value'] = 0;\r\n            updateData['data.track.physical.overflow.max'] = 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate actor skills specializations to be a list instead of string\r\n     * @param actorData\r\n     * @param updateData\r\n     */\r\n    private static migrateActorSkills(actorData, updateData) {\r\n        if (!actorData.data?.skills?.active) return;\r\n        const splitRegex = /[,\\/|.]+/;\r\n\r\n        const reducer = (running, [key, val]) => {\r\n            if (!Array.isArray(val.specs) && val.specs) {\r\n                running[key] = {\r\n                    specs: val.specs.split(splitRegex).filter((s) => s !== ''),\r\n                };\r\n            }\r\n            return running;\r\n        };\r\n\r\n        if (actorData.data.skills) {\r\n            updateData['data.skills.active'] = Object.entries(actorData.data.skills.active).reduce(reducer, {});\r\n            if (actorData.data.skills.knowledge) {\r\n                updateData['data.skills.knowledge.street.value'] = Object.entries(actorData.data.skills?.knowledge?.street?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.professional.value'] = Object.entries(actorData.data.skills?.knowledge?.professional?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.academic.value'] = Object.entries(actorData.data.skills?.knowledge?.academic?.value).reduce(reducer, {});\r\n                updateData['data.skills.knowledge.interests.value'] = Object.entries(actorData.data.skills?.knowledge?.interests?.value).reduce(reducer, {});\r\n            }\r\n            if (actorData.data.skills.language) {\r\n                updateData['data.skills.language.value'] = Object.entries(actorData.data.skills?.language?.value).reduce(reducer, {});\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateDamageTypeAndElement(item, updateData) {\r\n        // console.log('Migrating Damage and Elements');\r\n        if (item.data.action) {\r\n            const action = item.data.action;\r\n            if (typeof action.damage.type === 'string') {\r\n                updateData['data.action.damage.type.base'] = item.data.action.damage.type;\r\n            }\r\n            if (typeof action.damage.element === 'string') {\r\n                updateData['data.action.damage.element.base'] = item.data.action.damage.element;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate ammo from ranged weapons only to all weapons\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAmmo(item, updateData) {\r\n        // console.log('Migrating Ammo');\r\n        if (item.type === 'weapon' && item.data.ammo === undefined) {\r\n            let currentAmmo = { value: 0, max: 0 };\r\n            if (item.data.category === 'range' && item.data.range && item.data.range.ammo) {\r\n                // copy over ammo count\r\n                const oldAmmo = item.data.range.ammo;\r\n                currentAmmo.value = oldAmmo.value;\r\n                currentAmmo.max = oldAmmo.max;\r\n            }\r\n            updateData['data.ammo'] = {\r\n                spare_clips: {\r\n                    value: 0,\r\n                    max: 0,\r\n                },\r\n                current: {\r\n                    value: currentAmmo.value,\r\n                    max: currentAmmo.max,\r\n                },\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Migrate conceal name\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsConceal(item, updateData) {\r\n        if (item.data.technology?.concealability !== undefined) {\r\n            updateData['data.technology.conceal'] = {\r\n                base: item.data.technology.concealability,\r\n            };\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add capacity to items\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAddCapacity(item, updateData) {\r\n        if (['cyberware'].includes(item.type)) {\r\n            if (item.data.capacity === undefined) {\r\n                updateData.data.capacity = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add actions to needed items\r\n     * @param item\r\n     * @param updateData\r\n     */\r\n    private static migrateItemsAddActions(item, updateData) {\r\n        if (['quality', 'cyberware'].includes(item.type)) {\r\n            if (item.data.action === undefined) {\r\n                const action = {\r\n                    type: '',\r\n                    category: '',\r\n                    attribute: '',\r\n                    attribute2: '',\r\n                    skill: '',\r\n                    spec: false,\r\n                    mod: 0,\r\n                    limit: {\r\n                        value: 0,\r\n                        attribute: '',\r\n                    },\r\n                    extended: false,\r\n                    damage: {\r\n                        type: '',\r\n                        element: '',\r\n                        value: 0,\r\n                        ap: {\r\n                            value: 0,\r\n                        },\r\n                        attribute: '',\r\n                    },\r\n                    opposed: {\r\n                        type: '',\r\n                        attribute: '',\r\n                        attribute2: '',\r\n                        skill: '',\r\n                        mod: 0,\r\n                        description: '',\r\n                    },\r\n                };\r\n                if (!updateData.data) updateData.data = {};\r\n                updateData.data.action = action;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { VersionMigration } from '../VersionMigration';\r\nimport SR5ActorType = Shadowrun.SR5ActorType;\r\n\r\n/**\r\n * Add default value of willpower to the full_defense_attribute field\r\n */\r\nexport class Version0_6_10 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.6.9';\r\n    }\r\n    get TargetVersion(): string {\r\n        return Version0_6_10.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.10';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: SR5ActorType): Promise<any> {\r\n        if (actorData.data?.attributes?.edge === undefined) return {};\r\n        return {\r\n            data: {\r\n                attributes: {\r\n                    edge: {\r\n                        base: actorData.data.attributes.edge.max,\r\n                        value: actorData.data.attributes.edge.max,\r\n                        uses: actorData.data.attributes.edge.value,\r\n                    },\r\n                },\r\n            },\r\n        };\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: SR5ActorType): Promise<boolean> {\r\n        return actorData.data.attributes.edge?.uses === undefined;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n}\r\n","import { VersionMigration } from '../VersionMigration';\r\n\r\n/**\r\n * Add default value of willpower to the full_defense_attribute field\r\n */\r\nexport class Version0_6_5 extends VersionMigration {\r\n    get SourceVersion(): string {\r\n        return '0.6.4';\r\n    }\r\n    get TargetVersion(): string {\r\n        return Version0_6_5.TargetVersion;\r\n    }\r\n    static get TargetVersion(): string {\r\n        return '0.6.5';\r\n    }\r\n\r\n    protected async MigrateActorData(actorData: ActorData): Promise<any> {\r\n        let updateData: any = {};\r\n        if (updateData.data === undefined) updateData.data = {};\r\n        updateData.data.full_defense_attribute = 'willpower';\r\n        return updateData;\r\n    }\r\n\r\n    protected async ShouldMigrateActorData(actorData: any): Promise<boolean> {\r\n        return actorData.data.full_defense_attribute === undefined;\r\n    }\r\n\r\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\r\n        // @ts-ignore\r\n        return scene.data.tokens?.length > 0;\r\n    }\r\n}\r\n","import ModList = Shadowrun.ModList;\r\nimport ModListEntry = Shadowrun.ModListEntry;\r\n\r\nexport class PartsList<TType> {\r\n    get list(): ModList<TType> {\r\n        return this._list.slice();\r\n    }\r\n\r\n    get length(): number {\r\n        return this._list.length;\r\n    }\r\n\r\n    get total(): number {\r\n        let total = 0;\r\n        for (const part of this._list) {\r\n            if (typeof part.value === 'number') {\r\n                total += part.value;\r\n            }\r\n        }\r\n        return total;\r\n    }\r\n\r\n    getPartValue(name: string): TType | undefined {\r\n        return this._list.find((part) => part.name === name)?.value;\r\n    }\r\n\r\n    clear(): void {\r\n        this._list.length = 0;\r\n    }\r\n\r\n    private _list: ModList<TType>;\r\n\r\n    constructor(parts?: ModList<TType>) {\r\n        let actualParts = [] as ModList<TType>;\r\n        if (parts) {\r\n            if (Array.isArray(parts)) {\r\n                actualParts = parts;\r\n            } else if (typeof parts === 'object') {\r\n                for (const [name, value] of Object.entries(parts)) {\r\n                    if (value !== null && value !== undefined) {\r\n                        // if it's a number, we are dealing with an array as an object\r\n                        if (!isNaN(Number(name)) && typeof value === 'object') {\r\n                            actualParts.push({\r\n                                name: (value as ModListEntry<TType>).name,\r\n                                value: (value as ModListEntry<TType>).value,\r\n                            });\r\n                        } else {\r\n                            actualParts.push({\r\n                                name,\r\n                                value,\r\n                            } as ModListEntry<TType>);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        this._list = actualParts;\r\n    }\r\n\r\n    addPart(name: string, value: TType): void {\r\n        this._list.push({\r\n            name,\r\n            value,\r\n        });\r\n    }\r\n\r\n    addUniquePart(name: string, value?: TType, overwrite = true): void {\r\n        const index = this._list.findIndex((part) => part.name === name);\r\n        if (index > -1) {\r\n            // if we exist and should've overwrite, return\r\n            if (!overwrite) return;\r\n\r\n            this._list.splice(index, 1);\r\n            // if we are passed undefined, remove the value\r\n            if (value === undefined || value === null) return;\r\n            // recursively go through until we no longer have a part of this name\r\n            this.addUniquePart(name, value);\r\n        } else if (value) {\r\n            this.addPart(name, value);\r\n        }\r\n    }\r\n\r\n    removePart(name: string): boolean {\r\n        const index = this._list.findIndex((part) => part.name === name);\r\n        if (index > -1) {\r\n            this._list.splice(index, 1);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getMessageOutput() {\r\n        return this.list;\r\n        // const mods = {};\r\n        // for (const part of this._list) {\r\n        //     if (mods[part.name] !== undefined) {\r\n        //     } else {\r\n        //         mods[part.name] = part.value;\r\n        //     }\r\n        // }\r\n        // return mods;\r\n    }\r\n\r\n    static AddUniquePart<TType>(list: ModList<TType>, name: string, value: TType, overwrite = true): ModList<TType> {\r\n        const parts = new PartsList(list);\r\n        parts.addUniquePart(name, value, overwrite);\r\n        return parts._list;\r\n    }\r\n\r\n    static Total(list: ModList<number>) {\r\n        const parts = new PartsList(list);\r\n        return parts.total;\r\n    }\r\n}\r\n","import ModList = Shadowrun.ModList;\r\nimport RollEvent = Shadowrun.RollEvent;\r\nimport BaseValuePair = Shadowrun.BaseValuePair;\r\nimport LabelField = Shadowrun.LabelField;\r\nimport AttackData = Shadowrun.AttackData;\r\nimport DamageData = Shadowrun.DamageData;\r\nimport { Helpers } from '../helpers';\r\nimport { SR5Actor } from '../actor/SR5Actor';\r\nimport { SR5Item } from '../item/SR5Item';\r\nimport { createChatData, TemplateData } from '../chat';\r\nimport { SYSTEM_NAME } from '../constants';\r\nimport { PartsList } from '../parts/PartsList';\r\n\r\nexport interface BasicRollProps {\r\n    name?: string;\r\n    img?: string;\r\n    parts?: ModList<number>;\r\n    limit?: BaseValuePair<number> & LabelField;\r\n    explodeSixes?: boolean;\r\n    title?: string;\r\n    actor?: SR5Actor;\r\n    item?: SR5Item;\r\n    attack?: AttackData;\r\n    incomingAttack?: AttackData;\r\n    incomingDrain?: LabelField & {\r\n        value: number;\r\n    };\r\n    soak?: DamageData;\r\n    tests?: {\r\n        label: string;\r\n        type: string;\r\n    }[];\r\n    description?: object;\r\n    previewTemplate?: boolean;\r\n    hideRollMessage?: boolean;\r\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\r\n}\r\n\r\nexport interface RollDialogOptions {\r\n    environmental?: number | boolean;\r\n    prompt?: boolean;\r\n}\r\n\r\nexport interface AdvancedRollProps extends BasicRollProps {\r\n    event?: RollEvent;\r\n    extended?: boolean;\r\n    wounds?: boolean;\r\n    after?: (roll: Roll | undefined) => void;\r\n    dialogOptions?: RollDialogOptions;\r\n}\r\n\r\nexport class ShadowrunRoll extends Roll {\r\n    templateData: TemplateData | undefined;\r\n    // add class Roll to the json so dice-so-nice works\r\n    toJSON(): any {\r\n        const data = super.toJSON();\r\n        data.class = 'Roll';\r\n        return data;\r\n    }\r\n}\r\n\r\nexport class ShadowrunRoller {\r\n    static itemRoll(event, item: SR5Item, options?: Partial<AdvancedRollProps>): Promise<ShadowrunRoll | undefined> {\r\n        const parts = item.getRollPartsList();\r\n        let limit = item.getLimit();\r\n        let title = item.getRollName();\r\n\r\n        const rollData: AdvancedRollProps = {\r\n            ...options,\r\n            event: event,\r\n            dialogOptions: {\r\n                environmental: true,\r\n            },\r\n            parts,\r\n            actor: item.actor,\r\n            item,\r\n            limit,\r\n            title,\r\n            name: item.name,\r\n            img: item.img,\r\n            previewTemplate: item.hasTemplate,\r\n        };\r\n        rollData['attack'] = item.getAttackData(0);\r\n        rollData['blast'] = item.getBlastData();\r\n\r\n        if (item.hasOpposedRoll) {\r\n            rollData['tests'] = [\r\n                {\r\n                    label: item.getOpposedTestName(),\r\n                    type: 'opposed',\r\n                },\r\n            ];\r\n        }\r\n        if (item.isMeleeWeapon()) {\r\n            rollData['reach'] = item.getReach();\r\n        }\r\n        if (item.isRangedWeapon()) {\r\n            rollData['fireMode'] = item.getLastFireMode()?.label;\r\n            if (rollData.dialogOptions) {\r\n                rollData.dialogOptions.environmental = item.getLastFireRangeMod().value;\r\n            }\r\n        }\r\n        rollData.description = item.getChatData();\r\n\r\n        return ShadowrunRoller.advancedRoll(rollData);\r\n    }\r\n\r\n    static shadowrunFormula({\r\n        parts: partsProps,\r\n        limit,\r\n        explode,\r\n    }: {\r\n        parts: ModList<number>;\r\n        limit?: BaseValuePair<number> & LabelField;\r\n        explode?: boolean;\r\n    }): string {\r\n        const parts = new PartsList(partsProps);\r\n        const count = parts.total;\r\n        if (count <= 0) {\r\n            // @ts-ignore\r\n            ui.notifications.error(game.i18n.localize('SR5.RollOneDie'));\r\n            return '0d6cs>=5';\r\n        }\r\n        let formula = `${count}d6`;\r\n        if (explode) {\r\n            formula += 'x6';\r\n        }\r\n        if (limit?.value) {\r\n            formula += `kh${limit.value}`;\r\n        }\r\n        formula += 'cs>=5';\r\n        return formula;\r\n    }\r\n\r\n    static async basicRoll({\r\n        parts: partsProps = [],\r\n        limit,\r\n        explodeSixes,\r\n        title,\r\n        actor,\r\n        img = actor?.img,\r\n        name = actor?.name,\r\n        hideRollMessage,\r\n        rollMode,\r\n        ...props\r\n    }: BasicRollProps): Promise<ShadowrunRoll | undefined> {\r\n        let roll;\r\n        const parts = new PartsList(partsProps);\r\n        if (parts.length) {\r\n            const formula = this.shadowrunFormula({ parts: parts.list, limit, explode: explodeSixes });\r\n            if (!formula) return;\r\n            roll = new ShadowrunRoll(formula);\r\n            roll.roll();\r\n\r\n            if (game.settings.get(SYSTEM_NAME, 'displayDefaultRollCard')) {\r\n                await roll.toMessage({\r\n                    speaker: ChatMessage.getSpeaker({ actor: actor }),\r\n                    flavor: title,\r\n                    rollMode: rollMode,\r\n                });\r\n            }\r\n        }\r\n\r\n        // start of custom message\r\n        const dice = roll?.parts[0].rolls;\r\n        const token = actor?.token;\r\n\r\n        let glitch = false;\r\n        if (roll !== undefined) {\r\n            let oneCount = 0;\r\n            roll.dice.forEach((die) => {\r\n                die.rolls.forEach((result) => {\r\n                    if (result.roll === 1) {\r\n                        oneCount += 1;\r\n                    }\r\n                });\r\n            });\r\n            glitch = oneCount > Math.floor(parts.total / 2);\r\n        }\r\n\r\n        const templateData = {\r\n            actor: actor,\r\n            header: {\r\n                name: name || '',\r\n                img: img || '',\r\n            },\r\n            tokenId: token ? `${token.scene._id}.${token.id}` : undefined,\r\n            rollMode,\r\n            dice,\r\n            limit,\r\n            testName: title,\r\n            dicePool: parts.total,\r\n            parts: parts.list,\r\n            hits: roll?.total,\r\n            glitch,\r\n            ...props,\r\n        };\r\n\r\n        if (roll) {\r\n            roll.templateData = templateData;\r\n        }\r\n\r\n        if (!hideRollMessage) {\r\n            const chatData = await createChatData(templateData, roll);\r\n            ChatMessage.create(chatData, { displaySheet: false }).then((message) => {\r\n                console.log(message);\r\n            });\r\n        }\r\n        return roll;\r\n    }\r\n\r\n    /**\r\n     * Prompt a roll for the user\r\n     */\r\n    static promptRoll(): Promise<ShadowrunRoll | undefined> {\r\n        const lastRoll = game.user.getFlag(SYSTEM_NAME, 'lastRollPromptValue') || 0;\r\n        const parts = [{ name: 'SR5.LastRoll', value: lastRoll }];\r\n        return ShadowrunRoller.advancedRoll({ parts, title: 'Roll', dialogOptions: { prompt: true } });\r\n    }\r\n\r\n    /**\r\n     * Start an advanced roll\r\n     * - Prompts the user for modifiers\r\n     * @param props\r\n     */\r\n    static advancedRoll(props: AdvancedRollProps): Promise<ShadowrunRoll | undefined> {\r\n        // destructure what we need to use from props\r\n        // any value pulled out needs to be updated back in props if changed\r\n        const { title, actor, parts: partsProps = [], limit, extended, wounds = true, after, dialogOptions } = props;\r\n        const parts = new PartsList(partsProps);\r\n\r\n        // remove limits if game settings is set\r\n        if (!game.settings.get(SYSTEM_NAME, 'applyLimits')) {\r\n            delete props.limit;\r\n        }\r\n\r\n        // TODO create \"fast roll\" option\r\n\r\n        const rollMode = game.settings.get('core', 'rollMode');\r\n\r\n        let dialogData = {\r\n            options: dialogOptions,\r\n            extended,\r\n            dice_pool: parts.total,\r\n            parts: parts.getMessageOutput(),\r\n            limit: limit?.value,\r\n            wounds,\r\n            woundValue: actor?.getWoundModifier(),\r\n            rollMode,\r\n            rollModes: CONFIG.Dice.rollModes,\r\n        };\r\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-dialog.html';\r\n        let edge = false;\r\n        let cancel = true;\r\n\r\n        const buttons = {\r\n            roll: {\r\n                label: game.i18n.localize('SR5.Roll'),\r\n                icon: '<i class=\"fas fa-dice-six\"></i>',\r\n                callback: () => (cancel = false),\r\n            },\r\n        };\r\n        if (actor) {\r\n            buttons['edge'] = {\r\n                label: `${game.i18n.localize('SR5.PushTheLimit')} (+${actor.getEdge().value})`,\r\n                icon: '<i class=\"fas fa-bomb\"></i>',\r\n                callback: () => {\r\n                    edge = true;\r\n                    cancel = false;\r\n                },\r\n            };\r\n        }\r\n\r\n        return new Promise((resolve) => {\r\n            renderTemplate(template, dialogData).then((dlg) => {\r\n                new Dialog({\r\n                    title: title,\r\n                    content: dlg,\r\n                    buttons,\r\n                    default: 'roll',\r\n\r\n                    close: async (html) => {\r\n                        if (cancel) return;\r\n                        // get the actual dice_pool from the difference of initial parts and value in the dialog\r\n\r\n                        const dicePoolValue = Helpers.parseInputToNumber($(html).find('[name=\"dice_pool\"]').val());\r\n\r\n                        if (dialogOptions?.prompt) {\r\n                            parts.clear();\r\n                            await game.user.setFlag(SYSTEM_NAME, 'lastRollPromptValue', dicePoolValue);\r\n                            parts.addUniquePart('SR5.Base', dicePoolValue);\r\n                        }\r\n\r\n                        const limitValue = Helpers.parseInputToNumber($(html).find('[name=\"limit\"]').val());\r\n\r\n                        if (limit && limit.value !== limitValue) {\r\n                            limit.value = limitValue;\r\n                            limit.base = limitValue;\r\n                            limit.label = 'SR5.Override';\r\n                        }\r\n\r\n                        const woundValue = Helpers.parseInputToNumber($(html).find('[name=\"wounds\"]').val());\r\n                        const situationMod = Helpers.parseInputToNumber($(html).find('[name=\"dp_mod\"]').val());\r\n                        const environmentMod = Helpers.parseInputToNumber($(html).find('[name=\"options.environmental\"]').val());\r\n\r\n                        if (wounds && woundValue !== 0) {\r\n                            parts.addUniquePart('SR5.Wounds', woundValue);\r\n                            props.wounds = true;\r\n                        }\r\n                        if (situationMod) {\r\n                            parts.addUniquePart('SR5.SituationalModifier', situationMod);\r\n                        }\r\n                        if (environmentMod) {\r\n                            parts.addUniquePart('SR5.EnvironmentModifier', environmentMod);\r\n                            if (!props.dialogOptions) props.dialogOptions = {};\r\n                            props.dialogOptions.environmental = true;\r\n                        }\r\n\r\n                        const extendedString = Helpers.parseInputToString($(html).find('[name=\"extended\"]').val());\r\n                        const extended = extendedString === 'true';\r\n\r\n                        if (edge && actor) {\r\n                            props.explodeSixes = true;\r\n                            parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\r\n                            delete props.limit;\r\n                            await actor.update({\r\n                                'data.attributes.edge.uses': actor.data.data.attributes.edge.uses - 1,\r\n                            });\r\n                        }\r\n\r\n                        props.rollMode = Helpers.parseInputToString($(html).find('[name=rollMode]').val());\r\n\r\n                        props.parts = parts.list;\r\n                        const r = this.basicRoll({\r\n                            ...props,\r\n                        });\r\n\r\n                        if (extended && r) {\r\n                            const currentExtended = parts.getPartValue('SR5.Extended') ?? 0;\r\n                            parts.addUniquePart('SR5.Extended', currentExtended - 1);\r\n                            props.parts = parts.list;\r\n                            // add a bit of a delay to roll again\r\n                            setTimeout(() => this.advancedRoll(props), 400);\r\n                        }\r\n                        resolve(r);\r\n                        if (after && r) r.then((roll) => after(roll));\r\n                    },\r\n                }).render(true);\r\n            });\r\n        });\r\n    }\r\n}\r\n","// game settings for shadowrun 5e\r\n\r\nimport { VersionMigration } from './migrator/VersionMigration';\r\nimport { FLAGS, SYSTEM_NAME } from './constants';\r\n\r\nexport const registerSystemSettings = () => {\r\n\r\n    /**\r\n     * Register diagonal movement rule setting\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'diagonalMovement', {\r\n        name: 'SETTINGS.DiagonalMovementName',\r\n        hint: 'SETTINGS.DiagonalMovementDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: String,\r\n        default: '1-2-1',\r\n        choices: {\r\n            '1-1-1': 'SETTINGS.IgnoreDiagonal',\r\n            '1-2-1': 'SETTINGS.EstimateDiagonal',\r\n        },\r\n        onChange: (rule) => (canvas.grid.diagonalRule = rule),\r\n    });\r\n\r\n    /**\r\n     * Default limit behavior\r\n     */\r\n    game.settings.register(SYSTEM_NAME, 'applyLimits', {\r\n        name: 'SETTINGS.ApplyLimitsName',\r\n        hint: 'SETTINGS.ApplyLimitsDescription',\r\n        scope: 'world',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, 'displayDefaultRollCard', {\r\n        name: 'SETTINGS.DisplayDefaultRollCardName',\r\n        hint: 'SETTINGS.DisplayDefaultRollCardDescription',\r\n        scope: 'user',\r\n        config: true,\r\n        type: Boolean,\r\n        default: false,\r\n    });\r\n\r\n    /**\r\n     * Track system version upon which a migration was last applied\r\n     */\r\n    game.settings.register(SYSTEM_NAME, VersionMigration.KEY_DATA_VERSION, {\r\n        name: 'System Data Version.',\r\n        scope: 'world',\r\n        config: false,\r\n        type: String,\r\n        default: '0',\r\n    });\r\n\r\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowGlitchAnimation, {\r\n        name: 'SETTINGS.ShowGlitchAnimationName',\r\n        hint: 'SETTINGS.ShowGlitchAnimationDescription',\r\n        scope: 'user',\r\n        config: true,\r\n        type: Boolean,\r\n        default: true,\r\n    })\r\n};\r\n","import { SR5Item } from './item/SR5Item';\r\n\r\nexport type ShadowrunTemplateData = {\r\n    t: string;\r\n    user: User | string;\r\n    distance: number;\r\n    x: number;\r\n    y: number;\r\n    fillColor: string;\r\n    direction: number;\r\n};\r\n\r\nexport default // @ts-ignore\r\nclass Template extends MeasuredTemplate {\r\n    data: ShadowrunTemplateData;\r\n    layer: PlaceablesLayer;\r\n    x: number;\r\n    y: number;\r\n    item?: SR5Item;\r\n    onComplete?: () => void;\r\n\r\n    static fromItem(item: SR5Item, onComplete?: () => void): Template | undefined {\r\n        const templateShape = 'circle';\r\n\r\n        const templateData = {\r\n            t: templateShape,\r\n            user: game.user._id,\r\n            direction: 0,\r\n            x: 0,\r\n            y: 0,\r\n            // @ts-ignore\r\n            fillColor: game.user.color,\r\n        };\r\n        const blast = item.getBlastData();\r\n        templateData['distance'] = blast?.radius;\r\n        templateData['dropoff'] = blast?.dropoff;\r\n\r\n        // @ts-ignore\r\n        const template = new this(templateData);\r\n        template.item = item;\r\n        template.onComplete = onComplete;\r\n        return template;\r\n    }\r\n\r\n    drawPreview() {\r\n        const initialLayer = canvas.activeLayer;\r\n        // @ts-ignore\r\n        this.draw();\r\n        // @ts-ignore\r\n        this.layer.activate();\r\n        // @ts-ignore\r\n        this.layer.preview.addChild(this);\r\n        this.activatePreviewListeners(initialLayer);\r\n    }\r\n\r\n    activatePreviewListeners(initialLayer: CanvasLayer) {\r\n        const handlers = {};\r\n        let moveTime = 0;\r\n\r\n        // Update placement (mouse-move)\r\n        handlers['mm'] = (event) => {\r\n            event.stopPropagation();\r\n            let now = Date.now(); // Apply a 20ms throttle\r\n            if (now - moveTime <= 20) return;\r\n            const center = event.data.getLocalPosition(this.layer);\r\n            const snapped = canvas.grid.getSnappedPosition(center.x, center.y, 2);\r\n            this.data.x = snapped.x;\r\n            this.data.y = snapped.y;\r\n            // @ts-ignore\r\n            this.refresh();\r\n            moveTime = now;\r\n        };\r\n\r\n        // Cancel the workflow (right-click)\r\n        handlers['rc'] = () => {\r\n            this.layer.preview.removeChildren();\r\n            canvas.stage.off('mousemove', handlers['mm']);\r\n            canvas.stage.off('mousedown', handlers['lc']);\r\n            canvas.app.view.oncontextmenu = null;\r\n            canvas.app.view.onwheel = null;\r\n            initialLayer.activate();\r\n\r\n            if (this.onComplete) this.onComplete();\r\n        };\r\n\r\n        // Confirm the workflow (left-click)\r\n        handlers['lc'] = (event) => {\r\n            handlers['rc'](event);\r\n\r\n            // Confirm final snapped position\r\n            const destination = canvas.grid.getSnappedPosition(this.x, this.y, 2);\r\n            this.data.x = destination.x;\r\n            this.data.y = destination.y;\r\n\r\n            // Create the template\r\n            canvas.scene.createEmbeddedEntity('MeasuredTemplate', this.data);\r\n        };\r\n\r\n        // Rotate the template by 3 degree increments (mouse-wheel)\r\n        handlers['mw'] = (event) => {\r\n            if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\r\n            event.stopPropagation();\r\n            let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\r\n            let snap = event.shiftKey ? delta : 5;\r\n            this.data.direction += snap * Math.sign(event.deltaY);\r\n            // @ts-ignore\r\n            this.refresh();\r\n        };\r\n\r\n        // Activate listeners\r\n        canvas.stage.on('mousemove', handlers['mm']);\r\n        canvas.stage.on('mousedown', handlers['lc']);\r\n        canvas.app.view.oncontextmenu = handlers['rc'];\r\n        canvas.app.view.onwheel = handlers['mw'];\r\n    }\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9hc3luY1RvR2VuZXJhdG9yLmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvY2xhc3NDYWxsQ2hlY2suanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jcmVhdGVDbGFzcy5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0LmpzIiwibm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZ2V0UHJvdG90eXBlT2YuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2ludGVyb3BSZXF1aXJlRGVmYXVsdC5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyIsIm5vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3N1cGVyUHJvcEJhc2UuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvcmVnZW5lcmF0b3IvaW5kZXguanMiLCJub2RlX21vZHVsZXMvcmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIiwic3JjL21vZHVsZS9hY3Rvci9TUjVBY3Rvci50cyIsInNyYy9tb2R1bGUvYWN0b3IvU1I1QWN0b3JTaGVldC50cyIsInNyYy9tb2R1bGUvYWN0b3IvcHJlcC9BY3RvclByZXBGYWN0b3J5LnRzIiwic3JjL21vZHVsZS9hY3Rvci9wcmVwL0Jhc2VBY3RvclByZXAudHMiLCJzcmMvbW9kdWxlL2FjdG9yL3ByZXAvQ2hhcmFjdGVyUHJlcC50cyIsInNyYy9tb2R1bGUvYWN0b3IvcHJlcC9TcGlyaXRQcmVwLnRzIiwic3JjL21vZHVsZS9hY3Rvci9wcmVwL2Z1bmN0aW9ucy9BdHRyaWJ1dGVzUHJlcC50cyIsInNyYy9tb2R1bGUvYWN0b3IvcHJlcC9mdW5jdGlvbnMvQ29uZGl0aW9uTW9uaXRvcnNQcmVwLnRzIiwic3JjL21vZHVsZS9hY3Rvci9wcmVwL2Z1bmN0aW9ucy9Jbml0aWF0aXZlUHJlcC50cyIsInNyYy9tb2R1bGUvYWN0b3IvcHJlcC9mdW5jdGlvbnMvSXRlbVByZXAudHMiLCJzcmMvbW9kdWxlL2FjdG9yL3ByZXAvZnVuY3Rpb25zL0xpbWl0c1ByZXAudHMiLCJzcmMvbW9kdWxlL2FjdG9yL3ByZXAvZnVuY3Rpb25zL01hdHJpeFByZXAudHMiLCJzcmMvbW9kdWxlL2FjdG9yL3ByZXAvZnVuY3Rpb25zL01vZGlmaWVyc1ByZXAudHMiLCJzcmMvbW9kdWxlL2FjdG9yL3ByZXAvZnVuY3Rpb25zL01vdmVtZW50UHJlcC50cyIsInNyYy9tb2R1bGUvYWN0b3IvcHJlcC9mdW5jdGlvbnMvU2tpbGxzUHJlcC50cyIsInNyYy9tb2R1bGUvYWN0b3IvcHJlcC9mdW5jdGlvbnMvV291bmRzUHJlcC50cyIsInNyYy9tb2R1bGUvYXBwcy9jaHVtbWVyLWltcG9ydC1mb3JtLmpzIiwic3JjL21vZHVsZS9hcHBzL2RpYWxvZ3MvU2hhZG93cnVuSXRlbURpYWxvZy50cyIsInNyYy9tb2R1bGUvYXBwcy9nbXRvb2xzL092ZXJ3YXRjaFNjb3JlVHJhY2tlci5qcyIsInNyYy9tb2R1bGUvYXBwcy9za2lsbHMvS25vd2xlZGdlU2tpbGxFZGl0Rm9ybS50cyIsInNyYy9tb2R1bGUvYXBwcy9za2lsbHMvTGFuZ3VhZ2VTa2lsbEVkaXRGb3JtLnRzIiwic3JjL21vZHVsZS9hcHBzL3NraWxscy9Ta2lsbEVkaXRGb3JtLnRzIiwic3JjL21vZHVsZS9jYW52YXMudHMiLCJzcmMvbW9kdWxlL2NoYXQudHMiLCJzcmMvbW9kdWxlL2NvbWJhdC50cyIsInNyYy9tb2R1bGUvY29uZmlnLnRzIiwic3JjL21vZHVsZS9jb25zdGFudHMudHMiLCJzcmMvbW9kdWxlL2RhdGFXcmFwcGVycy9EYXRhV3JhcHBlci50cyIsInNyYy9tb2R1bGUvaGFuZGxlYmFycy9CYXNpY0hlbHBlcnMudHMiLCJzcmMvbW9kdWxlL2hhbmRsZWJhcnMvSGFuZGxlYmFyTWFuYWdlci50cyIsInNyYy9tb2R1bGUvaGFuZGxlYmFycy9IYW5kbGViYXJUZW1wbGF0ZXMudHMiLCJzcmMvbW9kdWxlL2hhbmRsZWJhcnMvSXRlbUxpbmVIZWxwZXJzLnRzIiwic3JjL21vZHVsZS9oYW5kbGViYXJzL1JvbGxBbmRMYWJlbEhlbHBlcnMudHMiLCJzcmMvbW9kdWxlL2hhbmRsZWJhcnMvU2tpbGxMaW5lSGVscGVycy50cyIsInNyYy9tb2R1bGUvaGVscGVycy50cyIsInNyYy9tb2R1bGUvaXRlbS9DaGF0RGF0YS50cyIsInNyYy9tb2R1bGUvaXRlbS9TUjVJdGVtLnRzIiwic3JjL21vZHVsZS9pdGVtL1NSNUl0ZW1EYXRhV3JhcHBlci50cyIsInNyYy9tb2R1bGUvaXRlbS9TUjVJdGVtU2hlZXQudHMiLCJzcmMvbW9kdWxlL21haW4udHMiLCJzcmMvbW9kdWxlL21pZ3JhdG9yL01pZ3JhdG9yLnRzIiwic3JjL21vZHVsZS9taWdyYXRvci9WZXJzaW9uTWlncmF0aW9uLnRzIiwic3JjL21vZHVsZS9taWdyYXRvci92ZXJzaW9ucy9MZWdhY3lNaWdyYXRpb24udHMiLCJzcmMvbW9kdWxlL21pZ3JhdG9yL3ZlcnNpb25zL1ZlcnNpb24wXzZfMTAudHMiLCJzcmMvbW9kdWxlL21pZ3JhdG9yL3ZlcnNpb25zL1ZlcnNpb24wXzZfNS50cyIsInNyYy9tb2R1bGUvcGFydHMvUGFydHNMaXN0LnRzIiwic3JjL21vZHVsZS9yb2xscy9TaGFkb3dydW5Sb2xsZXIudHMiLCJzcmMvbW9kdWxlL3NldHRpbmdzLnRzIiwic3JjL21vZHVsZS90ZW1wbGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNSQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDTkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUN0QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNQQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ05BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1pBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ1RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNYQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2hCQTtBQUNBOztBQ0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFD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QUM7SUFDNUMsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDcEMsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDekMsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELFdBQVc7UUFDUCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEMsQ0FBQztJQUVELG1CQUFtQjtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFRCxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3hDLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMzQyxDQUFDO0lBRUQsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNsQyxDQUFDO0lBRUQsY0FBYztRQUNWLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDN0MsQ0FBQztJQUVELG1CQUFtQjtRQUNmLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO0lBQzlDLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3pDLENBQUM7SUFFRCxlQUFlO1FBQ1gsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzFDLENBQUM7SUFFRCx1QkFBdUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUF1QixFQUFFLENBQUM7SUFDbEQsQ0FBQztJQUVELFFBQVE7UUFDSixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDbkMsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDbEMsQ0FBQztJQUVELHFCQUFxQixDQUFDLGVBQXdCLElBQUk7UUFDOUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzlDLElBQUksWUFBWSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDNUIsRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMscUJBQXFCLEVBQUUsQ0FBQztTQUM1QztRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztJQUVELFFBQVE7O1FBQ0osSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdEIsbUJBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSywwQ0FBRSxLQUFLLG1DQUFJLENBQUMsQ0FBQztTQUMzQztRQUNELE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQztJQUVELGNBQWM7O1FBQ1YsT0FBTyxhQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUUsT0FBTywwQ0FBRSxJQUFJLE1BQUssU0FBUyxDQUFDO0lBQzlELENBQUM7Q0FDSjtBQXYvQkQsMEJBdS9CQzs7Ozs7QUM3Z0NELDZEQUEwRDtBQU0xRCxNQUFhLGtCQUFtQixTQUFRLHlCQUF3QjtJQUM1RCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUMxQixDQUFDO0lBRUQsY0FBYztRQUNWLCtDQUErQztRQUMvQyxPQUFPLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxDQUFDLENBQUMsQ0FBQyw2QkFBNkI7SUFDbEgsQ0FBQztJQUVELE9BQU87UUFDSCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLE9BQU8sQ0FBQztJQUN0QyxDQUFDO0lBRUQsWUFBWTs7UUFDUixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxRQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssMENBQUUsR0FBRyxDQUFBLENBQUM7SUFDekQsQ0FBQztJQUVELGlCQUFpQjs7UUFDYixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxhQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssMENBQUUsR0FBRyxtQ0FBSSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBRUQsUUFBUTtRQUNKLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBRUQsU0FBUzs7UUFDTCxPQUFPLElBQUksQ0FBQyxjQUFjLEVBQUUsSUFBSSxhQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUUsS0FBSyxDQUFDLE1BQU0sbUNBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25GLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLFFBQVEsQ0FBQztJQUNuRSxDQUFDO0lBRUQsUUFBUTtRQUNKLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUM7SUFDMUMsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssUUFBUSxDQUFDO0lBQ2xFLENBQUM7SUFFRCxjQUFjO1FBQ1YsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxLQUFLLE9BQU8sQ0FBQztJQUNsRSxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxjQUFjLENBQUM7SUFDN0MsQ0FBQztJQUVELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxDQUFDO0lBQzlFLENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLENBQUM7SUFDdkMsQ0FBQztJQUVELFVBQVU7O1FBQ04sT0FBTyxPQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsMENBQUUsUUFBUSxLQUFJLEtBQUssQ0FBQztJQUN4RCxDQUFDO0lBRUQsV0FBVztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsS0FBSyxXQUFXLENBQUM7SUFDdEUsQ0FBQztJQUVELEtBQUs7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ3pCLENBQUM7SUFFRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO0lBQzdDLENBQUM7SUFFRCxtQkFBbUI7O1FBQ2YsbUJBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSwwQ0FBRSxpQkFBaUIsbUNBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQUUsQ0FBQztJQUNoRixDQUFDO0lBRUQsU0FBUzs7UUFDTCxPQUFPLE9BQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSwwQ0FBRSxNQUFNLEtBQUksQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxhQUFhOztRQUNULHlCQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSwwQ0FBRSxLQUFLLDBDQUFFLEtBQUssbUNBQUksQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixxQkFBcUI7UUFDckIsTUFBTSxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssSUFBSSxFQUFFLENBQUM7UUFDckUsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxDQUFDLEVBQUUsV0FBVyxFQUFFLFdBQVcsYUFBWCxXQUFXLGNBQVgsV0FBVyxHQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxhQUFKLElBQUksY0FBSixJQUFJLEdBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLGFBQUosSUFBSSxjQUFKLElBQUksR0FBSSxDQUFDLEVBQUUsQ0FBQztJQUNoRyxDQUFDO0lBRUQsT0FBTztRQUNILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDMUIsQ0FBQztJQUVELGNBQWM7O1FBQ1YsbUJBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLDBDQUFFLE9BQU8sbUNBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDL0IsQ0FBQztJQUVELE9BQU87UUFDSCxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRXZDLDRDQUE0QztRQUM1QyxNQUFNLE1BQU0sR0FBRztZQUNYLE1BQU0sRUFBRTtnQkFDSixLQUFLLEVBQUUsQ0FBQztnQkFDUixVQUFVLEVBQUUsRUFBRTthQUNqQjtZQUNELE1BQU0sRUFBRTtnQkFDSixLQUFLLEVBQUUsQ0FBQztnQkFDUixVQUFVLEVBQUUsRUFBRTthQUNqQjtZQUNELGVBQWUsRUFBRTtnQkFDYixLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDdkIsVUFBVSxFQUFFLEVBQUU7YUFDakI7WUFDRCxRQUFRLEVBQUU7Z0JBQ04sS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZCLFVBQVUsRUFBRSxFQUFFO2FBQ2pCO1NBQ0osQ0FBQztRQUVGLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ3BCOzs7Ozs7O2VBT0c7WUFDSCxNQUFNLElBQUksR0FBa0UsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2hHLElBQUksSUFBSSxFQUFFO2dCQUNOLEtBQUssSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFO29CQUN6QyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDO29CQUNsQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7aUJBQ3BDO2FBQ0o7U0FDSjtRQUVELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFFRCxXQUFXOztRQUNQLE9BQU8sYUFBQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksMENBQUUsVUFBVSwwQ0FBRSxRQUFRLEtBQUksQ0FBQyxDQUFDO0lBQ3JELENBQUM7SUFFRCxvQkFBb0I7O1FBQ2hCLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSwwQ0FBRSxHQUFHLENBQUM7SUFDdEMsQ0FBQztJQUVELGlCQUFpQjs7UUFDYixtQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLEtBQUssMENBQUUsU0FBUyxDQUFDO0lBQ25ELENBQUM7SUFFRCxjQUFjOztRQUNWLGFBQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSwwQ0FBRSxLQUFLLENBQUM7SUFDeEMsQ0FBQztJQUVELGtCQUFrQjs7UUFDZCxhQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUUsU0FBUyxDQUFDO0lBQzVDLENBQUM7SUFFRCxtQkFBbUI7O1FBQ2YsYUFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLFVBQVUsQ0FBQztJQUM3QyxDQUFDO0lBRUQsY0FBYzs7UUFDVixtQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLEtBQUssMENBQUUsS0FBSyxDQUFDO0lBQy9DLENBQUM7SUFFRCxlQUFlOztRQUNYLE9BQU8sT0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLGFBQWEsS0FBSSxFQUFFLENBQUM7SUFDdEQsQ0FBQztJQUVELHVCQUF1Qjs7UUFDbkIsVUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLElBQUk7WUFBRSxPQUFPLG9CQUFvQixDQUFDO1FBQzdELE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxRQUFRO1FBQ0osT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDO0lBQ3BDLENBQUM7SUFFRCxxQkFBcUI7O1FBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQUUsT0FBTyxDQUFDLENBQUM7UUFDckMsTUFBTSxJQUFJLHFCQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSwwQ0FBRSxLQUFLLDBDQUFFLEVBQUUsQ0FBQyxLQUFLLG1DQUFJLEdBQUcsQ0FBQztRQUNwRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QixDQUFDO0lBRUQsUUFBUTs7UUFDSixJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUN0QixtQkFBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLDBDQUFFLEtBQUssbUNBQUksQ0FBQyxDQUFDO1NBQzNDO1FBQ0QsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDO0lBRUQsY0FBYzs7UUFDVixPQUFPLGFBQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSwwQ0FBRSxPQUFPLDBDQUFFLElBQUksTUFBSyxTQUFTLENBQUM7SUFDOUQsQ0FBQztDQUNKO0FBek5ELGdEQXlOQzs7Ozs7Ozs7Ozs7Ozs7QUMvTkQsd0NBQXFDO0FBR3JDOztHQUVHO0FBQ0gsTUFBYSxZQUFhLFNBQVEsU0FBUztJQUl2QyxZQUFZLEdBQUcsSUFBSTtRQUNmLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQztJQUVELGdCQUFnQjtRQUNaLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLEtBQUssY0FBYztRQUNyQixPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsY0FBYyxFQUFFO1lBQ3JDLE9BQU8sRUFBRSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxDQUFDO1lBQ2pDLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUc7WUFDWCxJQUFJLEVBQUUsQ0FBQyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsZUFBZSxFQUFFLFlBQVksRUFBRSxDQUFDO1NBQ2xFLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixNQUFNLElBQUksR0FBRywwQ0FBMEMsQ0FBQztRQUN4RCxPQUFPLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksT0FBTyxDQUFDO0lBQ2hELENBQUM7SUFFRCxrREFBa0Q7SUFFbEQ7OztPQUdHO0lBQ0gsT0FBTztRQUNILE1BQU0sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUM3QixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRTNCLElBQUksUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUNqQixJQUFJO2dCQUNBLE1BQU0sRUFBRSxNQUFNLEVBQUUsR0FBRyxRQUFRLENBQUM7Z0JBQzVCLElBQUksTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO29CQUFFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQztnQkFDeEMsSUFBSSxNQUFNLENBQUMsS0FBSyxLQUFLLENBQUM7b0JBQUUsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDO2dCQUM1QyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ2YsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDO3dCQUFFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7b0JBQ3RELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUM7d0JBQUUsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUM7aUJBQy9EO2dCQUNELElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtvQkFDZCxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxLQUFLLENBQUM7d0JBQUUsT0FBTyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztpQkFDdkQ7YUFDSjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNSLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEI7U0FDSjtRQUVELElBQUksUUFBUSxDQUFDLFVBQVUsRUFBRTtZQUNyQixJQUFJO2dCQUNBLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxVQUFVLENBQUM7Z0JBQ2pDLElBQUksSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDO29CQUFFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztnQkFDMUMsSUFBSSxJQUFJLENBQUMsUUFBUSxLQUFLLENBQUM7b0JBQUUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUM5QyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQztvQkFBRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7YUFDekM7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDUixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2xCO1NBQ0o7UUFFRCxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztRQUM1QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUN0QyxNQUFNLENBQUMsVUFBVSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUNwRCxDQUFDLEtBQTZELEVBQUUsSUFBYSxFQUFFLEVBQUU7WUFDN0UsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU07Z0JBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkQsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLGNBQWMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUTtnQkFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMvRixJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssY0FBYyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxPQUFPO2dCQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlGLE9BQU8sS0FBSyxDQUFDO1FBQ2pCLENBQUMsRUFDRCxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQ2YsQ0FBQztRQUNGLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxVQUFVLENBQUM7UUFDaEMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLFVBQVUsQ0FBQztRQUNoQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsU0FBUyxDQUFDO1FBQzlCLHVFQUF1RTtRQUN2RSx3REFBd0Q7UUFDeEQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRXJDLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxrREFBa0Q7SUFFbEQ7OztPQUdHO0lBQ0gsaUJBQWlCLENBQUMsSUFBSTtRQUNsQixLQUFLLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDOUIsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7WUFDN0IsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUQsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckQ7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRS9ELElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFM0QsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRW5FLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFM0UsSUFBSSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRTVFLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDbkMsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLE1BQU0sSUFBSSxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQzFELE1BQU0sR0FBRyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUM7WUFDaEMsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzFCLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNmLElBQUksR0FBRyxFQUFFO2dCQUNMLElBQUksS0FBSyxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUM7b0JBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7O29CQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7YUFDdkU7UUFDTCxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVELFdBQVcsQ0FBQyxLQUFLO1FBQ2IsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFSyxPQUFPLENBQUMsS0FBSzs7O1lBQ2YsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUN4QixJQUFJLElBQUksQ0FBQztZQUNULElBQUk7Z0JBQ0EsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztnQkFDNUQsSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTtvQkFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQ0FBbUMsQ0FBQyxDQUFDO2lCQUNwRDthQUNKO1lBQUMsT0FBTyxHQUFHLEVBQUU7Z0JBQ1YsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO2FBQzNDO1lBQ0QsSUFBSSxJQUFJLENBQUM7WUFDVCxvQ0FBb0M7WUFDcEMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO2dCQUNYLFlBQVk7Z0JBQ1osSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxZQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSywwQ0FBRSxHQUFHLENBQUEsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtvQkFDL0YsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBd0MsQ0FBQyxDQUFDO29CQUN0RCxhQUFhO29CQUNiLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7aUJBQ2hFO2dCQUNELElBQUksR0FBRyxJQUFJLENBQUM7YUFDZjtpQkFBTSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2xCLGtDQUFrQztnQkFDbEMsWUFBWTtnQkFDWixJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7YUFDaEU7aUJBQU07Z0JBQ0gsK0JBQStCO2dCQUMvQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQ2xDO1lBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOztLQUN4QztJQUVELHNCQUFzQixDQUFDLFVBQVUsRUFBRSxNQUFNO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQUs7UUFDVixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsT0FBTyxLQUFLLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO0lBQ3BFLENBQUM7SUFFSyxnQkFBZ0IsQ0FBQyxLQUFLOztZQUN4QixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3BDLENBQUM7S0FBQTtJQUVLLFdBQVcsQ0FBQyxLQUFLOztZQUNuQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDMUQsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDM0I7UUFDTCxDQUFDO0tBQUE7SUFFSyxhQUFhLENBQUMsS0FBSzs7WUFDckIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDOUIsQ0FBQztLQUFBO0lBRUssZ0JBQWdCLENBQUMsS0FBSzs7WUFDeEIsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3ZCLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQztZQUNoRCxJQUFJLEtBQUssSUFBSSxDQUFDO2dCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25ELENBQUM7S0FBQTtJQUVLLGtCQUFrQixDQUFDLEtBQUs7O1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNwRCxDQUFDO0tBQUE7SUFFSyxpQkFBaUIsQ0FBQyxLQUFLOztZQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDbkQsQ0FBQztLQUFBO0lBRUssZUFBZSxDQUFDLEtBQUs7O1lBQ3ZCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztZQUN2QixNQUFNLElBQUksR0FBRyxjQUFjLENBQUM7WUFDNUIsTUFBTSxRQUFRLEdBQUc7Z0JBQ2IsSUFBSSxFQUFFLE9BQU8saUJBQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ2xDLElBQUksRUFBRSxJQUFJO2dCQUNWLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQzthQUN2RCxDQUFDO1lBQ0YsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1lBQzlCLGFBQWE7WUFDYixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLENBQUM7S0FBQTtJQUVLLGFBQWEsQ0FBQyxLQUFLOztZQUNyQixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7WUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMzQixDQUFDO0tBQUE7SUFFSyxhQUFhLENBQUMsS0FBSzs7WUFDckIsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUM7S0FBQTtJQUVLLFlBQVksQ0FBQyxLQUFLOztZQUNwQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDOUMsQ0FBQztLQUFBO0lBRUQsYUFBYSxDQUFDLEtBQUs7UUFDZixLQUFLLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDdkIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLE1BQU0sUUFBUSxHQUFHO1lBQ2IsSUFBSSxFQUFFLE9BQU8saUJBQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDbEMsSUFBSSxFQUFFLElBQUk7WUFDVixJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7U0FDL0MsQ0FBQztRQUNGLGFBQWE7UUFDYixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7UUFDWCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLDBCQUEwQixDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNLLHFCQUFxQjtRQUN6QixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssV0FBVyxDQUFDLGFBQWEsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssU0FBUyxFQUFFO1lBQzVGLE9BQU8sQ0FBQyxJQUFJLENBQUMsd0JBQXdCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSwwR0FBMEcsQ0FBQyxDQUFDO1lBQ2pLLG9IQUFvSDtZQUNwSCxJQUFJLENBQUMsTUFBTSxHQUFHLFdBQVcsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDO1NBQ2xEO0lBQ0wsQ0FBQztJQUVEOztPQUVHO0lBQ0csT0FBTyxDQUFDLEtBQUssR0FBRyxLQUFLLEVBQUUsT0FBTyxHQUFHLEVBQUU7Ozs7O1lBQ3JDLDZHQUE2RztZQUM3RyxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUU3QixJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztZQUM1QixNQUFNLE9BQU0sT0FBTyxZQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsdUJBQXVCLEVBQUUsQ0FBQztRQUNuQyxDQUFDO0tBQUE7SUFFRDs7T0FFRztJQUNILHVCQUF1QjtRQUNuQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDMUMsSUFBSSxVQUFVLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFO1lBQzNDLFVBQVUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUM5QztJQUNMLENBQUM7SUFFRDs7T0FFRztJQUNILG9CQUFvQjtRQUNoQixNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDMUMsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ25CLElBQUksQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7Q0FDSjtBQW5URCxvQ0FtVEM7Ozs7Ozs7Ozs7Ozs7QUN6VEQsc0RBQW1EO0FBQ25ELHlEQUFzRDtBQUN0RCwrQ0FBNEM7QUFDNUMsNENBQXlDO0FBQ3pDLHFDQUErQjtBQUMvQix1Q0FBb0M7QUFDcEMseUNBQW9EO0FBQ3BELHFDQUFrRTtBQUNsRSxxQ0FBMkM7QUFDM0MsK0JBQStCO0FBQy9CLGdGQUE2RTtBQUM3RSw2REFBMEQ7QUFDMUQsa0RBQStDO0FBQy9DLDJDQUEwQztBQUMxQyxvRUFBaUU7QUFFakUsa0RBQWtEO0FBQ2xELGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFFbEQsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7SUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUM7SUFFM0Msd0RBQXdEO0lBQ3hELElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRztRQUNsQixRQUFRLEVBQVIsbUJBQVE7UUFDUixlQUFlLEVBQWYsaUNBQWU7UUFDZixPQUFPLEVBQVAsaUJBQU87UUFDUCxhQUFhO0tBQ2hCLENBQUM7SUFFRixNQUFNLENBQUMsR0FBRyxHQUFHLFlBQUcsQ0FBQztJQUNqQixNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxtQkFBUSxDQUFDO0lBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLGlCQUFPLENBQUM7SUFFbEMsaUNBQXNCLEVBQUUsQ0FBQztJQUV6QixxQ0FBcUM7SUFDckMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLENBQUM7SUFDM0MsTUFBTSxDQUFDLGFBQWEsQ0FBQyx1QkFBVyxFQUFFLDZCQUFhLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUN4RSxLQUFLLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUN6QyxLQUFLLENBQUMsYUFBYSxDQUFDLHVCQUFXLEVBQUUsMkJBQVksRUFBRSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXRFLENBQUMscUJBQXFCLEVBQUUsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUN4RCxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLGlCQUFPLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDdkUsQ0FBQyxDQUFDLENBQUM7SUFFSCxtQ0FBZ0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUVqQyw2QkFBNkI7QUFDakMsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRTtJQUNuQiwwQ0FBMEM7SUFDMUMsYUFBYTtJQUNiLFVBQVUsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFHLHdCQUFlLENBQUM7QUFDM0QsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRTtJQUNkLDBEQUEwRDtJQUMxRCxhQUFhO0lBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsb0JBQW9CLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRTtRQUMxQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDdkMsOEJBQXFCLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUNuRjtJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNoQixtQkFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDO0tBQzdCO0lBQ0QsTUFBTSxnQkFBZ0IsR0FBRywrQ0FBK0MsQ0FBQztJQUN6RSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxHQUFHLEVBQUUsQ0FBQyxpQ0FBZSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUM7QUFDbEYsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLHdCQUFlLENBQUMsQ0FBQztBQUM3QyxLQUFLLENBQUMsRUFBRSxDQUFDLG1CQUFtQixFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFO0lBQ3hDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDckMsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0FBRXRFLGtEQUFrRDtBQUNsRCxrREFBa0Q7QUFDbEQsa0RBQWtEO0FBRWxELEtBQUssQ0FBQyxFQUFFLENBQUMsWUFBWSxFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsRUFBRTtJQUN2QyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssTUFBTTtRQUFFLE9BQU87SUFFakMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDakMsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFDLENBQUM7QUFFSCxLQUFLLENBQUMsRUFBRSxDQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxFQUFFO0lBQy9DLElBQUksQ0FBQyxJQUFJLENBQUMsdUNBQXVDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUU7UUFDckUsS0FBSyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3ZCLElBQUksNkNBQXFCLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssQ0FBQyxFQUFFLENBQUMsd0JBQXdCLEVBQUUsQ0FBQyxRQUFRLEVBQUUsRUFBRTtJQUM1QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFO1FBQ2hCLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLENBQUM7UUFDL0QsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDckIsSUFBSSxFQUFFLHlCQUF5QjtZQUMvQixLQUFLLEVBQUUsb0NBQW9DO1lBQzNDLElBQUksRUFBRSxzQkFBc0I7U0FDL0IsQ0FBQyxDQUFDO0tBQ047QUFDTCxDQUFDLENBQUMsQ0FBQztBQUVIOzs7Ozs7R0FNRztBQUNILFNBQWUsZUFBZSxDQUFDLElBQUksRUFBRSxJQUFJOztRQUNyQyxNQUFNLE9BQU8sR0FBRyxtQ0FBbUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDO1FBQ2xFLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbkUsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLEtBQUssR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLE1BQU0sQ0FDdkI7Z0JBQ0ksSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLElBQUksRUFBRSxRQUFRO2dCQUNkLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixPQUFPLEVBQUUsT0FBTztnQkFDaEIsS0FBSyxFQUFFLEVBQUUsdUJBQXVCLEVBQUUsSUFBSSxFQUFFO2FBQzNDLEVBQ0QsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLENBQzFCLENBQVUsQ0FBQztTQUNmO1FBQ0QsSUFBSSxLQUFLO1lBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUFBO0FBRUQ7Ozs7O0dBS0c7QUFDSCxTQUFTLGFBQWEsQ0FBQyxRQUFRO0lBQzNCLE1BQU0sT0FBTyxHQUFHLFdBQVcsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN6QyxJQUFJLEtBQUssQ0FBQztJQUNWLElBQUksT0FBTyxDQUFDLEtBQUs7UUFBRSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxLQUFLO1FBQUUsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuRCxNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDekUsSUFBSSxDQUFDLElBQUksRUFBRTtRQUNQLGFBQWE7UUFDYixPQUFPLEVBQUUsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLHFEQUFxRCxRQUFRLEVBQUUsQ0FBQyxDQUFDO0tBQ2pHO0lBRUQsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDM0IsQ0FBQztBQUVELG1DQUFnQixDQUFDLGVBQWUsRUFBRSxDQUFDOzs7Ozs7Ozs7Ozs7OztBQzNKbkMseURBQXNEO0FBQ3RELGdFQUE2RDtBQUM3RCwwREFBdUQ7QUFDdkQsNERBQXlEO0FBTXpEO0lBQUEsTUFBYSxRQUFRO1FBUWpCLHNCQUFzQjtRQUNmLE1BQU0sQ0FBTyxjQUFjOztnQkFDOUIsSUFBSSxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUNBQWdCLENBQUMsV0FBVyxFQUFFLG1DQUFnQixDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3hHLElBQUksY0FBYyxLQUFLLFNBQVMsSUFBSSxjQUFjLEtBQUssSUFBSSxFQUFFO29CQUN6RCxjQUFjLEdBQUcsbUNBQWdCLENBQUMsVUFBVSxDQUFDO2lCQUNoRDtnQkFFRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsYUFBYSxFQUFFLEVBQUUsRUFBRTtvQkFDaEUsbUZBQW1GO29CQUNuRixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDcEUsQ0FBQyxDQUFDLENBQUM7Z0JBRUgsb0NBQW9DO2dCQUNwQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29CQUN6QixPQUFPO2lCQUNWO2dCQUVELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsNEJBQTRCLENBQUMsQ0FBQztnQkFDL0UsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO2dCQUNqRixNQUFNLHdCQUF3QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLCtCQUErQixDQUFDLENBQUM7Z0JBQ3JGLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0NBQWtDLENBQUMsQ0FBQztnQkFDM0YsTUFBTSxzQkFBc0IsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO2dCQUNqRixNQUFNLHFCQUFxQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDLENBQUM7Z0JBRWpGLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDO29CQUNqQixLQUFLLEVBQUUscUJBQXFCO29CQUM1QixPQUFPLEVBQ0gsOENBQThDLHNCQUFzQixPQUFPO3dCQUMzRSxvQ0FBb0Msd0JBQXdCLFVBQVU7d0JBQ3RFLE1BQU0sMkJBQTJCLE1BQU07d0JBQ3ZDLDBCQUEwQixzQkFBc0IsT0FBTztvQkFDM0QsT0FBTyxFQUFFO3dCQUNMLEVBQUUsRUFBRTs0QkFDQSxLQUFLLEVBQUUscUJBQXFCOzRCQUM1QixRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7eUJBQzNDO3FCQUNKO29CQUNELE9BQU8sRUFBRSxJQUFJO2lCQUNoQixDQUFDLENBQUM7Z0JBQ0gsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNuQixDQUFDO1NBQUE7UUFFTyxNQUFNLENBQU8sT0FBTyxDQUFDLFVBQStCOztnQkFDeEQsOEVBQThFO2dCQUM5RSxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNyQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ2pFLENBQUMsQ0FBQyxDQUFDO2dCQUVILE1BQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7Z0JBQzFDLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztnQkFFL0MsTUFBTSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO2dCQUMvRSxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUM7Z0JBQ2pGLE1BQU0sMkJBQTJCLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsa0NBQWtDLENBQUMsQ0FBQztnQkFDM0YsTUFBTSx5QkFBeUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO2dCQUN2RixNQUFNLHVCQUF1QixHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLDhCQUE4QixDQUFDLENBQUM7Z0JBQ25GLE1BQU0sV0FBVyxHQUFHLElBQUksTUFBTSxDQUFDO29CQUMzQixLQUFLLEVBQUUscUJBQXFCO29CQUM1QixPQUFPLEVBQ0gsZ0RBQWdELHNCQUFzQixPQUFPO3dCQUM3RSxNQUFNLDJCQUEyQixNQUFNO3dCQUN2QyxvQ0FBb0MseUJBQXlCLFVBQVU7b0JBQzNFLE9BQU8sRUFBRTt3QkFDTCxFQUFFLEVBQUU7NEJBQ0EsSUFBSSxFQUFFLDhCQUE4Qjs0QkFDcEMsS0FBSyxFQUFFLHVCQUF1Qjt5QkFDakM7cUJBQ0o7b0JBQ0QsT0FBTyxFQUFFLElBQUk7aUJBQ2hCLENBQUMsQ0FBQztnQkFDSCxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdCLENBQUM7U0FBQTtRQUVEOzs7O1dBSUc7UUFDSyxNQUFNLENBQU8sWUFBWSxDQUFDLElBQVUsRUFBRSxVQUErQjs7Z0JBQ3pFLDhCQUE4QjtnQkFDOUIsS0FBSyxNQUFNLEVBQUUsU0FBUyxFQUFFLElBQUksVUFBVSxFQUFFO29CQUNwQyxNQUFNLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2pDO1lBQ0wsQ0FBQztTQUFBO1FBRUQ7Ozs7V0FJRztRQUNLLE1BQU0sQ0FBTyxpQkFBaUIsQ0FBQyxJQUFVLEVBQUUsVUFBK0I7O2dCQUM5RSxpQ0FBaUM7Z0JBQ2pDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7Z0JBRTFJLDRDQUE0QztnQkFDNUMsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLEVBQUU7b0JBQ3RCLEtBQUssTUFBTSxFQUFFLFNBQVMsRUFBRSxJQUFJLFVBQVUsRUFBRTt3QkFDcEMsTUFBTSxTQUFTLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7cUJBQy9DO2lCQUNKO1lBQ0wsQ0FBQztTQUFBO1FBRUQsNEZBQTRGO1FBQzVGLHlCQUF5QjtRQUN6Qjs7OztXQUlHO1FBQ0ksTUFBTSxDQUFDLGNBQWMsQ0FBQyxFQUFVLEVBQUUsRUFBVTtZQUMvQyxNQUFNLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3JELE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDckQsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN6QyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFO2dCQUN4QixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUM1QixJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDaEM7WUFDRCxPQUFPLEVBQUUsQ0FBQyxNQUFNLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEUsQ0FBQzs7SUE3SEQsaUVBQWlFO0lBQ3pDLG1CQUFVLEdBQXdCO1FBQ3RELEVBQUUsYUFBYSxFQUFFLGlDQUFlLENBQUMsYUFBYSxFQUFFLFNBQVMsRUFBRSxJQUFJLGlDQUFlLEVBQUUsRUFBRTtRQUNsRixFQUFFLGFBQWEsRUFBRSwyQkFBWSxDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUUsSUFBSSwyQkFBWSxFQUFFLEVBQUU7UUFDNUUsRUFBRSxhQUFhLEVBQUUsNkJBQWEsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLElBQUksNkJBQWEsRUFBRSxFQUFFO0tBQ2pGLENBQUM7SUF5SE4sZUFBQztLQUFBO0FBL0hZLDRCQUFROzs7Ozs7Ozs7Ozs7OztBQ1ByQjs7OztHQUlHO0FBQ0g7SUFBQSxNQUFzQixnQkFBZ0I7UUFBdEM7WUFLWSxZQUFPLEdBQVksS0FBSyxDQUFDO1FBcVpyQyxDQUFDO1FBellHLElBQVcseUJBQXlCO1lBQ2hDLE9BQU8sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDcEMsQ0FBQztRQUNELElBQVcseUJBQXlCO1lBQ2hDLE9BQU8sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDcEMsQ0FBQztRQUVEOzs7O1dBSUc7UUFDTyxLQUFLLENBQUMsTUFBYztZQUMxQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztZQUNwQixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQztZQUM1QixhQUFhO1lBQ2IsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsb0NBQW9DLE1BQU0sRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDOUYsQ0FBQztRQUVEOzs7V0FHRztRQUNVLE9BQU8sQ0FBQyxJQUFVOztnQkFDM0Isc0RBQXNEO2dCQUN0RCxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxxREFBcUQsSUFBSSxDQUFDLHlCQUF5QixPQUFPLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxDQUFDLENBQUM7Z0JBQ25KLHNEQUFzRDtnQkFDdEQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsdURBQXVELEVBQUU7b0JBQzNFLFNBQVMsRUFBRSxJQUFJO2lCQUNsQixDQUFDLENBQUM7Z0JBRUgsbUZBQW1GO2dCQUNuRiw4Q0FBOEM7Z0JBQzlDLE1BQU0sYUFBYSxHQUE4QixJQUFJLEdBQUcsRUFBd0IsQ0FBQztnQkFFakYsc0JBQXNCO2dCQUN0QixNQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQ25ELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDZCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUM3QztnQkFDRCxNQUFNLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUM3QyxNQUFNLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQ3BELElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDZCxPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUM3QztnQkFFRCx1QkFBdUI7Z0JBQ3ZCLE1BQU0sSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDcEQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNkLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQzdDO2dCQUNELE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQzlDLE1BQU0sSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDckQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO29CQUNkLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQzdDO2dCQUVELHVCQUF1QjtnQkFDdkIsTUFBTSxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUNwRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDN0M7Z0JBQ0QsTUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDOUMsTUFBTSxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUNyRCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7b0JBQ2QsT0FBTyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDN0M7Z0JBRUQsOEVBQThFO2dCQUM5RSxNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBRWhDLE1BQU0sSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLGdCQUFnQixDQUFDLGdCQUFnQixFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDN0csc0RBQXNEO2dCQUN0RCxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQywrREFBK0QsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7WUFDckksQ0FBQztTQUFBO1FBRUQ7OztXQUdHO1FBQ2EsS0FBSyxDQUFDLGFBQXdDOztnQkFDMUQsS0FBSyxNQUFNLENBQUMsTUFBTSxFQUFFLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxDQUFDLElBQUksYUFBYSxFQUFFO29CQUNqRSxJQUFJLGFBQWEsS0FBSyxJQUFJLEVBQUU7d0JBQ3hCLE1BQU0sS0FBSyxHQUFHLE1BQWtCLENBQUM7d0JBQ2pDLE1BQU0sS0FBSyxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsQ0FBQztxQkFDOUM7b0JBQ0QsTUFBTSxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO2lCQUM1RDtZQUNMLENBQUM7U0FBQTtRQUVEOzs7O1dBSUc7UUFDYSxhQUFhLENBQUMsSUFBVSxFQUFFLGFBQXdDOztnQkFDOUUsS0FBSyxNQUFNLEtBQUssSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtvQkFDdEMsSUFBSTt3QkFDQSxJQUFJLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFOzRCQUM3QyxTQUFTO3lCQUNaO3dCQUVELElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxrQkFBa0IsRUFBRTs0QkFDbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDOzRCQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO3lCQUN0Qjt3QkFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQzt3QkFDcEQsTUFBTSxVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO3dCQUV0RSxJQUFJLGVBQWUsR0FBRyxLQUFLLENBQUM7d0JBQzVCLFVBQVUsQ0FBQyxNQUFNLEdBQUcsTUFBTSxPQUFPLENBQUMsR0FBRzt3QkFDakMsYUFBYTt3QkFDYixLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBTyxLQUFLLEVBQUUsRUFBRTs0QkFDbEMsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFO2dDQUNoQyxPQUFPLEtBQUssQ0FBQzs2QkFDaEI7NEJBRUQsSUFBSSxlQUFlLEdBQUcsTUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDOzRCQUNuRSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxFQUFFO2dDQUNqQyxlQUFlLEdBQUcsSUFBSSxDQUFDO2dDQUN2QixlQUFlLENBQUMsS0FBSyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsQ0FBQztnQ0FFbkMsTUFBTSxRQUFRLEdBQUcsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dDQUNsQyxRQUFRLENBQUMsU0FBUyxHQUFHLE1BQU0sV0FBVyxDQUFDLEtBQUssQ0FBQyxTQUFTLEVBQUUsZUFBZSxFQUFFO29DQUNyRSxZQUFZLEVBQUUsS0FBSztvQ0FDbkIsT0FBTyxFQUFFLEtBQUs7aUNBQ2pCLENBQUMsQ0FBQztnQ0FDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO2dDQUN0QixPQUFPLFFBQVEsQ0FBQzs2QkFDbkI7aUNBQU07Z0NBQ0gsT0FBTyxLQUFLLENBQUM7NkJBQ2hCO3dCQUNMLENBQUMsQ0FBQSxDQUFDLENBQ0wsQ0FBQzt3QkFDRixJQUFJLEtBQUssQ0FBQyxHQUFHLEtBQUssa0JBQWtCLEVBQUU7NEJBQ2xDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQzs0QkFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQzt5QkFDdEI7d0JBRUQsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUU7NEJBQzNCLFNBQVM7eUJBQ1o7d0JBRUQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3dCQUN6QixhQUFhLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRTs0QkFDckIsVUFBVTs0QkFDVixhQUFhLEVBQUUsSUFBSTt5QkFDdEIsQ0FBQyxDQUFDO3FCQUNOO29CQUFDLE9BQU8sS0FBSyxFQUFFO3dCQUNaLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7d0JBQ3JCLE9BQU8sT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztxQkFDaEM7aUJBQ0o7WUFDTCxDQUFDO1NBQUE7UUFDRDs7OztXQUlHO1FBQ2EsWUFBWSxDQUFDLElBQVUsRUFBRSxhQUF3Qzs7Z0JBQzdFLEtBQUssTUFBTSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUU7b0JBQ3BDLElBQUk7d0JBQ0EsSUFBSSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUU7NEJBQ2hELFNBQVM7eUJBQ1o7d0JBRUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7d0JBQzVDLE1BQU0sVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7d0JBRXpELElBQUksYUFBYSxDQUFDLFVBQVUsQ0FBQyxFQUFFOzRCQUMzQixTQUFTO3lCQUNaO3dCQUVELFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFDekIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUU7NEJBQ3BCLFVBQVU7NEJBQ1YsYUFBYSxFQUFFLElBQUk7eUJBQ3RCLENBQUMsQ0FBQztxQkFDTjtvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNyQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2hDO2lCQUNKO1lBQ0wsQ0FBQztTQUFBO1FBQ0Q7Ozs7V0FJRztRQUNhLGFBQWEsQ0FBQyxJQUFVLEVBQUUsYUFBd0M7O2dCQUM5RSxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO29CQUN0QyxJQUFJO3dCQUNBLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLHNCQUFzQixDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFFOzRCQUNsRCxTQUFTO3lCQUNaO3dCQUVELE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO3dCQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNuQixNQUFNLFVBQVUsR0FBRyxNQUFNLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7d0JBQ3RFLE9BQU8sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7d0JBQ3hCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQzt3QkFDZixJQUFJLFVBQVUsQ0FBQyxLQUFLLEVBQUU7NEJBQ2xCLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDOzRCQUN6QixPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUM7eUJBQzNCO3dCQUVELFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQzt3QkFDekIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUU7NEJBQ3JCLFVBQVU7NEJBQ1YsYUFBYSxFQUFFLEtBQUs7eUJBQ3ZCLENBQUMsQ0FBQztxQkFDTjtvQkFBQyxPQUFPLEtBQUssRUFBRTt3QkFDWixPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO3dCQUNyQixPQUFPLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7cUJBQ2hDO2lCQUNKO1lBQ0wsQ0FBQztTQUFBO1FBRUQ7Ozs7V0FJRztRQUNhLGlCQUFpQixDQUFDLFNBQW9CLEVBQUUsVUFBVTs7Z0JBQzlELElBQUksY0FBYyxHQUFHLEtBQUssQ0FBQztnQkFDM0IsYUFBYTtnQkFDYixJQUFJLFNBQVMsQ0FBQyxLQUFLLEtBQUssU0FBUyxFQUFFO29CQUMvQixNQUFNLEtBQUssR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHO29CQUMzQixhQUFhO29CQUNiLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQU8sSUFBSSxFQUFFLEVBQUU7d0JBQy9CLElBQUksVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQzt3QkFFbEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsRUFBRTs0QkFDNUIsY0FBYyxHQUFHLElBQUksQ0FBQzs0QkFDdEIsVUFBVSxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUM7NEJBQzdCLE9BQU8sTUFBTSxXQUFXLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtnQ0FDdkMsWUFBWSxFQUFFLEtBQUs7Z0NBQ25CLE9BQU8sRUFBRSxLQUFLOzZCQUNqQixDQUFDLENBQUM7eUJBQ047NkJBQU07NEJBQ0gsT0FBTyxJQUFJLENBQUM7eUJBQ2Y7b0JBQ0wsQ0FBQyxDQUFBLENBQUMsQ0FDTCxDQUFDO29CQUNGLElBQUksY0FBYyxFQUFFO3dCQUNoQixVQUFVLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztxQkFDNUI7aUJBQ0o7Z0JBRUQsT0FBTyxVQUFVLENBQUM7WUFDdEIsQ0FBQztTQUFBO1FBRUQ7Ozs7V0FJRztRQUNhLHNCQUFzQixDQUFDLEtBQVk7O2dCQUMvQyxPQUFPLEtBQUssQ0FBQztZQUNqQixDQUFDO1NBQUE7UUFDRDs7OztXQUlHO1FBQ2EsZ0JBQWdCLENBQUMsS0FBVTs7Z0JBQ3ZDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztTQUFBO1FBQ0Q7Ozs7V0FJRztRQUNhLG1CQUFtQixDQUFDLElBQVUsRUFBRSxhQUF3QztrRUFBa0IsQ0FBQztTQUFBO1FBQzNHOzs7O1dBSUc7UUFDYSxvQkFBb0IsQ0FBQyxJQUFVLEVBQUUsYUFBd0M7a0VBQWtCLENBQUM7U0FBQTtRQUU1Rzs7OztXQUlHO1FBQ2EscUJBQXFCLENBQUMsSUFBb0I7O2dCQUN0RCxPQUFPLEtBQUssQ0FBQztZQUNqQixDQUFDO1NBQUE7UUFDRDs7OztXQUlHO1FBQ2EsZUFBZSxDQUFDLElBQW9COztnQkFDaEQsT0FBTyxFQUFFLENBQUM7WUFDZCxDQUFDO1NBQUE7UUFDRDs7OztXQUlHO1FBQ2Esa0JBQWtCLENBQUMsSUFBVSxFQUFFLGFBQXdDO2tFQUFrQixDQUFDO1NBQUE7UUFDMUc7Ozs7V0FJRztRQUNhLG1CQUFtQixDQUFDLElBQVUsRUFBRSxhQUF3QztrRUFBa0IsQ0FBQztTQUFBO1FBRTNHOzs7O1dBSUc7UUFDYSxzQkFBc0IsQ0FBQyxLQUFnQjs7Z0JBQ25ELE9BQU8sS0FBSyxDQUFDO1lBQ2pCLENBQUM7U0FBQTtRQUNEOzs7O1dBSUc7UUFDYSxnQkFBZ0IsQ0FBQyxLQUFnQjs7Z0JBQzdDLE9BQU8sRUFBRSxDQUFDO1lBQ2QsQ0FBQztTQUFBO1FBQ0Q7Ozs7V0FJRztRQUNhLG1CQUFtQixDQUFDLElBQVUsRUFBRSxhQUF3QztrRUFBa0IsQ0FBQztTQUFBO1FBQzNHOzs7O1dBSUc7UUFDYSxvQkFBb0IsQ0FBQyxJQUFVLEVBQUUsYUFBd0M7a0VBQWtCLENBQUM7U0FBQTtRQUU1Rzs7O1dBR0c7UUFDVSxxQkFBcUIsQ0FBQyxJQUFnQjs7Z0JBQy9DLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2dCQUNwQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7b0JBQUUsT0FBTztnQkFFekQsb0ZBQW9GO2dCQUNwRixNQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ3ZCLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2dCQUV4Qyw0RUFBNEU7Z0JBQzVFLEtBQUssSUFBSSxHQUFHLElBQUksT0FBTyxFQUFFO29CQUNyQixJQUFJO3dCQUNBLElBQUksVUFBVSxHQUFRLElBQUksQ0FBQzt3QkFDM0IsSUFBSSxNQUFNLEtBQUssTUFBTSxFQUFFOzRCQUNuQixVQUFVLEdBQUcsTUFBTSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzs0QkFFbEQsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0NBQzNCLFNBQVM7NkJBQ1o7NEJBRUQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzRCQUN6QixVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQzs0QkFDNUIsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzRCQUNwQyx1RUFBdUU7NEJBQ3ZFLG1DQUFtQzs0QkFDbkMsMERBQTBEOzRCQUMxRCxFQUFFOzRCQUNGLHVDQUF1Qzs0QkFDdkMsb0JBQW9COzRCQUNwQixRQUFROzRCQUNSLEVBQUU7NEJBQ0YsbUNBQW1DOzRCQUNuQywyQ0FBMkM7eUJBQzlDOzZCQUFNLElBQUksTUFBTSxLQUFLLE9BQU8sRUFBRTs0QkFDM0IsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQzs0QkFFbkQsSUFBSSxhQUFhLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0NBQzNCLFNBQVM7NkJBQ1o7NEJBRUQsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDOzRCQUN6QixVQUFVLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQzs0QkFDNUIsTUFBTSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO3lCQUN2QztxQkFDSjtvQkFBQyxPQUFPLEdBQUcsRUFBRTt3QkFDVixPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO3FCQUN0QjtpQkFDSjtnQkFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixNQUFNLDZCQUE2QixJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBQztZQUN0RixDQUFDO1NBQUE7O0lBeFplLDRCQUFXLEdBQUcsYUFBYSxDQUFDO0lBQzVCLGlDQUFnQixHQUFHLHdCQUF3QixDQUFDO0lBQzVDLDJCQUFVLEdBQUcsR0FBRyxDQUFDO0lBdVpyQyx1QkFBQztLQUFBO0FBMVpxQiw0Q0FBZ0I7Ozs7Ozs7Ozs7Ozs7O0FDUHRDLDBEQUF1RDtBQUV2RDs7R0FFRztBQUNILE1BQWEsZUFBZ0IsU0FBUSxtQ0FBZ0I7SUFDakQsSUFBSSxhQUFhO1FBQ2IsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDO0lBQ0QsSUFBSSxhQUFhO1FBQ2IsT0FBTyxlQUFlLENBQUMsYUFBYSxDQUFDO0lBQ3pDLENBQUM7SUFDRCxNQUFNLEtBQUssYUFBYTtRQUNwQixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRWUsZ0JBQWdCLENBQUMsU0FBb0I7O1lBQ2pELElBQUksVUFBVSxHQUFRLEVBQUUsQ0FBQztZQUN6QixlQUFlLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzVELGVBQWUsQ0FBQyxrQkFBa0IsQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFFMUQsVUFBVSxHQUFHLE1BQU0sSUFBSSxDQUFDLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUVqRSxPQUFPLFVBQVUsQ0FBQztRQUN0QixDQUFDO0tBQUE7SUFFZSxlQUFlLENBQUMsSUFBb0I7O1lBQ2hELE1BQU0sVUFBVSxHQUFHLEVBQUUsQ0FBQztZQUN0QixlQUFlLENBQUMsMkJBQTJCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzlELGVBQWUsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDekQsZUFBZSxDQUFDLG9CQUFvQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN2RCxlQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzFELGVBQWUsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsVUFBVSxDQUFDLENBQUM7WUFDbkQsZUFBZSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUN0RCxPQUFPLFVBQVUsQ0FBQztRQUN0QixDQUFDO0tBQUE7SUFFZSxnQkFBZ0IsQ0FBQyxLQUFVOztZQUN2QyxPQUFPLEVBQUUsQ0FBQztRQUNkLENBQUM7S0FBQTtJQUVlLHNCQUFzQixDQUFDLFNBQW9COztZQUN2RCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO0tBQUE7SUFFZSxxQkFBcUIsQ0FBQyxJQUFvQjs7WUFDdEQsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUFBO0lBRWUsc0JBQXNCLENBQUMsS0FBWTs7O1lBQy9DLGFBQWE7WUFDYixPQUFPLE9BQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLE1BQU0sSUFBRyxDQUFDLENBQUM7O0tBQ3hDO0lBRUQ7Ozs7O09BS0c7SUFDSyxNQUFNLENBQUMsb0JBQW9CLENBQUMsU0FBUyxFQUFFLFVBQVU7UUFDckQsSUFBSSxXQUFXLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSx5QkFBeUIsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5RCxVQUFVLENBQUMsb0NBQW9DLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckQsVUFBVSxDQUFDLGtDQUFrQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3REO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxNQUFNLENBQUMsa0JBQWtCLENBQUMsU0FBUyxFQUFFLFVBQVU7O1FBQ25ELElBQUksY0FBQyxTQUFTLENBQUMsSUFBSSwwQ0FBRSxNQUFNLDBDQUFFLE1BQU0sQ0FBQTtZQUFFLE9BQU87UUFDNUMsTUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTlCLE1BQU0sT0FBTyxHQUFHLENBQUMsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUU7WUFDcEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEdBQUcsQ0FBQyxLQUFLLEVBQUU7Z0JBQ3hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRztvQkFDWCxLQUFLLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUM3RCxDQUFDO2FBQ0w7WUFDRCxPQUFPLE9BQU8sQ0FBQztRQUNuQixDQUFDLENBQUM7UUFFRixJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNwRyxJQUFJLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDakMsVUFBVSxDQUFDLG9DQUFvQyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sbUJBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLFNBQVMsMENBQUUsTUFBTSwwQ0FBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUN2SSxVQUFVLENBQUMsMENBQTBDLENBQUMsR0FBRyxNQUFNLENBQUMsT0FBTyxtQkFBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUUsU0FBUywwQ0FBRSxZQUFZLDBDQUFFLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7Z0JBQ25KLFVBQVUsQ0FBQyxzQ0FBc0MsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLG1CQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSwwQ0FBRSxTQUFTLDBDQUFFLFFBQVEsMENBQUUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFDM0ksVUFBVSxDQUFDLHVDQUF1QyxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQU8sbUJBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLFNBQVMsMENBQUUsU0FBUywwQ0FBRSxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2FBQ2hKO1lBQ0QsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUU7Z0JBQ2hDLFVBQVUsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxPQUFPLGFBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLDBDQUFFLFFBQVEsMENBQUUsS0FBSyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQzthQUN6SDtTQUNKO0lBQ0wsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyxNQUFNLENBQUMsMkJBQTJCLENBQUMsSUFBSSxFQUFFLFVBQVU7UUFDdkQsZ0RBQWdEO1FBQ2hELElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDbEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDaEMsSUFBSSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxLQUFLLFFBQVEsRUFBRTtnQkFDeEMsVUFBVSxDQUFDLDhCQUE4QixDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQzthQUM3RTtZQUNELElBQUksT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxRQUFRLEVBQUU7Z0JBQzNDLFVBQVUsQ0FBQyxpQ0FBaUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUM7YUFDbkY7U0FDSjtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxVQUFVO1FBQzVDLGlDQUFpQztRQUNqQyxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN4RCxJQUFJLFdBQVcsR0FBRyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDO1lBQ3ZDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtnQkFDM0UsdUJBQXVCO2dCQUN2QixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7Z0JBQ3JDLFdBQVcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQztnQkFDbEMsV0FBVyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO2FBQ2pDO1lBQ0QsVUFBVSxDQUFDLFdBQVcsQ0FBQyxHQUFHO2dCQUN0QixXQUFXLEVBQUU7b0JBQ1QsS0FBSyxFQUFFLENBQUM7b0JBQ1IsR0FBRyxFQUFFLENBQUM7aUJBQ1Q7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLEtBQUssRUFBRSxXQUFXLENBQUMsS0FBSztvQkFDeEIsR0FBRyxFQUFFLFdBQVcsQ0FBQyxHQUFHO2lCQUN2QjthQUNKLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssTUFBTSxDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxVQUFVOztRQUMvQyxJQUFJLE9BQUEsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLDBDQUFFLGNBQWMsTUFBSyxTQUFTLEVBQUU7WUFDcEQsVUFBVSxDQUFDLHlCQUF5QixDQUFDLEdBQUc7Z0JBQ3BDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxjQUFjO2FBQzVDLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssTUFBTSxDQUFDLHVCQUF1QixDQUFDLElBQUksRUFBRSxVQUFVO1FBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUssU0FBUyxFQUFFO2dCQUNsQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxDQUFDLENBQUM7YUFDaEM7U0FDSjtJQUNMLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQUksRUFBRSxVQUFVO1FBQ2xELElBQUksQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUM5QyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDaEMsTUFBTSxNQUFNLEdBQUc7b0JBQ1gsSUFBSSxFQUFFLEVBQUU7b0JBQ1IsUUFBUSxFQUFFLEVBQUU7b0JBQ1osU0FBUyxFQUFFLEVBQUU7b0JBQ2IsVUFBVSxFQUFFLEVBQUU7b0JBQ2QsS0FBSyxFQUFFLEVBQUU7b0JBQ1QsSUFBSSxFQUFFLEtBQUs7b0JBQ1gsR0FBRyxFQUFFLENBQUM7b0JBQ04sS0FBSyxFQUFFO3dCQUNILEtBQUssRUFBRSxDQUFDO3dCQUNSLFNBQVMsRUFBRSxFQUFFO3FCQUNoQjtvQkFDRCxRQUFRLEVBQUUsS0FBSztvQkFDZixNQUFNLEVBQUU7d0JBQ0osSUFBSSxFQUFFLEVBQUU7d0JBQ1IsT0FBTyxFQUFFLEVBQUU7d0JBQ1gsS0FBSyxFQUFFLENBQUM7d0JBQ1IsRUFBRSxFQUFFOzRCQUNBLEtBQUssRUFBRSxDQUFDO3lCQUNYO3dCQUNELFNBQVMsRUFBRSxFQUFFO3FCQUNoQjtvQkFDRCxPQUFPLEVBQUU7d0JBQ0wsSUFBSSxFQUFFLEVBQUU7d0JBQ1IsU0FBUyxFQUFFLEVBQUU7d0JBQ2IsVUFBVSxFQUFFLEVBQUU7d0JBQ2QsS0FBSyxFQUFFLEVBQUU7d0JBQ1QsR0FBRyxFQUFFLENBQUM7d0JBQ04sV0FBVyxFQUFFLEVBQUU7cUJBQ2xCO2lCQUNKLENBQUM7Z0JBQ0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJO29CQUFFLFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO2dCQUMzQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7YUFDbkM7U0FDSjtJQUNMLENBQUM7Q0FDSjtBQWxORCwwQ0FrTkM7Ozs7Ozs7Ozs7Ozs7O0FDdk5ELDBEQUF1RDtBQUd2RDs7R0FFRztBQUNILE1BQWEsYUFBYyxTQUFRLG1DQUFnQjtJQUMvQyxJQUFJLGFBQWE7UUFDYixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBQ0QsSUFBSSxhQUFhO1FBQ2IsT0FBTyxhQUFhLENBQUMsYUFBYSxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxNQUFNLEtBQUssYUFBYTtRQUNwQixPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRWUsZ0JBQWdCLENBQUMsU0FBdUI7OztZQUNwRCxJQUFJLGFBQUEsU0FBUyxDQUFDLElBQUksMENBQUUsVUFBVSwwQ0FBRSxJQUFJLE1BQUssU0FBUztnQkFBRSxPQUFPLEVBQUUsQ0FBQztZQUM5RCxPQUFPO2dCQUNILElBQUksRUFBRTtvQkFDRixVQUFVLEVBQUU7d0JBQ1IsSUFBSSxFQUFFOzRCQUNGLElBQUksRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRzs0QkFDeEMsS0FBSyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHOzRCQUN6QyxJQUFJLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUs7eUJBQzdDO3FCQUNKO2lCQUNKO2FBQ0osQ0FBQzs7S0FDTDtJQUVlLHNCQUFzQixDQUFDLFNBQXVCOzs7WUFDMUQsT0FBTyxPQUFBLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksMENBQUUsSUFBSSxNQUFLLFNBQVMsQ0FBQzs7S0FDN0Q7SUFFZSxzQkFBc0IsQ0FBQyxLQUFZOzs7WUFDL0MsYUFBYTtZQUNiLE9BQU8sT0FBQSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sMENBQUUsTUFBTSxJQUFHLENBQUMsQ0FBQzs7S0FDeEM7Q0FDSjtBQWxDRCxzQ0FrQ0M7Ozs7Ozs7Ozs7Ozs7O0FDeENELDBEQUF1RDtBQUV2RDs7R0FFRztBQUNILE1BQWEsWUFBYSxTQUFRLG1DQUFnQjtJQUM5QyxJQUFJLGFBQWE7UUFDYixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBQ0QsSUFBSSxhQUFhO1FBQ2IsT0FBTyxZQUFZLENBQUMsYUFBYSxDQUFDO0lBQ3RDLENBQUM7SUFDRCxNQUFNLEtBQUssYUFBYTtRQUNwQixPQUFPLE9BQU8sQ0FBQztJQUNuQixDQUFDO0lBRWUsZ0JBQWdCLENBQUMsU0FBb0I7O1lBQ2pELElBQUksVUFBVSxHQUFRLEVBQUUsQ0FBQztZQUN6QixJQUFJLFVBQVUsQ0FBQyxJQUFJLEtBQUssU0FBUztnQkFBRSxVQUFVLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztZQUN4RCxVQUFVLENBQUMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLFdBQVcsQ0FBQztZQUNyRCxPQUFPLFVBQVUsQ0FBQztRQUN0QixDQUFDO0tBQUE7SUFFZSxzQkFBc0IsQ0FBQyxTQUFjOztZQUNqRCxPQUFPLFNBQVMsQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEtBQUssU0FBUyxDQUFDO1FBQy9ELENBQUM7S0FBQTtJQUVlLHNCQUFzQixDQUFDLEtBQVk7OztZQUMvQyxhQUFhO1lBQ2IsT0FBTyxPQUFBLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSwwQ0FBRSxNQUFNLElBQUcsQ0FBQyxDQUFDOztLQUN4QztDQUNKO0FBMUJELG9DQTBCQzs7Ozs7QUM1QkQsTUFBYSxTQUFTO0lBNkJsQixZQUFZLEtBQXNCO1FBQzlCLElBQUksV0FBVyxHQUFHLEVBQW9CLENBQUM7UUFDdkMsSUFBSSxLQUFLLEVBQUU7WUFDUCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQ3RCLFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDdkI7aUJBQU0sSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7Z0JBQ2xDLEtBQUssTUFBTSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO29CQUMvQyxJQUFJLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTt3QkFDdkMsOERBQThEO3dCQUM5RCxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTs0QkFDbkQsV0FBVyxDQUFDLElBQUksQ0FBQztnQ0FDYixJQUFJLEVBQUcsS0FBNkIsQ0FBQyxJQUFJO2dDQUN6QyxLQUFLLEVBQUcsS0FBNkIsQ0FBQyxLQUFLOzZCQUM5QyxDQUFDLENBQUM7eUJBQ047NkJBQU07NEJBQ0gsV0FBVyxDQUFDLElBQUksQ0FBQztnQ0FDYixJQUFJO2dDQUNKLEtBQUs7NkJBQ2UsQ0FBQyxDQUFDO3lCQUM3QjtxQkFDSjtpQkFDSjthQUNKO1NBQ0o7UUFDRCxJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQztJQUM3QixDQUFDO0lBckRELElBQUksSUFBSTtRQUNKLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztJQUM5QixDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ0wsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2QsS0FBSyxNQUFNLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzNCLElBQUksT0FBTyxJQUFJLENBQUMsS0FBSyxLQUFLLFFBQVEsRUFBRTtnQkFDaEMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDdkI7U0FDSjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBWTs7UUFDckIsYUFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsMENBQUUsS0FBSyxDQUFDO0lBQ2hFLENBQUM7SUFFRCxLQUFLO1FBQ0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUErQkQsT0FBTyxDQUFDLElBQVksRUFBRSxLQUFZO1FBQzlCLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDO1lBQ1osSUFBSTtZQUNKLEtBQUs7U0FDUixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsYUFBYSxDQUFDLElBQVksRUFBRSxLQUFhLEVBQUUsU0FBUyxHQUFHLElBQUk7UUFDdkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDakUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDWiw4Q0FBOEM7WUFDOUMsSUFBSSxDQUFDLFNBQVM7Z0JBQUUsT0FBTztZQUV2QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUIsK0NBQStDO1lBQy9DLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSTtnQkFBRSxPQUFPO1lBQ2xELHFFQUFxRTtZQUNyRSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNuQzthQUFNLElBQUksS0FBSyxFQUFFO1lBQ2QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDN0I7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUFDLElBQVk7UUFDbkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLENBQUM7UUFDakUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDNUIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakIsbUJBQW1CO1FBQ25CLG1DQUFtQztRQUNuQywyQ0FBMkM7UUFDM0MsZUFBZTtRQUNmLHdDQUF3QztRQUN4QyxRQUFRO1FBQ1IsSUFBSTtRQUNKLGVBQWU7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxhQUFhLENBQVEsSUFBb0IsRUFBRSxJQUFZLEVBQUUsS0FBWSxFQUFFLFNBQVMsR0FBRyxJQUFJO1FBQzFGLE1BQU0sS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM1QyxPQUFPLEtBQUssQ0FBQyxLQUFLLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBcUI7UUFDOUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7Q0FDSjtBQTlHRCw4QkE4R0M7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUMzR0Qsd0NBQXFDO0FBR3JDLGtDQUF1RDtBQUN2RCw0Q0FBMkM7QUFDM0Msa0RBQStDO0FBd0MvQyxNQUFhLGFBQWMsU0FBUSxJQUFJO0lBRW5DLG1EQUFtRDtJQUNuRCxNQUFNO1FBQ0YsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQzVCLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ3BCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSjtBQVJELHNDQVFDO0FBRUQsTUFBYSxlQUFlO0lBQ3hCLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLElBQWEsRUFBRSxPQUFvQzs7UUFDdEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7UUFDdEMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQzVCLElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUUvQixNQUFNLFFBQVEsbUNBQ1AsT0FBTyxLQUNWLEtBQUssRUFBRSxLQUFLLEVBQ1osYUFBYSxFQUFFO2dCQUNYLGFBQWEsRUFBRSxJQUFJO2FBQ3RCLEVBQ0QsS0FBSyxFQUNMLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxFQUNqQixJQUFJO1lBQ0osS0FBSztZQUNMLEtBQUssRUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFDZixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFDYixlQUFlLEVBQUUsSUFBSSxDQUFDLFdBQVcsR0FDcEMsQ0FBQztRQUNGLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNDLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3JCLFFBQVEsQ0FBQyxPQUFPLENBQUMsR0FBRztnQkFDaEI7b0JBQ0ksS0FBSyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRTtvQkFDaEMsSUFBSSxFQUFFLFNBQVM7aUJBQ2xCO2FBQ0osQ0FBQztTQUNMO1FBQ0QsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdEIsUUFBUSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN2QztRQUNELElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFO1lBQ3ZCLFFBQVEsQ0FBQyxVQUFVLENBQUMsU0FBRyxJQUFJLENBQUMsZUFBZSxFQUFFLDBDQUFFLEtBQUssQ0FBQztZQUNyRCxJQUFJLFFBQVEsQ0FBQyxhQUFhLEVBQUU7Z0JBQ3hCLFFBQVEsQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLEtBQUssQ0FBQzthQUMzRTtTQUNKO1FBQ0QsUUFBUSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFMUMsT0FBTyxlQUFlLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsRUFDcEIsS0FBSyxFQUFFLFVBQVUsRUFDakIsS0FBSyxFQUNMLE9BQU8sR0FLVjtRQUNHLE1BQU0sS0FBSyxHQUFHLElBQUkscUJBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN4QyxNQUFNLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQzFCLElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNaLGFBQWE7WUFDYixFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7WUFDN0QsT0FBTyxVQUFVLENBQUM7U0FDckI7UUFDRCxJQUFJLE9BQU8sR0FBRyxHQUFHLEtBQUssSUFBSSxDQUFDO1FBQzNCLElBQUksT0FBTyxFQUFFO1lBQ1QsT0FBTyxJQUFJLElBQUksQ0FBQztTQUNuQjtRQUNELElBQUksS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEtBQUssRUFBRTtZQUNkLE9BQU8sSUFBSSxLQUFLLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUNqQztRQUNELE9BQU8sSUFBSSxPQUFPLENBQUM7UUFDbkIsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQztJQUVELE1BQU0sQ0FBTyxTQUFTLENBQUMsRUFXTjtZQVhNLEVBQ25CLEtBQUssRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUN0QixLQUFLLEVBQ0wsWUFBWSxFQUNaLEtBQUssRUFDTCxLQUFLLEVBQ0wsR0FBRyxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxHQUFHLEVBQ2hCLElBQUksR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsSUFBSSxFQUNsQixlQUFlLEVBQ2YsUUFBUSxPQUVLLEVBRFYsS0FBSyxjQVZXLGtHQVd0QixDQURXOztZQUVSLElBQUksSUFBSSxDQUFDO1lBQ1QsTUFBTSxLQUFLLEdBQUcsSUFBSSxxQkFBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hDLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtnQkFDZCxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFDLENBQUM7Z0JBQzNGLElBQUksQ0FBQyxPQUFPO29CQUFFLE9BQU87Z0JBQ3JCLElBQUksR0FBRyxJQUFJLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztnQkFDbEMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUVaLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsdUJBQVcsRUFBRSx3QkFBd0IsQ0FBQyxFQUFFO29CQUMxRCxNQUFNLElBQUksQ0FBQyxTQUFTLENBQUM7d0JBQ2pCLE9BQU8sRUFBRSxXQUFXLENBQUMsVUFBVSxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDO3dCQUNqRCxNQUFNLEVBQUUsS0FBSzt3QkFDYixRQUFRLEVBQUUsUUFBUTtxQkFDckIsQ0FBQyxDQUFDO2lCQUNOO2FBQ0o7WUFFRCwwQkFBMEI7WUFDMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDO1lBQ2xDLE1BQU0sS0FBSyxHQUFHLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxLQUFLLENBQUM7WUFFM0IsSUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDO1lBQ25CLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtnQkFDcEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO2dCQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO29CQUN0QixHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO3dCQUN6QixJQUFJLE1BQU0sQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFOzRCQUNuQixRQUFRLElBQUksQ0FBQyxDQUFDO3lCQUNqQjtvQkFDTCxDQUFDLENBQUMsQ0FBQztnQkFDUCxDQUFDLENBQUMsQ0FBQztnQkFDSCxNQUFNLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQzthQUNuRDtZQUVELE1BQU0sWUFBWSxtQkFDZCxLQUFLLEVBQUUsS0FBSyxFQUNaLE1BQU0sRUFBRTtvQkFDSixJQUFJLEVBQUUsSUFBSSxJQUFJLEVBQUU7b0JBQ2hCLEdBQUcsRUFBRSxHQUFHLElBQUksRUFBRTtpQkFDakIsRUFDRCxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUM3RCxRQUFRO2dCQUNSLElBQUk7Z0JBQ0osS0FBSyxFQUNMLFFBQVEsRUFBRSxLQUFLLEVBQ2YsUUFBUSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQ3JCLEtBQUssRUFBRSxLQUFLLENBQUMsSUFBSSxFQUNqQixJQUFJLEVBQUUsSUFBSSxhQUFKLElBQUksdUJBQUosSUFBSSxDQUFFLEtBQUssRUFDakIsTUFBTSxJQUNILEtBQUssQ0FDWCxDQUFDO1lBRUYsSUFBSSxJQUFJLEVBQUU7Z0JBQ04sSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUM7YUFDcEM7WUFFRCxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUNsQixNQUFNLFFBQVEsR0FBRyxNQUFNLHFCQUFjLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxDQUFDO2dCQUMxRCxXQUFXLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO29CQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN6QixDQUFDLENBQUMsQ0FBQzthQUNOO1lBQ0QsT0FBTyxJQUFJLENBQUM7O0tBQ2Y7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxVQUFVO1FBQ2IsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsdUJBQVcsRUFBRSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1RSxNQUFNLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUMxRCxPQUFPLGVBQWUsQ0FBQyxZQUFZLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ25HLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUF3QjtRQUN4Qyw2Q0FBNkM7UUFDN0Msb0VBQW9FO1FBQ3BFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxVQUFVLEdBQUcsRUFBRSxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsTUFBTSxHQUFHLElBQUksRUFBRSxLQUFLLEVBQUUsYUFBYSxFQUFFLEdBQUcsS0FBSyxDQUFDO1FBQzdHLE1BQU0sS0FBSyxHQUFHLElBQUkscUJBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV4Qyx3Q0FBd0M7UUFDeEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHVCQUFXLEVBQUUsYUFBYSxDQUFDLEVBQUU7WUFDaEQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDO1NBQ3RCO1FBRUQsaUNBQWlDO1FBRWpDLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUV2RCxJQUFJLFVBQVUsR0FBRztZQUNiLE9BQU8sRUFBRSxhQUFhO1lBQ3RCLFFBQVE7WUFDUixTQUFTLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDdEIsS0FBSyxFQUFFLEtBQUssQ0FBQyxnQkFBZ0IsRUFBRTtZQUMvQixLQUFLLEVBQUUsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEtBQUs7WUFDbkIsTUFBTTtZQUNOLFVBQVUsRUFBRSxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsZ0JBQWdCLEVBQUU7WUFDckMsUUFBUTtZQUNSLFNBQVMsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVM7U0FDbkMsQ0FBQztRQUNGLElBQUksUUFBUSxHQUFHLDJEQUEyRCxDQUFDO1FBQzNFLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQztRQUNqQixJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7UUFFbEIsTUFBTSxPQUFPLEdBQUc7WUFDWixJQUFJLEVBQUU7Z0JBQ0YsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztnQkFDckMsSUFBSSxFQUFFLGlDQUFpQztnQkFDdkMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQzthQUNuQztTQUNKLENBQUM7UUFDRixJQUFJLEtBQUssRUFBRTtZQUNQLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRztnQkFDZCxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQyxLQUFLLEdBQUc7Z0JBQzlFLElBQUksRUFBRSw2QkFBNkI7Z0JBQ25DLFFBQVEsRUFBRSxHQUFHLEVBQUU7b0JBQ1gsSUFBSSxHQUFHLElBQUksQ0FBQztvQkFDWixNQUFNLEdBQUcsS0FBSyxDQUFDO2dCQUNuQixDQUFDO2FBQ0osQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzNCLGNBQWMsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUU7Z0JBQzlDLElBQUksTUFBTSxDQUFDO29CQUNQLEtBQUssRUFBRSxLQUFLO29CQUNaLE9BQU8sRUFBRSxHQUFHO29CQUNaLE9BQU87b0JBQ1AsT0FBTyxFQUFFLE1BQU07b0JBRWYsS0FBSyxFQUFFLENBQU8sSUFBSSxFQUFFLEVBQUU7O3dCQUNsQixJQUFJLE1BQU07NEJBQUUsT0FBTzt3QkFDbkIsd0ZBQXdGO3dCQUV4RixNQUFNLGFBQWEsR0FBRyxpQkFBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUUzRixJQUFJLGFBQWEsYUFBYixhQUFhLHVCQUFiLGFBQWEsQ0FBRSxNQUFNLEVBQUU7NEJBQ3ZCLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQzs0QkFDZCxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLHVCQUFXLEVBQUUscUJBQXFCLEVBQUUsYUFBYSxDQUFDLENBQUM7NEJBQzNFLEtBQUssQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO3lCQUNsRDt3QkFFRCxNQUFNLFVBQVUsR0FBRyxpQkFBTyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO3dCQUVwRixJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxLQUFLLFVBQVUsRUFBRTs0QkFDckMsS0FBSyxDQUFDLEtBQUssR0FBRyxVQUFVLENBQUM7NEJBQ3pCLEtBQUssQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDOzRCQUN4QixLQUFLLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQzt5QkFDaEM7d0JBRUQsTUFBTSxVQUFVLEdBQUcsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzt3QkFDckYsTUFBTSxZQUFZLEdBQUcsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzt3QkFDdkYsTUFBTSxjQUFjLEdBQUcsaUJBQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQzt3QkFFeEcsSUFBSSxNQUFNLElBQUksVUFBVSxLQUFLLENBQUMsRUFBRTs0QkFDNUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7NEJBQzlDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO3lCQUN2Qjt3QkFDRCxJQUFJLFlBQVksRUFBRTs0QkFDZCxLQUFLLENBQUMsYUFBYSxDQUFDLHlCQUF5QixFQUFFLFlBQVksQ0FBQyxDQUFDO3lCQUNoRTt3QkFDRCxJQUFJLGNBQWMsRUFBRTs0QkFDaEIsS0FBSyxDQUFDLGFBQWEsQ0FBQyx5QkFBeUIsRUFBRSxjQUFjLENBQUMsQ0FBQzs0QkFDL0QsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhO2dDQUFFLEtBQUssQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDOzRCQUNuRCxLQUFLLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7eUJBQzVDO3dCQUVELE1BQU0sY0FBYyxHQUFHLGlCQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7d0JBQzNGLE1BQU0sUUFBUSxHQUFHLGNBQWMsS0FBSyxNQUFNLENBQUM7d0JBRTNDLElBQUksSUFBSSxJQUFJLEtBQUssRUFBRTs0QkFDZixLQUFLLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQzs0QkFDMUIsS0FBSyxDQUFDLGFBQWEsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7NEJBQy9ELE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQzs0QkFDbkIsTUFBTSxLQUFLLENBQUMsTUFBTSxDQUFDO2dDQUNmLDJCQUEyQixFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUM7NkJBQ3hFLENBQUMsQ0FBQzt5QkFDTjt3QkFFRCxLQUFLLENBQUMsUUFBUSxHQUFHLGlCQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7d0JBRW5GLEtBQUssQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQzt3QkFDekIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsbUJBQ2pCLEtBQUssRUFDVixDQUFDO3dCQUVILElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTs0QkFDZixNQUFNLGVBQWUsU0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxtQ0FBSSxDQUFDLENBQUM7NEJBQ2hFLEtBQUssQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLGVBQWUsR0FBRyxDQUFDLENBQUMsQ0FBQzs0QkFDekQsS0FBSyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDOzRCQUN6QixxQ0FBcUM7NEJBQ3JDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO3lCQUNuRDt3QkFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ1gsSUFBSSxLQUFLLElBQUksQ0FBQzs0QkFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztvQkFDbEQsQ0FBQyxDQUFBO2lCQUNKLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDcEIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQWxTRCwwQ0FrU0M7OztBQy9WRCxpQ0FBaUM7OztBQUVqQyxrRUFBK0Q7QUFDL0QsMkNBQWlEO0FBRXBDLFFBQUEsc0JBQXNCLEdBQUcsR0FBRyxFQUFFO0lBRXZDOztPQUVHO0lBQ0gsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsdUJBQVcsRUFBRSxrQkFBa0IsRUFBRTtRQUNwRCxJQUFJLEVBQUUsK0JBQStCO1FBQ3JDLElBQUksRUFBRSxzQ0FBc0M7UUFDNUMsS0FBSyxFQUFFLE9BQU87UUFDZCxNQUFNLEVBQUUsSUFBSTtRQUNaLElBQUksRUFBRSxNQUFNO1FBQ1osT0FBTyxFQUFFLE9BQU87UUFDaEIsT0FBTyxFQUFFO1lBQ0wsT0FBTyxFQUFFLHlCQUF5QjtZQUNsQyxPQUFPLEVBQUUsMkJBQTJCO1NBQ3ZDO1FBQ0QsUUFBUSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztLQUN4RCxDQUFDLENBQUM7SUFFSDs7T0FFRztJQUNILElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLHVCQUFXLEVBQUUsYUFBYSxFQUFFO1FBQy9DLElBQUksRUFBRSwwQkFBMEI7UUFDaEMsSUFBSSxFQUFFLGlDQUFpQztRQUN2QyxLQUFLLEVBQUUsT0FBTztRQUNkLE1BQU0sRUFBRSxJQUFJO1FBQ1osSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsSUFBSTtLQUNoQixDQUFDLENBQUM7SUFFSCxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyx1QkFBVyxFQUFFLHdCQUF3QixFQUFFO1FBQzFELElBQUksRUFBRSxxQ0FBcUM7UUFDM0MsSUFBSSxFQUFFLDRDQUE0QztRQUNsRCxLQUFLLEVBQUUsTUFBTTtRQUNiLE1BQU0sRUFBRSxJQUFJO1FBQ1osSUFBSSxFQUFFLE9BQU87UUFDYixPQUFPLEVBQUUsS0FBSztLQUNqQixDQUFDLENBQUM7SUFFSDs7T0FFRztJQUNILElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLHVCQUFXLEVBQUUsbUNBQWdCLENBQUMsZ0JBQWdCLEVBQUU7UUFDbkUsSUFBSSxFQUFFLHNCQUFzQjtRQUM1QixLQUFLLEVBQUUsT0FBTztRQUNkLE1BQU0sRUFBRSxLQUFLO1FBQ2IsSUFBSSxFQUFFLE1BQU07UUFDWixPQUFPLEVBQUUsR0FBRztLQUNmLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLHVCQUFXLEVBQUUsaUJBQUssQ0FBQyxtQkFBbUIsRUFBRTtRQUMzRCxJQUFJLEVBQUUsa0NBQWtDO1FBQ3hDLElBQUksRUFBRSx5Q0FBeUM7UUFDL0MsS0FBSyxFQUFFLE1BQU07UUFDYixNQUFNLEVBQUUsSUFBSTtRQUNaLElBQUksRUFBRSxPQUFPO1FBQ2IsT0FBTyxFQUFFLElBQUk7S0FDaEIsQ0FBQyxDQUFBO0FBQ04sQ0FBQyxDQUFDOzs7O0FDcERGLE1BQ00sUUFBUyxTQUFRLGdCQUFnQjtJQVFuQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQWEsRUFBRSxVQUF1QjtRQUNsRCxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUM7UUFFL0IsTUFBTSxZQUFZLEdBQUc7WUFDakIsQ0FBQyxFQUFFLGFBQWE7WUFDaEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztZQUNuQixTQUFTLEVBQUUsQ0FBQztZQUNaLENBQUMsRUFBRSxDQUFDO1lBQ0osQ0FBQyxFQUFFLENBQUM7WUFDSixhQUFhO1lBQ2IsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztTQUM3QixDQUFDO1FBQ0YsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ2xDLFlBQVksQ0FBQyxVQUFVLENBQUMsR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsTUFBTSxDQUFDO1FBQ3pDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxLQUFLLGFBQUwsS0FBSyx1QkFBTCxLQUFLLENBQUUsT0FBTyxDQUFDO1FBRXpDLGFBQWE7UUFDYixNQUFNLFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4QyxRQUFRLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNyQixRQUFRLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUNqQyxPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRUQsV0FBVztRQUNQLE1BQU0sWUFBWSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFDeEMsYUFBYTtRQUNiLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNaLGFBQWE7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3RCLGFBQWE7UUFDYixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCx3QkFBd0IsQ0FBQyxZQUF5QjtRQUM5QyxNQUFNLFFBQVEsR0FBRyxFQUFFLENBQUM7UUFDcEIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBRWpCLGdDQUFnQztRQUNoQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN2QixLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDeEIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsd0JBQXdCO1lBQzlDLElBQUksR0FBRyxHQUFHLFFBQVEsSUFBSSxFQUFFO2dCQUFFLE9BQU87WUFDakMsTUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkQsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDdEUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDO1lBQ3hCLGFBQWE7WUFDYixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDZixRQUFRLEdBQUcsR0FBRyxDQUFDO1FBQ25CLENBQUMsQ0FBQztRQUVGLG9DQUFvQztRQUNwQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUM5QyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDOUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQztZQUNyQyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQy9CLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUV4QixJQUFJLElBQUksQ0FBQyxVQUFVO2dCQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUMzQyxDQUFDLENBQUM7UUFFRixvQ0FBb0M7UUFDcEMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDdkIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXRCLGlDQUFpQztZQUNqQyxNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFFNUIsc0JBQXNCO1lBQ3RCLE1BQU0sQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3JFLENBQUMsQ0FBQztRQUVGLDJEQUEyRDtRQUMzRCxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUN2QixJQUFJLEtBQUssQ0FBQyxPQUFPO2dCQUFFLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLG1DQUFtQztZQUM5RSxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDeEIsSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQ2pFLElBQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN0RCxhQUFhO1lBQ2IsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLENBQUMsQ0FBQztRQUVGLHFCQUFxQjtRQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDN0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzdDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0o7QUF2R0QsMkJBdUdDIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24oKXtmdW5jdGlvbiByKGUsbix0KXtmdW5jdGlvbiBvKGksZil7aWYoIW5baV0pe2lmKCFlW2ldKXt2YXIgYz1cImZ1bmN0aW9uXCI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFmJiZjKXJldHVybiBjKGksITApO2lmKHUpcmV0dXJuIHUoaSwhMCk7dmFyIGE9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitpK1wiJ1wiKTt0aHJvdyBhLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsYX12YXIgcD1uW2ldPXtleHBvcnRzOnt9fTtlW2ldWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKHIpe3ZhciBuPWVbaV1bMV1bcl07cmV0dXJuIG8obnx8cil9LHAscC5leHBvcnRzLHIsZSxuLHQpfXJldHVybiBuW2ldLmV4cG9ydHN9Zm9yKHZhciB1PVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmUsaT0wO2k8dC5sZW5ndGg7aSsrKW8odFtpXSk7cmV0dXJuIG99cmV0dXJuIHJ9KSgpIiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsImZ1bmN0aW9uIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywga2V5LCBhcmcpIHtcbiAgdHJ5IHtcbiAgICB2YXIgaW5mbyA9IGdlbltrZXldKGFyZyk7XG4gICAgdmFyIHZhbHVlID0gaW5mby52YWx1ZTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZWplY3QoZXJyb3IpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChpbmZvLmRvbmUpIHtcbiAgICByZXNvbHZlKHZhbHVlKTtcbiAgfSBlbHNlIHtcbiAgICBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oX25leHQsIF90aHJvdyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX2FzeW5jVG9HZW5lcmF0b3IoZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciBnZW4gPSBmbi5hcHBseShzZWxmLCBhcmdzKTtcblxuICAgICAgZnVuY3Rpb24gX25leHQodmFsdWUpIHtcbiAgICAgICAgYXN5bmNHZW5lcmF0b3JTdGVwKGdlbiwgcmVzb2x2ZSwgcmVqZWN0LCBfbmV4dCwgX3Rocm93LCBcIm5leHRcIiwgdmFsdWUpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBfdGhyb3coZXJyKSB7XG4gICAgICAgIGFzeW5jR2VuZXJhdG9yU3RlcChnZW4sIHJlc29sdmUsIHJlamVjdCwgX25leHQsIF90aHJvdywgXCJ0aHJvd1wiLCBlcnIpO1xuICAgICAgfVxuXG4gICAgICBfbmV4dCh1bmRlZmluZWQpO1xuICAgIH0pO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY1RvR2VuZXJhdG9yOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5OyIsInZhciBzdXBlclByb3BCYXNlID0gcmVxdWlyZShcIi4vc3VwZXJQcm9wQmFzZVwiKTtcblxuZnVuY3Rpb24gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlcikge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgIT09IFwidW5kZWZpbmVkXCIgJiYgUmVmbGVjdC5nZXQpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9nZXQgPSBSZWZsZWN0LmdldDtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF9nZXQgPSBmdW5jdGlvbiBfZ2V0KHRhcmdldCwgcHJvcGVydHksIHJlY2VpdmVyKSB7XG4gICAgICB2YXIgYmFzZSA9IHN1cGVyUHJvcEJhc2UodGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICBpZiAoIWJhc2UpIHJldHVybjtcbiAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihiYXNlLCBwcm9wZXJ0eSk7XG5cbiAgICAgIGlmIChkZXNjLmdldCkge1xuICAgICAgICByZXR1cm4gZGVzYy5nZXQuY2FsbChyZWNlaXZlcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBkZXNjLnZhbHVlO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX2dldCh0YXJnZXQsIHByb3BlcnR5LCByZWNlaXZlciB8fCB0YXJnZXQpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXQ7IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzOyIsImZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7XG4gIHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7XG4gICAgXCJkZWZhdWx0XCI6IG9ialxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQ7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwiZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgcmV0dXJuIG87XG4gIH07XG5cbiAgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2V0UHJvdG90eXBlT2Y7IiwidmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZShcIi4vZ2V0UHJvdG90eXBlT2ZcIik7XG5cbmZ1bmN0aW9uIF9zdXBlclByb3BCYXNlKG9iamVjdCwgcHJvcGVydHkpIHtcbiAgd2hpbGUgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSkpIHtcbiAgICBvYmplY3QgPSBnZXRQcm90b3R5cGVPZihvYmplY3QpO1xuICAgIGlmIChvYmplY3QgPT09IG51bGwpIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc3VwZXJQcm9wQmFzZTsiLCJmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF90eXBlb2Y7IiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZVwiKTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxudmFyIHJ1bnRpbWUgPSAoZnVuY3Rpb24gKGV4cG9ydHMpIHtcbiAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcbiAgdmFyIGhhc093biA9IE9wLmhhc093blByb3BlcnR5O1xuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcbiAgdmFyIGl0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5pdGVyYXRvciB8fCBcIkBAaXRlcmF0b3JcIjtcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcblxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXG4gICAgdmFyIHByb3RvR2VuZXJhdG9yID0gb3V0ZXJGbiAmJiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvciA/IG91dGVyRm4gOiBHZW5lcmF0b3I7XG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcblxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXG4gICAgZ2VuZXJhdG9yLl9pbnZva2UgPSBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfVxuICBleHBvcnRzLndyYXAgPSB3cmFwO1xuXG4gIC8vIFRyeS9jYXRjaCBoZWxwZXIgdG8gbWluaW1pemUgZGVvcHRpbWl6YXRpb25zLiBSZXR1cm5zIGEgY29tcGxldGlvblxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXG4gIC8vIGludm9rZWQgd2l0aG91dCBhcmd1bWVudHMsIGJ1dCBpbiBhbGwgdGhlIGNhc2VzIHdlIGNhcmUgYWJvdXQgd2VcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXG4gIC8vIHRoZSBtZXRob2QgdGFrZXMgZXhhY3RseSBvbmUgYXJndW1lbnQsIHNpbmNlIHRoYXQgaGFwcGVucyB0byBiZSB0cnVlXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXG4gIC8vIGhhcyBhIHN0YWJsZSBzaGFwZSBhbmQgc28gaG9wZWZ1bGx5IHNob3VsZCBiZSBjaGVhcCB0byBhbGxvY2F0ZS5cbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwibm9ybWFsXCIsIGFyZzogZm4uY2FsbChvYmosIGFyZykgfTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcbiAgICB9XG4gIH1cblxuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRTdGFydCA9IFwic3VzcGVuZGVkU3RhcnRcIjtcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XG4gIHZhciBHZW5TdGF0ZUNvbXBsZXRlZCA9IFwiY29tcGxldGVkXCI7XG5cbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xuICAvLyBicmVha2luZyBvdXQgb2YgdGhlIGRpc3BhdGNoIHN3aXRjaCBzdGF0ZW1lbnQuXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XG5cbiAgLy8gRHVtbXkgY29uc3RydWN0b3IgZnVuY3Rpb25zIHRoYXQgd2UgdXNlIGFzIHRoZSAuY29uc3RydWN0b3IgYW5kXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxuICAvLyBtaW5pZmllciBub3QgdG8gbWFuZ2xlIHRoZSBuYW1lcyBvZiB0aGVzZSB0d28gZnVuY3Rpb25zLlxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKCkge31cblxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XG4gIC8vIGRvbid0IG5hdGl2ZWx5IHN1cHBvcnQgaXQuXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHcC5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxuICAgIEdlbmVyYXRvckZ1bmN0aW9uLmRpc3BsYXlOYW1lID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXG4gIC8vIEl0ZXJhdG9yIGludGVyZmFjZSBpbiB0ZXJtcyBvZiBhIHNpbmdsZSAuX2ludm9rZSBtZXRob2QuXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcbiAgICAgIHByb3RvdHlwZVttZXRob2RdID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuXG4gIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbiA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcbiAgICByZXR1cm4gY3RvclxuICAgICAgPyBjdG9yID09PSBHZW5lcmF0b3JGdW5jdGlvbiB8fFxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cbiAgICAgICAgKGN0b3IuZGlzcGxheU5hbWUgfHwgY3Rvci5uYW1lKSA9PT0gXCJHZW5lcmF0b3JGdW5jdGlvblwiXG4gICAgICA6IGZhbHNlO1xuICB9O1xuXG4gIGV4cG9ydHMubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcbiAgICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihnZW5GdW4sIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xuICAgICAgaWYgKCEodG9TdHJpbmdUYWdTeW1ib2wgaW4gZ2VuRnVuKSkge1xuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xuICAgICAgfVxuICAgIH1cbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XG4gICAgcmV0dXJuIGdlbkZ1bjtcbiAgfTtcblxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cbiAgLy8gYHlpZWxkIHJlZ2VuZXJhdG9yUnVudGltZS5hd3JhcCh4KWAsIHNvIHRoYXQgdGhlIHJ1bnRpbWUgY2FuIHRlc3RcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxuICBleHBvcnRzLmF3cmFwID0gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IsIFByb21pc2VJbXBsKSB7XG4gICAgZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgcmVqZWN0KHJlY29yZC5hcmcpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XG4gICAgICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlICYmXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIikpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZUltcGwucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpbnZva2UoXCJuZXh0XCIsIHZhbHVlLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcbiAgICAgICAgICAvLyB0aGUgLnZhbHVlIG9mIHRoZSBQcm9taXNlPHt2YWx1ZSxkb25lfT4gcmVzdWx0IGZvciB0aGVcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi5cbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XG4gICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9LCBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgIC8vIElmIGEgcmVqZWN0ZWQgUHJvbWlzZSB3YXMgeWllbGRlZCwgdGhyb3cgdGhlIHJlamVjdGlvbiBiYWNrXG4gICAgICAgICAgLy8gaW50byB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIHNvIGl0IGNhbiBiZSBoYW5kbGVkIHRoZXJlLlxuICAgICAgICAgIHJldHVybiBpbnZva2UoXCJ0aHJvd1wiLCBlcnJvciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcblxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2VJbXBsKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwcmV2aW91c1Byb21pc2UgPVxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxuICAgICAgICAvLyBzbyB0aGF0IHJlc3VsdHMgYXJlIGFsd2F5cyBkZWxpdmVyZWQgaW4gdGhlIGNvcnJlY3Qgb3JkZXIuIElmXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxuICAgICAgICAvLyBzbyB0aGF0IHRoZSBhc3luYyBnZW5lcmF0b3IgZnVuY3Rpb24gaGFzIHRoZSBvcHBvcnR1bml0eSB0byBkb1xuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXG4gICAgICAgIC8vIGV4ZWN1dG9yIGNhbGxiYWNrLCBhbmQgd2h5IGFzeW5jIGZ1bmN0aW9ucyBzeW5jaHJvbm91c2x5XG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XG4gICAgICAgIC8vIGltcG9ydGFudCB0byBnZXQgdGhpcyByaWdodCwgZXZlbiB0aG91Z2ggaXQgcmVxdWlyZXMgY2FyZS5cbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXG4gICAgICAgICAgLy8gQXZvaWQgcHJvcGFnYXRpbmcgZmFpbHVyZXMgdG8gUHJvbWlzZXMgcmV0dXJuZWQgYnkgbGF0ZXJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcbiAgICAgICAgKSA6IGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCk7XG4gICAgfVxuXG4gICAgLy8gRGVmaW5lIHRoZSB1bmlmaWVkIGhlbHBlciBtZXRob2QgdGhhdCBpcyB1c2VkIHRvIGltcGxlbWVudCAubmV4dCxcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xuICB9XG5cbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcbiAgQXN5bmNJdGVyYXRvci5wcm90b3R5cGVbYXN5bmNJdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xuICAgIGlmIChtZXRob2QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIC8vIE5vdGU6IFtcInJldHVyblwiXSBtdXN0IGJlIHVzZWQgZm9yIEVTMyBwYXJzaW5nIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGlmIChkZWxlZ2F0ZS5pdGVyYXRvcltcInJldHVyblwiXSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgYSByZXR1cm4gbWV0aG9kLCBnaXZlIGl0IGFcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2gobWV0aG9kLCBkZWxlZ2F0ZS5pdGVyYXRvciwgY29udGV4dC5hcmcpO1xuXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICB2YXIgaW5mbyA9IHJlY29yZC5hcmc7XG5cbiAgICBpZiAoISBpbmZvKSB7XG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG5cbiAgICBpZiAoaW5mby5kb25lKSB7XG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHRbZGVsZWdhdGUucmVzdWx0TmFtZV0gPSBpbmZvLnZhbHVlO1xuXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXG4gICAgICBjb250ZXh0Lm5leHQgPSBkZWxlZ2F0ZS5uZXh0TG9jO1xuXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcbiAgICAgIC8vIGV4Y2VwdGlvbiwgbGV0IHRoZSBvdXRlciBnZW5lcmF0b3IgcHJvY2VlZCBub3JtYWxseS4gSWZcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcbiAgICAgIC8vIFwicmV0dXJuXCIsIGFsbG93IHRoZSBvcmlnaW5hbCAucmV0dXJuIGNhbGwgdG8gY29udGludWUgaW4gdGhlXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxuICAgICAgcmV0dXJuIGluZm87XG4gICAgfVxuXG4gICAgLy8gVGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGlzIGZpbmlzaGVkLCBzbyBmb3JnZXQgaXQgYW5kIGNvbnRpbnVlIHdpdGhcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xuICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICB9XG5cbiAgLy8gRGVmaW5lIEdlbmVyYXRvci5wcm90b3R5cGUue25leHQsdGhyb3cscmV0dXJufSBpbiB0ZXJtcyBvZiB0aGVcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xuXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBHcC50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcblxuICAgIGlmICgxIGluIGxvY3MpIHtcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcbiAgICB9XG5cbiAgICBpZiAoMiBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5maW5hbGx5TG9jID0gbG9jc1syXTtcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcbiAgICB9XG5cbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XG4gIH1cblxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XG4gICAgcmVjb3JkLnR5cGUgPSBcIm5vcm1hbFwiO1xuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XG4gIH1cblxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XG4gICAgLy8gVGhlIHJvb3QgZW50cnkgb2JqZWN0IChlZmZlY3RpdmVseSBhIHRyeSBzdGF0ZW1lbnQgd2l0aG91dCBhIGNhdGNoXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cbiAgICB0aGlzLnRyeUVudHJpZXMgPSBbeyB0cnlMb2M6IFwicm9vdFwiIH1dO1xuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xuICB9XG5cbiAgZXhwb3J0cy5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICB9XG4gICAga2V5cy5yZXZlcnNlKCk7XG5cbiAgICAvLyBSYXRoZXIgdGhhbiByZXR1cm5pbmcgYW4gb2JqZWN0IHdpdGggYSBuZXh0IG1ldGhvZCwgd2Uga2VlcFxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICB3aGlsZSAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XG4gICAgICAgICAgbmV4dC52YWx1ZSA9IGtleTtcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUbyBhdm9pZCBjcmVhdGluZyBhbiBhZGRpdGlvbmFsIG9iamVjdCwgd2UganVzdCBoYW5nIHRoZSAudmFsdWVcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cbiAgICAgIG5leHQuZG9uZSA9IHRydWU7XG4gICAgICByZXR1cm4gbmV4dDtcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xuICAgIGlmIChpdGVyYWJsZSkge1xuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRvck1ldGhvZC5jYWxsKGl0ZXJhYmxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBpdGVyYWJsZS5uZXh0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgICAgd2hpbGUgKCsraSA8IGl0ZXJhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XG4gICAgICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xuICAgICAgICAgIG5leHQuZG9uZSA9IHRydWU7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dDtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYW4gaXRlcmF0b3Igd2l0aCBubyB2YWx1ZXMuXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xuICB9XG4gIGV4cG9ydHMudmFsdWVzID0gdmFsdWVzO1xuXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG5cbiAgQ29udGV4dC5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXG5cbiAgICByZXNldDogZnVuY3Rpb24oc2tpcFRlbXBSZXNldCkge1xuICAgICAgdGhpcy5wcmV2ID0gMDtcbiAgICAgIHRoaXMubmV4dCA9IDA7XG4gICAgICAvLyBSZXNldHRpbmcgY29udGV4dC5fc2VudCBmb3IgbGVnYWN5IHN1cHBvcnQgb2YgQmFiZWwnc1xuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmRvbmUgPSBmYWxzZTtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xuXG4gICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG5cbiAgICAgIHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKHJlc2V0VHJ5RW50cnkpO1xuXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzKSB7XG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXG4gICAgICAgICAgICAgIGhhc093bi5jYWxsKHRoaXMsIG5hbWUpICYmXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xuICAgICAgdGhpcy5kb25lID0gdHJ1ZTtcblxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcbiAgICAgIHZhciByb290UmVjb3JkID0gcm9vdEVudHJ5LmNvbXBsZXRpb247XG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XG4gICAgfSxcblxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcbiAgICAgIGlmICh0aGlzLmRvbmUpIHtcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xuICAgICAgfVxuXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcbiAgICAgICAgcmVjb3JkLnR5cGUgPSBcInRocm93XCI7XG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcblxuICAgICAgICBpZiAoY2F1Z2h0KSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcbiAgICAgICAgICAvLyB0aGVuIGxldCB0aGF0IGNhdGNoIGJsb2NrIGhhbmRsZSB0aGUgZXhjZXB0aW9uIG5vcm1hbGx5LlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gXCJyb290XCIpIHtcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xuICAgICAgICAgIC8vIHRocm93IHRoZSBleGNlcHRpb24uXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XG4gICAgICAgICAgdmFyIGhhc0ZpbmFsbHkgPSBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpO1xuXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNDYXRjaCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbChlbnRyeSwgXCJmaW5hbGx5TG9jXCIpICYmXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgIHR5cGUgPT09IFwiY29udGludWVcIikgJiZcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xuICAgICAgICAvLyBJZ25vcmUgdGhlIGZpbmFsbHkgZW50cnkgaWYgY29udHJvbCBpcyBub3QganVtcGluZyB0byBhXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XG4gICAgICByZWNvcmQudHlwZSA9IHR5cGU7XG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xuXG4gICAgICBpZiAoZmluYWxseUVudHJ5KSB7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xuICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMuY29tcGxldGUocmVjb3JkKTtcbiAgICB9LFxuXG4gICAgY29tcGxldGU6IGZ1bmN0aW9uKHJlY29yZCwgYWZ0ZXJMb2MpIHtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XG4gICAgICB9XG5cbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XG4gICAgICAgICAgcmVjb3JkLnR5cGUgPT09IFwiY29udGludWVcIikge1xuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICB0aGlzLnJ2YWwgPSB0aGlzLmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcbiAgICAgIH0gZWxzZSBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIgJiYgYWZ0ZXJMb2MpIHtcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH0sXG5cbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xuICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIFwiY2F0Y2hcIjogZnVuY3Rpb24odHJ5TG9jKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA9PT0gdHJ5TG9jKSB7XG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICAgIHZhciB0aHJvd24gPSByZWNvcmQuYXJnO1xuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aHJvd247XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcIik7XG4gICAgfSxcblxuICAgIGRlbGVnYXRlWWllbGQ6IGZ1bmN0aW9uKGl0ZXJhYmxlLCByZXN1bHROYW1lLCBuZXh0TG9jKSB7XG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcbiAgICAgICAgcmVzdWx0TmFtZTogcmVzdWx0TmFtZSxcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xuICAgICAgfTtcblxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxuICAgICAgICAvLyBhY2NpZGVudGFsbHkgcGFzcyBpdCBvbiB0byB0aGUgZGVsZWdhdGUuXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmVnYXJkbGVzcyBvZiB3aGV0aGVyIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZVxuICAvLyBvciBub3QsIHJldHVybiB0aGUgcnVudGltZSBvYmplY3Qgc28gdGhhdCB3ZSBjYW4gZGVjbGFyZSB0aGUgdmFyaWFibGVcbiAgLy8gcmVnZW5lcmF0b3JSdW50aW1lIGluIHRoZSBvdXRlciBzY29wZSwgd2hpY2ggYWxsb3dzIHRoaXMgbW9kdWxlIHRvIGJlXG4gIC8vIGluamVjdGVkIGVhc2lseSBieSBgYmluL3JlZ2VuZXJhdG9yIC0taW5jbHVkZS1ydW50aW1lIHNjcmlwdC5qc2AuXG4gIHJldHVybiBleHBvcnRzO1xuXG59KFxuICAvLyBJZiB0aGlzIHNjcmlwdCBpcyBleGVjdXRpbmcgYXMgYSBDb21tb25KUyBtb2R1bGUsIHVzZSBtb2R1bGUuZXhwb3J0c1xuICAvLyBhcyB0aGUgcmVnZW5lcmF0b3JSdW50aW1lIG5hbWVzcGFjZS4gT3RoZXJ3aXNlIGNyZWF0ZSBhIG5ldyBlbXB0eVxuICAvLyBvYmplY3QuIEVpdGhlciB3YXksIHRoZSByZXN1bHRpbmcgb2JqZWN0IHdpbGwgYmUgdXNlZCB0byBpbml0aWFsaXplXG4gIC8vIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgdmFyaWFibGUgYXQgdGhlIHRvcCBvZiB0aGlzIGZpbGUuXG4gIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgPyBtb2R1bGUuZXhwb3J0cyA6IHt9XG4pKTtcblxudHJ5IHtcbiAgcmVnZW5lcmF0b3JSdW50aW1lID0gcnVudGltZTtcbn0gY2F0Y2ggKGFjY2lkZW50YWxTdHJpY3RNb2RlKSB7XG4gIC8vIFRoaXMgbW9kdWxlIHNob3VsZCBub3QgYmUgcnVubmluZyBpbiBzdHJpY3QgbW9kZSwgc28gdGhlIGFib3ZlXG4gIC8vIGFzc2lnbm1lbnQgc2hvdWxkIGFsd2F5cyB3b3JrIHVubGVzcyBzb21ldGhpbmcgaXMgbWlzY29uZmlndXJlZC4gSnVzdFxuICAvLyBpbiBjYXNlIHJ1bnRpbWUuanMgYWNjaWRlbnRhbGx5IHJ1bnMgaW4gc3RyaWN0IG1vZGUsIHdlIGNhbiBlc2NhcGVcbiAgLy8gc3RyaWN0IG1vZGUgdXNpbmcgYSBnbG9iYWwgRnVuY3Rpb24gY2FsbC4gVGhpcyBjb3VsZCBjb25jZWl2YWJseSBmYWlsXG4gIC8vIGlmIGEgQ29udGVudCBTZWN1cml0eSBQb2xpY3kgZm9yYmlkcyB1c2luZyBGdW5jdGlvbiwgYnV0IGluIHRoYXQgY2FzZVxuICAvLyB0aGUgcHJvcGVyIHNvbHV0aW9uIGlzIHRvIGZpeCB0aGUgYWNjaWRlbnRhbCBzdHJpY3QgbW9kZSBwcm9ibGVtLiBJZlxuICAvLyB5b3UndmUgbWlzY29uZmlndXJlZCB5b3VyIGJ1bmRsZXIgdG8gZm9yY2Ugc3RyaWN0IG1vZGUgYW5kIGFwcGxpZWQgYVxuICAvLyBDU1AgdG8gZm9yYmlkIEZ1bmN0aW9uLCBhbmQgeW91J3JlIG5vdCB3aWxsaW5nIHRvIGZpeCBlaXRoZXIgb2YgdGhvc2VcbiAgLy8gcHJvYmxlbXMsIHBsZWFzZSBkZXRhaWwgeW91ciB1bmlxdWUgcHJlZGljYW1lbnQgaW4gYSBHaXRIdWIgaXNzdWUuXG4gIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG59XG4iLCJpbXBvcnQgeyBTaGFkb3dydW5Sb2xsZXIgfSBmcm9tICcuLi9yb2xscy9TaGFkb3dydW5Sb2xsZXInO1xyXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi4vaGVscGVycyc7XHJcbmltcG9ydCB7IFNSNUl0ZW0gfSBmcm9tICcuLi9pdGVtL1NSNUl0ZW0nO1xyXG5pbXBvcnQgQWN0b3JSb2xsT3B0aW9ucyA9IFNoYWRvd3J1bi5BY3RvclJvbGxPcHRpb25zO1xyXG5pbXBvcnQgRGVmZW5zZVJvbGxPcHRpb25zID0gU2hhZG93cnVuLkRlZmVuc2VSb2xsT3B0aW9ucztcclxuaW1wb3J0IFNvYWtSb2xsT3B0aW9ucyA9IFNoYWRvd3J1bi5Tb2FrUm9sbE9wdGlvbnM7XHJcbmltcG9ydCBBdHRyaWJ1dGVGaWVsZCA9IFNoYWRvd3J1bi5BdHRyaWJ1dGVGaWVsZDtcclxuaW1wb3J0IFNraWxsUm9sbE9wdGlvbnMgPSBTaGFkb3dydW4uU2tpbGxSb2xsT3B0aW9ucztcclxuaW1wb3J0IFNraWxsRmllbGQgPSBTaGFkb3dydW4uU2tpbGxGaWVsZDtcclxuaW1wb3J0IE1vZExpc3QgPSBTaGFkb3dydW4uTW9kTGlzdDtcclxuaW1wb3J0IEJhc2VWYWx1ZVBhaXIgPSBTaGFkb3dydW4uQmFzZVZhbHVlUGFpcjtcclxuaW1wb3J0IE1vZGlmaWFibGVWYWx1ZSA9IFNoYWRvd3J1bi5Nb2RpZmlhYmxlVmFsdWU7XHJcbmltcG9ydCBMYWJlbEZpZWxkID0gU2hhZG93cnVuLkxhYmVsRmllbGQ7XHJcbmltcG9ydCBMaW1pdEZpZWxkID0gU2hhZG93cnVuLkxpbWl0RmllbGQ7XHJcbmltcG9ydCB7IFNZU1RFTV9OQU1FIH0gZnJvbSAnLi4vY29uc3RhbnRzJztcclxuaW1wb3J0IFNSNUFjdG9yVHlwZSA9IFNoYWRvd3J1bi5TUjVBY3RvclR5cGU7XHJcbmltcG9ydCB7IFBhcnRzTGlzdCB9IGZyb20gJy4uL3BhcnRzL1BhcnRzTGlzdCc7XHJcbmltcG9ydCB7IEFjdG9yUHJlcEZhY3RvcnkgfSBmcm9tICcuL3ByZXAvQWN0b3JQcmVwRmFjdG9yeSc7XHJcbmltcG9ydCBEYW1hZ2VEYXRhID0gU2hhZG93cnVuLkRhbWFnZURhdGE7XHJcbmltcG9ydCBEYW1hZ2VFbGVtZW50ID0gU2hhZG93cnVuLkRhbWFnZUVsZW1lbnQ7XHJcbmltcG9ydCBFZGdlQXR0cmlidXRlRmllbGQgPSBTaGFkb3dydW4uRWRnZUF0dHJpYnV0ZUZpZWxkO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNSNUFjdG9yIGV4dGVuZHMgQWN0b3Ige1xyXG4gICAgYXN5bmMgdXBkYXRlKGRhdGEsIG9wdGlvbnM/KSB7XHJcbiAgICAgICAgYXdhaXQgc3VwZXIudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xyXG4gICAgICAgIC8vIHRyaWdnZXIgdXBkYXRlIGZvciBhbGwgaXRlbXMgd2l0aCBhY3Rpb25cclxuICAgICAgICAvLyBuZWVkZWQgZm9yIHJvbGxzIHRvIHByb3Blcmx5IHVwZGF0ZSB3aGVuIGl0ZW1zIG9yIGF0dHJpYnV0ZXMgdXBkYXRlXHJcbiAgICAgICAgY29uc3QgaXRlbVVwZGF0ZXM6IEl0ZW1bXSA9IFtdO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIHRoaXMuZGF0YS5pdGVtcykge1xyXG4gICAgICAgICAgICBpZiAoaXRlbSAmJiBpdGVtLmRhdGEuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtVXBkYXRlcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMudXBkYXRlRW1iZWRkZWRFbnRpdHkoJ093bmVkSXRlbScsIGl0ZW1VcGRhdGVzKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRPdmVyd2F0Y2hTY29yZSgpIHtcclxuICAgICAgICBjb25zdCBvcyA9IHRoaXMuZ2V0RmxhZyhTWVNURU1fTkFNRSwgJ292ZXJ3YXRjaFNjb3JlJyk7XHJcbiAgICAgICAgcmV0dXJuIG9zICE9PSB1bmRlZmluZWQgPyBvcyA6IDA7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgc2V0T3ZlcndhdGNoU2NvcmUodmFsdWUpIHtcclxuICAgICAgICBjb25zdCBudW0gPSBwYXJzZUludCh2YWx1ZSk7XHJcbiAgICAgICAgaWYgKCFpc05hTihudW0pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNldEZsYWcoU1lTVEVNX05BTUUsICdvdmVyd2F0Y2hTY29yZScsIG51bSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByZXBhcmVEYXRhKCkge1xyXG4gICAgICAgIHN1cGVyLnByZXBhcmVEYXRhKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFjdG9yRGF0YSA9IHRoaXMuZGF0YSBhcyBTUjVBY3RvclR5cGU7XHJcbiAgICAgICAgY29uc3QgcHJlcHBlciA9IEFjdG9yUHJlcEZhY3RvcnkuQ3JlYXRlKGFjdG9yRGF0YSk7XHJcbiAgICAgICAgaWYgKHByZXBwZXIpIHtcclxuICAgICAgICAgICAgcHJlcHBlci5wcmVwYXJlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldE1vZGlmaWVyKG1vZGlmaWVyTmFtZTogc3RyaW5nKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRhdGEubW9kaWZpZXJzW21vZGlmaWVyTmFtZV07XHJcbiAgICB9XHJcblxyXG4gICAgZmluZEFjdGl2ZVNraWxsKHNraWxsTmFtZT86IHN0cmluZyk6IFNraWxsRmllbGQgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmIChza2lsbE5hbWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRhdGEuc2tpbGxzLmFjdGl2ZVtza2lsbE5hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRBdHRyaWJ1dGUoYXR0cmlidXRlTmFtZT86IHN0cmluZyk6IEF0dHJpYnV0ZUZpZWxkIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoYXR0cmlidXRlTmFtZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzW2F0dHJpYnV0ZU5hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVxdWlwcGVkTWF0cml4RGV2aWNlKCk6IFNSNUl0ZW0gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbmQoKGl0ZW06IFNSNUl0ZW0pID0+IGl0ZW0uaXNEZXZpY2UoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RXF1aXBwZWRBcm1vcigpOiBTUjVJdGVtW10gfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcigoaXRlbTogU1I1SXRlbSkgPT4gaXRlbS5pc0FybW9yKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGZpbmRMaW1pdEZyb21BdHRyaWJ1dGUoYXR0cmlidXRlTmFtZT86IHN0cmluZyk6IExpbWl0RmllbGQgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmIChhdHRyaWJ1dGVOYW1lID09PSB1bmRlZmluZWQpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgYXR0cmlidXRlID0gdGhpcy5maW5kQXR0cmlidXRlKGF0dHJpYnV0ZU5hbWUpO1xyXG4gICAgICAgIGlmICghYXR0cmlidXRlPy5saW1pdCkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kTGltaXQoYXR0cmlidXRlLmxpbWl0KTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kTGltaXQobGltaXROYW1lPzogc3RyaW5nKTogTGltaXRGaWVsZCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgaWYgKCFsaW1pdE5hbWUpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLmxpbWl0c1tsaW1pdE5hbWVdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFdvdW5kTW9kaWZpZXIoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gLTEgKiB0aGlzLmRhdGEuZGF0YS53b3VuZHM/LnZhbHVlIHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RWRnZSgpOiBFZGdlQXR0cmlidXRlRmllbGQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzLmVkZ2U7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXJtb3IoKTogQmFzZVZhbHVlUGFpcjxudW1iZXI+ICYgTW9kaWZpYWJsZVZhbHVlICYgTGFiZWxGaWVsZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLmFybW9yO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE93bmVkSXRlbShpdGVtSWQ6IHN0cmluZyk6IFNSNUl0ZW0gfCBudWxsIHtcclxuICAgICAgICByZXR1cm4gKHN1cGVyLmdldE93bmVkSXRlbShpdGVtSWQpIGFzIHVua25vd24pIGFzIFNSNUl0ZW07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TWF0cml4RGV2aWNlKCk6IFNSNUl0ZW0gfCB1bmRlZmluZWQgfCBudWxsIHtcclxuICAgICAgICBjb25zdCBtYXRyaXggPSB0aGlzLmRhdGEuZGF0YS5tYXRyaXg7XHJcbiAgICAgICAgaWYgKG1hdHJpeC5kZXZpY2UpIHJldHVybiB0aGlzLmdldE93bmVkSXRlbShtYXRyaXguZGV2aWNlKTtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZ1bGxEZWZlbnNlQXR0cmlidXRlKCk6IEF0dHJpYnV0ZUZpZWxkIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBsZXQgYXR0ID0gdGhpcy5kYXRhLmRhdGEuZnVsbF9kZWZlbnNlX2F0dHJpYnV0ZTtcclxuICAgICAgICBpZiAoIWF0dCkgYXR0ID0gJ3dpbGxwb3dlcic7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmluZEF0dHJpYnV0ZShhdHQpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEVxdWlwcGVkV2VhcG9ucygpOiBTUjVJdGVtW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zLmZpbHRlcigoaXRlbSkgPT4gaXRlbS5pc0VxdWlwcGVkKCkgJiYgaXRlbS5kYXRhLnR5cGUgPT09ICd3ZWFwb24nKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZWNvaWxDb21wZW5zYXRpb24oKTogbnVtYmVyIHtcclxuICAgICAgICBsZXQgdG90YWwgPSAxOyAvLyBhbHdheXMgZ2V0IDFcclxuICAgICAgICBjb25zdCBzdHJlbmd0aCA9IHRoaXMuZmluZEF0dHJpYnV0ZSgnc3RyZW5ndGgnKTtcclxuICAgICAgICBpZiAoc3RyZW5ndGgpIHtcclxuICAgICAgICAgICAgdG90YWwgKz0gTWF0aC5jZWlsKHN0cmVuZ3RoLnZhbHVlIC8gMyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0b3RhbDtcclxuICAgIH1cclxuXHJcbiAgICBhZGRLbm93bGVkZ2VTa2lsbChjYXRlZ29yeSwgc2tpbGw/KSB7XHJcbiAgICAgICAgY29uc3QgZGVmYXVsdFNraWxsID0ge1xyXG4gICAgICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICAgICAgc3BlY3M6IFtdLFxyXG4gICAgICAgICAgICBiYXNlOiAwLFxyXG4gICAgICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICAgICAgbW9kOiAwLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc2tpbGwgPSB7XHJcbiAgICAgICAgICAgIC4uLmRlZmF1bHRTa2lsbCxcclxuICAgICAgICAgICAgLi4uc2tpbGwsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgaWQgPSByYW5kb21JRCgxNik7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB7fTtcclxuICAgICAgICB2YWx1ZVtpZF0gPSBza2lsbDtcclxuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBgZGF0YS5za2lsbHMua25vd2xlZGdlLiR7Y2F0ZWdvcnl9LnZhbHVlYDtcclxuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0ge307XHJcbiAgICAgICAgdXBkYXRlRGF0YVtmaWVsZE5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGUodXBkYXRlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlTGFuZ3VhZ2VTa2lsbChza2lsbElkKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB7fTtcclxuICAgICAgICB2YWx1ZVtza2lsbElkXSA9IHsgX2RlbGV0ZTogdHJ1ZSB9O1xyXG4gICAgICAgIHRoaXMudXBkYXRlKHsgJ2RhdGEuc2tpbGxzLmxhbmd1YWdlLnZhbHVlJzogdmFsdWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTGFuZ3VhZ2VTa2lsbChza2lsbCkge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHRTa2lsbCA9IHtcclxuICAgICAgICAgICAgbmFtZTogJycsXHJcbiAgICAgICAgICAgIHNwZWNzOiBbXSxcclxuICAgICAgICAgICAgYmFzZTogMCxcclxuICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgIG1vZDogMCxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHNraWxsID0ge1xyXG4gICAgICAgICAgICAuLi5kZWZhdWx0U2tpbGwsXHJcbiAgICAgICAgICAgIC4uLnNraWxsLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGlkID0gcmFuZG9tSUQoMTYpO1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0ge307XHJcbiAgICAgICAgdmFsdWVbaWRdID0gc2tpbGw7XHJcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gYGRhdGEuc2tpbGxzLmxhbmd1YWdlLnZhbHVlYDtcclxuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0ge307XHJcbiAgICAgICAgdXBkYXRlRGF0YVtmaWVsZE5hbWVdID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy51cGRhdGUodXBkYXRlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlS25vd2xlZGdlU2tpbGwoc2tpbGxJZCwgY2F0ZWdvcnkpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHt9O1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fTtcclxuXHJcbiAgICAgICAgY29uc3QgZGF0YVN0cmluZyA9IGBkYXRhLnNraWxscy5rbm93bGVkZ2UuJHtjYXRlZ29yeX0udmFsdWVgO1xyXG4gICAgICAgIHZhbHVlW3NraWxsSWRdID0geyBfZGVsZXRlOiB0cnVlIH07XHJcbiAgICAgICAgdXBkYXRlRGF0YVtkYXRhU3RyaW5nXSA9IHZhbHVlO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZSh1cGRhdGVEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICByb2xsRmFkZShvcHRpb25zOiBBY3RvclJvbGxPcHRpb25zID0ge30sIGluY29taW5nID0gLTEpIHtcclxuICAgICAgICBjb25zdCB3aWwgPSBkdXBsaWNhdGUodGhpcy5kYXRhLmRhdGEuYXR0cmlidXRlcy53aWxscG93ZXIpO1xyXG4gICAgICAgIGNvbnN0IHJlcyA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzLnJlc29uYW5jZSk7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZGF0YS5kYXRhO1xyXG5cclxuICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQod2lsLmxhYmVsLCB3aWwudmFsdWUpO1xyXG4gICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQocmVzLmxhYmVsLCByZXMudmFsdWUpO1xyXG4gICAgICAgIGlmIChkYXRhLm1vZGlmaWVycy5mYWRlKSBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuQm9udXMnLCBkYXRhLm1vZGlmaWVycy5mYWRlKTtcclxuXHJcbiAgICAgICAgbGV0IHRpdGxlID0gYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdTUjUuUmVzaXN0Jyl9ICR7Z2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRmFkZScpfWA7XHJcbiAgICAgICAgY29uc3QgaW5jb21pbmdEcmFpbiA9IHtcclxuICAgICAgICAgICAgbGFiZWw6ICdTUjUuRmFkZScsXHJcbiAgICAgICAgICAgIHZhbHVlOiBpbmNvbWluZyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBTaGFkb3dydW5Sb2xsZXIuYWR2YW5jZWRSb2xsKHtcclxuICAgICAgICAgICAgZXZlbnQ6IG9wdGlvbnMuZXZlbnQsXHJcbiAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICBhY3RvcjogdGhpcyxcclxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICB3b3VuZHM6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbmNvbWluZ0RyYWluLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJvbGxEcmFpbihvcHRpb25zOiBBY3RvclJvbGxPcHRpb25zID0ge30sIGluY29taW5nID0gLTEpIHtcclxuICAgICAgICBjb25zdCB3aWwgPSBkdXBsaWNhdGUodGhpcy5kYXRhLmRhdGEuYXR0cmlidXRlcy53aWxscG93ZXIpO1xyXG4gICAgICAgIGNvbnN0IGRyYWluQXR0ID0gZHVwbGljYXRlKHRoaXMuZGF0YS5kYXRhLmF0dHJpYnV0ZXNbdGhpcy5kYXRhLmRhdGEubWFnaWMuYXR0cmlidXRlXSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gbmV3IFBhcnRzTGlzdDxudW1iZXI+KCk7XHJcbiAgICAgICAgcGFydHMuYWRkUGFydCh3aWwubGFiZWwsIHdpbC52YWx1ZSk7XHJcbiAgICAgICAgcGFydHMuYWRkUGFydChkcmFpbkF0dC5sYWJlbCwgZHJhaW5BdHQudmFsdWUpO1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGF0YS5tb2RpZmllcnMuZHJhaW4pIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5Cb251cycsIHRoaXMuZGF0YS5kYXRhLm1vZGlmaWVycy5kcmFpbik7XHJcblxyXG4gICAgICAgIGxldCB0aXRsZSA9IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlJlc2lzdCcpfSAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkRyYWluJyl9YDtcclxuICAgICAgICBjb25zdCBpbmNvbWluZ0RyYWluID0ge1xyXG4gICAgICAgICAgICBsYWJlbDogJ1NSNS5EcmFpbicsXHJcbiAgICAgICAgICAgIHZhbHVlOiBpbmNvbWluZyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBTaGFkb3dydW5Sb2xsZXIuYWR2YW5jZWRSb2xsKHtcclxuICAgICAgICAgICAgZXZlbnQ6IG9wdGlvbnMuZXZlbnQsXHJcbiAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICBhY3RvcjogdGhpcyxcclxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICB3b3VuZHM6IGZhbHNlLFxyXG4gICAgICAgICAgICBpbmNvbWluZ0RyYWluLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJvbGxBcm1vcihvcHRpb25zOiBBY3RvclJvbGxPcHRpb25zID0ge30sIHBhcnRzUHJvcHM6IE1vZExpc3Q8bnVtYmVyPiA9IFtdKSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KHBhcnRzUHJvcHMpO1xyXG4gICAgICAgIHRoaXMuX2FkZEFybW9yUGFydHMocGFydHMpO1xyXG4gICAgICAgIHJldHVybiBTaGFkb3dydW5Sb2xsZXIuYWR2YW5jZWRSb2xsKHtcclxuICAgICAgICAgICAgZXZlbnQ6IG9wdGlvbnMuZXZlbnQsXHJcbiAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICBwYXJ0czogcGFydHMubGlzdCxcclxuICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkFybW9yJyksXHJcbiAgICAgICAgICAgIHdvdW5kczogZmFsc2UsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcm9sbERlZmVuc2Uob3B0aW9uczogRGVmZW5zZVJvbGxPcHRpb25zID0ge30sIHBhcnRzUHJvcHM6IE1vZExpc3Q8bnVtYmVyPiA9IFtdKSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KHBhcnRzUHJvcHMpO1xyXG4gICAgICAgIHRoaXMuX2FkZERlZmVuc2VQYXJ0cyhwYXJ0cyk7XHJcbiAgICAgICAgLy8gZnVsbCBkZWZlbnNlIGlzIGFsd2F5cyBhZGRlZFxyXG4gICAgICAgIGNvbnN0IGFjdGl2ZURlZmVuc2VzID0ge1xyXG4gICAgICAgICAgICBmdWxsX2RlZmVuc2U6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnU1I1LkZ1bGxEZWZlbnNlJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdldEZ1bGxEZWZlbnNlQXR0cmlidXRlKCk/LnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgaW5pdE1vZDogLTEwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG1lbGVlIGF0dGFja1xyXG4gICAgICAgIGlmIChvcHRpb25zLmluY29taW5nQXR0YWNrPy5yZWFjaCkge1xyXG4gICAgICAgICAgICBhY3RpdmVEZWZlbnNlc1snZG9kZ2UnXSA9IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnU1I1LkRvZGdlJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmZpbmRBY3RpdmVTa2lsbCgnZ3ltbmFzdGljcycpPy52YWx1ZSxcclxuICAgICAgICAgICAgICAgIGluaXRNb2Q6IC01LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBhY3RpdmVEZWZlbnNlc1snYmxvY2snXSA9IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiAnU1I1LkJsb2NrJyxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmZpbmRBY3RpdmVTa2lsbCgndW5hcm1lZF9jb21iYXQnKT8udmFsdWUsXHJcbiAgICAgICAgICAgICAgICBpbml0TW9kOiAtNSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgZXF1aXBwZWRNZWxlZVdlYXBvbnMgPSB0aGlzLmdldEVxdWlwcGVkV2VhcG9ucygpLmZpbHRlcigodykgPT4gdy5pc01lbGVlV2VhcG9uKCkpO1xyXG4gICAgICAgICAgICBsZXQgZGVmZW5zZVJlYWNoID0gMDtcclxuICAgICAgICAgICAgZXF1aXBwZWRNZWxlZVdlYXBvbnMuZm9yRWFjaCgod2VhcG9uKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVEZWZlbnNlc1tgcGFycnktJHt3ZWFwb24ubmFtZX1gXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogJ1NSNS5QYXJyeScsXHJcbiAgICAgICAgICAgICAgICAgICAgd2VhcG9uOiB3ZWFwb24ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5maW5kQWN0aXZlU2tpbGwod2VhcG9uLmdldEFjdGlvblNraWxsKCkpPy52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpbml0OiAtNSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBkZWZlbnNlUmVhY2ggPSBNYXRoLm1heChkZWZlbnNlUmVhY2gsIHdlYXBvbi5nZXRSZWFjaCgpKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGluY29taW5nUmVhY2ggPSBvcHRpb25zLmluY29taW5nQXR0YWNrLnJlYWNoO1xyXG4gICAgICAgICAgICBjb25zdCBuZXRSZWFjaCA9IGRlZmVuc2VSZWFjaCAtIGluY29taW5nUmVhY2g7XHJcbiAgICAgICAgICAgIGlmIChuZXRSZWFjaCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LlJlYWNoJywgbmV0UmVhY2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBkaWFsb2dEYXRhID0ge1xyXG4gICAgICAgICAgICBwYXJ0czogcGFydHMuZ2V0TWVzc2FnZU91dHB1dCgpLFxyXG4gICAgICAgICAgICBjb3Zlcjogb3B0aW9ucy5jb3ZlcixcclxuICAgICAgICAgICAgYWN0aXZlRGVmZW5zZXMsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBsZXQgdGVtcGxhdGUgPSAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9yb2xscy9yb2xsLWRlZmVuc2UuaHRtbCc7XHJcbiAgICAgICAgbGV0IGNhbmNlbCA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgaW5jb21pbmdBdHRhY2sgPSBvcHRpb25zLmluY29taW5nQXR0YWNrO1xyXG4gICAgICAgIGNvbnN0IGV2ZW50ID0gb3B0aW9ucy5ldmVudDtcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIGRpYWxvZ0RhdGEpLnRoZW4oKGRsZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IERpYWxvZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkRlZmVuc2UnKSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBkbGcsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkNvbnRpbnVlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gKGNhbmNlbCA9IGZhbHNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICdub3JtYWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlOiBhc3luYyAoaHRtbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb3ZlciA9IEhlbHBlcnMucGFyc2VJbnB1dFRvTnVtYmVyKCQoaHRtbCkuZmluZCgnW25hbWU9Y292ZXJdJykudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgc3BlY2lhbCA9IEhlbHBlcnMucGFyc2VJbnB1dFRvU3RyaW5nKCQoaHRtbCkuZmluZCgnW25hbWU9YWN0aXZlRGVmZW5zZV0nKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcGVjaWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIHN1YnRyYWN0IGluaXRpYXRpdmUgc2NvcmUgd2hlbiBGb3VuZHJ5IHVwZGF0ZXMgdG8gMC43LjBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRlZmVuc2UgPSBhY3RpdmVEZWZlbnNlc1tzcGVjaWFsXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoZGVmZW5zZS5sYWJlbCwgZGVmZW5zZS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvdmVyKSBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuQ292ZXInLCBjb3Zlcik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hhZG93cnVuUm9sbGVyLmFkdmFuY2VkUm9sbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5EZWZlbnNlVGVzdCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY29taW5nQXR0YWNrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihhc3luYyAocm9sbDogUm9sbCB8IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNvbWluZ0F0dGFjayAmJiByb2xsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkZWZlbmRlckhpdHMgPSByb2xsLnRvdGFsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXR0YWNrZXJIaXRzID0gaW5jb21pbmdBdHRhY2suaGl0cyB8fCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV0SGl0cyA9IGF0dGFja2VySGl0cyAtIGRlZmVuZGVySGl0cztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXRIaXRzID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhbWFnZSA9IGluY29taW5nQXR0YWNrLmRhbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZS5tb2QgPSBQYXJ0c0xpc3QuQWRkVW5pcXVlUGFydChkYW1hZ2UubW9kLCAnU1I1Lk5ldEhpdHMnLCBuZXRIaXRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZS52YWx1ZSA9IEhlbHBlcnMuY2FsY1RvdGFsKGRhbWFnZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29ha1JvbGxPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2U6IGRhbWFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJvbGxTb2FrKHNvYWtSb2xsT3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSkucmVuZGVyKHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByb2xsU29hayhvcHRpb25zPzogU29ha1JvbGxPcHRpb25zLCBwYXJ0c1Byb3BzOiBNb2RMaXN0PG51bWJlcj4gPSBbXSkge1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gbmV3IFBhcnRzTGlzdChwYXJ0c1Byb3BzKTtcclxuICAgICAgICB0aGlzLl9hZGRTb2FrUGFydHMocGFydHMpO1xyXG4gICAgICAgIGxldCBkaWFsb2dEYXRhID0ge1xyXG4gICAgICAgICAgICBkYW1hZ2U6IG9wdGlvbnM/LmRhbWFnZSxcclxuICAgICAgICAgICAgcGFydHM6IHBhcnRzLmdldE1lc3NhZ2VPdXRwdXQoKSxcclxuICAgICAgICAgICAgZWxlbWVudFR5cGVzOiBDT05GSUcuU1I1LmVsZW1lbnRUeXBlcyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBpZCA9ICcnO1xyXG4gICAgICAgIGxldCBjYW5jZWwgPSB0cnVlO1xyXG4gICAgICAgIGxldCB0ZW1wbGF0ZSA9ICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL3JvbGxzL3JvbGwtc29hay5odG1sJztcclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcclxuICAgICAgICAgICAgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIGRpYWxvZ0RhdGEpLnRoZW4oKGRsZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IERpYWxvZyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkRhbWFnZVJlc2lzdGFuY2VUZXN0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudDogZGxnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5Db250aW51ZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZCA9ICdkZWZhdWx0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjbG9zZTogYXN5bmMgKGh0bWwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmNlbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29hazogRGFtYWdlRGF0YSA9IG9wdGlvbnM/LmRhbWFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBvcHRpb25zLmRhbWFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2Q6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZDogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnJyBhcyBjb25zdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2U6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhcm1vciA9IHRoaXMuZ2V0QXJtb3IoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBlbGVtZW50IGNoYW5nZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IEhlbHBlcnMucGFyc2VJbnB1dFRvU3RyaW5nKCQoaHRtbCkuZmluZCgnW25hbWU9ZWxlbWVudF0nKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb2FrLmVsZW1lbnQudmFsdWUgPSBlbGVtZW50IGFzIERhbWFnZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYm9udXNBcm1vciA9IGFybW9yW2VsZW1lbnRdID8/IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChib251c0FybW9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KENPTkZJRy5TUjUuZWxlbWVudFR5cGVzW2VsZW1lbnRdLCBib251c0FybW9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIGFwIGNoYW5nZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXAgPSBIZWxwZXJzLnBhcnNlSW5wdXRUb051bWJlcigkKGh0bWwpLmZpbmQoJ1tuYW1lPWFwXScpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJtb3JWYWwgPSBhcm1vci52YWx1ZSArIGJvbnVzQXJtb3I7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZG9uJ3QgdGFrZSBtb3JlIEFQIHRoYW4gYXJtb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5BUCcsIE1hdGgubWF4KGFwLCAtYXJtb3JWYWwpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaGFuZGxlIGluY29taW5nIGRhbWFnZSBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGluY29taW5nRGFtYWdlID0gSGVscGVycy5wYXJzZUlucHV0VG9OdW1iZXIoJChodG1sKS5maW5kKCdbbmFtZT1pbmNvbWluZ0RhbWFnZV0nKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmNvbWluZ0RhbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxEYW1hZ2UgPSBIZWxwZXJzLmNhbGNUb3RhbChzb2FrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbERhbWFnZSAhPT0gaW5jb21pbmdEYW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkaWZmID0gaW5jb21pbmdEYW1hZ2UgLSB0b3RhbERhbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcGFydCBhbmQgY2FsYyB0b3RhbCBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvYWsubW9kID0gUGFydHNMaXN0LkFkZFVuaXF1ZVBhcnQoc29hay5tb2QsICdTUjUuVXNlcklucHV0JywgZGlmZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29hay52YWx1ZSA9IEhlbHBlcnMuY2FsY1RvdGFsKHNvYWspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHNvYWspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc29hayk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdG90YWxBcCA9IEhlbHBlcnMuY2FsY1RvdGFsKHNvYWsuYXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRvdGFsQXAgIT09IGFwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlmZiA9IGFwIC0gdG90YWxBcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgcGFydCBhbmQgY2FsYyB0b3RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvYWsuYXAubW9kID0gUGFydHNMaXN0LkFkZFVuaXF1ZVBhcnQoc29hay5hcC5tb2QsICdTUjUuVXNlcklucHV0JywgZGlmZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc29hay5hcC52YWx1ZSA9IEhlbHBlcnMuY2FsY1RvdGFsKHNvYWsuYXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5Tb2FrVGVzdCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2hhZG93cnVuUm9sbGVyLmFkdmFuY2VkUm9sbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG9wdGlvbnM/LmV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvYWs6IHNvYWssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHM6IHBhcnRzLmxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvdW5kczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSkucmVuZGVyKHRydWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByb2xsU2luZ2xlQXR0cmlidXRlKGF0dElkLCBvcHRpb25zOiBBY3RvclJvbGxPcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgYXR0ciA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzW2F0dElkXSk7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0PG51bWJlcj4oKTtcclxuICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KGF0dHIubGFiZWwsIGF0dHIudmFsdWUpO1xyXG4gICAgICAgIHRoaXMuX2FkZE1hdHJpeFBhcnRzKHBhcnRzLCBhdHRyKTtcclxuICAgICAgICB0aGlzLl9hZGRHbG9iYWxQYXJ0cyhwYXJ0cyk7XHJcbiAgICAgICAgcmV0dXJuIFNoYWRvd3J1blJvbGxlci5hZHZhbmNlZFJvbGwoe1xyXG4gICAgICAgICAgICBldmVudDogb3B0aW9ucz8uZXZlbnQsXHJcbiAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICBwYXJ0czogcGFydHMubGlzdCxcclxuICAgICAgICAgICAgdGl0bGU6IEhlbHBlcnMubGFiZWwoYXR0SWQpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJvbGxUd29BdHRyaWJ1dGVzKFtpZDEsIGlkMl0sIG9wdGlvbnM6IEFjdG9yUm9sbE9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBhdHRyMSA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzW2lkMV0pO1xyXG4gICAgICAgIGNvbnN0IGF0dHIyID0gZHVwbGljYXRlKHRoaXMuZGF0YS5kYXRhLmF0dHJpYnV0ZXNbaWQyXSk7XHJcbiAgICAgICAgY29uc3QgbGFiZWwxID0gSGVscGVycy5sYWJlbChpZDEpO1xyXG4gICAgICAgIGNvbnN0IGxhYmVsMiA9IEhlbHBlcnMubGFiZWwoaWQyKTtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgIHBhcnRzLmFkZFBhcnQoYXR0cjEubGFiZWwsIGF0dHIxLnZhbHVlKTtcclxuICAgICAgICBwYXJ0cy5hZGRQYXJ0KGF0dHIyLmxhYmVsLCBhdHRyMi52YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fYWRkTWF0cml4UGFydHMocGFydHMsIFthdHRyMSwgYXR0cjJdKTtcclxuICAgICAgICB0aGlzLl9hZGRHbG9iYWxQYXJ0cyhwYXJ0cyk7XHJcbiAgICAgICAgcmV0dXJuIFNoYWRvd3J1blJvbGxlci5hZHZhbmNlZFJvbGwoe1xyXG4gICAgICAgICAgICBldmVudDogb3B0aW9ucz8uZXZlbnQsXHJcbiAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICBwYXJ0czogcGFydHMubGlzdCxcclxuICAgICAgICAgICAgdGl0bGU6IGAke2xhYmVsMX0gKyAke2xhYmVsMn1gLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJvbGxOYXR1cmFsUmVjb3ZlcnkodHJhY2ssIG9wdGlvbnM/OiBBY3RvclJvbGxPcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IGlkMSA9ICdib2R5JztcclxuICAgICAgICBsZXQgaWQyID0gJ3dpbGxwb3dlcic7XHJcbiAgICAgICAgbGV0IHRpdGxlID0gJ05hdHVyYWwgUmVjb3Zlcic7XHJcbiAgICAgICAgaWYgKHRyYWNrID09PSAncGh5c2ljYWwnKSB7XHJcbiAgICAgICAgICAgIGlkMiA9ICdib2R5JztcclxuICAgICAgICAgICAgdGl0bGUgKz0gJyAtIFBoeXNpY2FsIC0gMSBEYXknO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRpdGxlICs9ICcgLSBTdHVuIC0gMSBIb3VyJztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGF0dDEgPSBkdXBsaWNhdGUodGhpcy5kYXRhLmRhdGEuYXR0cmlidXRlc1tpZDFdKTtcclxuICAgICAgICBsZXQgYXR0MiA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzW2lkMl0pO1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gbmV3IFBhcnRzTGlzdDxudW1iZXI+KCk7XHJcbiAgICAgICAgcGFydHMuYWRkUGFydChhdHQxLmxhYmVsLCBhdHQxLnZhbHVlKTtcclxuICAgICAgICBwYXJ0cy5hZGRQYXJ0KGF0dDIubGFiZWwsIGF0dDIudmFsdWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gU2hhZG93cnVuUm9sbGVyLmFkdmFuY2VkUm9sbCh7XHJcbiAgICAgICAgICAgIGV2ZW50OiBvcHRpb25zPy5ldmVudCxcclxuICAgICAgICAgICAgYWN0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgIGV4dGVuZGVkOiB0cnVlLFxyXG4gICAgICAgICAgICBhZnRlcjogYXN5bmMgKHJvbGw6IFJvbGwgfCB1bmRlZmluZWQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghcm9sbCkgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgbGV0IGhpdHMgPSByb2xsLnRvdGFsO1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnQgPSB0aGlzLmRhdGEuZGF0YS50cmFja1t0cmFja10udmFsdWU7XHJcblxyXG4gICAgICAgICAgICAgICAgY3VycmVudCA9IE1hdGgubWF4KGN1cnJlbnQgLSBoaXRzLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQga2V5ID0gYGRhdGEudHJhY2suJHt0cmFja30udmFsdWVgO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCB1ID0ge307XHJcbiAgICAgICAgICAgICAgICB1W2tleV0gPSBjdXJyZW50O1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy51cGRhdGUodSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgcm9sbE1hdHJpeEF0dHJpYnV0ZShhdHRyLCBvcHRpb25zPzogQWN0b3JSb2xsT3B0aW9ucykge1xyXG4gICAgICAgIGxldCBtYXRyaXhfYXR0ID0gZHVwbGljYXRlKHRoaXMuZGF0YS5kYXRhLm1hdHJpeFthdHRyXSk7XHJcbiAgICAgICAgbGV0IHRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKENPTkZJRy5TUjUubWF0cml4QXR0cmlidXRlc1thdHRyXSk7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0PG51bWJlcj4oKTtcclxuICAgICAgICBwYXJ0cy5hZGRQYXJ0KENPTkZJRy5TUjUubWF0cml4QXR0cmlidXRlc1thdHRyXSwgbWF0cml4X2F0dC52YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuZXZlbnQgJiYgb3B0aW9ucy5ldmVudFtDT05GSUcuU1I1LmtibW9kLlNQRUNdKSBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuU3BlY2lhbGl6YXRpb24nLCAyKTtcclxuICAgICAgICBpZiAoSGVscGVycy5oYXNNb2RpZmllcnMob3B0aW9ucz8uZXZlbnQpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTaGFkb3dydW5Sb2xsZXIuYWR2YW5jZWRSb2xsKHtcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBvcHRpb25zPy5ldmVudCxcclxuICAgICAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgcGFydHM6IHBhcnRzLmxpc3QsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzID0gSGVscGVycy5maWx0ZXIodGhpcy5kYXRhLmRhdGEuYXR0cmlidXRlcywgKFssIHZhbHVlXSkgPT4gdmFsdWUudmFsdWUgPiAwKTtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSAnd2lsbHBvd2VyJztcclxuXHJcbiAgICAgICAgbGV0IGRpYWxvZ0RhdGEgPSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogYXR0cmlidXRlLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBhdHRyaWJ1dGVzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IHtcclxuICAgICAgICAgICAgcm9sbDoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDb250aW51ZScsXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gKGNhbmNlbCA9IGZhbHNlKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgY2FuY2VsID0gdHJ1ZTtcclxuICAgICAgICByZW5kZXJUZW1wbGF0ZSgnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9yb2xscy9tYXRyaXgtcm9sbC5odG1sJywgZGlhbG9nRGF0YSkudGhlbigoZGxnKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBEaWFsb2coe1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IGAke3RpdGxlfSBUZXN0YCxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRsZyxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnM6IGJ1dHRvbnMsXHJcbiAgICAgICAgICAgICAgICBjbG9zZTogYXN5bmMgKGh0bWwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3QXR0ID0gSGVscGVycy5wYXJzZUlucHV0VG9TdHJpbmcoJChodG1sKS5maW5kKCdbbmFtZT1hdHRyaWJ1dGVdJykudmFsKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhdHQ6IEF0dHJpYnV0ZUZpZWxkIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdBdHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0ID0gdGhpcy5kYXRhLmRhdGEuYXR0cmlidXRlc1tuZXdBdHRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSArPSBgICsgJHtnYW1lLmkxOG4ubG9jYWxpemUoQ09ORklHLlNSNS5hdHRyaWJ1dGVzW25ld0F0dF0pfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0LnZhbHVlICYmIGF0dC5sYWJlbCkgcGFydHMuYWRkUGFydChhdHQubGFiZWwsIGF0dC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZE1hdHJpeFBhcnRzKHBhcnRzLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkR2xvYmFsUGFydHMocGFydHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU2hhZG93cnVuUm9sbGVyLmFkdmFuY2VkUm9sbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudDogb3B0aW9ucz8uZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3RvcjogdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9KS5yZW5kZXIodHJ1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvbXB0Um9sbChvcHRpb25zPzogQWN0b3JSb2xsT3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBTaGFkb3dydW5Sb2xsZXIuYWR2YW5jZWRSb2xsKHtcclxuICAgICAgICAgICAgZXZlbnQ6IG9wdGlvbnM/LmV2ZW50LFxyXG4gICAgICAgICAgICB0aXRsZTogJ1JvbGwnLFxyXG4gICAgICAgICAgICBwYXJ0czogW10sXHJcbiAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICBkaWFsb2dPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBwcm9tcHQ6IHRydWUsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcm9sbEF0dHJpYnV0ZXNUZXN0KHJvbGxJZCwgb3B0aW9ucz86IEFjdG9yUm9sbE9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCB0aXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LmF0dHJpYnV0ZVJvbGxzW3JvbGxJZF0pO1xyXG4gICAgICAgIGNvbnN0IGF0dHMgPSB0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGNvbnN0IG1vZGlmaWVycyA9IHRoaXMuZGF0YS5kYXRhLm1vZGlmaWVycztcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgIGlmIChyb2xsSWQgPT09ICdjb21wb3N1cmUnKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYXR0cy5jaGFyaXNtYS5sYWJlbCwgYXR0cy5jaGFyaXNtYS52YWx1ZSk7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYXR0cy53aWxscG93ZXIubGFiZWwsIGF0dHMud2lsbHBvd2VyLnZhbHVlKTtcclxuICAgICAgICAgICAgaWYgKG1vZGlmaWVycy5jb21wb3N1cmUpIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5Cb251cycsIG1vZGlmaWVycy5jb21wb3N1cmUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocm9sbElkID09PSAnanVkZ2VfaW50ZW50aW9ucycpIHtcclxuICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydChhdHRzLmNoYXJpc21hLmxhYmVsLCBhdHRzLmNoYXJpc21hLnZhbHVlKTtcclxuICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydChhdHRzLmludHVpdGlvbi5sYWJlbCwgYXR0cy5pbnR1aXRpb24udmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzLmp1ZGdlX2ludGVudGlvbnMpIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5Cb251cycsIG1vZGlmaWVycy5qdWRnZV9pbnRlbnRpb25zKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJvbGxJZCA9PT0gJ2xpZnRfY2FycnknKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYXR0cy5zdHJlbmd0aC5sYWJlbCwgYXR0cy5zdHJlbmd0aC52YWx1ZSk7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYXR0cy5ib2R5LmxhYmVsLCBhdHRzLmJvZHkudmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzLmxpZnRfY2FycnkpIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5Cb251cycsIG1vZGlmaWVycy5saWZ0X2NhcnJ5KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHJvbGxJZCA9PT0gJ21lbW9yeScpIHtcclxuICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydChhdHRzLndpbGxwb3dlci5sYWJlbCwgYXR0cy53aWxscG93ZXIudmFsdWUpO1xyXG4gICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KGF0dHMubG9naWMubGFiZWwsIGF0dHMubG9naWMudmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzLm1lbW9yeSkgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LkJvbnVzJywgbW9kaWZpZXJzLm1lbW9yeSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gU2hhZG93cnVuUm9sbGVyLmFkdmFuY2VkUm9sbCh7XHJcbiAgICAgICAgICAgIGV2ZW50OiBvcHRpb25zPy5ldmVudCxcclxuICAgICAgICAgICAgYWN0b3I6IHRoaXMsXHJcbiAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICB0aXRsZTogYCR7dGl0bGV9IFRlc3RgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJvbGxTa2lsbChza2lsbCwgb3B0aW9ucz86IFNraWxsUm9sbE9wdGlvbnMpIHtcclxuICAgICAgICBsZXQgYXR0ID0gZHVwbGljYXRlKHRoaXMuZGF0YS5kYXRhLmF0dHJpYnV0ZXNbc2tpbGwuYXR0cmlidXRlXSk7XHJcbiAgICAgICAgbGV0IHRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKHNraWxsLmxhYmVsKTtcclxuXHJcbiAgICAgICAgaWYgKG9wdGlvbnM/LmF0dHJpYnV0ZSkgYXR0ID0gdGhpcy5kYXRhLmRhdGEuYXR0cmlidXRlc1tvcHRpb25zLmF0dHJpYnV0ZV07XHJcbiAgICAgICAgbGV0IGxpbWl0ID0gdGhpcy5kYXRhLmRhdGEubGltaXRzW2F0dC5saW1pdF07XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0PG51bWJlcj4oKTtcclxuICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KHNraWxsLmxhYmVsLCBza2lsbC52YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmIChvcHRpb25zPy5ldmVudCAmJiBIZWxwZXJzLmhhc01vZGlmaWVycyhvcHRpb25zPy5ldmVudCkpIHtcclxuICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydChhdHQubGFiZWwsIGF0dC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmV2ZW50W0NPTkZJRy5TUjUua2Jtb2QuU1BFQ10pIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5TcGVjaWFsaXphdGlvbicsIDIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5fYWRkTWF0cml4UGFydHMocGFydHMsIFthdHQsIHNraWxsXSk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FkZEdsb2JhbFBhcnRzKHBhcnRzKTtcclxuICAgICAgICAgICAgcmV0dXJuIFNoYWRvd3J1blJvbGxlci5hZHZhbmNlZFJvbGwoe1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6IG9wdGlvbnMuZXZlbnQsXHJcbiAgICAgICAgICAgICAgICBhY3RvcjogdGhpcyxcclxuICAgICAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICAgICAgbGltaXQsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogYCR7dGl0bGV9IFRlc3RgLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IGRpYWxvZ0RhdGEgPSB7XHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZTogc2tpbGwuYXR0cmlidXRlLFxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiBIZWxwZXJzLmZpbHRlcih0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzLCAoWywgdmFsdWVdKSA9PiB2YWx1ZS52YWx1ZSA+IDApLFxyXG4gICAgICAgICAgICBsaW1pdDogYXR0LmxpbWl0LFxyXG4gICAgICAgICAgICBsaW1pdHM6IHRoaXMuZGF0YS5kYXRhLmxpbWl0cyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBjYW5jZWwgPSB0cnVlO1xyXG4gICAgICAgIGxldCBzcGVjID0gJyc7XHJcblxyXG4gICAgICAgIGxldCBidXR0b25zID0ge1xyXG4gICAgICAgICAgICByb2xsOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogJ05vcm1hbCcsXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gKGNhbmNlbCA9IGZhbHNlKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIGFkZCBzcGVjaWFsaXphdGlvbnMgdG8gZGlhbG9nIGFzIGJ1dHRvbnNcclxuICAgICAgICBpZiAoc2tpbGwuc3BlY3M/Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICBza2lsbC5zcGVjcy5mb3JFYWNoKFxyXG4gICAgICAgICAgICAgICAgKHMpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgKGJ1dHRvbnNbc10gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuY2VsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGVjID0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVuZGVyVGVtcGxhdGUoJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvcm9sbHMvc2tpbGwtcm9sbC5odG1sJywgZGlhbG9nRGF0YSkudGhlbigoZGxnKSA9PiB7XHJcbiAgICAgICAgICAgIG5ldyBEaWFsb2coe1xyXG4gICAgICAgICAgICAgICAgdGl0bGU6IGAke3RpdGxlfSBUZXN0YCxcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRsZyxcclxuICAgICAgICAgICAgICAgIGJ1dHRvbnMsXHJcbiAgICAgICAgICAgICAgICBjbG9zZTogYXN5bmMgKGh0bWwpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3QXR0ID0gSGVscGVycy5wYXJzZUlucHV0VG9TdHJpbmcoJChodG1sKS5maW5kKCdbbmFtZT1cImF0dHJpYnV0ZVwiXScpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdMaW1pdCA9IEhlbHBlcnMucGFyc2VJbnB1dFRvU3RyaW5nKCQoaHRtbCkuZmluZCgnW25hbWU9XCJhdHRyaWJ1dGUubGltaXRcIl0nKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0ID0gdGhpcy5kYXRhLmRhdGEuYXR0cmlidXRlc1tuZXdBdHRdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlICs9IGAgKyAke2dhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LmF0dHJpYnV0ZXNbbmV3QXR0XSl9YDtcclxuICAgICAgICAgICAgICAgICAgICBsaW1pdCA9IHRoaXMuZGF0YS5kYXRhLmxpbWl0c1tuZXdMaW1pdF07XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydChhdHQubGFiZWwsIGF0dC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNraWxsLnZhbHVlID09PSAwKSBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuRGVmYXVsdGluZycsIC0xKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3BlYykgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LlNwZWNpYWxpemF0aW9uJywgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkTWF0cml4UGFydHMocGFydHMsIFthdHQsIHNraWxsXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkR2xvYmFsUGFydHMocGFydHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTaGFkb3dydW5Sb2xsZXIuYWR2YW5jZWRSb2xsKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IG9wdGlvbnM/LmV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RvcjogdGhpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFydHM6IHBhcnRzLmxpc3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYCR7dGl0bGV9IFRlc3RgLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSkucmVuZGVyKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJvbGxLbm93bGVkZ2VTa2lsbChjYXRJZDogc3RyaW5nLCBza2lsbElkOiBzdHJpbmcsIG9wdGlvbnM/OiBTa2lsbFJvbGxPcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBkdXBsaWNhdGUodGhpcy5kYXRhLmRhdGEuc2tpbGxzLmtub3dsZWRnZVtjYXRJZF0pO1xyXG4gICAgICAgIGNvbnN0IHNraWxsID0gZHVwbGljYXRlKGNhdGVnb3J5LnZhbHVlW3NraWxsSWRdKTtcclxuICAgICAgICBza2lsbC5hdHRyaWJ1dGUgPSBjYXRlZ29yeS5hdHRyaWJ1dGU7XHJcbiAgICAgICAgc2tpbGwubGFiZWwgPSBza2lsbC5uYW1lO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvbGxTa2lsbChza2lsbCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcm9sbExhbmd1YWdlU2tpbGwoc2tpbGxJZDogc3RyaW5nLCBvcHRpb25zPzogU2tpbGxSb2xsT3B0aW9ucykge1xyXG4gICAgICAgIGNvbnN0IHNraWxsID0gZHVwbGljYXRlKHRoaXMuZGF0YS5kYXRhLnNraWxscy5sYW5ndWFnZS52YWx1ZVtza2lsbElkXSk7XHJcbiAgICAgICAgc2tpbGwuYXR0cmlidXRlID0gJ2ludHVpdGlvbic7XHJcbiAgICAgICAgc2tpbGwubGFiZWwgPSBza2lsbC5uYW1lO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJvbGxTa2lsbChza2lsbCwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcm9sbEFjdGl2ZVNraWxsKHNraWxsSWQ6IHN0cmluZywgb3B0aW9ucz86IFNraWxsUm9sbE9wdGlvbnMpIHtcclxuICAgICAgICBjb25zdCBza2lsbCA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEuZGF0YS5za2lsbHMuYWN0aXZlW3NraWxsSWRdKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5yb2xsU2tpbGwoc2tpbGwsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIHJvbGxBdHRyaWJ1dGUoYXR0SWQsIG9wdGlvbnM/OiBBY3RvclJvbGxPcHRpb25zKSB7XHJcbiAgICAgICAgbGV0IHRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKENPTkZJRy5TUjUuYXR0cmlidXRlc1thdHRJZF0pO1xyXG4gICAgICAgIGNvbnN0IGF0dCA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzW2F0dElkXSk7XHJcbiAgICAgICAgY29uc3QgYXR0cyA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEuZGF0YS5hdHRyaWJ1dGVzKTtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYXR0LmxhYmVsLCBhdHQudmFsdWUpO1xyXG4gICAgICAgIGxldCBkaWFsb2dEYXRhID0ge1xyXG4gICAgICAgICAgICBhdHRyaWJ1dGU6IGF0dCxcclxuICAgICAgICAgICAgYXR0cmlidXRlczogYXR0cyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGxldCBjYW5jZWwgPSB0cnVlO1xyXG4gICAgICAgIHJlbmRlclRlbXBsYXRlKCdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL3JvbGxzL3NpbmdsZS1hdHRyaWJ1dGUuaHRtbCcsIGRpYWxvZ0RhdGEpLnRoZW4oKGRsZykgPT4ge1xyXG4gICAgICAgICAgICBuZXcgRGlhbG9nKHtcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBgJHt0aXRsZX0gQXR0cmlidXRlIFRlc3RgLFxyXG4gICAgICAgICAgICAgICAgY29udGVudDogZGxnLFxyXG4gICAgICAgICAgICAgICAgYnV0dG9uczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvbGw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6ICdDb250aW51ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiAoY2FuY2VsID0gZmFsc2UpLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJ3JvbGwnLFxyXG4gICAgICAgICAgICAgICAgY2xvc2U6IGFzeW5jIChodG1sKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhbmNlbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHQySWQ6IHN0cmluZyA9IEhlbHBlcnMucGFyc2VJbnB1dFRvU3RyaW5nKCQoaHRtbCkuZmluZCgnW25hbWU9YXR0cmlidXRlMl0nKS52YWwoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGF0dDI6IEF0dHJpYnV0ZUZpZWxkIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHQySWQgIT09ICdub25lJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHQyID0gYXR0c1thdHQySWRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0Mj8ubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYXR0Mi5sYWJlbCwgYXR0Mi52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhdHQySWRMYWJlbCA9IGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LmF0dHJpYnV0ZXNbYXR0MklkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZSArPSBgICsgJHthdHQySWRMYWJlbH1gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdHQySWQgPT09ICdkZWZhdWx0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuRGVmYXVsdGluZycsIC0xKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkTWF0cml4UGFydHMocGFydHMsIFthdHQsIGF0dDJdKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRHbG9iYWxQYXJ0cyhwYXJ0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNoYWRvd3J1blJvbGxlci5hZHZhbmNlZFJvbGwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudDogb3B0aW9ucz8uZXZlbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBgJHt0aXRsZX0gVGVzdGAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdG9yOiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0czogcGFydHMubGlzdCxcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0pLnJlbmRlcih0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBfYWRkTWF0cml4UGFydHMocGFydHM6IFBhcnRzTGlzdDxudW1iZXI+LCBhdHRzKSB7XHJcbiAgICAgICAgaWYgKEhlbHBlcnMuaXNNYXRyaXgoYXR0cykpIHtcclxuICAgICAgICAgICAgY29uc3QgbSA9IHRoaXMuZGF0YS5kYXRhLm1hdHJpeDtcclxuICAgICAgICAgICAgaWYgKG0uaG90X3NpbSkgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LkhvdFNpbScsIDIpO1xyXG4gICAgICAgICAgICBpZiAobS5ydW5uaW5nX3NpbGVudCkgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LlJ1bm5pbmdTaWxlbnQnLCAtMik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgX2FkZEdsb2JhbFBhcnRzKHBhcnRzOiBQYXJ0c0xpc3Q8bnVtYmVyPikge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGF0YS5tb2RpZmllcnMuZ2xvYmFsKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5HbG9iYWwnLCB0aGlzLmRhdGEuZGF0YS5tb2RpZmllcnMuZ2xvYmFsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2FkZERlZmVuc2VQYXJ0cyhwYXJ0czogUGFydHNMaXN0PG51bWJlcj4pIHtcclxuICAgICAgICBjb25zdCByZWFjdGlvbiA9IHRoaXMuZmluZEF0dHJpYnV0ZSgncmVhY3Rpb24nKTtcclxuICAgICAgICBjb25zdCBpbnR1aXRpb24gPSB0aGlzLmZpbmRBdHRyaWJ1dGUoJ2ludHVpdGlvbicpO1xyXG4gICAgICAgIGNvbnN0IG1vZCA9IHRoaXMuZ2V0TW9kaWZpZXIoJ2RlZmVuc2UnKTtcclxuXHJcbiAgICAgICAgaWYgKHJlYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQocmVhY3Rpb24ubGFiZWwgfHwgJ1NSNS5SZWFjdGlvbicsIHJlYWN0aW9uLnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGludHVpdGlvbikge1xyXG4gICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KGludHVpdGlvbi5sYWJlbCB8fCAnU1I1LkludHVpdGlvbicsIGludHVpdGlvbi52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtb2QpIHtcclxuICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LkJvbnVzJywgbW9kKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX2FkZEFybW9yUGFydHMocGFydHM6IFBhcnRzTGlzdDxudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3QgYXJtb3IgPSB0aGlzLmdldEFybW9yKCk7XHJcbiAgICAgICAgaWYgKGFybW9yKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYXJtb3IubGFiZWwgfHwgJ1NSNS5Bcm1vcicsIGFybW9yLmJhc2UpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwYXJ0IG9mIGFybW9yLm1vZCkge1xyXG4gICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydChwYXJ0Lm5hbWUsIHBhcnQudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9hZGRTb2FrUGFydHMocGFydHM6IFBhcnRzTGlzdDxudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3QgYm9keSA9IHRoaXMuZmluZEF0dHJpYnV0ZSgnYm9keScpO1xyXG4gICAgICAgIGlmIChib2R5KSB7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoYm9keS5sYWJlbCB8fCAnU1I1LkJvZHknLCBib2R5LnZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fYWRkQXJtb3JQYXJ0cyhwYXJ0cyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGFzeW5jIHB1c2hUaGVMaW1pdChsaSkge1xyXG4gICAgICAgIGxldCBtc2c6IENoYXRNZXNzYWdlID0gZ2FtZS5tZXNzYWdlcy5nZXQobGkuZGF0YSgpLm1lc3NhZ2VJZCk7XHJcblxyXG4gICAgICAgIGlmIChtc2cuZ2V0RmxhZyhTWVNURU1fTkFNRSwgJ2N1c3RvbVJvbGwnKSkge1xyXG4gICAgICAgICAgICBsZXQgYWN0b3IgPSAobXNnLnVzZXIuY2hhcmFjdGVyIGFzIHVua25vd24pIGFzIFNSNUFjdG9yO1xyXG4gICAgICAgICAgICBpZiAoIWFjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBnZXQgY29udHJvbGxlZCB0b2tlbnNcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VucyA9IGNhbnZhcy50b2tlbnMuY29udHJvbGxlZDtcclxuICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHRva2VuIG9mIHRva2Vucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4uYWN0b3Iub3duZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdG9yID0gdG9rZW4uYWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gbmV3IFBhcnRzTGlzdDxudW1iZXI+KCk7XHJcbiAgICAgICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuUHVzaFRoZUxpbWl0JywgYWN0b3IuZ2V0RWRnZSgpLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIFNoYWRvd3J1blJvbGxlci5iYXNpY1JvbGwoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBgIC0gJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5QdXNoVGhlTGltaXQnKX1gLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5saXN0LFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdG9yOiBhY3RvcixcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdG9yLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdkYXRhLmF0dHJpYnV0ZXMuZWRnZS51c2VzJzogYWN0b3IuZ2V0RWRnZSgpLnVzZXMgLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLndhcm4oZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuU2VsZWN0VG9rZW5NZXNzYWdlJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBzZWNvbmRDaGFuY2UobGkpIHtcclxuICAgICAgICBsZXQgbXNnOiBDaGF0TWVzc2FnZSA9IGdhbWUubWVzc2FnZXMuZ2V0KGxpLmRhdGEoKS5tZXNzYWdlSWQpO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBsZXQgcm9sbDogUm9sbCA9IEpTT04ucGFyc2UobXNnLmRhdGE/LnJvbGwpO1xyXG4gICAgICAgIGxldCBmb3JtdWxhID0gcm9sbC5mb3JtdWxhO1xyXG4gICAgICAgIGxldCBoaXRzID0gcm9sbC50b3RhbDtcclxuICAgICAgICBsZXQgcmUgPSAvKFxcZCspZDYvO1xyXG4gICAgICAgIGxldCBtYXRjaGVzID0gZm9ybXVsYS5tYXRjaChyZSk7XHJcbiAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlc1sxXSkge1xyXG4gICAgICAgICAgICBsZXQgbWF0Y2ggPSBtYXRjaGVzWzFdO1xyXG4gICAgICAgICAgICBsZXQgcG9vbCA9IHBhcnNlSW50KG1hdGNoLnJlcGxhY2UoJ2Q2JywgJycpKTtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihwb29sKSAmJiAhaXNOYU4oaGl0cykpIHtcclxuICAgICAgICAgICAgICAgIGxldCBhY3RvciA9IChtc2cudXNlci5jaGFyYWN0ZXIgYXMgdW5rbm93bikgYXMgU1I1QWN0b3I7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IGNvbnRyb2xsZWQgdG9rZW5zXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW5zID0gY2FudmFzLnRva2Vucy5jb250cm9sbGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0b2tlbiBvZiB0b2tlbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbi5hY3Rvci5vd25lcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdG9yID0gdG9rZW4uYWN0b3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5PcmlnaW5hbERpY2VQb29sJywgcG9vbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LlN1Y2Nlc3NlcycsIC1oaXRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNoYWRvd3J1blJvbGxlci5iYXNpY1JvbGwoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYCAtIFNlY29uZCBDaGFuY2VgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0czogcGFydHMubGlzdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0b3I6IGFjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rvci51cGRhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEuYXR0cmlidXRlcy5lZGdlLnVzZXMnOiBhY3Rvci5nZXRFZGdlKCkudXNlcyAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy53YXJuKGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlNlbGVjdFRva2VuTWVzc2FnZScpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE92ZXJyaWRlIHNldEZsYWcgdG8gcmVtb3ZlIHRoZSAnU1I1LicgZnJvbSBrZXlzIGluIG1vZGxpc3RzLCBvdGhlcndpc2UgaXQgaGFuZGxlcyB0aGVtIGFzIGVtYmVkZGVkIGtleXNcclxuICAgICAqIEBwYXJhbSBzY29wZVxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldEZsYWcoc2NvcGU6IHN0cmluZywga2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBQcm9taXNlPEVudGl0eT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gSGVscGVycy5vblNldEZsYWcodmFsdWUpO1xyXG4gICAgICAgIHJldHVybiBzdXBlci5zZXRGbGFnKHNjb3BlLCBrZXksIG5ld1ZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE92ZXJyaWRlIGdldEZsYWcgdG8gYWRkIGJhY2sgdGhlICdTUjUuJyBrZXlzIGNvcnJlY3RseSB0byBiZSBoYW5kbGVkXHJcbiAgICAgKiBAcGFyYW0gc2NvcGVcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqL1xyXG4gICAgZ2V0RmxhZyhzY29wZTogc3RyaW5nLCBrZXk6IHN0cmluZyk6IGFueSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHN1cGVyLmdldEZsYWcoc2NvcGUsIGtleSk7XHJcbiAgICAgICAgcmV0dXJuIEhlbHBlcnMub25HZXRGbGFnKGRhdGEpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEhlbHBlcnMgfSBmcm9tICcuLi9oZWxwZXJzJztcclxuaW1wb3J0IHsgQ2h1bW1lckltcG9ydEZvcm0gfSBmcm9tICcuLi9hcHBzL2NodW1tZXItaW1wb3J0LWZvcm0nO1xyXG5pbXBvcnQgeyBTa2lsbEVkaXRGb3JtIH0gZnJvbSAnLi4vYXBwcy9za2lsbHMvU2tpbGxFZGl0Rm9ybSc7XHJcbmltcG9ydCB7IEtub3dsZWRnZVNraWxsRWRpdEZvcm0gfSBmcm9tICcuLi9hcHBzL3NraWxscy9Lbm93bGVkZ2VTa2lsbEVkaXRGb3JtJztcclxuaW1wb3J0IHsgTGFuZ3VhZ2VTa2lsbEVkaXRGb3JtIH0gZnJvbSAnLi4vYXBwcy9za2lsbHMvTGFuZ3VhZ2VTa2lsbEVkaXRGb3JtJztcclxuaW1wb3J0IFNSNUFjdG9yU2hlZXREYXRhID0gU2hhZG93cnVuLlNSNUFjdG9yU2hlZXREYXRhO1xyXG5pbXBvcnQgU1I1U2hlZXRGaWx0ZXJzID0gU2hhZG93cnVuLlNSNVNoZWV0RmlsdGVycztcclxuaW1wb3J0IFNraWxscyA9IFNoYWRvd3J1bi5Ta2lsbHM7XHJcbmltcG9ydCB7IFNSNUFjdG9yIH0gZnJvbSAnLi9TUjVBY3Rvcic7XHJcbmltcG9ydCBNYXRyaXhBdHRyaWJ1dGUgPSBTaGFkb3dydW4uTWF0cml4QXR0cmlidXRlO1xyXG5cclxuLy8gVXNlIFNSNUFjdG9yU2hlZXQuX3Nob3dTa2lsbEVkaXRGb3JtIHRvIG9ubHkgZXZlciByZW5kZXIgb25lIFNraWxsRWRpdEZvcm0gaW5zdGFuY2UuXHJcbi8vIFNob3VsZCBtdWx0aXBsZSBpbnN0YW5jZXMgYmUgb3BlbiwgRm91bmRyeSB3aWxsIGNhdXNlIGNyb3NzIHRhbGsgYmV0d2VlbiBza2lsbHMgYW5kIGFjdG9ycyxcclxuLy8gd2hlbiBvcGVuZWQgaW4gc3VjY2Vzc2lvbiwgY2F1c2luZyBTa2lsbEVkaXRGb3JtIHRvIHdyb25nZnVsbHkgb3ZlcndyaXRlIHRoZSB3cm9uZyBkYXRhLlxyXG5sZXQgZ2xvYmFsU2tpbGxBcHBJZDpudW1iZXIgPSAtMTtcclxuXHJcbi8qKlxyXG4gKiBFeHRlbmQgdGhlIGJhc2ljIEFjdG9yU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTUjVBY3RvclNoZWV0IGV4dGVuZHMgQWN0b3JTaGVldCB7XHJcbiAgICBfc2hvd25VbnRyYWluZWRTa2lsbHM6IGJvb2xlYW47XHJcbiAgICBfc2hvd25EZXNjOiBzdHJpbmdbXTtcclxuICAgIF9maWx0ZXJzOiBTUjVTaGVldEZpbHRlcnM7XHJcbiAgICBhY3RvcjogU1I1QWN0b3I7XHJcbiAgICBfc2Nyb2xsOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoLi4uYXJncykge1xyXG4gICAgICAgIHN1cGVyKC4uLmFyZ3MpO1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBLZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50bHkgYWN0aXZlIHNoZWV0IHRhYlxyXG4gICAgICAgICAqIEB0eXBlIHtzdHJpbmd9XHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdGhpcy5fc2hvd25VbnRyYWluZWRTa2lsbHMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX3Nob3duRGVzYyA9IFtdO1xyXG4gICAgICAgIHRoaXMuX2ZpbHRlcnMgPSB7XHJcbiAgICAgICAgICAgIHNraWxsczogJycsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRXh0ZW5kIGFuZCBvdmVycmlkZSB0aGUgZGVmYXVsdCBvcHRpb25zIHVzZWQgYnkgdGhlIDVlIEFjdG9yIFNoZWV0XHJcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiBtZXJnZU9iamVjdChzdXBlci5kZWZhdWx0T3B0aW9ucywge1xyXG4gICAgICAgICAgICBjbGFzc2VzOiBbJ3NyNScsICdzaGVldCcsICdhY3RvciddLFxyXG4gICAgICAgICAgICB3aWR0aDogODgwLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IDY5MCxcclxuICAgICAgICAgICAgdGFiczogW1xyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hdlNlbGVjdG9yOiAnLnRhYnMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnRTZWxlY3RvcjogJy5zaGVldGJvZHknLFxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWw6ICdza2lsbHMnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGVtcGxhdGUoKSB7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9ICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yLyc7XHJcbiAgICAgICAgcmV0dXJuIGAke3BhdGh9JHt0aGlzLmFjdG9yLmRhdGEudHlwZX0uaHRtbGA7XHJcbiAgICB9XHJcblxyXG4gICAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByZXBhcmUgZGF0YSBmb3IgcmVuZGVyaW5nIHRoZSBBY3RvciBzaGVldFxyXG4gICAgICogVGhlIHByZXBhcmVkIGRhdGEgb2JqZWN0IGNvbnRhaW5zIGJvdGggdGhlIGFjdG9yIGRhdGEgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIHNoZWV0IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhOiBTUjVBY3RvclNoZWV0RGF0YSA9IChzdXBlci5nZXREYXRhKCkgYXMgdW5rbm93bikgYXMgU1I1QWN0b3JTaGVldERhdGE7XHJcblxyXG4gICAgICAgIHRoaXMuX3ByZXBhcmVNYXRyaXhBdHRyaWJ1dGVzKGRhdGEpO1xyXG5cclxuICAgICAgICBjb25zdCBhdHRycyA9IGRhdGEuZGF0YS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgIGZvciAobGV0IFssIGF0dF0gb2YgT2JqZWN0LmVudHJpZXMoYXR0cnMpKSB7XHJcbiAgICAgICAgICAgIGlmICghYXR0LmhpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dC50ZW1wID09PSAwKSBkZWxldGUgYXR0LnRlbXA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8qY1xyXG4gICAgICAgIGNvbnN0IHsgbWFnaWMgfSA9IGRhdGEuZGF0YTtcclxuICAgICAgICBpZiAobWFnaWMuZHJhaW4gJiYgbWFnaWMuZHJhaW4udGVtcCA9PT0gMCkgZGVsZXRlIG1hZ2ljLmRyYWluLnRlbXA7XHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIGNvbnN0IHsgbW9kaWZpZXJzOiBtb2RzIH0gPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgZm9yIChsZXQgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG1vZHMpKSB7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCkgbW9kc1trZXldID0gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9wcmVwYXJlSXRlbXMoZGF0YSk7XHJcbiAgICAgICAgdGhpcy5fcHJlcGFyZVNraWxscyhkYXRhKTtcclxuXHJcbiAgICAgICAgZGF0YVsnY29uZmlnJ10gPSBDT05GSUcuU1I1O1xyXG4gICAgICAgIGRhdGFbJ2F3YWtlbmVkJ10gPSBkYXRhLmRhdGEuc3BlY2lhbCA9PT0gJ21hZ2ljJztcclxuICAgICAgICBkYXRhWydlbWVyZ2VkJ10gPSBkYXRhLmRhdGEuc3BlY2lhbCA9PT0gJ3Jlc29uYW5jZSc7XHJcbiAgICAgICAgZGF0YVsnd291bmRUb2xlcmFuY2UnXSA9IDMgKyAoTnVtYmVyKG1vZHNbJ3dvdW5kX3RvbGVyYW5jZSddKSB8fCAwKTtcclxuXHJcbiAgICAgICAgZGF0YS5maWx0ZXJzID0gdGhpcy5fZmlsdGVycztcclxuXHJcbiAgICAgICAgZGF0YVsnaXNDaGFyYWN0ZXInXSA9IHRoaXMuYWN0b3IuZGF0YS50eXBlID09PSAnY2hhcmFjdGVyJztcclxuICAgICAgICBkYXRhWydpc1NwaXJpdCddID0gdGhpcy5hY3Rvci5kYXRhLnR5cGUgPT09ICdzcGlyaXQnO1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBfaXNTa2lsbE1hZ2ljKGlkLCBza2lsbCkge1xyXG4gICAgICAgIHJldHVybiBza2lsbC5hdHRyaWJ1dGUgPT09ICdtYWdpYycgfHwgaWQgPT09ICdhc3RyYWxfY29tYmF0JyB8fCBpZCA9PT0gJ2Fzc2Vuc2luZyc7XHJcbiAgICB9XHJcblxyXG4gICAgX2RvZXNTa2lsbENvbnRhaW5UZXh0KGtleSwgc2tpbGwsIHRleHQpIHtcclxuICAgICAgICBsZXQgc2VhcmNoU3RyaW5nID0gYCR7a2V5fSAke2dhbWUuaTE4bi5sb2NhbGl6ZShza2lsbC5sYWJlbCl9ICR7c2tpbGw/LnNwZWNzPy5qb2luKCcgJyl9YDtcclxuICAgICAgICByZXR1cm4gc2VhcmNoU3RyaW5nLnRvTG93ZXJDYXNlKCkuc2VhcmNoKHRleHQudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxuICAgIH1cclxuXHJcbiAgICBfcHJlcGFyZU1hdHJpeEF0dHJpYnV0ZXMoZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgbWF0cml4IH0gPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgaWYgKG1hdHJpeCkge1xyXG4gICAgICAgICAgICBjb25zdCBjbGVhbnVwQXR0cmlidXRlID0gKGF0dHJpYnV0ZTogTWF0cml4QXR0cmlidXRlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHQgPSBtYXRyaXhbYXR0cmlidXRlXTtcclxuICAgICAgICAgICAgICAgIGlmIChhdHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWF0dC5tb2QpIGF0dC5tb2QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXR0LnRlbXAgPT09IDApIGRlbGV0ZSBhdHQudGVtcDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIFsnZmlyZXdhbGwnLCAnZGF0YV9wcm9jZXNzaW5nJywgJ3NsZWF6ZScsICdhdHRhY2snXS5mb3JFYWNoKChhdHQ6IE1hdHJpeEF0dHJpYnV0ZSkgPT4gY2xlYW51cEF0dHJpYnV0ZShhdHQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX3ByZXBhcmVTa2lsbHMoZGF0YSkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZVNraWxscyA9IHt9O1xyXG4gICAgICAgIGNvbnN0IG9sZFNraWxsczogU2tpbGxzID0gZGF0YS5kYXRhLnNraWxscy5hY3RpdmU7XHJcbiAgICAgICAgZm9yIChsZXQgW2tleSwgc2tpbGxdIG9mIE9iamVjdC5lbnRyaWVzKG9sZFNraWxscykpIHtcclxuICAgICAgICAgICAgLy8gaWYgZmlsdGVyIGlzbid0IGVtcHR5LCB3ZSBhcmUgZG9pbmcgY3VzdG9tIGZpbHRlcmluZ1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fZmlsdGVycy5za2lsbHMgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZG9lc1NraWxsQ29udGFpblRleHQoa2V5LCBza2lsbCwgdGhpcy5fZmlsdGVycy5za2lsbHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlU2tpbGxzW2tleV0gPSBza2lsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGdlbmVyYWwgY2hlY2sgaWYgd2UgYXJlbid0IGZpbHRlcmluZ1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxyXG4gICAgICAgICAgICAgICAgKHNraWxsLnZhbHVlID4gMCB8fCB0aGlzLl9zaG93blVudHJhaW5lZFNraWxscykgJiZcclxuICAgICAgICAgICAgICAgICEodGhpcy5faXNTa2lsbE1hZ2ljKGtleSwgc2tpbGwpICYmIGRhdGEuZGF0YS5zcGVjaWFsICE9PSAnbWFnaWMnKSAmJlxyXG4gICAgICAgICAgICAgICAgIShza2lsbC5hdHRyaWJ1dGUgPT09ICdyZXNvbmFuY2UnICYmIGRhdGEuZGF0YS5zcGVjaWFsICE9PSAncmVzb25hbmNlJylcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmVTa2lsbHNba2V5XSA9IHNraWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEhlbHBlcnMub3JkZXJLZXlzKGFjdGl2ZVNraWxscyk7XHJcbiAgICAgICAgZGF0YS5kYXRhLnNraWxscy5hY3RpdmUgPSBhY3RpdmVTa2lsbHM7XHJcbiAgICB9XHJcblxyXG4gICAgX3ByZXBhcmVJdGVtcyhkYXRhKSB7XHJcbiAgICAgICAgY29uc3QgaW52ZW50b3J5ID0ge1xyXG4gICAgICAgICAgICB3ZWFwb246IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5XZWFwb24nKSxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnd2VhcG9uJyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFybW9yOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQXJtb3InKSxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXJtb3InLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGV2aWNlOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRGV2aWNlJyksXHJcbiAgICAgICAgICAgICAgICBpdGVtczogW10sXHJcbiAgICAgICAgICAgICAgICBkYXRhc2V0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RldmljZScsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBlcXVpcG1lbnQ6IHtcclxuICAgICAgICAgICAgICAgIGxhYmVsOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5FcXVpcG1lbnQnKSxcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXSxcclxuICAgICAgICAgICAgICAgIGRhdGFzZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZXF1aXBtZW50JyxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGN5YmVyd2FyZToge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkN5YmVyd2FyZScpLFxyXG4gICAgICAgICAgICAgICAgaXRlbXM6IFtdLFxyXG4gICAgICAgICAgICAgICAgZGF0YXNldDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjeWJlcndhcmUnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgW2l0ZW1zLCBzcGVsbHMsIHF1YWxpdGllcywgYWRlcHRfcG93ZXJzLCBhY3Rpb25zLCBjb21wbGV4X2Zvcm1zLCBsaWZlc3R5bGVzLCBjb250YWN0cywgc2lucywgcHJvZ3JhbXNdID0gZGF0YS5pdGVtcy5yZWR1Y2UoXHJcbiAgICAgICAgICAgIChhcnIsIGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uaXNTdGFjayA9IGl0ZW0uZGF0YS5xdWFudGl0eSA/IGl0ZW0uZGF0YS5xdWFudGl0eSA+IDEgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdzcGVsbCcpIGFyclsxXS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS50eXBlID09PSAncXVhbGl0eScpIGFyclsyXS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS50eXBlID09PSAnYWRlcHRfcG93ZXInKSBhcnJbM10ucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2FjdGlvbicpIGFycls0XS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS50eXBlID09PSAnY29tcGxleF9mb3JtJykgYXJyWzVdLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChpdGVtLnR5cGUgPT09ICdsaWZlc3R5bGUnKSBhcnJbNl0ucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ2NvbnRhY3QnKSBhcnJbN10ucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGl0ZW0udHlwZSA9PT0gJ3NpbicpIGFycls4XS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoaXRlbS50eXBlID09PSAncHJvZ3JhbScpIGFycls5XS5wdXNoKGl0ZW0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoT2JqZWN0LmtleXMoaW52ZW50b3J5KS5pbmNsdWRlcyhpdGVtLnR5cGUpKSBhcnJbMF0ucHVzaChpdGVtKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhcnI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIFtbXSwgW10sIFtdLCBbXSwgW10sIFtdLCBbXSwgW10sIFtdLCBbXV0sXHJcbiAgICAgICAgKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc29ydEJ5TmFtZSA9IChpMSwgaTIpID0+IHtcclxuICAgICAgICAgICAgaWYgKGkxLm5hbWUgPiBpMi5uYW1lKSByZXR1cm4gMTtcclxuICAgICAgICAgICAgaWYgKGkxLm5hbWUgPCBpMi5uYW1lKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3Qgc29ydEJ5RXF1aXBwZWQgPSAobGVmdCwgcmlnaHQpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbGVmdEVxdWlwcGVkID0gbGVmdC5kYXRhPy50ZWNobm9sb2d5Py5lcXVpcHBlZDtcclxuICAgICAgICAgICAgY29uc3QgcmlnaHRFcXVpcHBlZCA9IHJpZ2h0LmRhdGE/LnRlY2hub2xvZ3k/LmVxdWlwcGVkO1xyXG4gICAgICAgICAgICBpZiAobGVmdEVxdWlwcGVkICYmICFyaWdodEVxdWlwcGVkKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIGlmIChyaWdodEVxdWlwcGVkICYmICFsZWZ0RXF1aXBwZWQpIHJldHVybiAxO1xyXG4gICAgICAgICAgICBpZiAobGVmdC5uYW1lID4gcmlnaHQubmFtZSkgcmV0dXJuIDE7XHJcbiAgICAgICAgICAgIGlmIChsZWZ0Lm5hbWUgPCByaWdodC5uYW1lKSByZXR1cm4gLTE7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgYWN0aW9ucy5zb3J0KHNvcnRCeU5hbWUpO1xyXG4gICAgICAgIGFkZXB0X3Bvd2Vycy5zb3J0KHNvcnRCeU5hbWUpO1xyXG4gICAgICAgIGNvbXBsZXhfZm9ybXMuc29ydChzb3J0QnlOYW1lKTtcclxuICAgICAgICBpdGVtcy5zb3J0KHNvcnRCeUVxdWlwcGVkKTtcclxuICAgICAgICBzcGVsbHMuc29ydChzb3J0QnlOYW1lKTtcclxuICAgICAgICBjb250YWN0cy5zb3J0KHNvcnRCeU5hbWUpO1xyXG4gICAgICAgIGxpZmVzdHlsZXMuc29ydChzb3J0QnlOYW1lKTtcclxuICAgICAgICBzaW5zLnNvcnQoc29ydEJ5TmFtZSk7XHJcbiAgICAgICAgcHJvZ3JhbXMuc29ydChzb3J0QnlFcXVpcHBlZCk7XHJcblxyXG4gICAgICAgIGl0ZW1zLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaW52ZW50b3J5W2l0ZW0udHlwZV0uaXRlbXMucHVzaChpdGVtKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgZGF0YS5pbnZlbnRvcnkgPSBPYmplY3QudmFsdWVzKGludmVudG9yeSk7XHJcbiAgICAgICAgZGF0YS5tYWdpYyA9IHtcclxuICAgICAgICAgICAgc3BlbGxib29rOiBzcGVsbHMsXHJcbiAgICAgICAgICAgIHBvd2VyczogYWRlcHRfcG93ZXJzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZGF0YS5hY3Rpb25zID0gYWN0aW9ucztcclxuICAgICAgICBkYXRhLmNvbXBsZXhfZm9ybXMgPSBjb21wbGV4X2Zvcm1zO1xyXG4gICAgICAgIGRhdGEubGlmZXN0eWxlcyA9IGxpZmVzdHlsZXM7XHJcbiAgICAgICAgZGF0YS5jb250YWN0cyA9IGNvbnRhY3RzO1xyXG4gICAgICAgIGRhdGEuc2lucyA9IHNpbnM7XHJcbiAgICAgICAgZGF0YS5wcm9ncmFtcyA9IHByb2dyYW1zO1xyXG5cclxuICAgICAgICBxdWFsaXRpZXMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoYS5kYXRhLnR5cGUgPT09ICdwb3NpdGl2ZScgJiYgYi5kYXRhLnR5cGUgPT09ICduZWdhdGl2ZScpIHJldHVybiAtMTtcclxuICAgICAgICAgICAgaWYgKGEuZGF0YS50eXBlID09PSAnbmVnYXRpdmUnICYmIGIuZGF0YS50eXBlID09PSAncG9zaXRpdmUnKSByZXR1cm4gMTtcclxuICAgICAgICAgICAgcmV0dXJuIGEubmFtZSA8IGIubmFtZSA/IC0xIDogMTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBkYXRhLnF1YWxpdGllcyA9IHF1YWxpdGllcztcclxuICAgIH1cclxuXHJcbiAgICAvKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWN0aXZhdGUgZXZlbnQgbGlzdGVuZXJzIHVzaW5nIHRoZSBwcmVwYXJlZCBzaGVldCBIVE1MXHJcbiAgICAgKiBAcGFyYW0gaHRtbCBUaGUgcHJlcGFyZWQgSFRNTCBvYmplY3QgcmVhZHkgdG8gYmUgcmVuZGVyZWQgaW50byB0aGUgRE9NXHJcbiAgICAgKi9cclxuICAgIGFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpIHtcclxuICAgICAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKTtcclxuXHJcbiAgICAgICAgaHRtbC5maW5kKCcuaGlkZGVuJykuaGlkZSgpO1xyXG5cclxuICAgICAgICBodG1sLmZpbmQoJy5za2lsbC1oZWFkZXInKS5jbGljaygoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgdGhpcy5fc2hvd25VbnRyYWluZWRTa2lsbHMgPSAhdGhpcy5fc2hvd25VbnRyYWluZWRTa2lsbHM7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcih0cnVlKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaHRtbC5maW5kKCcuaGFzLWRlc2MnKS5jbGljaygoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLmxpc3QtaXRlbScpO1xyXG4gICAgICAgICAgICBjb25zdCBpaWQgPSAkKGl0ZW0pLmRhdGEoKS5pdGVtO1xyXG4gICAgICAgICAgICBjb25zdCBmaWVsZCA9IGl0ZW0ubmV4dCgpO1xyXG4gICAgICAgICAgICBmaWVsZC50b2dnbGUoKTtcclxuICAgICAgICAgICAgaWYgKGlpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkLmlzKCc6dmlzaWJsZScpKSB0aGlzLl9zaG93bkRlc2MucHVzaChpaWQpO1xyXG4gICAgICAgICAgICAgICAgZWxzZSB0aGlzLl9zaG93bkRlc2MgPSB0aGlzLl9zaG93bkRlc2MuZmlsdGVyKCh2YWwpID0+IHZhbCAhPT0gaWlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBodG1sLmZpbmQoJyNmaWx0ZXItc2tpbGxzJykub24oJ2lucHV0JywgdGhpcy5fb25GaWx0ZXJTa2lsbHMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuY2VsbC1pbnB1dC1yb2xsJykuY2xpY2sodGhpcy5fb25Sb2xsQ2VsbElucHV0LmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLmF0dHJpYnV0ZS1yb2xsJykuY2xpY2sodGhpcy5fb25Sb2xsQXR0cmlidXRlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLnNraWxsLXJvbGwnKS5jbGljayh0aGlzLl9vblJvbGxBY3RpdmVTa2lsbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5kZWZlbnNlLXJvbGwnKS5jbGljayh0aGlzLl9vblJvbGxEZWZlbnNlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLmF0dHJpYnV0ZS1vbmx5LXJvbGwnKS5jbGljayh0aGlzLl9vblJvbGxBdHRyaWJ1dGVzT25seS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5zb2FrLXJvbGwnKS5jbGljayh0aGlzLl9vblJvbGxTb2FrLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLmRyYWluLXJvbGwnKS5jbGljayh0aGlzLl9vblJvbGxEcmFpbi5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5mYWRlLXJvbGwnKS5jbGljayh0aGlzLl9vblJvbGxGYWRlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLml0ZW0tcm9sbCcpLmNsaWNrKHRoaXMuX29uUm9sbEl0ZW0uYmluZCh0aGlzKSk7XHJcbiAgICAgICAgLy8gJChodG1sKS5maW5kKCcuaXRlbS1yb2xsJykub24oJ2NvbnRleHRtZW51JywgKCkgPT4gY29uc29sZS5sb2coJ1RFU1QnKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuaXRlbS1lcXVpcC10b2dnbGUnKS5jbGljayh0aGlzLl9vbkVxdWlwSXRlbS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5pdGVtLXF0eScpLmNoYW5nZSh0aGlzLl9vbkNoYW5nZVF0eS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5pdGVtLXJ0ZycpLmNoYW5nZSh0aGlzLl9vbkNoYW5nZVJ0Zy5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5pdGVtLWNyZWF0ZScpLmNsaWNrKHRoaXMuX29uSXRlbUNyZWF0ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5tYXRyaXgtcm9sbCcpLmNsaWNrKHRoaXMuX29uUm9sbE1hdHJpeEF0dHJpYnV0ZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5tYXRyaXgtYXR0LXNlbGVjdG9yJykuY2hhbmdlKHRoaXMuX29uTWF0cml4QXR0cmlidXRlU2VsZWN0ZWQuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuYmFzaWMtcm9sbCcpLmNsaWNrKHRoaXMuX29uUm9sbFByb21wdC5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5hcm1vci1yb2xsJykuY2xpY2sodGhpcy5fb25Sb2xsQXJtb3IuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuYWRkLWtub3dsZWRnZScpLmNsaWNrKHRoaXMuX29uQWRkS25vd2xlZGdlU2tpbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcua25vd2xlZGdlLXNraWxsJykuY2xpY2sodGhpcy5fb25Sb2xsS25vd2xlZGdlU2tpbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcucmVtb3ZlLWtub3dsZWRnZScpLmNsaWNrKHRoaXMuX29uUmVtb3ZlS25vd2xlZGdlU2tpbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuYWRkLWxhbmd1YWdlJykuY2xpY2sodGhpcy5fb25BZGRMYW5ndWFnZVNraWxsLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLmxhbmd1YWdlLXNraWxsJykuY2xpY2sodGhpcy5fb25Sb2xsTGFuZ3VhZ2VTa2lsbC5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5yZW1vdmUtbGFuZ3VhZ2UnKS5jbGljayh0aGlzLl9vblJlbW92ZUxhbmd1YWdlU2tpbGwuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuaW1wb3J0LWNoYXJhY3RlcicpLmNsaWNrKHRoaXMuX29uU2hvd0ltcG9ydENoYXJhY3Rlci5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5yZWxvYWQtYW1tbycpLmNsaWNrKHRoaXMuX29uUmVsb2FkQW1tby5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5za2lsbC1lZGl0JykuY2xpY2sodGhpcy5fb25TaG93RWRpdFNraWxsLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLmtub3dsZWRnZS1za2lsbC1lZGl0JykuY2xpY2sodGhpcy5fb25TaG93RWRpdEtub3dsZWRnZVNraWxsLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLmxhbmd1YWdlLXNraWxsLWVkaXQnKS5jbGljayh0aGlzLl9vblNob3dFZGl0TGFuZ3VhZ2VTa2lsbC5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgJChodG1sKS5maW5kKCcuaG9yaXpvbnRhbC1jZWxsLWlucHV0IC5jZWxsJykub24oJ2NsaWNrJywgdGhpcy5fb25TZXRDZWxsSW5wdXQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgICQoaHRtbCkuZmluZCgnLmhvcml6b250YWwtY2VsbC1pbnB1dCAuY2VsbCcpLm9uKCdjb250ZXh0bWVudScsIHRoaXMuX29uQ2xlYXJDZWxsSW5wdXQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZXMgbWF0cml4IGNvbmRpdGlvbiBtb25pdG9yIG9uIHRoZSBkZXZpY2UgdGhlIGFjdG9yIGhhcyBlcXVpcHBlXHJcbiAgICAgICAgJChodG1sKVxyXG4gICAgICAgICAgICAuZmluZCgnW25hbWU9XCJkYXRhLm1hdHJpeC5jb25kaXRpb25fbW9uaXRvci52YWx1ZVwiXScpXHJcbiAgICAgICAgICAgIC5vbignY2hhbmdlJywgYXN5bmMgKGV2ZW50OiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IEhlbHBlcnMucGFyc2VJbnB1dFRvTnVtYmVyKGV2ZW50LmN1cnJlbnRUYXJnZXQudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF0cml4RGV2aWNlID0gdGhpcy5hY3Rvci5nZXRNYXRyaXhEZXZpY2UoKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRyaXhEZXZpY2UgJiYgIWlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhWydkYXRhLnRlY2hub2xvZ3kuY29uZGl0aW9uX21vbml0b3IudmFsdWUnXSA9IHZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IG1hdHJpeERldmljZS51cGRhdGUodXBkYXRlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBVcGRhdGUgSW52ZW50b3J5IEl0ZW1cclxuICAgICAgICBodG1sLmZpbmQoJy5pdGVtLWVkaXQnKS5jbGljaygoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgaWlkID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuZ2V0T3duZWRJdGVtKGlpZCk7XHJcbiAgICAgICAgICAgIGlmIChpdGVtKSBpdGVtLnNoZWV0LnJlbmRlcih0cnVlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBEZWxldGUgSW52ZW50b3J5IEl0ZW1cclxuICAgICAgICBodG1sLmZpbmQoJy5pdGVtLWRlbGV0ZScpLmNsaWNrKChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBpaWQgPSBIZWxwZXJzLmxpc3RJdGVtSWQoZXZlbnQpO1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkucGFyZW50cygnLmxpc3QtaXRlbScpO1xyXG4gICAgICAgICAgICB0aGlzLmFjdG9yLmRlbGV0ZU93bmVkSXRlbShpaWQpO1xyXG4gICAgICAgICAgICBlbC5zbGlkZVVwKDIwMCwgKCkgPT4gdGhpcy5yZW5kZXIoZmFsc2UpKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBEcmFnIGludmVudG9yeSBpdGVtXHJcbiAgICAgICAgbGV0IGhhbmRsZXIgPSAoZXYpID0+IHRoaXMuX29uRHJhZ0l0ZW1TdGFydChldik7XHJcbiAgICAgICAgaHRtbC5maW5kKCcubGlzdC1pdGVtJykuZWFjaCgoaSwgaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5kYXRhc2V0ICYmIGl0ZW0uZGF0YXNldC5pdGVtSWQpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uc2V0QXR0cmlidXRlKCdkcmFnZ2FibGUnLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgaGFuZGxlciwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uRmlsdGVyU2tpbGxzKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5fZmlsdGVycy5za2lsbHMgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUmVsb2FkQW1tbyhldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgaWlkID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5nZXRPd25lZEl0ZW0oaWlkKTtcclxuICAgICAgICBpZiAoaXRlbSkgcmV0dXJuIGl0ZW0ucmVsb2FkQW1tbygpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vbk1hdHJpeEF0dHJpYnV0ZVNlbGVjdGVkKGV2ZW50KSB7XHJcbiAgICAgICAgbGV0IGlpZCA9IHRoaXMuYWN0b3IuZGF0YS5kYXRhLm1hdHJpeC5kZXZpY2U7XHJcbiAgICAgICAgbGV0IGl0ZW0gPSB0aGlzLmFjdG9yLmdldE93bmVkSXRlbShpaWQpO1xyXG4gICAgICAgIGlmICghaXRlbSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdjb3VsZCBub3QgZmluZCBpdGVtJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gZ3JhYiBtYXRyaXggYXR0cmlidXRlIChzbGVhemUsIGF0dGFjaywgZXRjLilcclxuICAgICAgICBsZXQgYXR0ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LmF0dDtcclxuICAgICAgICAvLyBncmFiIGRldmljZSBhdHRyaWJ1dGUgKGF0dDEsIGF0dDIsIC4uLilcclxuICAgICAgICBsZXQgZGV2aWNlQXR0ID0gZXZlbnQuY3VycmVudFRhcmdldC52YWx1ZTtcclxuXHJcbiAgICAgICAgLy8gZ2V0IGN1cnJlbnQgbWF0cml4IGF0dHJpYnV0ZSBvbiB0aGUgZGV2aWNlXHJcbiAgICAgICAgbGV0IG9sZFZhbCA9IGl0ZW0uZGF0YS5kYXRhLmF0dHNbZGV2aWNlQXR0XS5hdHQ7XHJcbiAgICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgICAgIF9pZDogaWlkLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIGdvIHRocm91Z2ggYXR0cyBvbiBkZXZpY2UsIHNldHVwIG1hdHJpeCBhdHRyaWJ1dGVzIG9uIGl0XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPD0gNDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCB0bXAgPSBgYXR0JHtpfWA7XHJcbiAgICAgICAgICAgIGxldCBrZXkgPSBgZGF0YS5hdHRzLmF0dCR7aX0uYXR0YDtcclxuICAgICAgICAgICAgaWYgKHRtcCA9PT0gZGV2aWNlQXR0KSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSBhdHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaXRlbS5kYXRhLmRhdGEuYXR0c1tgYXR0JHtpfWBdLmF0dCA9PT0gYXR0KSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSBvbGRWYWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci51cGRhdGVPd25lZEl0ZW0oZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgX29uSXRlbUNyZWF0ZShldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IEhlbHBlcnMubGlzdEl0ZW1JZChldmVudCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codHlwZSk7XHJcbiAgICAgICAgY29uc3QgaXRlbURhdGEgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IGBOZXcgJHt0eXBlfWAsXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGUsXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3Rvci5jcmVhdGVPd25lZEl0ZW0oaXRlbURhdGEsIHsgcmVuZGVyU2hlZXQ6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uQWRkTGFuZ3VhZ2VTa2lsbChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5hY3Rvci5hZGRMYW5ndWFnZVNraWxsKHsgbmFtZTogJycgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUmVtb3ZlTGFuZ3VhZ2VTa2lsbChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3Qgc2tpbGxJZCA9IEhlbHBlcnMubGlzdEl0ZW1JZChldmVudCk7XHJcbiAgICAgICAgdGhpcy5hY3Rvci5yZW1vdmVMYW5ndWFnZVNraWxsKHNraWxsSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vbkFkZEtub3dsZWRnZVNraWxsKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBjYXRlZ29yeSA9IEhlbHBlcnMubGlzdEl0ZW1JZChldmVudCk7XHJcbiAgICAgICAgdGhpcy5hY3Rvci5hZGRLbm93bGVkZ2VTa2lsbChjYXRlZ29yeSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUmVtb3ZlS25vd2xlZGdlU2tpbGwoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IFtza2lsbElkLCBjYXRlZ29yeV0gPSBIZWxwZXJzLmxpc3RJdGVtSWQoZXZlbnQpLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgdGhpcy5hY3Rvci5yZW1vdmVLbm93bGVkZ2VTa2lsbChza2lsbElkLCBjYXRlZ29yeSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uQ2hhbmdlUnRnKGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgaWlkID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5nZXRPd25lZEl0ZW0oaWlkKTtcclxuICAgICAgICBjb25zdCBydGcgPSBwYXJzZUludChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICBpZiAoaXRlbSAmJiBydGcpIHtcclxuICAgICAgICAgICAgaXRlbS51cGRhdGUoeyAnZGF0YS50ZWNobm9sb2d5LnJhdGluZyc6IHJ0ZyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uQ2hhbmdlUXR5KGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgaWlkID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5hY3Rvci5nZXRPd25lZEl0ZW0oaWlkKTtcclxuICAgICAgICBjb25zdCBxdHkgPSBwYXJzZUludChldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICBpZiAoaXRlbSAmJiBxdHkpIHtcclxuICAgICAgICAgICAgaXRlbS5kYXRhLmRhdGEudGVjaG5vbG9neS5xdWFudGl0eSA9IHF0eTtcclxuICAgICAgICAgICAgaXRlbS51cGRhdGUoeyAnZGF0YS50ZWNobm9sb2d5LnF1YW50aXR5JzogcXR5IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25FcXVpcEl0ZW0oZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGlpZCA9IEhlbHBlcnMubGlzdEl0ZW1JZChldmVudCk7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuZ2V0T3duZWRJdGVtKGlpZCk7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgY29uc3QgaXRlbURhdGEgPSBpdGVtLmRhdGEuZGF0YTtcclxuICAgICAgICAgICAgY29uc3QgbmV3SXRlbXMgPSBbXSBhcyBhbnlbXTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2RldmljZScpIHtcclxuICAgICAgICAgICAgICAgIC8vIHR1cm4gb2ZmIGFsbCBvdGhlciBkZXZpY2VzIHRoYW4gdGhlIG9uZSB0aGF0IGlzIGJlaW5nIGVxdWlwcGVkXHJcbiAgICAgICAgICAgICAgICAvLyBpZiBjbGlja2luZyB0aGUgZXF1aXBwZWQsIHRvZ2dsZSBpdFxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaXRlIG9mIHRoaXMuYWN0b3IuaXRlbXMuZmlsdGVyKChpKSA9PiBpLnR5cGUgPT09ICdkZXZpY2UnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0l0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnX2lkJzogaXRlLl9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEudGVjaG5vbG9neS5lcXVpcHBlZCc6IGl0ZS5faWQgPT09IGlpZCA/ICFpdGVtRGF0YS50ZWNobm9sb2d5LmVxdWlwcGVkIDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAnX2lkJzogaWlkLFxyXG4gICAgICAgICAgICAgICAgICAgICdkYXRhLnRlY2hub2xvZ3kuZXF1aXBwZWQnOiAhaXRlbURhdGEudGVjaG5vbG9neS5lcXVpcHBlZCxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWN0b3IudXBkYXRlRW1iZWRkZWRFbnRpdHkoJ093bmVkSXRlbScsIG5ld0l0ZW1zKTtcclxuICAgICAgICAgICAgdGhpcy5hY3Rvci5yZW5kZXIoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uU2V0Q2VsbElucHV0KGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSBOdW1iZXIoZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnZhbHVlKTtcclxuICAgICAgICBjb25zdCBjbUlkID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5jbG9zZXN0KCcuaG9yaXpvbnRhbC1jZWxsLWlucHV0JykuZGF0YSgpLmlkO1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICBpZiAoY21JZCA9PT0gJ3N0dW4nIHx8IGNtSWQgPT09ICdwaHlzaWNhbCcpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSBgZGF0YS50cmFjay4ke2NtSWR9LnZhbHVlYDtcclxuICAgICAgICAgICAgZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNtSWQgPT09ICdlZGdlJykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IGBkYXRhLmF0dHJpYnV0ZXMuZWRnZS51c2VzYDtcclxuICAgICAgICAgICAgZGF0YVtwcm9wZXJ0eV0gPSB2YWx1ZTtcclxuICAgICAgICB9IGVsc2UgaWYgKGNtSWQgPT09ICdvdmVyZmxvdycpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvcGVydHkgPSAnZGF0YS50cmFjay5waHlzaWNhbC5vdmVyZmxvdy52YWx1ZSc7XHJcbiAgICAgICAgICAgIGRhdGFbcHJvcGVydHldID0gdmFsdWU7XHJcbiAgICAgICAgfSBlbHNlIGlmIChjbUlkID09PSAnbWF0cml4Jykge1xyXG4gICAgICAgICAgICBjb25zdCBtYXRyaXhEZXZpY2UgPSB0aGlzLmFjdG9yLmdldE1hdHJpeERldmljZSgpO1xyXG4gICAgICAgICAgICBpZiAobWF0cml4RGV2aWNlICYmICFpc05hTih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ2RhdGEudGVjaG5vbG9neS5jb25kaXRpb25fbW9uaXRvci52YWx1ZSddID0gdmFsdWU7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBtYXRyaXhEZXZpY2UudXBkYXRlKHVwZGF0ZURhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMuYWN0b3IudXBkYXRlKGRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vbkNsZWFyQ2VsbElucHV0KGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgY21JZCA9ICQoZXZlbnQuY3VycmVudFRhcmdldCkuY2xvc2VzdCgnLmhvcml6b250YWwtY2VsbC1pbnB1dCcpLmRhdGEoKS5pZDtcclxuICAgICAgICBjb25zdCBkYXRhID0ge307XHJcbiAgICAgICAgaWYgKGNtSWQgPT09ICdzdHVuJyB8fCBjbUlkID09PSAncGh5c2ljYWwnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHByb3BlcnR5ID0gYGRhdGEudHJhY2suJHtjbUlkfS52YWx1ZWA7XHJcbiAgICAgICAgICAgIGRhdGFbcHJvcGVydHldID0gMDtcclxuICAgICAgICB9IGVsc2UgaWYgKGNtSWQgPT09ICdlZGdlJykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IGBkYXRhLmF0dHJpYnV0ZXMuZWRnZS51c2VzYDtcclxuICAgICAgICAgICAgZGF0YVtwcm9wZXJ0eV0gPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY21JZCA9PT0gJ292ZXJmbG93Jykge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9ICdkYXRhLnRyYWNrLnBoeXNpY2FsLm92ZXJmbG93LnZhbHVlJztcclxuICAgICAgICAgICAgZGF0YVtwcm9wZXJ0eV0gPSAwO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoY21JZCA9PT0gJ21hdHJpeCcpIHtcclxuICAgICAgICAgICAgY29uc3QgbWF0cml4RGV2aWNlID0gdGhpcy5hY3Rvci5nZXRNYXRyaXhEZXZpY2UoKTtcclxuICAgICAgICAgICAgaWYgKG1hdHJpeERldmljZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnZGF0YS50ZWNobm9sb2d5LmNvbmRpdGlvbl9tb25pdG9yLnZhbHVlJ10gPSAwO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgbWF0cml4RGV2aWNlLnVwZGF0ZSh1cGRhdGVEYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnVwZGF0ZShkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25Sb2xsQ2VsbElucHV0KGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBsZXQgdHJhY2sgPSAkKGV2ZW50LmN1cnJlbnRUYXJnZXQpLmNsb3Nlc3QoJy5ob3Jpem9udGFsLWNlbGwtaW5wdXQnKS5kYXRhKCkuaWQ7XHJcbiAgICAgICAgaWYgKHRyYWNrID09PSAnc3R1bicgfHwgdHJhY2sgPT09ICdwaHlzaWNhbCcpIHtcclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hY3Rvci5yb2xsTmF0dXJhbFJlY292ZXJ5KHRyYWNrLCBldmVudCk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0cmFjayA9PT0gJ2VkZ2UnKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYWN0b3Iucm9sbEF0dHJpYnV0ZSgnZWRnZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25Sb2xsUHJvbXB0KGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnByb21wdFJvbGwoeyBldmVudDogZXZlbnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUm9sbEl0ZW0oZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGlpZCA9IEhlbHBlcnMubGlzdEl0ZW1JZChldmVudCk7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuYWN0b3IuZ2V0T3duZWRJdGVtKGlpZCk7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgYXdhaXQgaXRlbS5wb3N0Q2FyZChldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vblJvbGxGYWRlKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB0aGlzLmFjdG9yLnJvbGxGYWRlKHsgZXZlbnQ6IGV2ZW50IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vblJvbGxEcmFpbihldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5hY3Rvci5yb2xsRHJhaW4oeyBldmVudDogZXZlbnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUm9sbEFybW9yKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3Rvci5yb2xsQXJtb3IoeyBldmVudDogZXZlbnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUm9sbERlZmVuc2UoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdG9yLnJvbGxEZWZlbnNlKHsgZXZlbnQ6IGV2ZW50IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vblJvbGxNYXRyaXhBdHRyaWJ1dGUoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGF0dHIgPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYXR0cmlidXRlO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdG9yLnJvbGxNYXRyaXhBdHRyaWJ1dGUoYXR0ciwgeyBldmVudDogZXZlbnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUm9sbFNvYWsoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdG9yLnJvbGxTb2FrKHsgZXZlbnQ6IGV2ZW50IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vblJvbGxBdHRyaWJ1dGVzT25seShldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3Qgcm9sbCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5yb2xsO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmFjdG9yLnJvbGxBdHRyaWJ1dGVzVGVzdChyb2xsLCB7IGV2ZW50OiBldmVudCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25Sb2xsS25vd2xlZGdlU2tpbGwoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGlkID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICBjb25zdCBbc2tpbGwsIGNhdGVnb3J5XSA9IGlkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0b3Iucm9sbEtub3dsZWRnZVNraWxsKGNhdGVnb3J5LCBza2lsbCwgeyBldmVudDogZXZlbnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUm9sbExhbmd1YWdlU2tpbGwoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHNraWxsID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5hY3Rvci5yb2xsTGFuZ3VhZ2VTa2lsbChza2lsbCwgeyBldmVudDogZXZlbnQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uUm9sbEFjdGl2ZVNraWxsKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBza2lsbCA9IEhlbHBlcnMubGlzdEl0ZW1JZChldmVudCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0b3Iucm9sbEFjdGl2ZVNraWxsKHNraWxsLCB7IGV2ZW50OiBldmVudCB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25Sb2xsQXR0cmlidXRlKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBhdHRyID0gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcuYXR0cmlidXRlJykuZGF0YXNldC5hdHRyaWJ1dGU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0b3Iucm9sbEF0dHJpYnV0ZShhdHRyLCB7IGV2ZW50OiBldmVudCB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9maW5kQWN0aXZlTGlzdCgpIHtcclxuICAgICAgICByZXR1cm4gJCh0aGlzLmVsZW1lbnQpLmZpbmQoJy50YWIuYWN0aXZlIC5zY3JvbGwtYXJlYScpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgYXN5bmMgX3JlbmRlciguLi5hcmdzKSB7XHJcbiAgICAgICAgY29uc3QgZm9jdXNMaXN0ID0gJCh0aGlzLmVsZW1lbnQpLmZpbmQoJzpmb2N1cycpO1xyXG4gICAgICAgIGNvbnN0IGZvY3VzOiBhbnkgPSBmb2N1c0xpc3QubGVuZ3RoID8gZm9jdXNMaXN0WzBdIDogbnVsbDtcclxuXHJcbiAgICAgICAgdGhpcy5fc2F2ZVNjcm9sbFBvc2l0aW9ucygpO1xyXG4gICAgICAgIGF3YWl0IHN1cGVyLl9yZW5kZXIoLi4uYXJncyk7XHJcbiAgICAgICAgdGhpcy5fcmVzdG9yZVNjcm9sbFBvc2l0aW9ucygpO1xyXG5cclxuICAgICAgICBpZiAoZm9jdXMgJiYgZm9jdXMubmFtZSkge1xyXG4gICAgICAgICAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5mb3JtW2ZvY3VzLm5hbWVdO1xyXG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBzZWxlY3Rpb24gcmFuZ2Ugb24gdGhlIGZvY3VzIGZvcm1lZCBmcm9tIGJlZm9yZSAoa2VlcHMgdHJhY2sgb2YgY3Vyc29yIGluIGlucHV0KVxyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5zZXRTZWxlY3Rpb25SYW5nZSAmJiBlbGVtZW50LnNldFNlbGVjdGlvblJhbmdlKGZvY3VzLnNlbGVjdGlvblN0YXJ0LCBmb2N1cy5zZWxlY3Rpb25FbmQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlTGlzdCA9IHRoaXMuX2ZpbmRBY3RpdmVMaXN0KCk7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUxpc3QubGVuZ3RoICYmIHRoaXMuX3Njcm9sbCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFjdGl2ZUxpc3QucHJvcCgnc2Nyb2xsVG9wJywgdGhpcy5fc2Nyb2xsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBfc2F2ZVNjcm9sbFBvc2l0aW9ucygpIHtcclxuICAgICAgICBjb25zdCBhY3RpdmVMaXN0ID0gdGhpcy5fZmluZEFjdGl2ZUxpc3QoKTtcclxuICAgICAgICBpZiAoYWN0aXZlTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsID0gYWN0aXZlTGlzdC5wcm9wKCdzY3JvbGxUb3AnKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX2Nsb3NlT3BlblNraWxsQXBwKCkge1xyXG4gICAgICAgIGlmIChnbG9iYWxTa2lsbEFwcElkICE9PSAtMSkge1xyXG4gICAgICAgICAgICBpZiAodWkud2luZG93c1tnbG9iYWxTa2lsbEFwcElkXSkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdWkud2luZG93c1tnbG9iYWxTa2lsbEFwcElkXS5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGdsb2JhbFNraWxsQXBwSWQgPSAtMTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEtlZXAgdHJhY2sgb2YgZWFjaCBTa2lsbEVkaXRGb3JtIGluc3RhbmNlIGFuZCBjbG9zZSBiZWZvcmUgb3BlbmluZyBhbm90aGVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBza2lsbEVkaXRGb3JtSW1wbGVtZW50YXRpb24gQW55IGV4dGVuZGluZyBjbGFzcyEgb2YgU2tpbGxFZGl0Rm9ybVxyXG4gICAgICogQHBhcmFtIGFjdG9yXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAgICogQHBhcmFtIGFyZ3MgQ29sbGVjdCBhcmd1bWVudHMgb2YgdGhlIGRpZmZlcmVudCByZW5kZXJXaXRoU2tpbGwgaW1wbGVtZW50YXRpb25zLlxyXG4gICAgICovXHJcbiAgICBhc3luYyBfc2hvd1NraWxsRWRpdEZvcm0oc2tpbGxFZGl0Rm9ybUltcGxlbWVudGF0aW9uLCBhY3RvcjogU1I1QWN0b3IsIG9wdGlvbnM6IG9iamVjdCwgLi4uYXJncykge1xyXG4gICAgICAgIGF3YWl0IHRoaXMuX2Nsb3NlT3BlblNraWxsQXBwKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNraWxsRWRpdEZvcm0gPSBuZXcgc2tpbGxFZGl0Rm9ybUltcGxlbWVudGF0aW9uKGFjdG9yLCBvcHRpb25zLCAuLi5hcmdzKTtcclxuICAgICAgICBnbG9iYWxTa2lsbEFwcElkID0gc2tpbGxFZGl0Rm9ybS5hcHBJZDtcclxuICAgICAgICBhd2FpdCBza2lsbEVkaXRGb3JtLnJlbmRlcih0cnVlKVxyXG4gICAgfVxyXG5cclxuICAgIF9vblNob3dFZGl0S25vd2xlZGdlU2tpbGwoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IFtza2lsbCwgY2F0ZWdvcnldID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KS5zcGxpdCgnLicpO1xyXG4gICAgICAgIHRoaXMuX3Nob3dTa2lsbEVkaXRGb3JtKEtub3dsZWRnZVNraWxsRWRpdEZvcm0sIHRoaXMuYWN0b3IsIHtcclxuICAgICAgICAgICAgZXZlbnQ6IGV2ZW50fSwgc2tpbGwsIGNhdGVnb3J5KTtcclxuICAgIH1cclxuXHJcbiAgICBfb25TaG93RWRpdExhbmd1YWdlU2tpbGwoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHNraWxsID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICAvLyBuZXcgTGFuZ3VhZ2VTa2lsbEVkaXRGb3JtKHRoaXMuYWN0b3IsIHNraWxsLCB7IGV2ZW50OiBldmVudCB9KS5yZW5kZXIodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy5fc2hvd1NraWxsRWRpdEZvcm0oTGFuZ3VhZ2VTa2lsbEVkaXRGb3JtLCB0aGlzLmFjdG9yLCB7ZXZlbnQ6IGV2ZW50fSwgc2tpbGwpO1xyXG4gICAgfVxyXG5cclxuICAgIF9vblNob3dFZGl0U2tpbGwoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHNraWxsID0gSGVscGVycy5saXN0SXRlbUlkKGV2ZW50KTtcclxuICAgICAgICAvLyBuZXcgU2tpbGxFZGl0Rm9ybSh0aGlzLmFjdG9yLCBza2lsbCwgeyBldmVudDogZXZlbnQgfSkucmVuZGVyKHRydWUpO1xyXG4gICAgICAgIHRoaXMuX3Nob3dTa2lsbEVkaXRGb3JtKFNraWxsRWRpdEZvcm0sIHRoaXMuYWN0b3IsIHtldmVudDogZXZlbnR9LCBza2lsbCk7XHJcbiAgICB9XHJcblxyXG4gICAgX29uU2hvd0ltcG9ydENoYXJhY3RlcihldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgbmFtZTogJ2NodW1tZXItaW1wb3J0JyxcclxuICAgICAgICAgICAgdGl0bGU6ICdDaHVtbWVyIEltcG9ydCcsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBuZXcgQ2h1bW1lckltcG9ydEZvcm0odGhpcy5hY3Rvciwgb3B0aW9ucykucmVuZGVyKHRydWUpO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBTUjVBY3RvclR5cGUgPSBTaGFkb3dydW4uU1I1QWN0b3JUeXBlO1xyXG5pbXBvcnQgeyBDaGFyYWN0ZXJQcmVwIH0gZnJvbSAnLi9DaGFyYWN0ZXJQcmVwJztcclxuaW1wb3J0IHsgU3Bpcml0UHJlcCB9IGZyb20gJy4vU3Bpcml0UHJlcCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQWN0b3JQcmVwRmFjdG9yeSB7XHJcbiAgICBzdGF0aWMgQ3JlYXRlKGRhdGE6IFNSNUFjdG9yVHlwZSkge1xyXG4gICAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdjaGFyYWN0ZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgQ2hhcmFjdGVyUHJlcChkYXRhKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ3NwaXJpdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBTcGlyaXRQcmVwKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgU1I1QWN0b3JUeXBlID0gU2hhZG93cnVuLlNSNUFjdG9yVHlwZTtcclxuaW1wb3J0IHsgU1I1SXRlbURhdGFXcmFwcGVyIH0gZnJvbSAnLi4vLi4vaXRlbS9TUjVJdGVtRGF0YVdyYXBwZXInO1xyXG5pbXBvcnQgU1I1QWN0b3JEYXRhID0gU2hhZG93cnVuLlNSNUFjdG9yRGF0YTtcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBCYXNlQWN0b3JQcmVwPEFjdG9yVHlwZSBleHRlbmRzIFNSNUFjdG9yVHlwZSwgRGF0YVR5cGUgZXh0ZW5kcyBTUjVBY3RvckRhdGE+IHtcclxuICAgIGRhdGE6IERhdGFUeXBlO1xyXG4gICAgaXRlbXM6IFNSNUl0ZW1EYXRhV3JhcHBlcltdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IEFjdG9yVHlwZSkge1xyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGEuZGF0YTtcclxuICAgICAgICB0aGlzLml0ZW1zID0gZGF0YS5pdGVtcy5tYXAoKGl0ZW0pID0+IG5ldyBTUjVJdGVtRGF0YVdyYXBwZXIoaXRlbSkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIG92ZXJyaWRlIHdpdGggdGhlIGNvcnJlY3Qgb3JkZXIgYW5kIGZ1Y250aW9ucyB0byBwcmVwYXJlIHRoZSBhY3RvclxyXG4gICAgYWJzdHJhY3QgcHJlcGFyZSgpOiB2b2lkO1xyXG59XHJcbiIsImltcG9ydCB7IEJhc2VBY3RvclByZXAgfSBmcm9tICcuL0Jhc2VBY3RvclByZXAnO1xyXG5pbXBvcnQgU1I1Q2hhcmFjdGVyVHlwZSA9IFNoYWRvd3J1bi5TUjVDaGFyYWN0ZXJUeXBlO1xyXG5pbXBvcnQgQ2hhcmFjdGVyQWN0b3JEYXRhID0gU2hhZG93cnVuLkNoYXJhY3RlckFjdG9yRGF0YTtcclxuaW1wb3J0IHsgSW5pdGlhdGl2ZVByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9Jbml0aWF0aXZlUHJlcCc7XHJcbmltcG9ydCB7IE1vZGlmaWVyc1ByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9Nb2RpZmllcnNQcmVwJztcclxuaW1wb3J0IHsgTWF0cml4UHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL01hdHJpeFByZXAnO1xyXG5pbXBvcnQgeyBJdGVtUHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL0l0ZW1QcmVwJztcclxuaW1wb3J0IHsgU2tpbGxzUHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL1NraWxsc1ByZXAnO1xyXG5pbXBvcnQgeyBMaW1pdHNQcmVwIH0gZnJvbSAnLi9mdW5jdGlvbnMvTGltaXRzUHJlcCc7XHJcbmltcG9ydCB7IENvbmRpdGlvbk1vbml0b3JzUHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL0NvbmRpdGlvbk1vbml0b3JzUHJlcCc7XHJcbmltcG9ydCB7IE1vdmVtZW50UHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL01vdmVtZW50UHJlcCc7XHJcbmltcG9ydCB7IFdvdW5kc1ByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9Xb3VuZHNQcmVwJztcclxuaW1wb3J0IHsgQXR0cmlidXRlc1ByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9BdHRyaWJ1dGVzUHJlcCc7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2hhcmFjdGVyUHJlcCBleHRlbmRzIEJhc2VBY3RvclByZXA8U1I1Q2hhcmFjdGVyVHlwZSwgQ2hhcmFjdGVyQWN0b3JEYXRhPiB7XHJcbiAgICBwcmVwYXJlKCkge1xyXG4gICAgICAgIE1vZGlmaWVyc1ByZXAucHJlcGFyZU1vZGlmaWVycyh0aGlzLmRhdGEpO1xyXG5cclxuICAgICAgICBJdGVtUHJlcC5wcmVwYXJlQXJtb3IodGhpcy5kYXRhLCB0aGlzLml0ZW1zKTtcclxuICAgICAgICBJdGVtUHJlcC5wcmVwYXJlQ3liZXJ3YXJlKHRoaXMuZGF0YSwgdGhpcy5pdGVtcyk7XHJcblxyXG4gICAgICAgIFNraWxsc1ByZXAucHJlcGFyZVNraWxscyh0aGlzLmRhdGEpO1xyXG4gICAgICAgIEF0dHJpYnV0ZXNQcmVwLnByZXBhcmVBdHRyaWJ1dGVzKHRoaXMuZGF0YSk7XHJcbiAgICAgICAgTGltaXRzUHJlcC5wcmVwYXJlTGltaXRzKHRoaXMuZGF0YSk7XHJcblxyXG4gICAgICAgIE1hdHJpeFByZXAucHJlcGFyZU1hdHJpeCh0aGlzLmRhdGEsIHRoaXMuaXRlbXMpO1xyXG5cclxuICAgICAgICBDb25kaXRpb25Nb25pdG9yc1ByZXAucHJlcGFyZVBoeXNpY2FsKHRoaXMuZGF0YSk7XHJcbiAgICAgICAgQ29uZGl0aW9uTW9uaXRvcnNQcmVwLnByZXBhcmVTdHVuKHRoaXMuZGF0YSk7XHJcblxyXG4gICAgICAgIE1vdmVtZW50UHJlcC5wcmVwYXJlTW92ZW1lbnQodGhpcy5kYXRhKTtcclxuICAgICAgICBXb3VuZHNQcmVwLnByZXBhcmVXb3VuZHModGhpcy5kYXRhKTtcclxuXHJcbiAgICAgICAgSW5pdGlhdGl2ZVByZXAucHJlcGFyZU1lYXRzcGFjZUluaXQodGhpcy5kYXRhKTtcclxuICAgICAgICBJbml0aWF0aXZlUHJlcC5wcmVwYXJlQXN0cmFsSW5pdCh0aGlzLmRhdGEpO1xyXG4gICAgICAgIEluaXRpYXRpdmVQcmVwLnByZXBhcmVNYXRyaXhJbml0KHRoaXMuZGF0YSk7XHJcbiAgICAgICAgSW5pdGlhdGl2ZVByZXAucHJlcGFyZUN1cnJlbnRJbml0aWF0aXZlKHRoaXMuZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmFzZUFjdG9yUHJlcCB9IGZyb20gJy4vQmFzZUFjdG9yUHJlcCc7XHJcbmltcG9ydCBTcGlyaXRBY3RvckRhdGEgPSBTaGFkb3dydW4uU3Bpcml0QWN0b3JEYXRhO1xyXG5pbXBvcnQgU1I1U3Bpcml0VHlwZSA9IFNoYWRvd3J1bi5TUjVTcGlyaXRUeXBlO1xyXG5pbXBvcnQgeyBJdGVtUHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL0l0ZW1QcmVwJztcclxuaW1wb3J0IHsgU2tpbGxzUHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL1NraWxsc1ByZXAnO1xyXG5pbXBvcnQgeyBBdHRyaWJ1dGVzUHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL0F0dHJpYnV0ZXNQcmVwJztcclxuaW1wb3J0IHsgTGltaXRzUHJlcCB9IGZyb20gJy4vZnVuY3Rpb25zL0xpbWl0c1ByZXAnO1xyXG5pbXBvcnQgeyBDb25kaXRpb25Nb25pdG9yc1ByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9Db25kaXRpb25Nb25pdG9yc1ByZXAnO1xyXG5pbXBvcnQgeyBNb3ZlbWVudFByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9Nb3ZlbWVudFByZXAnO1xyXG5pbXBvcnQgeyBXb3VuZHNQcmVwIH0gZnJvbSAnLi9mdW5jdGlvbnMvV291bmRzUHJlcCc7XHJcbmltcG9ydCB7IE1vZGlmaWVyc1ByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9Nb2RpZmllcnNQcmVwJztcclxuaW1wb3J0IHsgSW5pdGlhdGl2ZVByZXAgfSBmcm9tICcuL2Z1bmN0aW9ucy9Jbml0aWF0aXZlUHJlcCc7XHJcbmltcG9ydCBTcGlyaXRUeXBlID0gU2hhZG93cnVuLlNwaXJpdFR5cGU7XHJcbmltcG9ydCB7IEhlbHBlcnMgfSBmcm9tICcuLi8uLi9oZWxwZXJzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTcGlyaXRQcmVwIGV4dGVuZHMgQmFzZUFjdG9yUHJlcDxTUjVTcGlyaXRUeXBlLCBTcGlyaXRBY3RvckRhdGE+IHtcclxuICAgIHByZXBhcmUoKSB7XHJcbiAgICAgICAgTW9kaWZpZXJzUHJlcC5wcmVwYXJlTW9kaWZpZXJzKHRoaXMuZGF0YSk7XHJcblxyXG4gICAgICAgIFNwaXJpdFByZXAucHJlcGFyZVNwaXJpdEJhc2VEYXRhKHRoaXMuZGF0YSk7XHJcblxyXG4gICAgICAgIFNraWxsc1ByZXAucHJlcGFyZVNraWxscyh0aGlzLmRhdGEpO1xyXG4gICAgICAgIEF0dHJpYnV0ZXNQcmVwLnByZXBhcmVBdHRyaWJ1dGVzKHRoaXMuZGF0YSk7XHJcbiAgICAgICAgTGltaXRzUHJlcC5wcmVwYXJlTGltaXRzKHRoaXMuZGF0YSk7XHJcblxyXG4gICAgICAgIFNwaXJpdFByZXAucHJlcGFyZVNwaXJpdEFybW9yKHRoaXMuZGF0YSk7XHJcblxyXG4gICAgICAgIENvbmRpdGlvbk1vbml0b3JzUHJlcC5wcmVwYXJlU3R1bih0aGlzLmRhdGEpO1xyXG4gICAgICAgIENvbmRpdGlvbk1vbml0b3JzUHJlcC5wcmVwYXJlUGh5c2ljYWwodGhpcy5kYXRhKTtcclxuXHJcbiAgICAgICAgTW92ZW1lbnRQcmVwLnByZXBhcmVNb3ZlbWVudCh0aGlzLmRhdGEpO1xyXG4gICAgICAgIFdvdW5kc1ByZXAucHJlcGFyZVdvdW5kcyh0aGlzLmRhdGEpO1xyXG5cclxuICAgICAgICBJbml0aWF0aXZlUHJlcC5wcmVwYXJlQ3VycmVudEluaXRpYXRpdmUodGhpcy5kYXRhKTtcclxuXHJcbiAgICAgICAgdGhpcy5kYXRhLnNwZWNpYWwgPSAnbWFnaWMnO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwcmVwYXJlU3Bpcml0QmFzZURhdGEoZGF0YTogU3Bpcml0QWN0b3JEYXRhKSB7XHJcbiAgICAgICAgY29uc3Qgb3ZlcnJpZGVzID0gdGhpcy5nZXRTcGlyaXRTdGF0TW9kaWZpZXJzKGRhdGEuc3Bpcml0VHlwZSk7XHJcblxyXG4gICAgICAgIGlmIChvdmVycmlkZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBhdHRyaWJ1dGVzLCBza2lsbHMsIGluaXRpYXRpdmUsIGZvcmNlLCBtb2RpZmllcnMsIGFybW9yIH0gPSBkYXRhO1xyXG5cclxuICAgICAgICAgICAgLy8gc2V0IHRoZSBiYXNlIG9mIGF0dHJpYnV0ZXMgdG8gdGhlIHByb3ZpZGVkIHZhbHVlXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgW2F0dElkLCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMob3ZlcnJpZGVzLmF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlc1thdHRJZF0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXNbYXR0SWRdLmJhc2UgPSB2YWx1ZSArIGZvcmNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtza2lsbElkLCBza2lsbF0gb2YgT2JqZWN0LmVudHJpZXMoc2tpbGxzLmFjdGl2ZSkpIHtcclxuICAgICAgICAgICAgICAgIHNraWxsLmJhc2UgPSBvdmVycmlkZXMuc2tpbGxzLmZpbmQoKHMpID0+IHMgPT09IHNraWxsSWQpID8gZm9yY2UgOiAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBwcmVwYXJlIGluaXRpYXRpdmUgZGF0YVxyXG4gICAgICAgICAgICBpbml0aWF0aXZlLm1lYXRzcGFjZS5iYXNlLmJhc2UgPSBmb3JjZSAqIDIgKyBvdmVycmlkZXMuaW5pdCArIE51bWJlcihtb2RpZmllcnNbJ2FzdHJhbF9pbml0aWF0aXZlJ10pO1xyXG4gICAgICAgICAgICBpbml0aWF0aXZlLm1lYXRzcGFjZS5kaWNlLmJhc2UgPSAyO1xyXG4gICAgICAgICAgICBpbml0aWF0aXZlLmFzdHJhbC5iYXNlLmJhc2UgPSBmb3JjZSAqIDIgKyBvdmVycmlkZXMuYXN0cmFsX2luaXQgKyBOdW1iZXIobW9kaWZpZXJzWydhc3RyYWxfaW5pdGlhdGl2ZV9kaWNlJ10pO1xyXG4gICAgICAgICAgICBpbml0aWF0aXZlLmFzdHJhbC5kaWNlLmJhc2UgPSAzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcHJlcGFyZVNwaXJpdEFybW9yKGRhdGE6IFNwaXJpdEFjdG9yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgYXJtb3IsIGF0dHJpYnV0ZXMgfSA9IGRhdGE7XHJcbiAgICAgICAgYXJtb3IuYmFzZSA9IChhdHRyaWJ1dGVzLmVzc2VuY2UudmFsdWUgPz8gMCkgKiAyO1xyXG4gICAgICAgIGFybW9yLnZhbHVlID0gSGVscGVycy5jYWxjVG90YWwoYXJtb3IpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgLy8gYmFzZSB0eXBlc1xyXG4gICAgYWlyOiAnU1I1LlNwaXJpdC5BaXInLFxyXG4gICAgYmVhc3RzOiAnU1I1LlNwaXJpdC5CZWFzdHMnLFxyXG4gICAgZWFydGg6ICdTUjUuU3Bpcml0LkVhcnRoJyxcclxuICAgIGZpcmU6ICdTUjUuU3Bpcml0LkZpcmUnLFxyXG4gICAgZ3VhcmRpYW46ICdTUjUuU3Bpcml0Lkd1YXJkaWFuJyxcclxuICAgIGd1aWRhbmNlOiAnU1I1LlNwaXJpdC5HdWlkYW5jZScsXHJcbiAgICBtYW46ICdTUjUuU3Bpcml0Lk1hbicsXHJcbiAgICBwbGFudDogJ1NSNS5TcGlyaXQuUGxhbnQnLFxyXG4gICAgdGFzazogJ1NSNS5TcGlyaXQuVGFzaycsXHJcbiAgICB3YXRlcjogJ1NSNS5TcGlyaXQuV2F0ZXInLFxyXG5cclxuICAgIC8vIHRveGljIHR5cGVzXHJcbiAgICB0b3hpY19haXI6ICdTUjUuU3Bpcml0LlRveGljQWlyJyxcclxuICAgIHRveGljX2JlYXN0czogJ1NSNS5TcGlyaXQuVG94aWNCZWFzdHMnLFxyXG4gICAgdG94aWNfZWFydGg6ICdTUjUuU3Bpcml0LlRveGljRWFydGgnLFxyXG4gICAgdG94aWNfZmlyZTogJ1NSNS5TcGlyaXQuVG94aWNGaXJlJyxcclxuICAgIHRveGljX21hbjogJ1NSNS5TcGlyaXQuVG94aWNNYW4nLFxyXG4gICAgdG94aWNfd2F0ZXI6ICdTUjUuU3Bpcml0LlRveGljV2F0ZXInLFxyXG5cclxuICAgIC8vIGJsb29kIHR5cGVzXHJcbiAgICBibG9vZDogJ1NSNS5TcGlyaXQuQmxvb2QnLFxyXG5cclxuICAgIC8vIHNoYWRvdyB0eXBlc1xyXG4gICAgbXVzZTogJ1NSNS5TcGlyaXQuTXVzZScsXHJcbiAgICBuaWdodG1hcmU6ICdTUjUuU3Bpcml0Lk5pZ2h0bWFyZScsXHJcbiAgICBzaGFkZTogJ1NSNS5TcGlyaXQuU2hhZGUnLFxyXG4gICAgc3VjY3VidXM6ICdTUjUuU3Bpcml0LlN1Y2N1YnVzJyxcclxuICAgIHdyYWl0aDogJ1NSNS5TcGlyaXQuV3JhaXRoJyxcclxuXHJcbiAgICAvLyBzaGVkaW0gdHlwZXNcclxuICAgIHNoZWRpbTogJ1NSNS5TcGlyaXQuU2hlZGltJyxcclxuICAgIG1hc3Rlcl9zaGVkaW06ICdTUjUuU3Bpcml0Lk1hc3RlclNoZWRpbScsXHJcblxyXG4gICAgLy8gaW5zZWN0IHR5cGVzXHJcbiAgICBjYXJldGFrZXI6ICdTUjUuU3Bpcml0LkNhcmV0YWtlcicsXHJcbiAgICBueW1waDogJ1NSNS5TcGlyaXQuTnltcGgnLFxyXG4gICAgc2NvdXQ6ICdTUjUuU3Bpcml0LlNjb3V0JyxcclxuICAgIHNvbGRpZXI6ICdTUjUuU3Bpcml0LlNvbGRpZXInLFxyXG4gICAgd29ya2VyOiAnU1I1LlNwaXJpdC5Xb3JrZXInLFxyXG4gICAgcXVlZW46ICdTUjUuU3Bpcml0LlF1ZWVuJyxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFNwaXJpdFN0YXRNb2RpZmllcnMoc3Bpcml0VHlwZTogU3Bpcml0VHlwZSkge1xyXG4gICAgICAgIGNvbnN0IG92ZXJyaWRlcyA9IHtcclxuICAgICAgICAgICAgLy8gdmFsdWUgb2YgMCBmb3IgYXR0cmlidXRlIG1ha2VzIGl0IGVxdWFsIHRvIHRoZSBGb3JjZVxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICBib2R5OiAwLFxyXG4gICAgICAgICAgICAgICAgYWdpbGl0eTogMCxcclxuICAgICAgICAgICAgICAgIHJlYWN0aW9uOiAwLFxyXG4gICAgICAgICAgICAgICAgc3RyZW5ndGg6IDAsXHJcbiAgICAgICAgICAgICAgICB3aWxscG93ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICBsb2dpYzogMCxcclxuICAgICAgICAgICAgICAgIGludHVpdGlvbjogMCxcclxuICAgICAgICAgICAgICAgIGNoYXJpc21hOiAwLFxyXG4gICAgICAgICAgICAgICAgbWFnaWM6IDAsXHJcbiAgICAgICAgICAgICAgICBlc3NlbmNlOiAwLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAvLyBtb2RpZmllcnMgZm9yIGFmdGVyIHRoZSBGb3JjZSB4IDIgY2FsY3VsYXRpb25cclxuICAgICAgICAgICAgaW5pdDogMCxcclxuICAgICAgICAgICAgYXN0cmFsX2luaXQ6IDAsXHJcbiAgICAgICAgICAgIC8vIHNraWxscyBhcmUgYWxsIHNldCB0byBGb3JjZVxyXG4gICAgICAgICAgICBza2lsbHM6IFtdIGFzIHN0cmluZ1tdLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3dpdGNoIChzcGlyaXRUeXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2Fpcic6XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5ib2R5ID0gLTI7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5hZ2lsaXR5ID0gMztcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnJlYWN0aW9uID0gNDtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnN0cmVuZ3RoID0gLTM7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuaW5pdCA9IDQ7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuc2tpbGxzLnB1c2goJ2Fzc2Vuc2luZycsICdhc3RyYWxfY29tYmF0JywgJ2V4b3RpY19yYW5nZScsICdwZXJjZXB0aW9uJywgJ3VuYXJtZWRfY29tYmF0Jyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnYmVhc3RzJzpcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLmJvZHkgPSAyO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmF0dHJpYnV0ZXMuYWdpbGl0eSA9IDE7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5zdHJlbmd0aCA9IDI7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuc2tpbGxzLnB1c2goJ2Fzc2Vuc2luZycsICdhc3RyYWxfY29tYmF0JywgJ3BlcmNlcHRpb24nLCAndW5hcm1lZF9jb21iYXQnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdlYXJ0aCc6XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5ib2R5ID0gNDtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLmFnaWxpdHkgPSAtMjtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnJlYWN0aW9uID0gLTE7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5zdHJlbmd0aCA9IDQ7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5sb2dpYyA9IC0xO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmluaXQgPSAtMTtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5za2lsbHMucHVzaCgnYXNzZW5zaW5nJywgJ2FzdHJhbF9jb21iYXQnLCAnZXhvdGljX3JhbmdlJywgJ3BlcmNlcHRpb24nLCAndW5hcm1lZF9jb21iYXQnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdmaXJlJzpcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLmJvZHkgPSAxO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmF0dHJpYnV0ZXMuYWdpbGl0eSA9IDI7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5yZWFjdGlvbiA9IDM7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5zdHJlbmd0aCA9IC0yO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmF0dHJpYnV0ZXMuaW50dWl0aW9uID0gMTtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5pbml0ID0gMztcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5za2lsbHMucHVzaCgnYXNzZW5zaW5nJywgJ2FzdHJhbF9jb21iYXQnLCAnZXhvdGljX3JhbmdlJywgJ2ZsaWdodCcsICdwZXJjZXB0aW9uJywgJ3VuYXJtZWRfY29tYmF0Jyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAnZ3VhcmRpYW4nOlxyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmF0dHJpYnV0ZXMuYm9keSA9IDE7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5hZ2lsaXR5ID0gMjtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnJlYWN0aW9uID0gMztcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnN0cmVuZ3RoID0gMjtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5pbml0ID0gMTtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5za2lsbHMucHVzaCgnYXNzZW5zaW5nJywgJ2FzdHJhbF9jb21iYXQnLCAnYmxhZGVzJywgJ2NsdWJzJywgJ2NvdW50ZXJfc3BlbGxpbmcnLCAnZXhvdGljX3JhbmdlJywgJ3BlcmNlcHRpb24nLCAndW5hcm1lZF9jb21iYXQnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICdndWlkYW5jZSc6XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5ib2R5ID0gMztcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLmFnaWxpdHkgPSAtMTtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnJlYWN0aW9uID0gMjtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnN0cmVuZ3RoID0gMTtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5za2lsbHMucHVzaCgnYXJjYW5hJywgJ2Fzc2Vuc2luZycsICdhc3RyYWxfY29tYmF0JywgJ2NvdW50ZXJfc3BlbGxpbmcnLCAncGVyY2VwdGlvbicsICd1bmFybWVkX2NvbWJhdCcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ21hbic6XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5ib2R5ID0gMTtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnJlYWN0aW9uID0gMjtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnN0cmVuZ3RoID0gLTI7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5sb2dpYyA9IDE7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuc2tpbGxzLnB1c2goJ2Fzc2Vuc2luZycsICdhc3RyYWxfY29tYmF0JywgJ3BlcmNlcHRpb24nLCAnc3BlbGxjYXN0aW5nJywgJ3VuYXJtZWRfY29tYmF0Jyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSAncGxhbnQnOlxyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmF0dHJpYnV0ZXMuYm9keSA9IDI7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5hZ2lsaXR5ID0gLTE7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5zdHJlbmd0aCA9IDE7XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5sb2dpYyA9IC0xO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLnNraWxscy5wdXNoKCdhc3NlbnNpbmcnLCAnYXN0cmFsX2NvbWJhdCcsICdwZXJjZXB0aW9uJywgJ2V4b3RpY19yYW5nZScsICd1bmFybWVkX2NvbWJhdCcpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ3Rhc2snOlxyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmF0dHJpYnV0ZXMucmVhY3Rpb24gPSAyO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmF0dHJpYnV0ZXMuc3RyZW5ndGggPSAyO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLmluaXQgPSAyO1xyXG4gICAgICAgICAgICAgICAgb3ZlcnJpZGVzLnNraWxscy5wdXNoKCdhcnRpc2FuJywgJ2Fzc2Vuc2luZycsICdhc3RyYWxfY29tYmF0JywgJ3BlcmNlcHRpb24nLCAndW5hcm1lZF9jb21iYXQnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd3YXRlcic6XHJcbiAgICAgICAgICAgICAgICBvdmVycmlkZXMuYXR0cmlidXRlcy5hZ2lsaXR5ID0gMTtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5hdHRyaWJ1dGVzLnJlYWN0aW9uID0gMjtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5pbml0ID0gMjtcclxuICAgICAgICAgICAgICAgIG92ZXJyaWRlcy5za2lsbHMucHVzaCgnYXNzZW5zaW5nJywgJ2FzdHJhbF9jb21iYXQnLCAnZXhvdGljX3JhbmdlJywgJ3BlcmNlcHRpb24nLCAndW5hcm1lZF9jb21iYXQnKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3ZlcnJpZGVzO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBTUjVBY3RvckRhdGEgPSBTaGFkb3dydW4uU1I1QWN0b3JEYXRhO1xyXG5pbXBvcnQgeyBQYXJ0c0xpc3QgfSBmcm9tICcuLi8uLi8uLi9wYXJ0cy9QYXJ0c0xpc3QnO1xyXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlc1ByZXAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwYXJlIGFjdG9yIGRhdGEgZm9yIGF0dHJpYnV0ZXNcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHByZXBhcmVBdHRyaWJ1dGVzKGRhdGE6IFNSNUFjdG9yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgYXR0cmlidXRlcyB9ID0gZGF0YTtcclxuXHJcbiAgICAgICAgLy8gYWx3YXlzIGhhdmUgc3BlY2lhbCBhdHRyaWJ1dGVzIHNldCB0byBoaWRkZW5cclxuICAgICAgICBhdHRyaWJ1dGVzLm1hZ2ljLmhpZGRlbiA9IHRydWU7XHJcbiAgICAgICAgYXR0cmlidXRlcy5yZXNvbmFuY2UuaGlkZGVuID0gdHJ1ZTtcclxuICAgICAgICBhdHRyaWJ1dGVzLmVkZ2UuaGlkZGVuID0gdHJ1ZTtcclxuICAgICAgICBhdHRyaWJ1dGVzLmVzc2VuY2UuaGlkZGVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgLy8gc2V0IHRoZSB2YWx1ZSBmb3IgdGhlIGF0dHJpYnV0ZXNcclxuICAgICAgICBmb3IgKGxldCBba2V5LCBhdHRyaWJ1dGVdIG9mIE9iamVjdC5lbnRyaWVzKGF0dHJpYnV0ZXMpKSB7XHJcbiAgICAgICAgICAgIC8vIGRvbid0IG1hbmFnZSB0aGUgYXR0cmlidXRlIGlmIGl0IGlzIHVzaW5nIHRoZSBvbGQgbWV0aG9kIG9mIGVkZ2UgdHJhY2tpbmdcclxuICAgICAgICAgICAgLy8gbmVlZGVkIHRvIGJlIGFibGUgdG8gbWlncmF0ZSB0aGluZ3MgY29ycmVjdGx5XHJcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICdlZGdlJyAmJiBhdHRyaWJ1dGVbJ3VzZXMnXSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIHRoaXMgdHVybnMgdGhlIE9iamVjdCBtb2RlbCBpbnRvIHRoZSBsaXN0IG1vZFxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZS5tb2QgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUubW9kID0gbmV3IFBhcnRzTGlzdChhdHRyaWJ1dGUubW9kKS5saXN0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRzID0gbmV3IFBhcnRzTGlzdChhdHRyaWJ1dGUubW9kKTtcclxuXHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5UZW1wb3JhcnknLCBhdHRyaWJ1dGUudGVtcCA/PyAwKTtcclxuICAgICAgICAgICAgLy8gVE9ETyBsZWdhY3kgZnJvbSBwcmV2aW91cyBzaGVldFxyXG4gICAgICAgICAgICBwYXJ0cy5yZW1vdmVQYXJ0KCdUZW1wb3JhcnknKTtcclxuXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5tb2QgPSBwYXJ0cy5saXN0O1xyXG4gICAgICAgICAgICBIZWxwZXJzLmNhbGNUb3RhbChhdHRyaWJ1dGUpO1xyXG4gICAgICAgICAgICAvLyBhZGQgbGFiZWxzXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZS5sYWJlbCA9IENPTkZJRy5TUjUuYXR0cmlidXRlc1trZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgU1I1QWN0b3JEYXRhID0gU2hhZG93cnVuLlNSNUFjdG9yRGF0YTtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb25kaXRpb25Nb25pdG9yc1ByZXAge1xyXG4gICAgc3RhdGljIHByZXBhcmVTdHVuKGRhdGE6IFNSNUFjdG9yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgdHJhY2ssIGF0dHJpYnV0ZXMsIG1vZGlmaWVycyB9ID0gZGF0YTtcclxuXHJcbiAgICAgICAgdHJhY2suc3R1bi5tYXggPSA4ICsgTWF0aC5jZWlsKGF0dHJpYnV0ZXMud2lsbHBvd2VyLnZhbHVlIC8gMikgKyBOdW1iZXIobW9kaWZpZXJzWydzdHVuX3RyYWNrJ10pO1xyXG4gICAgICAgIHRyYWNrLnN0dW4ubGFiZWwgPSBDT05GSUcuU1I1LmRhbWFnZVR5cGVzLnN0dW47XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByZXBhcmVQaHlzaWNhbChkYXRhOiBTUjVBY3RvckRhdGEpIHtcclxuICAgICAgICBjb25zdCB7IHRyYWNrLCBhdHRyaWJ1dGVzLCBtb2RpZmllcnMgfSA9IGRhdGE7XHJcblxyXG4gICAgICAgIHRyYWNrLnBoeXNpY2FsLm1heCA9IDggKyBNYXRoLmNlaWwoYXR0cmlidXRlcy5ib2R5LnZhbHVlIC8gMikgKyBOdW1iZXIobW9kaWZpZXJzWydwaHlzaWNhbF90cmFjayddKTtcclxuICAgICAgICB0cmFjay5waHlzaWNhbC5vdmVyZmxvdy5tYXggPSBhdHRyaWJ1dGVzLmJvZHkudmFsdWU7XHJcbiAgICAgICAgdHJhY2sucGh5c2ljYWwubGFiZWwgPSBDT05GSUcuU1I1LmRhbWFnZVR5cGVzLnBoeXNpY2FsO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBTUjVBY3RvckRhdGEgPSBTaGFkb3dydW4uU1I1QWN0b3JEYXRhO1xyXG5pbXBvcnQgTWFnaWNBY3RvckRhdGEgPSBTaGFkb3dydW4uTWFnaWNBY3RvckRhdGE7XHJcbmltcG9ydCBNYXRyaXhBY3RvckRhdGEgPSBTaGFkb3dydW4uTWF0cml4QWN0b3JEYXRhO1xyXG5cclxuZXhwb3J0IGNsYXNzIEluaXRpYXRpdmVQcmVwIHtcclxuICAgIHN0YXRpYyBwcmVwYXJlQ3VycmVudEluaXRpYXRpdmUoZGF0YTogU1I1QWN0b3JEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgeyBpbml0aWF0aXZlIH0gPSBkYXRhO1xyXG5cclxuICAgICAgICBpZiAoaW5pdGlhdGl2ZS5wZXJjZXB0aW9uID09PSAnbWF0cml4JykgaW5pdGlhdGl2ZS5jdXJyZW50ID0gaW5pdGlhdGl2ZS5tYXRyaXg7XHJcbiAgICAgICAgZWxzZSBpZiAoaW5pdGlhdGl2ZS5wZXJjZXB0aW9uID09PSAnYXN0cmFsJykgaW5pdGlhdGl2ZS5jdXJyZW50ID0gaW5pdGlhdGl2ZS5hc3RyYWw7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGluaXRpYXRpdmUuY3VycmVudCA9IGluaXRpYXRpdmUubWVhdHNwYWNlO1xyXG4gICAgICAgICAgICBpbml0aWF0aXZlLnBlcmNlcHRpb24gPSAnbWVhdHNwYWNlJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGluaXRpYXRpdmUuY3VycmVudC5kaWNlLnZhbHVlID0gaW5pdGlhdGl2ZS5jdXJyZW50LmRpY2UuYmFzZTtcclxuICAgICAgICBpZiAoaW5pdGlhdGl2ZS5lZGdlKSBpbml0aWF0aXZlLmN1cnJlbnQuZGljZS52YWx1ZSA9IDU7XHJcbiAgICAgICAgaW5pdGlhdGl2ZS5jdXJyZW50LmRpY2UudmFsdWUgPSBNYXRoLm1pbig1LCBpbml0aWF0aXZlLmN1cnJlbnQuZGljZS52YWx1ZSk7IC8vIG1heGltdW0gb2YgNWQ2IGZvciBpbml0aWF0aXZlXHJcbiAgICAgICAgaW5pdGlhdGl2ZS5jdXJyZW50LmRpY2UudGV4dCA9IGAke2luaXRpYXRpdmUuY3VycmVudC5kaWNlLnZhbHVlfWQ2YDtcclxuICAgICAgICBpbml0aWF0aXZlLmN1cnJlbnQuYmFzZS52YWx1ZSA9IGluaXRpYXRpdmUuY3VycmVudC5iYXNlLmJhc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByZXBhcmVNZWF0c3BhY2VJbml0KGRhdGE6IFNSNUFjdG9yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgaW5pdGlhdGl2ZSwgYXR0cmlidXRlcywgbW9kaWZpZXJzIH0gPSBkYXRhO1xyXG4gICAgICAgIGluaXRpYXRpdmUubWVhdHNwYWNlLmJhc2UuYmFzZSA9IGF0dHJpYnV0ZXMuaW50dWl0aW9uLnZhbHVlICsgYXR0cmlidXRlcy5yZWFjdGlvbi52YWx1ZSArIE51bWJlcihtb2RpZmllcnNbJ21lYXRfaW5pdGlhdGl2ZSddKTtcclxuICAgICAgICBpbml0aWF0aXZlLm1lYXRzcGFjZS5kaWNlLmJhc2UgPSAxICsgTnVtYmVyKG1vZGlmaWVyc1snbWVhdF9pbml0aWF0aXZlX2RpY2UnXSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByZXBhcmVBc3RyYWxJbml0KGRhdGE6IFNSNUFjdG9yRGF0YSAmIE1hZ2ljQWN0b3JEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgeyBpbml0aWF0aXZlLCBhdHRyaWJ1dGVzLCBtb2RpZmllcnMgfSA9IGRhdGE7XHJcbiAgICAgICAgaW5pdGlhdGl2ZS5hc3RyYWwuYmFzZS5iYXNlID0gYXR0cmlidXRlcy5pbnR1aXRpb24udmFsdWUgKiAyICsgTnVtYmVyKG1vZGlmaWVyc1snYXN0cmFsX2luaXRpYXRpdmUnXSk7XHJcbiAgICAgICAgaW5pdGlhdGl2ZS5hc3RyYWwuZGljZS5iYXNlID0gMiArIE51bWJlcihtb2RpZmllcnNbJ2FzdHJhbF9pbml0aWF0aXZlX2RpY2UnXSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHByZXBhcmVNYXRyaXhJbml0KGRhdGE6IFNSNUFjdG9yRGF0YSAmIE1hdHJpeEFjdG9yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgaW5pdGlhdGl2ZSwgYXR0cmlidXRlcywgbW9kaWZpZXJzLCBtYXRyaXggfSA9IGRhdGE7XHJcbiAgICAgICAgaWYgKG1hdHJpeCkge1xyXG4gICAgICAgICAgICBpbml0aWF0aXZlLm1hdHJpeC5iYXNlLmJhc2UgPSBhdHRyaWJ1dGVzLmludHVpdGlvbi52YWx1ZSArIGRhdGEubWF0cml4LmRhdGFfcHJvY2Vzc2luZy52YWx1ZSArIE51bWJlcihtb2RpZmllcnNbJ21hdHJpeF9pbml0aWF0aXZlJ10pO1xyXG4gICAgICAgICAgICBpbml0aWF0aXZlLm1hdHJpeC5kaWNlLmJhc2UgPSAobWF0cml4LmhvdF9zaW0gPyA0IDogMykgKyBOdW1iZXIobW9kaWZpZXJzWydtYXRyaXhfaW5pdGlhdGl2ZV9kaWNlJ10pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgU1I1QWN0b3JEYXRhID0gU2hhZG93cnVuLlNSNUFjdG9yRGF0YTtcclxuaW1wb3J0IHsgU1I1SXRlbURhdGFXcmFwcGVyIH0gZnJvbSAnLi4vLi4vLi4vaXRlbS9TUjVJdGVtRGF0YVdyYXBwZXInO1xyXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycyc7XHJcbmltcG9ydCB7IFBhcnRzTGlzdCB9IGZyb20gJy4uLy4uLy4uL3BhcnRzL1BhcnRzTGlzdCc7XHJcblxyXG5leHBvcnQgY2xhc3MgSXRlbVByZXAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwYXJlIHRoZSBhcm1vciBkYXRhIGZvciB0aGUgSXRlbVxyXG4gICAgICogLSB3aWxsIG9ubHkgYWxsb3cgb25lIFwiQmFzZVwiIGFybW9yIGl0ZW0gdG8gYmUgdXNlZFxyXG4gICAgICogLSBhbGwgXCJhY2Nlc3Nvcmllc1wiIHdpbGwgYmUgYWRkZWQgdG8gdGhlIGFybW9yXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBwcmVwYXJlQXJtb3IoZGF0YTogU1I1QWN0b3JEYXRhLCBpdGVtczogU1I1SXRlbURhdGFXcmFwcGVyW10pIHtcclxuICAgICAgICBjb25zdCB7IGFybW9yIH0gPSBkYXRhO1xyXG4gICAgICAgIGFybW9yLmJhc2UgPSAwO1xyXG4gICAgICAgIGFybW9yLnZhbHVlID0gMDtcclxuICAgICAgICBhcm1vci5tb2QgPSBbXTtcclxuICAgICAgICBmb3IgKGNvbnN0IGVsZW1lbnQgb2YgT2JqZWN0LmtleXMoQ09ORklHLlNSNS5lbGVtZW50VHlwZXMpKSB7XHJcbiAgICAgICAgICAgIGFybW9yW2VsZW1lbnRdID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVxdWlwcGVkQXJtb3IgPSBpdGVtcy5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaGFzQXJtb3IoKSAmJiBpdGVtLmlzRXF1aXBwZWQoKSk7XHJcbiAgICAgICAgY29uc3QgYXJtb3JNb2RQYXJ0cyA9IG5ldyBQYXJ0c0xpc3Q8bnVtYmVyPihhcm1vci5tb2QpO1xyXG4gICAgICAgIGVxdWlwcGVkQXJtb3I/LmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uaGFzQXJtb3JBY2Nlc3NvcnkoKSkge1xyXG4gICAgICAgICAgICAgICAgYXJtb3JNb2RQYXJ0cy5hZGRVbmlxdWVQYXJ0KGl0ZW0uZ2V0TmFtZSgpLCBpdGVtLmdldEFybW9yVmFsdWUoKSk7XHJcbiAgICAgICAgICAgIH0gLy8gaWYgbm90IGEgbW9kLCBzZXQgYXJtb3IudmFsdWUgdG8gdGhlIGl0ZW1zIHZhbHVlXHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYXJtb3IuYmFzZSA9IGl0ZW0uZ2V0QXJtb3JWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgYXJtb3IubGFiZWwgPSBpdGVtLmdldE5hbWUoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZWxlbWVudCBvZiBPYmplY3Qua2V5cyhDT05GSUcuU1I1LmVsZW1lbnRUeXBlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBhcm1vcltlbGVtZW50XSA9IGl0ZW0uZ2V0QXJtb3JFbGVtZW50cygpW2VsZW1lbnRdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChkYXRhLm1vZGlmaWVyc1snYXJtb3InXSkgYXJtb3JNb2RQYXJ0cy5hZGRVbmlxdWVQYXJ0KGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkJvbnVzJyksIGRhdGEubW9kaWZpZXJzWydhcm1vciddKTtcclxuICAgICAgICAvLyBTRVQgQVJNT1JcclxuICAgICAgICBhcm1vci52YWx1ZSA9IEhlbHBlcnMuY2FsY1RvdGFsKGFybW9yKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHJlcGFyZSBhY3RvciBkYXRhIGZvciBjeWJlcndhcmUgY2hhbmdlc1xyXG4gICAgICogLSB0aGlzIGNhbGN1bGF0ZXMgdGhlIGFjdG9ycyBlc3NlbmNlXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBwcmVwYXJlQ3liZXJ3YXJlKGRhdGE6IFNSNUFjdG9yRGF0YSwgaXRlbXM6IFNSNUl0ZW1EYXRhV3JhcHBlcltdKSB7XHJcbiAgICAgICAgY29uc3QgeyBhdHRyaWJ1dGVzIH0gPSBkYXRhO1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gbmV3IFBhcnRzTGlzdDxudW1iZXI+KCk7XHJcbiAgICAgICAgLy8gYWRkIEl0ZW1zIGFzIHZhbHVlcyB0byBsb3dlciB0aGUgdG90YWwgdmFsdWUgb2YgZXNzZW5jZVxyXG4gICAgICAgIGl0ZW1zXHJcbiAgICAgICAgICAgIC5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0uaXNDeWJlcndhcmUoKSAmJiBpdGVtLmlzRXF1aXBwZWQoKSlcclxuICAgICAgICAgICAgLmZvckVhY2goKGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtLmdldEVzc2VuY2VMb3NzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KGl0ZW0uZ2V0TmFtZSgpLCAtTnVtYmVyKGl0ZW0uZ2V0RXNzZW5jZUxvc3MoKSkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAvLyBhZGQgdGhlIGJvbnVzIGZyb20gdGhlIG1pc2MgdGFiIGlmIGFwcGxpZWRcclxuICAgICAgICBjb25zdCBlc3NlbmNlTW9kID0gZGF0YS5tb2RpZmllcnNbJ2Vzc2VuY2UnXTtcclxuICAgICAgICBpZiAoZXNzZW5jZU1vZCAmJiAhTnVtYmVyLmlzTmFOKGVzc2VuY2VNb2QpKSB7XHJcbiAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5Cb251cycsIE51bWJlcihlc3NlbmNlTW9kKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBhdHRyaWJ1dGVzLmVzc2VuY2UuYmFzZSA9IDY7XHJcbiAgICAgICAgYXR0cmlidXRlcy5lc3NlbmNlLm1vZCA9IHBhcnRzLmxpc3Q7XHJcbiAgICAgICAgYXR0cmlidXRlcy5lc3NlbmNlLnZhbHVlID0gSGVscGVycy5jYWxjVG90YWwoYXR0cmlidXRlcy5lc3NlbmNlKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgU1I1QWN0b3JEYXRhID0gU2hhZG93cnVuLlNSNUFjdG9yRGF0YTtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaW1pdHNQcmVwIHtcclxuICAgIHN0YXRpYyBwcmVwYXJlTGltaXRzKGRhdGE6IFNSNUFjdG9yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgbGltaXRzLCBhdHRyaWJ1dGVzLCBtb2RpZmllcnMgfSA9IGRhdGE7XHJcblxyXG4gICAgICAgIC8vIFNFVFVQIExJTUlUU1xyXG4gICAgICAgIGxpbWl0cy5waHlzaWNhbC52YWx1ZSA9XHJcbiAgICAgICAgICAgIE1hdGguY2VpbCgoMiAqIGF0dHJpYnV0ZXMuc3RyZW5ndGgudmFsdWUgKyBhdHRyaWJ1dGVzLmJvZHkudmFsdWUgKyBhdHRyaWJ1dGVzLnJlYWN0aW9uLnZhbHVlKSAvIDMpICsgTnVtYmVyKG1vZGlmaWVyc1sncGh5c2ljYWxfbGltaXQnXSk7XHJcbiAgICAgICAgbGltaXRzLm1lbnRhbC52YWx1ZSA9XHJcbiAgICAgICAgICAgIE1hdGguY2VpbCgoMiAqIGF0dHJpYnV0ZXMubG9naWMudmFsdWUgKyBhdHRyaWJ1dGVzLmludHVpdGlvbi52YWx1ZSArIGF0dHJpYnV0ZXMud2lsbHBvd2VyLnZhbHVlKSAvIDMpICsgTnVtYmVyKG1vZGlmaWVyc1snbWVudGFsX2xpbWl0J10pO1xyXG4gICAgICAgIGxpbWl0cy5zb2NpYWwudmFsdWUgPVxyXG4gICAgICAgICAgICBNYXRoLmNlaWwoKDIgKiBhdHRyaWJ1dGVzLmNoYXJpc21hLnZhbHVlICsgYXR0cmlidXRlcy53aWxscG93ZXIudmFsdWUgKyBhdHRyaWJ1dGVzLmVzc2VuY2UudmFsdWUpIC8gMykgKyBOdW1iZXIobW9kaWZpZXJzWydzb2NpYWxfbGltaXQnXSk7XHJcblxyXG4gICAgICAgIC8vIGxpbWl0IGxhYmVsc1xyXG4gICAgICAgIGZvciAobGV0IFtsaW1pdEtleSwgbGltaXRWYWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMobGltaXRzKSkge1xyXG4gICAgICAgICAgICBsaW1pdFZhbHVlLmxhYmVsID0gQ09ORklHLlNSNS5saW1pdHNbbGltaXRLZXldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuIiwiaW1wb3J0IFNSNUFjdG9yRGF0YSA9IFNoYWRvd3J1bi5TUjVBY3RvckRhdGE7XHJcbmltcG9ydCBNYXRyaXhBY3RvckRhdGEgPSBTaGFkb3dydW4uTWF0cml4QWN0b3JEYXRhO1xyXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycyc7XHJcbmltcG9ydCB7IFNSNUl0ZW1EYXRhV3JhcHBlciB9IGZyb20gJy4uLy4uLy4uL2l0ZW0vU1I1SXRlbURhdGFXcmFwcGVyJztcclxuaW1wb3J0IHsgUGFydHNMaXN0IH0gZnJvbSAnLi4vLi4vLi4vcGFydHMvUGFydHNMaXN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBNYXRyaXhQcmVwIHtcclxuICAgIC8qKlxyXG4gICAgICogUHJlcGFyZSBNYXRyaXggZGF0YSBvbiB0aGUgYWN0b3JcclxuICAgICAqIC0gaWYgYW4gaXRlbSBpcyBlcXVpcHBlZCwgaXQgd2lsbCB1c2UgdGhhdCBkYXRhXHJcbiAgICAgKiAtIGlmIGl0IGlzbid0IGFuZCBwbGF5ZXIgaXMgdGVjaG5vbWFuY2VyLCBpdCB3aWxsIHVzZSB0aGF0IGRhdGFcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHByZXBhcmVNYXRyaXgoYWN0b3JEYXRhOiBTUjVBY3RvckRhdGEgJiBNYXRyaXhBY3RvckRhdGEsIGl0ZW1zOiBTUjVJdGVtRGF0YVdyYXBwZXJbXSkge1xyXG4gICAgICAgIGNvbnN0IHsgbWF0cml4LCBhdHRyaWJ1dGVzLCBsaW1pdHMgfSA9IGFjdG9yRGF0YTtcclxuXHJcbiAgICAgICAgY29uc3QgTWF0cml4TGlzdCA9IFsnZmlyZXdhbGwnLCAnc2xlYXplJywgJ2RhdGFfcHJvY2Vzc2luZycsICdhdHRhY2snXTtcclxuXHJcbiAgICAgICAgLy8gY2xlYXIgbWF0cml4IGRhdGEgdG8gZGVmYXVsdHNcclxuICAgICAgICBNYXRyaXhMaXN0LmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3QobWF0cml4W2tleV0ubW9kKTtcclxuICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LlRlbXBvcmFyeScsIG1hdHJpeFtrZXldLnRlbXApO1xyXG4gICAgICAgICAgICAvLyBUT0RPIExFR0FDWSBmcm9tIHdoZW4gdGhlIHNoZWV0IHVzZWQgJ21vZC5UZW1wb3JhcnknXHJcbiAgICAgICAgICAgIHBhcnRzLnJlbW92ZVBhcnQoJ1RlbXBvcmFyeScpO1xyXG4gICAgICAgICAgICBtYXRyaXhba2V5XS5tb2QgPSBwYXJ0cy5saXN0O1xyXG4gICAgICAgICAgICBtYXRyaXhba2V5XS52YWx1ZSA9IHBhcnRzLnRvdGFsO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIG1hdHJpeC5jb25kaXRpb25fbW9uaXRvci5tYXggPSAwO1xyXG4gICAgICAgIG1hdHJpeC5yYXRpbmcgPSAwO1xyXG4gICAgICAgIG1hdHJpeC5uYW1lID0gJyc7XHJcbiAgICAgICAgbWF0cml4LmRldmljZSA9ICcnO1xyXG4gICAgICAgIG1hdHJpeC5jb25kaXRpb25fbW9uaXRvci5sYWJlbCA9ICdTUjUuQ29uZGl0aW9uTW9uaXRvcic7XHJcblxyXG4gICAgICAgIC8vIGdldCB0aGUgZmlyc3QgZXF1aXBwZWQgZGV2aWNlLCB3ZSBkb24ndCBjYXJlIGlmIHRoZXkgaGF2ZSBtb3JlIGVxdWlwcGVkIC0tIGl0IHNob3VsZG4ndCBoYXBwZW5cclxuICAgICAgICBjb25zdCBkZXZpY2UgPSBpdGVtcy5maW5kKChpdGVtKSA9PiBpdGVtLmlzRXF1aXBwZWQoKSAmJiBpdGVtLmlzRGV2aWNlKCkpO1xyXG5cclxuICAgICAgICBpZiAoZGV2aWNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbk1vbml0b3IgPSBkZXZpY2UuZ2V0Q29uZGl0aW9uTW9uaXRvcigpO1xyXG4gICAgICAgICAgICBtYXRyaXguZGV2aWNlID0gZGV2aWNlLmdldElkKCk7XHJcbiAgICAgICAgICAgIG1hdHJpeC5jb25kaXRpb25fbW9uaXRvci5tYXggPSBjb25kaXRpb25Nb25pdG9yLm1heDtcclxuICAgICAgICAgICAgbWF0cml4LmNvbmRpdGlvbl9tb25pdG9yLnZhbHVlID0gY29uZGl0aW9uTW9uaXRvci52YWx1ZTtcclxuICAgICAgICAgICAgbWF0cml4LnJhdGluZyA9IGRldmljZS5nZXRSYXRpbmcoKTtcclxuICAgICAgICAgICAgbWF0cml4LmlzX2N5YmVyZGVjayA9IGRldmljZS5pc0N5YmVyZGVjaygpO1xyXG4gICAgICAgICAgICBtYXRyaXgubmFtZSA9IGRldmljZS5nZXROYW1lKCk7XHJcbiAgICAgICAgICAgIG1hdHJpeC5pdGVtID0gZGV2aWNlLmdldERhdGEoKTtcclxuICAgICAgICAgICAgY29uc3QgZGV2aWNlQXR0cyA9IGRldmljZS5nZXRBU0RGKCk7XHJcbiAgICAgICAgICAgIGlmIChkZXZpY2VBdHRzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBzZXR1cCB0aGUgYWN0dWFsIG1hdHJpeCBhdHRyaWJ1dGVzIGZvciB0aGUgYWN0b3JcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKGRldmljZUF0dHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmIG1hdHJpeFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeFtrZXldLmJhc2UgPSB2YWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4W2tleV0uZGV2aWNlX2F0dCA9IHZhbHVlLmRldmljZV9hdHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAvLyBpZiB3ZSBkb24ndCBoYXZlIGEgZGV2aWNlLCB1c2UgbGl2aW5nIHBlcnNvbmFcclxuICAgICAgICBlbHNlIGlmIChhY3RvckRhdGEuc3BlY2lhbCA9PT0gJ3Jlc29uYW5jZScpIHtcclxuICAgICAgICAgICAgbWF0cml4LmZpcmV3YWxsLmJhc2UgPSBIZWxwZXJzLmNhbGNUb3RhbChhdHRyaWJ1dGVzLndpbGxwb3dlcik7XHJcbiAgICAgICAgICAgIG1hdHJpeC5kYXRhX3Byb2Nlc3NpbmcuYmFzZSA9IEhlbHBlcnMuY2FsY1RvdGFsKGF0dHJpYnV0ZXMubG9naWMpO1xyXG4gICAgICAgICAgICBtYXRyaXgucmF0aW5nID0gSGVscGVycy5jYWxjVG90YWwoYXR0cmlidXRlcy5yZXNvbmFuY2UpO1xyXG4gICAgICAgICAgICBtYXRyaXguYXR0YWNrLmJhc2UgPSBIZWxwZXJzLmNhbGNUb3RhbChhdHRyaWJ1dGVzLmNoYXJpc21hKTtcclxuICAgICAgICAgICAgbWF0cml4LnNsZWF6ZS5iYXNlID0gSGVscGVycy5jYWxjVG90YWwoYXR0cmlidXRlcy5pbnR1aXRpb24pO1xyXG4gICAgICAgICAgICBtYXRyaXgubmFtZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkxpdmluZ1BlcnNvbmEnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHNldCBtYXRyaXggY29uZGl0aW9uIG1vbml0b3IgdG8gbWF4IGlmIGdyZWF0ZXIgdGhhblxyXG4gICAgICAgIGlmIChtYXRyaXguY29uZGl0aW9uX21vbml0b3IudmFsdWUgPiBtYXRyaXguY29uZGl0aW9uX21vbml0b3IubWF4KSB7XHJcbiAgICAgICAgICAgIG1hdHJpeC5jb25kaXRpb25fbW9uaXRvci52YWx1ZSA9IG1hdHJpeC5jb25kaXRpb25fbW9uaXRvci5tYXg7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhZGQgbWF0cml4IGF0dHJpYnV0ZXMgdG8gYm90aCBsaW1pdHMgYW5kIGF0dHJpYnV0ZXMgYXMgaGlkZGVuIGVudHJpZXNcclxuICAgICAgICBNYXRyaXhMaXN0LmZvckVhY2goKGtleSkgPT4ge1xyXG4gICAgICAgICAgICBIZWxwZXJzLmNhbGNUb3RhbChtYXRyaXhba2V5XSk7XHJcbiAgICAgICAgICAgIGlmIChtYXRyaXhba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBDT05GSUcuU1I1Lm1hdHJpeEF0dHJpYnV0ZXNba2V5XTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGJhc2UsIG1vZCB9ID0gbWF0cml4W2tleV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoaWRkZW4gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGxpbWl0c1trZXldID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsLFxyXG4gICAgICAgICAgICAgICAgICAgIGhpZGRlbixcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzW2tleV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZSxcclxuICAgICAgICAgICAgICAgICAgICBtb2QsXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWwsXHJcbiAgICAgICAgICAgICAgICAgICAgaGlkZGVuLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBTUjVBY3RvckRhdGEgPSBTaGFkb3dydW4uU1I1QWN0b3JEYXRhO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vZGlmaWVyc1ByZXAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwYXJlIHRoZSBtb2RpZmllcnMgdGhhdCBhcmUgZGlzcGxheWVkIGluIHRoZSBNaXNjLiB0YWJcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHByZXBhcmVNb2RpZmllcnMoZGF0YTogU1I1QWN0b3JEYXRhKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhLm1vZGlmaWVycykgZGF0YS5tb2RpZmllcnMgPSB7fTtcclxuICAgICAgICBjb25zdCBtb2RpZmllcnMgPSB7fTtcclxuICAgICAgICBsZXQgbWlzY1RhYk1vZGlmaWVycyA9IFtcclxuICAgICAgICAgICAgJ3NvYWsnLFxyXG4gICAgICAgICAgICAnZHJhaW4nLFxyXG4gICAgICAgICAgICAnYXJtb3InLFxyXG4gICAgICAgICAgICAncGh5c2ljYWxfbGltaXQnLFxyXG4gICAgICAgICAgICAnc29jaWFsX2xpbWl0JyxcclxuICAgICAgICAgICAgJ21lbnRhbF9saW1pdCcsXHJcbiAgICAgICAgICAgICdzdHVuX3RyYWNrJyxcclxuICAgICAgICAgICAgJ3BoeXNpY2FsX3RyYWNrJyxcclxuICAgICAgICAgICAgJ21lYXRfaW5pdGlhdGl2ZScsXHJcbiAgICAgICAgICAgICdtZWF0X2luaXRpYXRpdmVfZGljZScsXHJcbiAgICAgICAgICAgICdhc3RyYWxfaW5pdGlhdGl2ZScsXHJcbiAgICAgICAgICAgICdhc3RyYWxfaW5pdGlhdGl2ZV9kaWNlJyxcclxuICAgICAgICAgICAgJ21hdHJpeF9pbml0aWF0aXZlJyxcclxuICAgICAgICAgICAgJ21hdHJpeF9pbml0aWF0aXZlX2RpY2UnLFxyXG4gICAgICAgICAgICAnY29tcG9zdXJlJyxcclxuICAgICAgICAgICAgJ2xpZnRfY2FycnknLFxyXG4gICAgICAgICAgICAnanVkZ2VfaW50ZW50aW9ucycsXHJcbiAgICAgICAgICAgICdtZW1vcnknLFxyXG4gICAgICAgICAgICAnd2FsaycsXHJcbiAgICAgICAgICAgICdydW4nLFxyXG4gICAgICAgICAgICAnZGVmZW5zZScsXHJcbiAgICAgICAgICAgICd3b3VuZF90b2xlcmFuY2UnLFxyXG4gICAgICAgICAgICAnZXNzZW5jZScsXHJcbiAgICAgICAgICAgICdmYWRlJyxcclxuICAgICAgICBdO1xyXG4gICAgICAgIG1pc2NUYWJNb2RpZmllcnMuc29ydCgpO1xyXG4gICAgICAgIC8vIGZvcmNlIGdsb2JhbCB0byB0aGUgdG9wXHJcbiAgICAgICAgbWlzY1RhYk1vZGlmaWVycy51bnNoaWZ0KCdnbG9iYWwnKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBtaXNjVGFiTW9kaWZpZXJzKSB7XHJcbiAgICAgICAgICAgIG1vZGlmaWVyc1tpdGVtXSA9IE51bWJlcihkYXRhLm1vZGlmaWVyc1tpdGVtXSkgfHwgMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRhdGEubW9kaWZpZXJzID0gbW9kaWZpZXJzO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBTUjVBY3RvckRhdGEgPSBTaGFkb3dydW4uU1I1QWN0b3JEYXRhO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vdmVtZW50UHJlcCB7XHJcbiAgICBzdGF0aWMgcHJlcGFyZU1vdmVtZW50KGRhdGE6IFNSNUFjdG9yRGF0YSkge1xyXG4gICAgICAgIGNvbnN0IHsgYXR0cmlidXRlcywgbW9kaWZpZXJzIH0gPSBkYXRhO1xyXG4gICAgICAgIGNvbnN0IG1vdmVtZW50ID0gZGF0YS5tb3ZlbWVudDtcclxuICAgICAgICAvLyBkZWZhdWx0IG1vdmVtZW50OiBXQUxLID0gQUdJICogMiwgUlVOID0gQUdJICogNFxyXG4gICAgICAgIG1vdmVtZW50LndhbGsudmFsdWUgPSBhdHRyaWJ1dGVzLmFnaWxpdHkudmFsdWUgKiAoMiArIE51bWJlcihtb2RpZmllcnNbJ3dhbGsnXSkpO1xyXG4gICAgICAgIG1vdmVtZW50LnJ1bi52YWx1ZSA9IGF0dHJpYnV0ZXMuYWdpbGl0eS52YWx1ZSAqICg0ICsgTnVtYmVyKG1vZGlmaWVyc1sncnVuJ10pKTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgU1I1QWN0b3JEYXRhID0gU2hhZG93cnVuLlNSNUFjdG9yRGF0YTtcclxuaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4uLy4uLy4uL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBQYXJ0c0xpc3QgfSBmcm9tICcuLi8uLi8uLi9wYXJ0cy9QYXJ0c0xpc3QnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNraWxsc1ByZXAge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwYXJlIGFjdG9yIGRhdGEgZm9yIHNraWxsc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcHJlcGFyZVNraWxscyhkYXRhOiBTUjVBY3RvckRhdGEpIHtcclxuICAgICAgICBjb25zdCB7IGxhbmd1YWdlLCBhY3RpdmUsIGtub3dsZWRnZSB9ID0gZGF0YS5za2lsbHM7XHJcbiAgICAgICAgaWYgKGxhbmd1YWdlKSB7XHJcbiAgICAgICAgICAgIGlmICghbGFuZ3VhZ2UudmFsdWUpIGxhbmd1YWdlLnZhbHVlID0ge307XHJcbiAgICAgICAgICAgIGxhbmd1YWdlLmF0dHJpYnV0ZSA9ICdpbnR1aXRpb24nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZnVuY3Rpb24gdGhhdCB3aWxsIHNldCB0aGUgdG90YWwgb2YgYSBza2lsbCBjb3JyZWN0bHlcclxuICAgICAgICBjb25zdCBwcmVwYXJlU2tpbGwgPSAoc2tpbGwpID0+IHtcclxuICAgICAgICAgICAgc2tpbGwubW9kID0gW107XHJcbiAgICAgICAgICAgIGlmICghc2tpbGwuYmFzZSkgc2tpbGwuYmFzZSA9IDA7XHJcbiAgICAgICAgICAgIGlmIChza2lsbC5ib251cz8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBib251cyBvZiBza2lsbC5ib251cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNraWxsLm1vZCA9IFBhcnRzTGlzdC5BZGRVbmlxdWVQYXJ0KHNraWxsLm1vZCwgYm9udXMua2V5LCBib251cy52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgSGVscGVycy5jYWxjVG90YWwoc2tpbGwpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIHNldHVwIGFjdGl2ZSBza2lsbHNcclxuICAgICAgICBmb3IgKGNvbnN0IHNraWxsIG9mIE9iamVjdC52YWx1ZXMoYWN0aXZlKSkge1xyXG4gICAgICAgICAgICBpZiAoIXNraWxsLmhpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgcHJlcGFyZVNraWxsKHNraWxsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGRhdGEuc2tpbGxzLmxhbmd1YWdlLnZhbHVlKTtcclxuICAgICAgICAvLyByZW1vdmUgZW50cmllcyB3aGljaCBhcmUgZGVsZXRlZCBUT0RPIGZpZ3VyZSBvdXQgaG93IHRvIGRlbGV0ZSB0aGVzZSBmcm9tIHRoZSBkYXRhXHJcbiAgICAgICAgZW50cmllcy5mb3JFYWNoKChba2V5LCB2YWxdOiBbc3RyaW5nLCB7IF9kZWxldGU/OiBib29sZWFuIH1dKSA9PiB2YWwuX2RlbGV0ZSAmJiBkZWxldGUgZGF0YS5za2lsbHMubGFuZ3VhZ2UudmFsdWVba2V5XSk7XHJcblxyXG4gICAgICAgIGZvciAobGV0IHNraWxsIG9mIE9iamVjdC52YWx1ZXMobGFuZ3VhZ2UudmFsdWUpKSB7XHJcbiAgICAgICAgICAgIHByZXBhcmVTa2lsbChza2lsbCk7XHJcbiAgICAgICAgICAgIHNraWxsLmF0dHJpYnV0ZSA9ICdpbnR1aXRpb24nO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2V0dXAga25vd2xlZGdlIHNraWxsc1xyXG4gICAgICAgIGZvciAobGV0IFssIGdyb3VwXSBvZiBPYmplY3QuZW50cmllcyhrbm93bGVkZ2UpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudHJpZXMgPSBPYmplY3QuZW50cmllcyhncm91cC52YWx1ZSk7XHJcbiAgICAgICAgICAgIC8vIHJlbW92ZSBlbnRyaWVzIHdoaWNoIGFyZSBkZWxldGVkIFRPRE8gZmlndXJlIG91dCBob3cgdG8gZGVsZXRlIHRoZXNlIGZyb20gdGhlIGRhdGFcclxuICAgICAgICAgICAgZ3JvdXAudmFsdWUgPSBlbnRyaWVzXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChbLCB2YWxdKSA9PiAhdmFsLl9kZWxldGUpXHJcbiAgICAgICAgICAgICAgICAucmVkdWNlKChhY2MsIFtpZCwgc2tpbGxdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJlcGFyZVNraWxsKHNraWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc2V0IHRoZSBhdHRyaWJ1dGUgb24gdGhlIHNraWxsXHJcbiAgICAgICAgICAgICAgICAgICAgc2tpbGwuYXR0cmlidXRlID0gZ3JvdXAuYXR0cmlidXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjY1tpZF0gPSBza2lsbDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc2tpbGwgbGFiZWxzXHJcbiAgICAgICAgZm9yIChsZXQgW3NraWxsS2V5LCBza2lsbFZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhhY3RpdmUpKSB7XHJcbiAgICAgICAgICAgIHNraWxsVmFsdWUubGFiZWwgPSBDT05GSUcuU1I1LmFjdGl2ZVNraWxsc1tza2lsbEtleV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCBTUjVBY3RvckRhdGEgPSBTaGFkb3dydW4uU1I1QWN0b3JEYXRhO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdvdW5kc1ByZXAge1xyXG4gICAgc3RhdGljIHByZXBhcmVXb3VuZHMoZGF0YTogU1I1QWN0b3JEYXRhKSB7XHJcbiAgICAgICAgY29uc3QgeyBtb2RpZmllcnMsIHRyYWNrIH0gPSBkYXRhO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gMyArIE51bWJlcihtb2RpZmllcnNbJ3dvdW5kX3RvbGVyYW5jZSddKTtcclxuICAgICAgICBjb25zdCBzdHVuV291bmRzID0gTWF0aC5mbG9vcihkYXRhLnRyYWNrLnN0dW4udmFsdWUgLyBjb3VudCk7XHJcbiAgICAgICAgY29uc3QgcGh5c2ljYWxXb3VuZHMgPSBNYXRoLmZsb29yKGRhdGEudHJhY2sucGh5c2ljYWwudmFsdWUgLyBjb3VudCk7XHJcblxyXG4gICAgICAgIHRyYWNrLnN0dW4ud291bmRzID0gc3R1bldvdW5kcztcclxuICAgICAgICB0cmFjay5waHlzaWNhbC53b3VuZHMgPSBwaHlzaWNhbFdvdW5kcztcclxuXHJcbiAgICAgICAgZGF0YS53b3VuZHMgPSB7XHJcbiAgICAgICAgICAgIHZhbHVlOiBzdHVuV291bmRzICsgcGh5c2ljYWxXb3VuZHMsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgQ2h1bW1lckltcG9ydEZvcm0gZXh0ZW5kcyBGb3JtQXBwbGljYXRpb24ge1xyXG4gICAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucygpIHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gc3VwZXIuZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgb3B0aW9ucy5pZCA9ICdjaHVtbWVyLWltcG9ydCc7XHJcbiAgICAgICAgb3B0aW9ucy5jbGFzc2VzID0gWydzaGFkb3dydW41ZSddO1xyXG4gICAgICAgIG9wdGlvbnMudGl0bGUgPSAnQ2h1bW1lci9IZXJvIExhYiBJbXBvcnQnO1xyXG4gICAgICAgIG9wdGlvbnMudGVtcGxhdGUgPSAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hcHBzL2ltcG9ydC5odG1sJztcclxuICAgICAgICBvcHRpb25zLndpZHRoID0gNjAwO1xyXG4gICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERhdGEoKSB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpIHtcclxuICAgICAgICBodG1sLmZpbmQoJy5zdWJtaXQtY2h1bW1lci1pbXBvcnQnKS5jbGljayhhc3luYyAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgY29uc3QgY2h1bW1lcmZpbGUgPSBKU09OLnBhcnNlKCQoJy5jaHVtbWVyLXRleHQnKS52YWwoKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHdlYXBvbnMgPSAkKCcud2VhcG9ucycpLmlzKCc6Y2hlY2tlZCcpO1xyXG4gICAgICAgICAgICBjb25zdCBhcm1vciA9ICQoJy5hcm1vcicpLmlzKCc6Y2hlY2tlZCcpO1xyXG4gICAgICAgICAgICBjb25zdCBjeWJlcndhcmUgPSAkKCcuY3liZXJ3YXJlJykuaXMoJzpjaGVja2VkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGVxdWlwbWVudCA9ICQoJy5nZWFyJykuaXMoJzpjaGVja2VkJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHF1YWxpdGllcyA9ICQoJy5xdWFsaXRpZXMnKS5pcygnOmNoZWNrZWQnKTtcclxuICAgICAgICAgICAgY29uc3QgcG93ZXJzID0gJCgnLnBvd2VycycpLmlzKCc6Y2hlY2tlZCcpO1xyXG4gICAgICAgICAgICBjb25zdCBzcGVsbHMgPSAkKCcuc3BlbGxzJykuaXMoJzpjaGVja2VkJyk7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjaHVtbWVyZmlsZSk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBwYXJzZUF0dCA9IChhdHQpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChhdHQudG9Mb3dlckNhc2UoKSA9PT0gJ2JvZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2JvZHknO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF0dC50b0xvd2VyQ2FzZSgpID09PSAnYWdpJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnYWdpbGl0eSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0LnRvTG93ZXJDYXNlKCkgPT09ICdyZWEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdyZWFjdGlvbic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0LnRvTG93ZXJDYXNlKCkgPT09ICdzdHInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdzdHJlbmd0aCc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0LnRvTG93ZXJDYXNlKCkgPT09ICdjaGEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdjaGFyaXNtYSc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYXR0LnRvTG93ZXJDYXNlKCkgPT09ICdpbnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdpbnR1aXRpb24nO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF0dC50b0xvd2VyQ2FzZSgpID09PSAnbG9nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbG9naWMnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF0dC50b0xvd2VyQ2FzZSgpID09PSAnd2lsJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnd2lsbHBvd2VyJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhdHQudG9Mb3dlckNhc2UoKSA9PT0gJ2VkZycpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2VkZ2UnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF0dC50b0xvd2VyQ2FzZSgpID09PSAnbWFnJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnbWFnaWMnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGF0dC50b0xvd2VyQ2FzZSgpID09PSAncmVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAncmVzb25hbmNlJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnNlRGFtYWdlID0gKHZhbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGFtYWdlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhbWFnZTogMCxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncGh5c2ljYWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJhZGl1czogMCxcclxuICAgICAgICAgICAgICAgICAgICBkcm9wb2ZmOiAwLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNwbGl0ID0gdmFsLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3BsaXQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBzcGxpdFswXS5tYXRjaCgvKFxcZCspKFxcdyspLyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGwgJiYgbFsxXSkgZGFtYWdlLmRhbWFnZSA9IHBhcnNlSW50KGxbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsICYmIGxbMl0pIGRhbWFnZS50eXBlID0gbFsyXSA9PT0gJ1AnID8gJ3BoeXNpY2FsJyA6ICdzdHVuJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3BsaXQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsID0gc3BsaXRbaV0ubWF0Y2goLygtP1xcZCspKC4qKS8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsICYmIGxbMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxbMl0udG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnL20nKSkgZGFtYWdlLmRyb3BvZmYgPSBwYXJzZUludChsWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBkYW1hZ2UucmFkaXVzID0gcGFyc2VJbnQobFsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhbWFnZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGdldFZhbHVlcyA9ICh2YWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gLygtP1swLTldKykoPzooWzAtOV0rKSkqL2c7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsID0gdmFsLm1hdGNoKHJlZ2V4KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsIHx8IFsnMCddO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZ2V0QXJyYXkgPSAodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IGR1cGxpY2F0ZSh0aGlzLm9iamVjdC5kYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgdXBkYXRlID0gdXBkYXRlRGF0YS5kYXRhO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgZXJyb3IgPSAnJztcclxuICAgICAgICAgICAgLy8gY2hhcmFjdGVyIGluZm8gc3R1ZmYsIGFsc28gdGVjaG5vL21hZ2ljIGFuZCBlc3NlbmNlXHJcbiAgICAgICAgICAgIGlmIChjaHVtbWVyZmlsZS5jaGFyYWN0ZXJzICYmIGNodW1tZXJmaWxlLmNoYXJhY3RlcnMuY2hhcmFjdGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gY2h1bW1lcmZpbGUuY2hhcmFjdGVycy5jaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLnBsYXllcm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnBsYXllcl9uYW1lID0gYy5wbGF5ZXJuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5hbGlhcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUubmFtZSA9IGMuYWxpYXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEubmFtZSA9IGMuYWxpYXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLm1ldGF0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5tZXRhdHlwZSA9IGMubWV0YXR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLnNleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuc2V4ID0gYy5zZXg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuYWdlID0gYy5hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuaGVpZ2h0ID0gYy5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLndlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUud2VpZ2h0ID0gYy53ZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmNhbGN1bGF0ZWRzdHJlZXRjcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5zdHJlZXRfY3JlZCA9IGMuY2FsY3VsYXRlZHN0cmVldGNyZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmNhbGN1bGF0ZWRub3RvcmlldHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlLm5vdG9yaWV0eSA9IGMuY2FsY3VsYXRlZG5vdG9yaWV0eTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMuY2FsY3VsYXRlZHB1YmxpY2F3YXJlbmVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUucHVibGljX2F3YXJlbmVzcyA9IGMuY2FsY3VsYXRlZHB1YmxpY2F3YXJlbmVzcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMua2FybWEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlLmthcm1hLnZhbHVlID0gYy5rYXJtYTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMudG90YWxrYXJtYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUua2FybWEubWF4ID0gYy50b3RhbGthcm1hO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy50ZWNobm9tYW5jZXIgJiYgYy50ZWNobm9tYW5jZXIudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5zcGVjaWFsID0gJ3Jlc29uYW5jZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgKGMubWFnaWNpYW4gJiYgYy5tYWdpY2lhbi50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZScpIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChjLmFkZXB0ICYmIGMuYWRlcHQudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKVxyXG4gICAgICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuc3BlY2lhbCA9ICdtYWdpYyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBhdHRyID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMudHJhZGl0aW9uICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjLnRyYWRpdGlvbi5kcmFpbmF0dHJpYnV0ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYy50cmFkaXRpb24uZHJhaW5hdHRyaWJ1dGUuYXR0clxyXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSBjLnRyYWRpdGlvbi5kcmFpbmF0dHJpYnV0ZS5hdHRyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGMudHJhZGl0aW9uICYmIGMudHJhZGl0aW9uLmRyYWluYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0ciA9IGMudHJhZGl0aW9uLmRyYWluYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5zcGxpdCgnKycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4gaXRlbS50cmltKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHIuZm9yRWFjaCgoYXR0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHQgPSBwYXJzZUF0dChhdHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0dCAhPT0gJ3dpbGxwb3dlcicpIHVwZGF0ZS5tYWdpYy5hdHRyaWJ1dGUgPSBhdHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy50b3RhbGVzcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuYXR0cmlidXRlcy5lc3NlbmNlLnZhbHVlID0gYy50b3RhbGVzcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMubnV5ZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlLm51eWVuID0gcGFyc2VJbnQoYy5udXllbi5yZXBsYWNlKCcsJywgJycpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gYEVycm9yIHdpdGggY2hhcmFjdGVyIGluZm86ICR7ZX0uIGA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB1cGRhdGUgYXR0cmlidXRlc1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYXR0cyA9IGNodW1tZXJmaWxlLmNoYXJhY3RlcnMuY2hhcmFjdGVyLmF0dHJpYnV0ZXNbMV0uYXR0cmlidXRlO1xyXG4gICAgICAgICAgICAgICAgYXR0cy5mb3JFYWNoKChhdHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdBdHQgPSBwYXJzZUF0dChhdHQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdBdHQpIHVwZGF0ZS5hdHRyaWJ1dGVzW25ld0F0dF0uYmFzZSA9IHBhcnNlSW50KGF0dC50b3RhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBgRXJyb3Igd2l0aCBhdHRyaWJ1dGVzOiAke2V9LiBgO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8gaW5pdGlhdGl2ZSBzdHVmZlxyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYy5pbml0Ym9udXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbm90IHN1cmUgaWYgdGhpcyBvbmUgaXMgY29ycmVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUubW9kcy5pbml0aWF0aXZlID0gYy5pbml0Ym9udXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjLmluaXRkaWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZS5tb2RzLmluaXRpYXRpdmVfZGljZSA9IGMuaW5pdGRpY2UgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBgRXJyb3Igd2l0aCBpbml0aWF0aXZlOiAke2V9LiBgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gc2tpbGxzLi4uXHJcbiAgICAgICAgICAgICAgICBjb25zdCBza2lsbHMgPSBjLnNraWxscy5za2lsbDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2tpbGxzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHNraWxsc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMucmF0aW5nID4gMCAmJiBzLmlzbGFuZ3VhZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBncm91cCA9ICdhY3RpdmUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNraWxsID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gcmFuZG9tSUQoMTYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuaXNsYW5ndWFnZSAmJiBzLmlzbGFuZ3VhZ2UudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUuc2tpbGxzLmxhbmd1YWdlLnZhbHVlW2lkXSA9IHNraWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwID0gJ2xhbmd1YWdlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocy5rbm93bGVkZ2UgJiYgcy5rbm93bGVkZ2UudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnkgPSBzLnNraWxsY2F0ZWdvcnlfZW5nbGlzaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhjYXRlZ29yeSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2tpbGxDYXRlZ29yeTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2F0ZWdvcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2ZvdW5kIGNhdGVnb3J5JywgY2F0ZWdvcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYXQgPSBjYXRlZ29yeS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2F0ID09PSAnc3RyZWV0JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsQ2F0ZWdvcnkgPSB1cGRhdGUuc2tpbGxzLmtub3dsZWRnZS5zdHJlZXQudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXQgPT09ICdhY2FkZW1pYycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbENhdGVnb3J5ID0gdXBkYXRlLnNraWxscy5rbm93bGVkZ2UuYWNhZGVtaWMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjYXQgPT09ICdwcm9mZXNzaW9uYWwnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGxDYXRlZ29yeSA9IHVwZGF0ZS5za2lsbHMua25vd2xlZGdlLnByb2Zlc3Npb25hbC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhdCA9PT0gJ2ludGVyZXN0JylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsQ2F0ZWdvcnkgPSB1cGRhdGUuc2tpbGxzLmtub3dsZWRnZS5pbnRlcmVzdHMudmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lsbENhdGVnb3J5KSBza2lsbENhdGVnb3J5W2lkXSA9IHNraWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmF0dHJpYnV0ZS50b0xvd2VyQ2FzZSgpID09PSAnaW50Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnNraWxscy5rbm93bGVkZ2Uuc3RyZWV0LnZhbHVlW2lkXSA9IHNraWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmF0dHJpYnV0ZS50b0xvd2VyQ2FzZSgpID09PSAnbG9nJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlLnNraWxscy5rbm93bGVkZ2UucHJvZmVzc2lvbmFsLnZhbHVlW2lkXSA9IHNraWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwID0gJ2tub3dsZWRnZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuYW1lID0gcy5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50cmltKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xccy9nLCAnXycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8tL2csICdfJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUuaW5jbHVkZXMoJ2V4b3RpYycpICYmIG5hbWUuaW5jbHVkZXMoJ193ZWFwb24nKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgnX3dlYXBvbicsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lsbCA9IHVwZGF0ZS5za2lsbHMuYWN0aXZlW25hbWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFza2lsbCkgY29uc29sZS5lcnJvcihgQ291bGRuJ3QgcGFyc2Ugc2tpbGwgJHtzLm5hbWV9YCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpbGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZ3JvdXAgIT09ICdhY3RpdmUnKSBza2lsbC5uYW1lID0gcy5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraWxsLmJhc2UgPSBwYXJzZUludChzLnJhdGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuc2tpbGxzcGVjaWFsaXphdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpbGwuc3BlY3MgPSBnZXRBcnJheShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc2tpbGxzcGVjaWFsaXphdGlvbnMuc2tpbGxzcGVjaWFsaXphdGlvbi5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHF1YWxpdGllc1xyXG4gICAgICAgICAgICAgICAgaWYgKHF1YWxpdGllcyAmJiBjLnF1YWxpdGllcyAmJiBjLnF1YWxpdGllcy5xdWFsaXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcXVhbGl0aWVzID0gZ2V0QXJyYXkoYy5xdWFsaXRpZXMucXVhbGl0eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcXVhbGl0aWVzLmZvckVhY2goKHEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudHlwZSA9IHEucXVhbGl0eXR5cGUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxLmRlc2NyaXB0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBUZXh0RWRpdG9yLmVucmljaEhUTUwocS5kZXNjcmlwdGlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBxLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3F1YWxpdHknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIHdlYXBvbnNcclxuICAgICAgICAgICAgICAgIGlmICh3ZWFwb25zICYmIGMud2VhcG9ucyAhPSBudWxsICYmIGMud2VhcG9ucy53ZWFwb24gIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHdlYXBvbnMgPSBnZXRBcnJheShjLndlYXBvbnMud2VhcG9uKTtcclxuICAgICAgICAgICAgICAgICAgICB3ZWFwb25zLmZvckVhY2goKHcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGFtYWdlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uZGFtYWdlID0gZGFtYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5hY3Rpb24gPSBhY3Rpb247XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHcuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogVGV4dEVkaXRvci5lbnJpY2hIVE1MKHcuZGVzY3JpcHRpb24pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlLmFwID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2U6IHBhcnNlSW50KGdldFZhbHVlcyh3LmFwKVswXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnR5cGUgPSAndmFyaWVzJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3LnNraWxsKSBhY3Rpb24uc2tpbGwgPSB3LnNraWxsLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzL2csICdfJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh3LmNhdGVnb3J5ICYmIHcuY2F0ZWdvcnkudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZXhvdGljJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnNraWxsID0gdy5jYXRlZ29yeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnIHdlYXBvbnMnLCAnJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xccy9nLCAnXycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5za2lsbC5pbmNsdWRlcygnZXhvdGljJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLnNraWxsID0gYWN0aW9uLnNraWxsLnJlcGxhY2UoJ193ZWFwb24nLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24uYXR0cmlidXRlID0gJ2FnaWxpdHknO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmxpbWl0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2U6IHBhcnNlSW50KGdldFZhbHVlcyh3LmFjY3VyYWN5KVswXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm9wcG9zZWQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RlZmVuc2UnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAody50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdtZWxlZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24udHlwZSA9ICdjb21wbGV4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNhdGVnb3J5ID0gJ21lbGVlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZWxlZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWVsZWUgPSBtZWxlZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWxlZS5yZWFjaCA9IHBhcnNlSW50KHcucmVhY2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3LnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3JhbmdlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNhdGVnb3J5ID0gJ3JhbmdlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAody5za2lsbC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCd0aHJvdycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY2F0ZWdvcnkgPSAndGhyb3duJzsgLy8gVE9ETyBjbGVhbiB0aGlzIHVwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5yYW5nZSA9IHJhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnJjID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlOiBwYXJzZUludChnZXRWYWx1ZXMody5yYylbMF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHcubW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIZXJvTGFiIGV4cG9ydCBkb2Vzbid0IGhhdmUgbW9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsb3dlciA9IHcubW9kZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5tb2RlcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpbmdsZV9zaG90OiBsb3dlci5pbmNsdWRlcygnc3MnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbWlfYXV0bzogbG93ZXIuaW5jbHVkZXMoJ3NhJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXJzdF9maXJlOiBsb3dlci5pbmNsdWRlcygnYmYnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bGxfYXV0bzogbG93ZXIuaW5jbHVkZXMoJ2ZhJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3LmNsaXBzICE9IG51bGwgJiYgdy5jbGlwcy5jbGlwICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGVyb0xhYiBleHBvcnQgZG9lc24ndCBoYXZlIGNsaXBzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNsaXBzID0gQXJyYXkuaXNBcnJheSh3LmNsaXBzLmNsaXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHcuY2xpcHMuY2xpcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBbdy5jbGlwcy5jbGlwXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xpcHMuZm9yRWFjaCgoY2xpcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coY2xpcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcucmFuZ2VzICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcucmFuZ2VzLnNob3J0ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcucmFuZ2VzLm1lZGl1bSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3LnJhbmdlcy5sb25nICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHcucmFuZ2VzLmV4dHJlbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2cody5yYW5nZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5yYW5nZXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydDogcGFyc2VJbnQody5yYW5nZXMuc2hvcnQuc3BsaXQoJy0nKVsxXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpdW06IHBhcnNlSW50KHcucmFuZ2VzLm1lZGl1bS5zcGxpdCgnLScpWzFdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmc6IHBhcnNlSW50KHcucmFuZ2VzLmxvbmcuc3BsaXQoJy0nKVsxXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyZW1lOiBwYXJzZUludCh3LnJhbmdlcy5leHRyZW1lLnNwbGl0KCctJylbMV0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGZpZ3VyZSBvdXQgaG93IHRvIGFkZCBtb2RzIHRvIHdlYXBvbnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAody5hY2Nlc3NvcmllcyAmJiB3LmFjY2Vzc29yaWVzLmFjY2Vzc29yeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICByYW5nZS5tb2RzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnN0IGFjY2Vzc29yaWVzID0gZ2V0QXJyYXkody5hY2Nlc3Nvcmllcy5hY2Nlc3NvcnkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICBhY2Nlc3Nvcmllcy5mb3JFYWNoKChhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBpZiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHJhbmdlLm1vZHMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIG5hbWU6IGEubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh3LnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3Rocm93bicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNhdGVnb3J5ID0gJ3Rocm93bic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBoYW5kbGUgcmF3IGRhbWFnZSBpZiBwcmVzZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IHBhcnNlRGFtYWdlKHcuZGFtYWdlX2VuZ2xpc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhbWFnZS5iYXNlID0gZC5kYW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlLnR5cGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYW1hZ2UudHlwZS5iYXNlID0gZC50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkLmRyb3BvZmYgfHwgZC5yYWRpdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGhyb3duID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGhyb3duID0gdGhyb3duO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvd24uYmxhc3QgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6IGQucmFkaXVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHJvcG9mZjogZC5kcm9wb2ZmLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB3Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3dlYXBvbicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW1EYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gYXJtb3JzXHJcbiAgICAgICAgICAgICAgICBpZiAoYXJtb3IgJiYgYy5hcm1vcnMgJiYgYy5hcm1vcnMuYXJtb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcm1vcnMgPSBnZXRBcnJheShjLmFybW9ycy5hcm1vcik7XHJcbiAgICAgICAgICAgICAgICAgICAgYXJtb3JzLmZvckVhY2goKGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFybW9yID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFybW9yID0gYXJtb3I7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRlc2MgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybW9yLm1vZCA9IGEuYXJtb3IuaW5jbHVkZXMoJysnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybW9yLnZhbHVlID0gcGFyc2VJbnQoYS5hcm1vci5yZXBsYWNlKCcrJywgJycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLmRlc2NyaXB0aW9uKSBkZXNjID0gYS5kZXNjcmlwdGlvbjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhLmFybW9ybW9kcyAmJiBhLmFybW9ybW9kcy5hcm1vcm1vZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybW9yLmZpcmUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybW9yLmVsZWN0cmljaXR5ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcm1vci5jb2xkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcm1vci5hY2lkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcm1vci5yYWRpYXRpb24gPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtb2REZXNjID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbW9kcyA9IGdldEFycmF5KGEuYXJtb3Jtb2RzLmFybW9ybW9kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RzLmZvckVhY2goKG1vZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnZmlyZSByZXNpc3RhbmNlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybW9yLmZpcmUgKz0gcGFyc2VJbnQobW9kLnJhdGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobW9kLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygnbm9uY29uZHVjdGl2aXR5JykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybW9yLmVsZWN0cmljaXR5ICs9IHBhcnNlSW50KG1vZC5yYXRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1vZC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2luc3VsYXRpb24nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJtb3IuY29sZCArPSBwYXJzZUludChtb2QucmF0aW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3JhZGlhdGlvbiBzaGllbGRpbmcnKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFybW9yLnJhZGlhdGlvbiArPSBwYXJzZUludChtb2QucmF0aW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kLnJhdGluZyAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZERlc2MucHVzaChgJHttb2QubmFtZX0gUiR7bW9kLnJhdGluZ31gKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZERlc2MucHVzaChtb2QubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW9kRGVzYy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCBkZXNjIHRvIGJlZ2lubmluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjID0gYCR7bW9kRGVzYy5qb2luKCcsJyl9XFxuXFxuJHtkZXNjfWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGEuZXF1aXBwZWQudG9Mb3dlckNhc2UoKSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWNobm9sb2d5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcXVpcHBlZDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kZXNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogVGV4dEVkaXRvci5lbnJpY2hIVE1MKGRlc2MpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBhLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2FybW9yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goaXRlbURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBjeWJlcndhcmVcclxuICAgICAgICAgICAgICAgIGlmIChjeWJlcndhcmUgJiYgYy5jeWJlcndhcmVzICYmIGMuY3liZXJ3YXJlcy5jeWJlcndhcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjeWJlcndhcmVzID0gZ2V0QXJyYXkoYy5jeWJlcndhcmVzLmN5YmVyd2FyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY3liZXJ3YXJlcy5mb3JFYWNoKChjeSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kZXNjcmlwdGlvbiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmc6IGN5LnJhdGluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3kuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS50ZWNobm9sb2d5ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVxdWlwcGVkOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZXNzZW5jZSA9IGN5LmVzcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZ3JhZGUgPSBjeS5ncmFkZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1EYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGN5Lm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2N5YmVyd2FyZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW1EYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gcG93ZXJzXHJcbiAgICAgICAgICAgICAgICBpZiAocG93ZXJzICYmIGMucG93ZXJzICYmIGMucG93ZXJzLnBvd2VyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG93ZXJzID0gZ2V0QXJyYXkoYy5wb3dlcnMucG93ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvd2Vycy5mb3JFYWNoKChwKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHAuZGVzY3JpcHRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBUZXh0RWRpdG9yLmVucmljaEhUTUwocC5kZXNjcmlwdGlvbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmxldmVsID0gcGFyc2VJbnQocC5yYXRpbmcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwLnBwID0gcGFyc2VJbnQocC50b3RhbHBvaW50cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHAubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdhZGVwdF9wb3dlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW1EYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIGdlYXJcclxuICAgICAgICAgICAgICAgIGlmIChlcXVpcG1lbnQgJiYgYy5nZWFycyAmJiBjLmdlYXJzLmdlYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBnZWFycyA9IGdldEFycmF5KGMuZ2VhcnMuZ2Vhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2VhcnMuZm9yRWFjaCgoZykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHsgbmFtZSB9ID0gZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnLmV4dHJhKSBuYW1lICs9IGAgKCR7Zy5leHRyYX0pYDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEudGVjaG5vbG9neSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbmc6IGcucmF0aW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1YW50aXR5OiBnLnF0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRlc2NyaXB0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBnLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1EYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2VxdWlwbWVudCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKGl0ZW1EYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gc3BlbGxzXHJcbiAgICAgICAgICAgICAgICBpZiAoc3BlbGxzICYmIGMuc3BlbGxzICYmIGMuc3BlbGxzLnNwZWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BlbGxzID0gZ2V0QXJyYXkoYy5zcGVsbHMuc3BlbGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwZWxscy5mb3JFYWNoKChzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5hbGNoZW15LnRvTG93ZXJDYXNlKCkgIT09ICd0cnVlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmFjdGlvbiA9IGFjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmNhdGVnb3J5ID0gcy5jYXRlZ29yeS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCAnXycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubmFtZSA9IHMubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLnR5cGUgPSBzLnR5cGUgPT09ICdNJyA/ICdtYW5hJyA6ICdwaHlzaWNhbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5yYW5nZSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMucmFuZ2UgPT09ICdUJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyAndG91Y2gnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHMucmFuZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50b0xvd2VyQ2FzZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxzL2csICdfJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCcoJywgJycpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgnKScsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRyYWluID0gcGFyc2VJbnQocy5kdi5yZXBsYWNlKCdGJywgJycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGVzY3JpcHRpb24gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5kZXNjcmlwdG9ycykgZGVzY3JpcHRpb24gPSBzLmRlc2NyaXB0b3JzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmRlc2NyaXB0aW9uKSBkZXNjcmlwdGlvbiArPSBgXFxuJHtzLmRlc2NyaXB0aW9ufWA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kZXNjcmlwdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGVzY3JpcHRpb24udmFsdWUgPSBUZXh0RWRpdG9yLmVucmljaEhUTUwoZGVzY3JpcHRpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5kdXJhdGlvbi50b0xvd2VyQ2FzZSgpID09PSAncycpIGRhdGEuZHVyYXRpb24gPSAnc3VzdGFpbmVkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzLmR1cmF0aW9uLnRvTG93ZXJDYXNlKCkgPT09ICdpJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kdXJhdGlvbiA9ICdpbnN0YW50JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChzLmR1cmF0aW9uLnRvTG93ZXJDYXNlKCkgPT09ICdwJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kdXJhdGlvbiA9ICdwZXJtYW5lbnQnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24udHlwZSA9ICd2YXJpZXMnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5za2lsbCA9ICdzcGVsbGNhc3RpbmcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5hdHRyaWJ1dGUgPSAnbWFnaWMnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5kZXNjcmlwdG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXNjID0gcy5kZXNjcmlwdG9ycy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5jYXRlZ29yeS50b0xvd2VyQ2FzZSgpID09PSAnY29tYmF0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb21iYXQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXNjLmluY2x1ZGVzKCdkaXJlY3QnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuY29tYmF0LnR5cGUgPSAnaW5kaXJlY3QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5vcHBvc2VkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGVmZW5zZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5jb21iYXQudHlwZSA9ICdkaXJlY3QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdtYW5hJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ub3Bwb3NlZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnd2lsbHBvd2VyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ3BoeXNpY2FsJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ub3Bwb3NlZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnYm9keScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmNhdGVnb3J5LnRvTG93ZXJDYXNlKCkgPT09ICdkZXRlY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRldGVjdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3BsaXQgPSBkZXNjLnNwbGl0KCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGxpdC5mb3JFYWNoKCh0b2tlbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuID0gdG9rZW4gfHwgJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbi5yZXBsYWNlKCcgZGV0ZWN0aW9uIHNwZWxsJywgJycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdG9rZW4pIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4uaW5jbHVkZXMoJ2FyZWEnKSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG9rZW4uaW5jbHVkZXMoJ3Bhc3NpdmUnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5kZXRlY3Rpb24ucGFzc2l2ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4uaW5jbHVkZXMoJ2FjdGl2ZScpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmRldGVjdGlvbi5wYXNzaXZlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAodG9rZW4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEuZGV0ZWN0aW9uLnR5cGUgPSB0b2tlbi50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRhdGEuZGV0ZWN0aW9uLnBhc3NpdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ub3Bwb3NlZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ3dpbGxwb3dlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTI6ICdsb2dpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5jYXRlZ29yeS50b0xvd2VyQ2FzZSgpID09PSAnaWxsdXNpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmlsbHVzaW9uID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcGxpdCA9IGRlc2Muc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGl0LmZvckVhY2goKHRva2VuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW4gPSB0b2tlbiB8fCAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiA9IHRva2VuLnJlcGxhY2UoJyBpbGx1c2lvbiBzcGVsbCcsICcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRva2VuKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuLmluY2x1ZGVzKCdhcmVhJykpIHJldHVybjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRva2VuLmluY2x1ZGVzKCdzZW5zZScpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLmlsbHVzaW9uLnNlbnNlID0gdG9rZW4udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0b2tlbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5pbGx1c2lvbi50eXBlID0gdG9rZW4udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEudHlwZSA9PT0gJ21hbmEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLm9wcG9zZWQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdjdXN0b20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICd3aWxscG93ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUyOiAnbG9naWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5vcHBvc2VkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnaW50dWl0aW9uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlMjogJ2xvZ2ljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzLmNhdGVnb3J5LnRvTG93ZXJDYXNlKCkgPT09ICdtYW5pcHVsYXRpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hbmlwdWxhdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2MuaW5jbHVkZXMoJ2Vudmlyb25tZW50YWwnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hbmlwdWxhdGlvbi5lbnZpcm9ubWVudGFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXNjLmluY2x1ZGVzKCdwaHlzaWNhbCcpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEubWFuaXB1bGF0aW9uLnBoeXNpY2FsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXNjLmluY2x1ZGVzKCdtZW50YWwnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLm1hbmlwdWxhdGlvbi5tZW50YWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBmaWd1cmUgb3V0IGhvdyB0byBwYXJzZSBkYW1hZ2luZ1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm1hbmlwdWxhdGlvbi5tZW50YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24ub3Bwb3NlZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2N1c3RvbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJ3dpbGxwb3dlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTI6ICdsb2dpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLm1hbmlwdWxhdGlvbi5waHlzaWNhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5vcHBvc2VkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnY3VzdG9tJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnYm9keScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTI6ICdzdHJlbmd0aCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogcy5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3BlbGwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaChpdGVtRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLm9iamVjdC51cGRhdGUodXBkYXRlRGF0YSk7XHJcbiAgICAgICAgICAgIGF3YWl0IHRoaXMub2JqZWN0LmNyZWF0ZUVtYmVkZGVkRW50aXR5KCdPd25lZEl0ZW0nLCBpdGVtcyk7XHJcbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhcclxuICAgICAgICAgICAgICAgICdDb21wbGV0ZSEgQ2hlY2sgZXZlcnl0aGluZy4gTm90YWJseTogUmFuZ2VkIHdlYXBvbiBtb2RzIGFuZCBhbW1vOyBTdHJlbmd0aCBiYXNlZCB3ZWFwb24gZGFtYWdlOyBTcGVjaWFsaXphdGlvbnMgb24gYWxsIHNwZWxscywgcG93ZXJzLCBhbmQgd2VhcG9uczsnXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTUjVJdGVtIH0gZnJvbSAnLi4vLi4vaXRlbS9TUjVJdGVtJztcclxuaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4uLy4uL2hlbHBlcnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNoYWRvd3J1bkl0ZW1EaWFsb2cgZXh0ZW5kcyBEaWFsb2cge1xyXG4gICAgc3RhdGljIGFzeW5jIGZyb21JdGVtKGl0ZW06IFNSNUl0ZW0sIGV2ZW50PzogTW91c2VFdmVudCk6IFByb21pc2U8RGlhbG9nRGF0YSB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIGNvbnN0IGRpYWxvZ0RhdGE6IERpYWxvZ0RhdGEgPSB7XHJcbiAgICAgICAgICAgIHRpdGxlOiBpdGVtLm5hbWUsXHJcbiAgICAgICAgICAgIGJ1dHRvbnM6IHt9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGV2ZW50KSBkaWFsb2dEYXRhWydldmVudCddID0gZXZlbnQ7XHJcblxyXG4gICAgICAgIGNvbnN0IHRlbXBsYXRlRGF0YSA9IHt9O1xyXG4gICAgICAgIGxldCB0ZW1wbGF0ZVBhdGggPSAnJztcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0uaXNSYW5nZWRXZWFwb24oKSkge1xyXG4gICAgICAgICAgICBTaGFkb3dydW5JdGVtRGlhbG9nLmFkZFJhbmdlZFdlYXBvbkRhdGEodGVtcGxhdGVEYXRhLCBkaWFsb2dEYXRhLCBpdGVtKTtcclxuICAgICAgICAgICAgdGVtcGxhdGVQYXRoID0gJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvcm9sbHMvcmFuZ2Utd2VhcG9uLXJvbGwuaHRtbCc7XHJcbiAgICAgICAgfSBlbHNlIGlmIChpdGVtLmlzU3BlbGwoKSkge1xyXG4gICAgICAgICAgICBTaGFkb3dydW5JdGVtRGlhbG9nLmFkZFNwZWxsRGF0YSh0ZW1wbGF0ZURhdGEsIGRpYWxvZ0RhdGEsIGl0ZW0pO1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVBhdGggPSAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9yb2xscy9yb2xsLXNwZWxsLmh0bWwnO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoaXRlbS5pc0NvbXBsZXhGb3JtKCkpIHtcclxuICAgICAgICAgICAgU2hhZG93cnVuSXRlbURpYWxvZy5hZGRDb21wbGV4Rm9ybURhdGEodGVtcGxhdGVEYXRhLCBkaWFsb2dEYXRhLCBpdGVtKTtcclxuICAgICAgICAgICAgdGVtcGxhdGVQYXRoID0gJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvcm9sbHMvcm9sbC1jb21wbGV4LWZvcm0uaHRtbCc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGVtcGxhdGVQYXRoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRpYWxvZyA9IGF3YWl0IHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlUGF0aCwgdGVtcGxhdGVEYXRhKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KGRpYWxvZ0RhdGEsIHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGRpYWxvZyxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qXHJcbiAgICBzdGF0aWMgZ2V0IGRlZmF1bHRPcHRpb25zKCkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBzdXBlci5kZWZhdWx0T3B0aW9ucztcclxuICAgICAgICByZXR1cm4gbWVyZ2VPYmplY3Qob3B0aW9ucywge1xyXG4gICAgICAgICAgICBjbGFzc2VzOiBbJ3NyNScsICdzaGVldCddLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgICovXHJcblxyXG4gICAgc3RhdGljIGFkZENvbXBsZXhGb3JtRGF0YSh0ZW1wbGF0ZURhdGE6IG9iamVjdCwgZGlhbG9nRGF0YTogRGlhbG9nRGF0YSwgaXRlbTogU1I1SXRlbSk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IGZhZGUgPSBpdGVtLmdldEZhZGUoKTtcclxuICAgICAgICBjb25zdCB0aXRsZSA9IGAke0hlbHBlcnMubGFiZWwoaXRlbS5uYW1lKX0gTGV2ZWxgO1xyXG5cclxuICAgICAgICBjb25zdCBsZXZlbCA9IGl0ZW0uZ2V0TGFzdENvbXBsZXhGb3JtTGV2ZWwoKT8udmFsdWUgfHwgMiAtIGZhZGU7XHJcblxyXG4gICAgICAgIHRlbXBsYXRlRGF0YVsnZmFkZSddID0gZmFkZSA+PSAwID8gYCske2ZhZGV9YCA6IGZhZGU7XHJcbiAgICAgICAgdGVtcGxhdGVEYXRhWydsZXZlbCddID0gbGV2ZWw7XHJcbiAgICAgICAgdGVtcGxhdGVEYXRhWyd0aXRsZSddID0gdGl0bGU7XHJcblxyXG4gICAgICAgIGxldCBjYW5jZWwgPSB0cnVlO1xyXG4gICAgICAgIGRpYWxvZ0RhdGEuYnV0dG9ucyA9IHtcclxuICAgICAgICAgICAgcm9sbDoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6ICdDb250aW51ZScsXHJcbiAgICAgICAgICAgICAgICBpY29uOiAnPGkgY2xhc3M9XCJmYXMgZmEtZGljZS1zaXhcIj48L2k+JyxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiAoY2FuY2VsID0gZmFsc2UpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgZGlhbG9nRGF0YS5jbG9zZSA9IGFzeW5jIChodG1sKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjYW5jZWwpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSBIZWxwZXJzLnBhcnNlSW5wdXRUb051bWJlcigkKGh0bWwpLmZpbmQoJ1tuYW1lPWxldmVsXScpLnZhbCgpKTtcclxuICAgICAgICAgICAgYXdhaXQgaXRlbS5zZXRMYXN0Q29tcGxleEZvcm1MZXZlbCh7IHZhbHVlOiBsZXZlbCB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYWRkU3BlbGxEYXRhKHRlbXBsYXRlRGF0YTogb2JqZWN0LCBkaWFsb2dEYXRhOiBEaWFsb2dEYXRhLCBpdGVtOiBTUjVJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgdGl0bGUgPSBgJHtIZWxwZXJzLmxhYmVsKGl0ZW0ubmFtZSl9IEZvcmNlYDtcclxuICAgICAgICBjb25zdCBkcmFpbiA9IGl0ZW0uZ2V0RHJhaW4oKTtcclxuXHJcbiAgICAgICAgY29uc3QgZm9yY2UgPSBpdGVtLmdldExhc3RTcGVsbEZvcmNlKCk/LnZhbHVlIHx8IDIgLSBkcmFpbjtcclxuXHJcbiAgICAgICAgdGVtcGxhdGVEYXRhWydkcmFpbiddID0gZHJhaW4gPj0gMCA/IGArJHtkcmFpbn1gIDogYCR7ZHJhaW59YDtcclxuICAgICAgICB0ZW1wbGF0ZURhdGFbJ2ZvcmNlJ10gPSBmb3JjZTtcclxuICAgICAgICB0ZW1wbGF0ZURhdGFbJ3RpdGxlJ10gPSB0aXRsZTtcclxuXHJcbiAgICAgICAgZGlhbG9nRGF0YS50aXRsZSA9IHRpdGxlO1xyXG4gICAgICAgIGxldCBjYW5jZWwgPSB0cnVlO1xyXG4gICAgICAgIGxldCByZWNrbGVzcyA9IGZhbHNlO1xyXG4gICAgICAgIGRpYWxvZ0RhdGEuYnV0dG9ucyA9IHtcclxuICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuTm9ybWFsU3BlbGxCdXR0b24nKSxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiAoY2FuY2VsID0gZmFsc2UpLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWNrbGVzczoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlJlY2tsZXNzU3BlbGxCdXR0b24nKSxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVja2xlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGRpYWxvZ0RhdGEuZGVmYXVsdCA9ICdub3JtYWwnO1xyXG4gICAgICAgIGRpYWxvZ0RhdGEuY2xvc2UgPSBhc3luYyAoaHRtbCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY2FuY2VsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcmNlID0gSGVscGVycy5wYXJzZUlucHV0VG9OdW1iZXIoJChodG1sKS5maW5kKCdbbmFtZT1mb3JjZV0nKS52YWwoKSk7XHJcbiAgICAgICAgICAgIGF3YWl0IGl0ZW0uc2V0TGFzdFNwZWxsRm9yY2UoeyB2YWx1ZTogZm9yY2UsIHJlY2tsZXNzIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhZGRSYW5nZWRXZWFwb25EYXRhKHRlbXBsYXRlRGF0YTogb2JqZWN0LCBkaWFsb2dEYXRhOiBEaWFsb2dEYXRhLCBpdGVtOiBTUjVJdGVtKTogdm9pZCB7XHJcbiAgICAgICAgbGV0IHRpdGxlID0gZGlhbG9nRGF0YS50aXRsZSB8fCBpdGVtLm5hbWU7XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW1EYXRhID0gaXRlbS5kYXRhLmRhdGE7XHJcbiAgICAgICAgY29uc3QgZmlyZU1vZGVzID0ge307XHJcblxyXG4gICAgICAgIGNvbnN0IHsgbW9kZXMsIHJhbmdlcyB9ID0gaXRlbURhdGEucmFuZ2U7XHJcbiAgICAgICAgY29uc3QgeyBhbW1vIH0gPSBpdGVtRGF0YTtcclxuICAgICAgICBpZiAobW9kZXMuc2luZ2xlX3Nob3QpIHtcclxuICAgICAgICAgICAgZmlyZU1vZGVzWycxJ10gPSBnYW1lLmkxOG4ubG9jYWxpemUoXCJTUjUuV2VhcG9uTW9kZVNpbmdsZVNob3RTaG9ydFwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG1vZGVzLnNlbWlfYXV0bykge1xyXG4gICAgICAgICAgICBmaXJlTW9kZXNbJzEnXSA9IGdhbWUuaTE4bi5sb2NhbGl6ZShcIlNSNS5XZWFwb25Nb2RlU2VtaUF1dG9TaG9ydFwiKTtcclxuICAgICAgICAgICAgZmlyZU1vZGVzWyczJ10gPSBnYW1lLmkxOG4ubG9jYWxpemUoXCJTUjUuV2VhcG9uTW9kZVNlbWlBdXRvQnVyc3RcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChtb2Rlcy5idXJzdF9maXJlKSB7XHJcbiAgICAgICAgICAgIGZpcmVNb2Rlc1snMyddID0gYCR7bW9kZXMuc2VtaV9hdXRvID8gYCR7Z2FtZS5pMThuLmxvY2FsaXplKFwiU1I1LldlYXBvbk1vZGVTZW1pQXV0b0J1cnN0XCIpfS9gIDogJyd9JHtnYW1lLmkxOG4ubG9jYWxpemUoXCJTUjUuV2VhcG9uTW9kZUJ1cnN0RmlyZVNob3J0XCIpfWA7XHJcbiAgICAgICAgICAgIGZpcmVNb2Rlc1snNiddID0gZ2FtZS5pMThuLmxvY2FsaXplKFwiU1I1LldlYXBvbk1vZGVCdXJzdEZpcmVMb25nXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobW9kZXMuZnVsbF9hdXRvKSB7XHJcbiAgICAgICAgICAgIGZpcmVNb2Rlc1snNiddID0gYCR7bW9kZXMuYnVyc3RfZmlyZSA/ICdMQi8nIDogJyd9JHtnYW1lLmkxOG4ubG9jYWxpemUoXCJTUjUuV2VhcG9uTW9kZUZ1bGxBdXRvU2hvcnRcIil9KHMpYDtcclxuICAgICAgICAgICAgZmlyZU1vZGVzWycxMCddID0gYCR7Z2FtZS5pMThuLmxvY2FsaXplKFwiU1I1LldlYXBvbk1vZGVGdWxsQXV0b1Nob3J0XCIpfShjKWA7XHJcbiAgICAgICAgICAgIGZpcmVNb2Rlc1snMjAnXSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlN1cHByZXNzaW5nJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZVJhbmdlcyA9IHRoaXMuX2dldFJhbmdlV2VhcG9uVGVtcGxhdGVEYXRhKHJhbmdlcyk7XHJcbiAgICAgICAgY29uc3QgZmlyZU1vZGUgPSBpdGVtLmdldExhc3RGaXJlTW9kZSgpO1xyXG4gICAgICAgIGNvbnN0IHJjID0gaXRlbS5nZXRSZWNvaWxDb21wZW5zYXRpb24odHJ1ZSk7XHJcbiAgICAgICAgdGVtcGxhdGVEYXRhWydmaXJlTW9kZXMnXSA9IGZpcmVNb2RlcztcclxuICAgICAgICB0ZW1wbGF0ZURhdGFbJ2ZpcmVNb2RlJ10gPSBmaXJlTW9kZT8udmFsdWU7XHJcbiAgICAgICAgdGVtcGxhdGVEYXRhWydyYyddID0gcmM7XHJcbiAgICAgICAgdGVtcGxhdGVEYXRhWydhbW1vJ10gPSBhbW1vO1xyXG4gICAgICAgIHRlbXBsYXRlRGF0YVsndGl0bGUnXSA9IHRpdGxlO1xyXG4gICAgICAgIHRlbXBsYXRlRGF0YVsncmFuZ2VzJ10gPSB0ZW1wbGF0ZVJhbmdlcztcclxuICAgICAgICB0ZW1wbGF0ZURhdGFbJ3RhcmdldFJhbmdlJ10gPSBpdGVtLmdldExhc3RGaXJlUmFuZ2VNb2QoKTtcclxuXHJcbiAgICAgICAgbGV0IGNhbmNlbCA9IHRydWU7XHJcbiAgICAgICAgZGlhbG9nRGF0YS5idXR0b25zID0ge1xyXG4gICAgICAgICAgICBjb250aW51ZToge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkNvbnRpbnVlJyksXHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gKGNhbmNlbCA9IGZhbHNlKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBkaWFsb2dEYXRhLmNsb3NlID0gYXN5bmMgKGh0bWwpID0+IHtcclxuICAgICAgICAgICAgaWYgKGNhbmNlbCkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBmaXJlTW9kZSA9IEhlbHBlcnMucGFyc2VJbnB1dFRvTnVtYmVyKCQoaHRtbCkuZmluZCgnW25hbWU9XCJmaXJlTW9kZVwiXScpLnZhbCgpKTtcclxuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBIZWxwZXJzLnBhcnNlSW5wdXRUb051bWJlcigkKGh0bWwpLmZpbmQoJ1tuYW1lPVwicmFuZ2VcIl0nKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGl0ZW0uc2V0TGFzdEZpcmVSYW5nZU1vZCh7IHZhbHVlOiByYW5nZSB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGZpcmVNb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJlTW9kZVN0cmluZyA9IGZpcmVNb2Rlc1tmaXJlTW9kZV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkZWZlbnNlTW9kaWZpZXIgPSBIZWxwZXJzLm1hcFJvdW5kc1RvRGVmZW5zZURlc2MoZmlyZU1vZGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyZU1vZGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBmaXJlTW9kZVN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZmlyZU1vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmZW5zZTogZGVmZW5zZU1vZGlmaWVyLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGF3YWl0IGl0ZW0uc2V0TGFzdEZpcmVNb2RlKGZpcmVNb2RlRGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgX2dldFJhbmdlV2VhcG9uVGVtcGxhdGVEYXRhKHJhbmdlcykge1xyXG4gICAgICAgIGNvbnN0IGxvb2t1cCA9IHtcclxuICAgICAgICAgICAgc2hvcnQ6IDAsXHJcbiAgICAgICAgICAgIG1lZGl1bTogLTEsXHJcbiAgICAgICAgICAgIGxvbmc6IC0zLFxyXG4gICAgICAgICAgICBleHRyZW1lOiAtNixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IG5ld1JhbmdlcyA9IHt9O1xyXG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHJhbmdlcykpIHtcclxuICAgICAgICAgICAgbmV3UmFuZ2VzW2tleV0gPSB7XHJcbiAgICAgICAgICAgICAgICBkaXN0YW5jZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICBsYWJlbDogQ09ORklHLlNSNS53ZWFwb25SYW5nZXNba2V5XSxcclxuICAgICAgICAgICAgICAgIG1vZGlmaWVyOiBsb29rdXBba2V5XSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG5ld1JhbmdlcztcclxuICAgIH1cclxufVxyXG4iLCIvKipcclxuICogQSBHTS1Ub29sIHRvIGtlZXAgdHJhY2sgb2YgYWxsIHBsYXllcnMgb3ZlcndhdGNoIHNjb3Jlc1xyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE92ZXJ3YXRjaFNjb3JlVHJhY2tlciBleHRlbmRzIEFwcGxpY2F0aW9uIHtcclxuICAgIHN0YXRpYyBNYXRyaXhPdmVyd2F0Y2hEaWNlQ291bnQgPSAnMmQ2JztcclxuICAgIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHN1cGVyLmRlZmF1bHRPcHRpb25zO1xyXG4gICAgICAgIG9wdGlvbnMuaWQgPSAnb3ZlcndhdGNoLXNjb3JlLXRyYWNrZXInO1xyXG4gICAgICAgIG9wdGlvbnMuY2xhc3NlcyA9IFsnc3I1J107XHJcbiAgICAgICAgb3B0aW9ucy50aXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1Lk92ZXJ3YXRjaFNjb3JlVHJhY2tlclRpdGxlJyk7XHJcbiAgICAgICAgb3B0aW9ucy50ZW1wbGF0ZSA9XHJcbiAgICAgICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FwcHMvZ210b29scy9vdmVyd2F0Y2gtc2NvcmUtdHJhY2tlci5odG1sJztcclxuICAgICAgICBvcHRpb25zLndpZHRoID0gNDUwO1xyXG4gICAgICAgIG9wdGlvbnMuaGVpZ2h0ID0gJ2F1dG8nO1xyXG4gICAgICAgIG9wdGlvbnMucmVzaXphYmxlID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gb3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBnZXREYXRhKCkge1xyXG4gICAgICAgIC8vIGdldCBsaXN0IG9mIGFjdG9ycyB0aGF0IGJlbG9uZyB0byB1c2Vyc1xyXG4gICAgICAgIGNvbnN0IGFjdG9ycyA9IGdhbWUudXNlcnMucmVkdWNlKChhY2MsIHVzZXIpID0+IHtcclxuICAgICAgICAgICAgaWYgKCF1c2VyLmlzR00gJiYgdXNlci5jaGFyYWN0ZXIpIHtcclxuICAgICAgICAgICAgICAgIGFjYy5wdXNoKHVzZXIuY2hhcmFjdGVyLmRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBhY2M7XHJcbiAgICAgICAgfSwgW10pO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBhY3RvcnMsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBhY3RpdmF0ZUxpc3RlbmVycyhodG1sKSB7XHJcbiAgICAgICAgaHRtbC5maW5kKCcub3ZlcndhdGNoLXNjb3JlLXJlc2V0Jykub24oJ2NsaWNrJywgdGhpcy5fcmVzZXRPdmVyd2F0Y2hTY29yZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5vdmVyd2F0Y2gtc2NvcmUtYWRkJykub24oJ2NsaWNrJywgdGhpcy5fYWRkT3ZlcndhdGNoU2NvcmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcub3ZlcndhdGNoLXNjb3JlLWlucHV0Jykub24oJ2NoYW5nZScsIHRoaXMuX3NldE92ZXJ3YXRjaFNjb3JlLmJpbmQodGhpcykpO1xyXG4gICAgICAgIGh0bWwuZmluZCgnLm92ZXJ3YXRjaC1zY29yZS1yb2xsLTE1LW1pbnV0ZXMnKS5vbihcclxuICAgICAgICAgICAgJ2NsaWNrJyxcclxuICAgICAgICAgICAgdGhpcy5fcm9sbEZvcjE1TWludXRlcy5iaW5kKHRoaXMpXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyByZXR1cm5zIHRoZSBhY3RvciB0aGF0IHRoaXMgZXZlbnQgaXMgYWN0aW5nIG9uXHJcbiAgICBfZ2V0QWN0b3JGcm9tRXZlbnQoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBpZCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLml0ZW0nKS5kYXRhc2V0LmFjdG9ySWQ7XHJcbiAgICAgICAgaWYgKGlkKSByZXR1cm4gZ2FtZS5hY3RvcnMuZmluZCgoYSkgPT4gYS5faWQgPT09IGlkKTtcclxuICAgIH1cclxuXHJcbiAgICBfc2V0T3ZlcndhdGNoU2NvcmUoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBhY3RvciA9IHRoaXMuX2dldEFjdG9yRnJvbUV2ZW50KGV2ZW50KTtcclxuICAgICAgICBjb25zdCBhbW91bnQgPSBldmVudC5jdXJyZW50VGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgIGlmIChhbW91bnQgJiYgYWN0b3IpIHtcclxuICAgICAgICAgICAgYWN0b3Iuc2V0T3ZlcndhdGNoU2NvcmUoYW1vdW50KS50aGVuKCgpID0+IHRoaXMucmVuZGVyKCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfYWRkT3ZlcndhdGNoU2NvcmUoZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBhY3RvciA9IHRoaXMuX2dldEFjdG9yRnJvbUV2ZW50KGV2ZW50KTtcclxuICAgICAgICBjb25zdCBhbW91bnQgPSBwYXJzZUludChldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuYW1vdW50KTtcclxuICAgICAgICBpZiAoYW1vdW50ICYmIGFjdG9yKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG9zID0gYWN0b3IuZ2V0T3ZlcndhdGNoU2NvcmUoKTtcclxuICAgICAgICAgICAgYWN0b3Iuc2V0T3ZlcndhdGNoU2NvcmUob3MgKyBhbW91bnQpLnRoZW4oKCkgPT4gdGhpcy5yZW5kZXIoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIF9yZXNldE92ZXJ3YXRjaFNjb3JlKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBhY3RvciA9IHRoaXMuX2dldEFjdG9yRnJvbUV2ZW50KGV2ZW50KTtcclxuICAgICAgICBpZiAoYWN0b3IpIHtcclxuICAgICAgICAgICAgYWN0b3Iuc2V0T3ZlcndhdGNoU2NvcmUoMCkudGhlbigoKSA9PiB0aGlzLnJlbmRlcigpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgX3JvbGxGb3IxNU1pbnV0ZXMoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IGFjdG9yID0gdGhpcy5fZ2V0QWN0b3JGcm9tRXZlbnQoZXZlbnQpO1xyXG4gICAgICAgIGlmIChhY3Rvcikge1xyXG4gICAgICAgICAgICAvLyAgdXNlIHN0YXRpYyB2YWx1ZSBzbyBpdCBjYW4gYmUgbW9kaWZpZWQgaW4gbW9kdWxlc1xyXG4gICAgICAgICAgICBjb25zdCByb2xsID0gbmV3IFJvbGwoT3ZlcndhdGNoU2NvcmVUcmFja2VyLk1hdHJpeE92ZXJ3YXRjaERpY2VDb3VudCk7XHJcbiAgICAgICAgICAgIHJvbGwucm9sbCgpO1xyXG5cclxuICAgICAgICAgICAgLy8gdXNlIEdNIFJvbGwgTW9kZSBzbyBwbGF5ZXJzIGRvbid0IHNlZVxyXG4gICAgICAgICAgICAvLyBjb25zdCByb2xsTW9kZSA9IENPTkZJRy5EaWNlLnJvbGxNb2Rlcy5nbXJvbGw7XHJcbiAgICAgICAgICAgIC8vIHJvbGwudG9NZXNzYWdlKHsgcm9sbE1vZGUgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAocm9sbC50b3RhbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgb3MgPSBhY3Rvci5nZXRPdmVyd2F0Y2hTY29yZSgpO1xyXG4gICAgICAgICAgICAgICAgYWN0b3Iuc2V0T3ZlcndhdGNoU2NvcmUob3MgKyByb2xsLnRvdGFsKS50aGVuKCgpID0+IHRoaXMucmVuZGVyKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IExhbmd1YWdlU2tpbGxFZGl0Rm9ybSB9IGZyb20gJy4vTGFuZ3VhZ2VTa2lsbEVkaXRGb3JtJztcclxuaW1wb3J0IEtub3dsZWRnZVNraWxsQ2F0ZWdvcnkgPSBTaGFkb3dydW4uS25vd2xlZGdlU2tpbGxDYXRlZ29yeTtcclxuXHJcbmV4cG9ydCBjbGFzcyBLbm93bGVkZ2VTa2lsbEVkaXRGb3JtIGV4dGVuZHMgTGFuZ3VhZ2VTa2lsbEVkaXRGb3JtIHtcclxuICAgIGNhdGVnb3J5OiBLbm93bGVkZ2VTa2lsbENhdGVnb3J5O1xyXG4gICAgY29uc3RydWN0b3IoYWN0b3IsIG9wdGlvbnMsIHNraWxsSWQsIGNhdGVnb3J5KSB7XHJcbiAgICAgICAgc3VwZXIoYWN0b3IsIG9wdGlvbnMsIHNraWxsSWQpO1xyXG4gICAgICAgIHRoaXMuY2F0ZWdvcnkgPSBjYXRlZ29yeTtcclxuICAgIH1cclxuICAgIF91cGRhdGVTdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBkYXRhLnNraWxscy5rbm93bGVkZ2UuJHt0aGlzLmNhdGVnb3J5fS52YWx1ZS4ke3RoaXMuc2tpbGxJZH1gO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFNraWxsRWRpdEZvcm0gfSBmcm9tICcuL1NraWxsRWRpdEZvcm0nO1xyXG5cclxuZXhwb3J0IGNsYXNzIExhbmd1YWdlU2tpbGxFZGl0Rm9ybSBleHRlbmRzIFNraWxsRWRpdEZvcm0ge1xyXG4gICAgX3VwZGF0ZVN0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gYGRhdGEuc2tpbGxzLmxhbmd1YWdlLnZhbHVlLiR7dGhpcy5za2lsbElkfWA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICByZXR1cm4gbWVyZ2VPYmplY3Qoc3VwZXIuZ2V0RGF0YSgpLCB7XHJcbiAgICAgICAgICAgIGVkaXRhYmxlX25hbWU6IHRydWUsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBvdmVycmlkZSAqL1xyXG4gICAgX29uVXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSwgdXBkYXRlRGF0YSkge1xyXG4gICAgICAgIHN1cGVyLl9vblVwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEsIHVwZGF0ZURhdGEpO1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBmb3JtRGF0YVsnZGF0YS5uYW1lJ107XHJcbiAgICAgICAgY29uc3QgY3VycmVudERhdGEgPSB1cGRhdGVEYXRhW3RoaXMuX3VwZGF0ZVN0cmluZygpXSB8fCB7fTtcclxuICAgICAgICB1cGRhdGVEYXRhW3RoaXMuX3VwZGF0ZVN0cmluZygpXSA9IHtcclxuICAgICAgICAgICAgLi4uY3VycmVudERhdGEsXHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgU2tpbGxFZGl0Rm9ybURhdGEgPSBTaGFkb3dydW4uU2tpbGxFZGl0Rm9ybURhdGE7XHJcblxyXG5leHBvcnQgY2xhc3MgU2tpbGxFZGl0Rm9ybSBleHRlbmRzIEJhc2VFbnRpdHlTaGVldCB7XHJcbiAgICBza2lsbElkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoYWN0b3IsIG9wdGlvbnMsIHNraWxsSWQpIHtcclxuICAgICAgICBzdXBlcihhY3Rvciwgb3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5za2lsbElkID0gc2tpbGxJZDtcclxuICAgIH1cclxuXHJcbiAgICBfdXBkYXRlU3RyaW5nKCkge1xyXG4gICAgICAgIHJldHVybiBgZGF0YS5za2lsbHMuYWN0aXZlLiR7dGhpcy5za2lsbElkfWA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldCBkZWZhdWx0T3B0aW9ucygpIHtcclxuICAgICAgICBjb25zdCBvcHRpb25zID0gc3VwZXIuZGVmYXVsdE9wdGlvbnM7XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KG9wdGlvbnMsIHtcclxuICAgICAgICAgICAgaWQ6ICdza2lsbC1lZGl0b3InLFxyXG4gICAgICAgICAgICBjbGFzc2VzOiBbJ3NyNScsICdzaGVldCcsICdza2lsbC1lZGl0LXdpbmRvdyddLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYXBwcy9za2lsbC1lZGl0Lmh0bWwnLFxyXG4gICAgICAgICAgICB3aWR0aDogMzAwLFxyXG4gICAgICAgICAgICBzdWJtaXRPbkNsb3NlOiB0cnVlLFxyXG4gICAgICAgICAgICBzdWJtaXRPbkNoYW5nZTogdHJ1ZSxcclxuICAgICAgICAgICAgY2xvc2VPblN1Ym1pdDogZmFsc2UsXHJcbiAgICAgICAgICAgIHJlc2l6YWJsZTogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGl0bGUoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhKCkuZGF0YTtcclxuICAgICAgICByZXR1cm4gYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRWRpdFNraWxsJyl9IC0gJHtkYXRhPy5sYWJlbCA/IGdhbWUuaTE4bi5sb2NhbGl6ZShkYXRhLmxhYmVsKSA6ICcnfWA7XHJcbiAgICB9XHJcblxyXG4gICAgX29uVXBkYXRlT2JqZWN0KGV2ZW50LCBmb3JtRGF0YSwgdXBkYXRlRGF0YSkge1xyXG4gICAgICAgIC8vIGdldCBiYXNlIHZhbHVlXHJcbiAgICAgICAgY29uc3QgYmFzZSA9IGZvcm1EYXRhWydkYXRhLmJhc2UnXTtcclxuXHJcbiAgICAgICAgLy8gcHJvY2VzcyBzcGVjaWFsaXphdGlvbnNcclxuICAgICAgICBjb25zdCBzcGVjc1JlZ2V4ID0gL2RhdGFcXC5zcGVjc1xcLihcXGQrKS87XHJcbiAgICAgICAgY29uc3Qgc3BlY3MgPSBPYmplY3QuZW50cmllcyhmb3JtRGF0YSkucmVkdWNlKChydW5uaW5nLCBba2V5LCB2YWxdOiBbc3RyaW5nLCBhbnldKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvdW5kID0ga2V5Lm1hdGNoKHNwZWNzUmVnZXgpO1xyXG4gICAgICAgICAgICBpZiAoZm91bmQgJiYgZm91bmRbMF0pIHtcclxuICAgICAgICAgICAgICAgIHJ1bm5pbmcucHVzaCh2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBydW5uaW5nO1xyXG4gICAgICAgIH0sIFtdIGFzIGFueVtdKTtcclxuXHJcbiAgICAgICAgLy8gcHJvY2VzcyBib251c2VzXHJcbiAgICAgICAgY29uc3QgYm9udXNLZXlSZWdleCA9IC9kYXRhXFwuYm9udXNcXC4oXFxkKykua2V5LztcclxuICAgICAgICBjb25zdCBib251c1ZhbHVlUmVnZXggPSAvZGF0YVxcLmJvbnVzXFwuKFxcZCspLnZhbHVlLztcclxuICAgICAgICBjb25zdCBib251cyA9IE9iamVjdC5lbnRyaWVzKGZvcm1EYXRhKS5yZWR1Y2UoKHJ1bm5pbmcsIFtrZXksIHZhbHVlXTogW3N0cmluZywgYW55XSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBmb3VuZEtleSA9IGtleS5tYXRjaChib251c0tleVJlZ2V4KTtcclxuICAgICAgICAgICAgY29uc3QgZm91bmRWYWwgPSBrZXkubWF0Y2goYm9udXNWYWx1ZVJlZ2V4KTtcclxuICAgICAgICAgICAgaWYgKGZvdW5kS2V5ICYmIGZvdW5kS2V5WzBdICYmIGZvdW5kS2V5WzFdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IGZvdW5kS2V5WzFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJ1bm5pbmdbaW5kZXhdID09PSB1bmRlZmluZWQpIHJ1bm5pbmdbaW5kZXhdID0ge307XHJcbiAgICAgICAgICAgICAgICBydW5uaW5nW2luZGV4XS5rZXkgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChmb3VuZFZhbCAmJiBmb3VuZFZhbFswXSAmJiBmb3VuZFZhbFsxXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBmb3VuZFZhbFsxXTtcclxuICAgICAgICAgICAgICAgIGlmIChydW5uaW5nW2luZGV4XSA9PT0gdW5kZWZpbmVkKSBydW5uaW5nW2luZGV4XSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgcnVubmluZ1tpbmRleF0udmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XHJcbiAgICAgICAgfSwgW10gYXMgYW55W10pO1xyXG5cclxuICAgICAgICBjb25zdCBjdXJyZW50RGF0YSA9IHVwZGF0ZURhdGFbdGhpcy5fdXBkYXRlU3RyaW5nKCldIHx8IHt9O1xyXG4gICAgICAgIHVwZGF0ZURhdGFbdGhpcy5fdXBkYXRlU3RyaW5nKCldID0ge1xyXG4gICAgICAgICAgICAuLi5jdXJyZW50RGF0YSxcclxuICAgICAgICAgICAgYmFzZSxcclxuICAgICAgICAgICAgc3BlY3MsXHJcbiAgICAgICAgICAgIGJvbnVzLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEBvdmVycmlkZSAqL1xyXG4gICAgYXN5bmMgX3VwZGF0ZU9iamVjdChldmVudCwgZm9ybURhdGEpIHtcclxuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0ge307XHJcbiAgICAgICAgdGhpcy5fb25VcGRhdGVPYmplY3QoZXZlbnQsIGZvcm1EYXRhLCB1cGRhdGVEYXRhKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhmb3JtRGF0YSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5lbnRpdHkudXBkYXRlKHVwZGF0ZURhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGFjdGl2YXRlTGlzdGVuZXJzKGh0bWwpIHtcclxuICAgICAgICBzdXBlci5hY3RpdmF0ZUxpc3RlbmVycyhodG1sKTtcclxuICAgICAgICAkKGh0bWwpLmZpbmQoJy5hZGQtc3BlYycpLm9uKCdjbGljaycsIHRoaXMuX2FkZE5ld1NwZWMuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgJChodG1sKS5maW5kKCcucmVtb3ZlLXNwZWMnKS5vbignY2xpY2snLCB0aGlzLl9yZW1vdmVTcGVjLmJpbmQodGhpcykpO1xyXG4gICAgICAgICQoaHRtbCkuZmluZCgnLmFkZC1ib251cycpLm9uKCdjbGljaycsIHRoaXMuX2FkZE5ld0JvbnVzLmJpbmQodGhpcykpO1xyXG4gICAgICAgICQoaHRtbCkuZmluZCgnLnJlbW92ZS1ib251cycpLm9uKCdjbGljaycsIHRoaXMuX3JlbW92ZUJvbnVzLmJpbmQodGhpcykpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9hZGROZXdCb251cyhldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IHt9O1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldERhdGEoKS5kYXRhO1xyXG4gICAgICAgIGlmICghZGF0YSkgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IHsgYm9udXMgPSBbXSB9ID0gZGF0YTtcclxuICAgICAgICAvLyBhZGQgYmxhbmsgbGluZSBmb3IgbmV3IGJvbnVzXHJcbiAgICAgICAgdXBkYXRlRGF0YVtgJHt0aGlzLl91cGRhdGVTdHJpbmcoKX0uYm9udXNgXSA9IFsuLi5ib251cywgeyBrZXk6ICcnLCB2YWx1ZTogMCB9XTtcclxuICAgICAgICBhd2FpdCB0aGlzLmVudGl0eS51cGRhdGUodXBkYXRlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX3JlbW92ZUJvbnVzKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0ge307XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YSgpLmRhdGE7XHJcbiAgICAgICAgaWYgKGRhdGE/LmJvbnVzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgYm9udXMgfSA9IGRhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gZXZlbnQuY3VycmVudFRhcmdldC5kYXRhc2V0LnNwZWM7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBib251cy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVtgJHt0aGlzLl91cGRhdGVTdHJpbmcoKX0uYm9udXNgXSA9IGJvbnVzO1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnRpdHkudXBkYXRlKHVwZGF0ZURhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9hZGROZXdTcGVjKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0ge307XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuZ2V0RGF0YSgpLmRhdGE7XHJcbiAgICAgICAgaWYgKGRhdGE/LnNwZWNzKSB7XHJcbiAgICAgICAgICAgIC8vIGFkZCBhIGJsYW5rIGxpbmUgdG8gc3BlY3NcclxuICAgICAgICAgICAgY29uc3QgeyBzcGVjcyB9ID0gZGF0YTtcclxuICAgICAgICAgICAgdXBkYXRlRGF0YVtgJHt0aGlzLl91cGRhdGVTdHJpbmcoKX0uc3BlY3NgXSA9IFsuLi5zcGVjcywgJyddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCB0aGlzLmVudGl0eS51cGRhdGUodXBkYXRlRGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX3JlbW92ZVNwZWMoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fTtcclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5nZXREYXRhKCkuZGF0YTtcclxuICAgICAgICBpZiAoZGF0YT8uc3BlY3MpIHtcclxuICAgICAgICAgICAgY29uc3QgeyBzcGVjcyB9ID0gZGF0YTtcclxuICAgICAgICAgICAgY29uc3QgaW5kZXggPSBldmVudC5jdXJyZW50VGFyZ2V0LmRhdGFzZXQuc3BlYztcclxuICAgICAgICAgICAgaWYgKGluZGV4ID49IDApIHtcclxuICAgICAgICAgICAgICAgIHNwZWNzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVEYXRhW2Ake3RoaXMuX3VwZGF0ZVN0cmluZygpfS5zcGVjc2BdID0gc3BlY3M7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmVudGl0eS51cGRhdGUodXBkYXRlRGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RGF0YSgpOiBTa2lsbEVkaXRGb3JtRGF0YSB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IHN1cGVyLmdldERhdGEoKTtcclxuICAgICAgICBjb25zdCBhY3RvciA9IHN1cGVyLmdldERhdGEoKS5lbnRpdHk7XHJcbiAgICAgICAgZGF0YVsnZGF0YSddID0gYWN0b3IgPyBnZXRQcm9wZXJ0eShhY3RvciwgdGhpcy5fdXBkYXRlU3RyaW5nKCkpIDoge307XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIE1lYXN1cmUgdGhlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBpeGVsIGNvb3JkaW5hdGVzXHJcbiAqIFNlZSBCYXNlR3JpZC5tZWFzdXJlRGlzdGFuY2UgZm9yIG1vcmUgZGV0YWlsc1xyXG4gKlxyXG4gKiBAcGFyYW0ge09iamVjdH0gcDAgICAgICAgICAgIFRoZSBvcmlnaW4gY29vcmRpbmF0ZSB7eCwgeX1cclxuICogQHBhcmFtIHtPYmplY3R9IHAxICAgICAgICAgICBUaGUgZGVzdGluYXRpb24gY29vcmRpbmF0ZSB7eCwgeX1cclxuICogQHBhcmFtIHtib29sZWFufSBncmlkU3BhY2VzICBFbmZvcmNlIGdyaWQgZGlzdGFuY2UgKGlmIHRydWUpIHZzLiBkaXJlY3QgcG9pbnQtdG8tcG9pbnQgKGlmIGZhbHNlKVxyXG4gKiBAcmV0dXJuIHtudW1iZXJ9ICAgICAgICAgICAgIFRoZSBkaXN0YW5jZSBiZXR3ZWVuIHAxIGFuZCBwMFxyXG4gKi9cclxuaW1wb3J0IHsgU1lTVEVNX05BTUUgfSBmcm9tICcuL2NvbnN0YW50cyc7XHJcblxyXG5leHBvcnQgY29uc3QgbWVhc3VyZURpc3RhbmNlID0gZnVuY3Rpb24gKHAwLCBwMSwgeyBncmlkU3BhY2VzID0gdHJ1ZSB9ID0ge30pIHtcclxuICAgIGlmICghZ3JpZFNwYWNlcylcclxuICAgICAgICB7ICAvLyBCYXNlR3JpZCBleGlzdHMuLi4gZml4IGluIGZvdW5kcnkgdHlwZXNcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICByZXR1cm4gQmFzZUdyaWQucHJvdG90eXBlLm1lYXN1cmVEaXN0YW5jZS5iaW5kKHRoaXMpKHAwLCBwMSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBncmlkU3BhY2VzLFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIGNvbnN0IGdzID0gY2FudmFzLmRpbWVuc2lvbnMuc2l6ZTtcclxuICAgIGNvbnN0IHJheSA9IG5ldyBSYXkocDAsIHAxKTtcclxuICAgIGNvbnN0IG54ID0gTWF0aC5hYnMoTWF0aC5jZWlsKHJheS5keCAvIGdzKSk7XHJcbiAgICBjb25zdCBueSA9IE1hdGguYWJzKE1hdGguY2VpbChyYXkuZHkgLyBncykpO1xyXG5cclxuICAgIC8vIEdldCB0aGUgbnVtYmVyIG9mIHN0cmFpZ2h0IGFuZCBkaWFnb25hbCBtb3Zlc1xyXG4gICAgY29uc3QgbkRpYWdvbmFsID0gTWF0aC5taW4obngsIG55KTtcclxuICAgIGNvbnN0IG5TdHJhaWdodCA9IE1hdGguYWJzKG55IC0gbngpO1xyXG5cclxuICAgIGNvbnN0IGRpYWdvbmFsUnVsZSA9IGdhbWUuc2V0dGluZ3MuZ2V0KFNZU1RFTV9OQU1FLCAnZGlhZ29uYWxNb3ZlbWVudCcpO1xyXG5cclxuICAgIGlmIChkaWFnb25hbFJ1bGUgPT09ICcxLTItMScpIHtcclxuICAgICAgICBjb25zdCBuZDEwID0gTWF0aC5mbG9vcihuRGlhZ29uYWwgLyAyKTtcclxuICAgICAgICBjb25zdCBzcGFjZXMgPSBuZDEwICogMiArIChuRGlhZ29uYWwgLSBuZDEwKSArIG5TdHJhaWdodDtcclxuICAgICAgICByZXR1cm4gc3BhY2VzICogY2FudmFzLmRpbWVuc2lvbnMuZGlzdGFuY2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKG5TdHJhaWdodCArIG5EaWFnb25hbCkgKiBjYW52YXMuc2NlbmUuZGF0YS5ncmlkRGlzdGFuY2U7XHJcbn07XHJcbiIsImltcG9ydCB7IFNSNUFjdG9yIH0gZnJvbSAnLi9hY3Rvci9TUjVBY3Rvcic7XHJcbmltcG9ydCB7IFNSNUl0ZW0gfSBmcm9tICcuL2l0ZW0vU1I1SXRlbSc7XHJcbmltcG9ydCBUZW1wbGF0ZSBmcm9tICcuL3RlbXBsYXRlJztcclxuaW1wb3J0IE1vZExpc3QgPSBTaGFkb3dydW4uTW9kTGlzdDtcclxuaW1wb3J0IEJhc2VWYWx1ZVBhaXIgPSBTaGFkb3dydW4uQmFzZVZhbHVlUGFpcjtcclxuaW1wb3J0IERhbWFnZURhdGEgPSBTaGFkb3dydW4uRGFtYWdlRGF0YTtcclxuaW1wb3J0IEF0dGFja0RhdGEgPSBTaGFkb3dydW4uQXR0YWNrRGF0YTtcclxuaW1wb3J0IExhYmVsRmllbGQgPSBTaGFkb3dydW4uTGFiZWxGaWVsZDtcclxuaW1wb3J0IHsgRkxBR1MsIFNZU1RFTV9OQU1FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBQYXJ0c0xpc3QgfSBmcm9tICcuL3BhcnRzL1BhcnRzTGlzdCc7XHJcblxyXG5leHBvcnQgdHlwZSBUZW1wbGF0ZURhdGEgPSB7XHJcbiAgICBoZWFkZXI6IHtcclxuICAgICAgICBuYW1lOiBzdHJpbmc7XHJcbiAgICAgICAgaW1nOiBzdHJpbmc7XHJcbiAgICB9O1xyXG4gICAgdG9rZW5JZD86IHN0cmluZztcclxuICAgIGRpY2U/OiBEaWVbXTtcclxuICAgIHBhcnRzPzogTW9kTGlzdDxudW1iZXI+O1xyXG4gICAgbGltaXQ/OiBCYXNlVmFsdWVQYWlyPG51bWJlcj4gJiBMYWJlbEZpZWxkO1xyXG4gICAgdGVzdE5hbWU/OiBzdHJpbmc7XHJcbiAgICBhY3Rvcj86IFNSNUFjdG9yO1xyXG4gICAgaXRlbT86IFNSNUl0ZW07XHJcbiAgICBhdHRhY2s/OiBBdHRhY2tEYXRhO1xyXG4gICAgaW5jb21pbmdBdHRhY2s/OiBBdHRhY2tEYXRhO1xyXG4gICAgaW5jb21pbmdEcmFpbj86IExhYmVsRmllbGQgJiB7XHJcbiAgICAgICAgdmFsdWU6IG51bWJlcjtcclxuICAgIH07XHJcbiAgICBoaXRzPzogbnVtYmVyO1xyXG4gICAgc29haz86IERhbWFnZURhdGE7XHJcbiAgICB0ZXN0cz86IHtcclxuICAgICAgICBsYWJlbDogc3RyaW5nO1xyXG4gICAgICAgIHR5cGU6IHN0cmluZztcclxuICAgIH1bXTtcclxuICAgIGRlc2NyaXB0aW9uPzogb2JqZWN0O1xyXG4gICAgcHJldmlld1RlbXBsYXRlPzogYm9vbGVhbjtcclxuICAgIHJvbGxNb2RlPzoga2V5b2YgdHlwZW9mIENPTkZJRy5EaWNlLnJvbGxNb2RlcztcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVDaGF0RGF0YSA9IGFzeW5jICh0ZW1wbGF0ZURhdGE6IFRlbXBsYXRlRGF0YSwgcm9sbD86IFJvbGwpID0+IHtcclxuICAgIGNvbnN0IHRlbXBsYXRlID0gYHN5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvcm9sbHMvcm9sbC1jYXJkLmh0bWxgO1xyXG4gICAgY29uc3QgaGFja3lUZW1wbGF0ZURhdGEgPSB7XHJcbiAgICAgICAgLi4udGVtcGxhdGVEYXRhLFxyXG4gICAgICAgIHBhcnRzOiBuZXcgUGFydHNMaXN0KHRlbXBsYXRlRGF0YS5wYXJ0cykuZ2V0TWVzc2FnZU91dHB1dCgpLFxyXG4gICAgICAgIHNob3dHbGl0Y2hBbmltYXRpb246IGdhbWUuc2V0dGluZ3MuZ2V0KFNZU1RFTV9OQU1FLCBGTEFHUy5TaG93R2xpdGNoQW5pbWF0aW9uKSxcclxuICAgIH07XHJcbiAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIGhhY2t5VGVtcGxhdGVEYXRhKTtcclxuICAgIGNvbnN0IGFjdG9yID0gdGVtcGxhdGVEYXRhLmFjdG9yO1xyXG5cclxuICAgIGNvbnN0IGNoYXREYXRhID0ge1xyXG4gICAgICAgIHVzZXI6IGdhbWUudXNlci5faWQsXHJcbiAgICAgICAgdHlwZTogcm9sbCA/IENPTlNULkNIQVRfTUVTU0FHRV9UWVBFUy5ST0xMIDogQ09OU1QuQ0hBVF9NRVNTQUdFX1RZUEVTLk9USEVSLFxyXG4gICAgICAgIGNvbnRlbnQ6IGh0bWwsXHJcbiAgICAgICAgcm9sbDogcm9sbCA/IEpTT04uc3RyaW5naWZ5KHJvbGwpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgIHNwZWFrZXI6IHtcclxuICAgICAgICAgICAgYWN0b3I6IGFjdG9yPy5faWQsXHJcbiAgICAgICAgICAgIHRva2VuOiBhY3Rvcj8udG9rZW4sXHJcbiAgICAgICAgICAgIGFsaWFzOiBhY3Rvcj8ubmFtZSxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZsYWdzOiB7XHJcbiAgICAgICAgICAgIHNoYWRvd3J1bjVlOiB7XHJcbiAgICAgICAgICAgICAgICBjdXN0b21Sb2xsOiB0cnVlLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9O1xyXG4gICAgaWYgKHJvbGwpIHtcclxuICAgICAgICBjaGF0RGF0YVsnc291bmQnXSA9IENPTkZJRy5zb3VuZHMuZGljZTtcclxuICAgIH1cclxuICAgIGNvbnN0IHJvbGxNb2RlID0gdGVtcGxhdGVEYXRhLnJvbGxNb2RlID8/IGdhbWUuc2V0dGluZ3MuZ2V0KCdjb3JlJywgJ3JvbGxNb2RlJyk7XHJcblxyXG4gICAgaWYgKFsnZ21yb2xsJywgJ2JsaW5kcm9sbCddLmluY2x1ZGVzKHJvbGxNb2RlKSkgY2hhdERhdGFbJ3doaXNwZXInXSA9IENoYXRNZXNzYWdlLmdldFdoaXNwZXJJRHMoJ0dNJyk7XHJcbiAgICBpZiAocm9sbE1vZGUgPT09ICdibGluZHJvbGwnKSBjaGF0RGF0YVsnYmxpbmQnXSA9IHRydWU7XHJcblxyXG4gICAgcmV0dXJuIGNoYXREYXRhO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZENoYXRNZXNzYWdlQ29udGV4dE9wdGlvbnMgPSAoaHRtbCwgb3B0aW9ucykgPT4ge1xyXG4gICAgY29uc3QgY2FuUm9sbCA9IChsaSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IG1zZyA9IGdhbWUubWVzc2FnZXMuZ2V0KGxpLmRhdGEoKS5tZXNzYWdlSWQpO1xyXG5cclxuICAgICAgICByZXR1cm4gbXNnLmdldEZsYWcoU1lTVEVNX05BTUUsICdjdXN0b21Sb2xsJyk7XHJcbiAgICB9O1xyXG5cclxuICAgIG9wdGlvbnMucHVzaChcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdQdXNoIHRoZSBMaW1pdCcsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAobGkpID0+IFNSNUFjdG9yLnB1c2hUaGVMaW1pdChsaSksXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbjogY2FuUm9sbCxcclxuICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLW1ldGVvclwiPjwvaT4nLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBuYW1lOiAnU2Vjb25kIENoYW5jZScsXHJcbiAgICAgICAgICAgIGNhbGxiYWNrOiAobGkpID0+IFNSNUFjdG9yLnNlY29uZENoYW5jZShsaSksXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbjogY2FuUm9sbCxcclxuICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWRpY2UtZDZcIj48L2k+JyxcclxuICAgICAgICB9LFxyXG4gICAgKTtcclxuICAgIHJldHVybiBvcHRpb25zO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGFkZFJvbGxMaXN0ZW5lcnMgPSAoYXBwOiBDaGF0TWVzc2FnZSwgaHRtbCkgPT4ge1xyXG4gICAgaWYgKCFhcHAuZ2V0RmxhZyhTWVNURU1fTkFNRSwgJ2N1c3RvbVJvbGwnKSkgcmV0dXJuO1xyXG4gICAgY29uc3QgaXRlbSA9IFNSNUl0ZW0uZ2V0SXRlbUZyb21NZXNzYWdlKGh0bWwpO1xyXG4gICAgaHRtbC5vbignY2xpY2snLCAnLnRlc3Qtcm9sbCcsIGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgY29uc3Qgcm9sbCA9IGF3YWl0IGl0ZW0ucm9sbFRlc3QoZXZlbnQsIHsgaGlkZVJvbGxNZXNzYWdlOiB0cnVlIH0pO1xyXG4gICAgICAgICAgICBpZiAocm9sbCAmJiByb2xsLnRlbXBsYXRlRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBgc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9yb2xscy9yb2xsLWNhcmQuaHRtbGA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBodG1sID0gYXdhaXQgcmVuZGVyVGVtcGxhdGUodGVtcGxhdGUsIHJvbGwudGVtcGxhdGVEYXRhKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcclxuICAgICAgICAgICAgICAgIGRhdGFbJ2NvbnRlbnQnXSA9IGh0bWw7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBhcHAudXBkYXRlKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBodG1sLm9uKCdjbGljaycsICcudGVzdCcsIGFzeW5jIChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5hY3Rpb247XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgYXdhaXQgaXRlbS5yb2xsRXh0cmFUZXN0KHR5cGUsIGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGh0bWwub24oJ2NsaWNrJywgJy5wbGFjZS10ZW1wbGF0ZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgY29uc3QgdGVtcGxhdGUgPSBUZW1wbGF0ZS5mcm9tSXRlbShpdGVtKTtcclxuICAgICAgICAgICAgdGVtcGxhdGU/LmRyYXdQcmV2aWV3KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBodG1sLm9uKCdjbGljaycsICcuY2FyZC10aXRsZScsIChldmVudCkgPT4ge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgJChldmVudC5jdXJyZW50VGFyZ2V0KS5zaWJsaW5ncygnLmNhcmQtZGVzY3JpcHRpb24nKS50b2dnbGUoKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKGl0ZW0/Lmhhc1JvbGwgJiYgYXBwLmlzUm9sbCkgJChodG1sKS5maW5kKCcuY2FyZC1kZXNjcmlwdGlvbicpLmhpZGUoKTtcclxufTtcclxuIiwiaW1wb3J0IHsgU1lTVEVNX05BTUUgfSBmcm9tICcuL2NvbnN0YW50cyc7XHJcblxyXG5leHBvcnQgY29uc3QgcHJlQ29tYmF0VXBkYXRlID0gYXN5bmMgZnVuY3Rpb24gKGNvbWJhdCwgY2hhbmdlcywgb3B0aW9ucykge1xyXG4gICAgLy8gdHJpZ2dlcnMgd2hlbiBjb21iYXQgcm91bmQgY2hhbmdlc1xyXG4gICAgaWYgKGNoYW5nZXMucm91bmQgJiYgY29tYmF0LnJvdW5kICYmIGNoYW5nZXMucm91bmQgPiBjb21iYXQucm91bmQpIHtcclxuICAgICAgICBsZXQgaW5pdFBhc3NFbmQgPSB0cnVlO1xyXG4gICAgICAgIGZvciAoY29uc3QgYyBvZiBjb21iYXQuY29tYmF0YW50cykge1xyXG4gICAgICAgICAgICBsZXQgaW5pdCA9IE51bWJlcihjLmluaXRpYXRpdmUpO1xyXG4gICAgICAgICAgICBpbml0IC09IDEwO1xyXG4gICAgICAgICAgICBpZiAoaW5pdCA+IDApIGluaXRQYXNzRW5kID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaW5pdFBhc3NFbmQpIHtcclxuICAgICAgICAgICAgY2hhbmdlcy5yb3VuZCA9IGNvbWJhdC5yb3VuZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgd2UgYXJlIGdtLCBjYWxsIGZ1bmN0aW9uIG5vcm1hbGx5XHJcbiAgICAgICAgLy8gaWYgbm90IGdtLCBzZW5kIGEgc29ja2V0IG1lc3NhZ2UgZm9yIHRoZSBnbSB0byB1cGRhdGUgdGhlIGNvbWJhdGFudHNcclxuICAgICAgICAvLyBmb3IgbmV3IGluaXRhdGl2ZSBwYXNzZXMgb3IgcmVyb2xsXHJcbiAgICAgICAgaWYgKGdhbWUudXNlci5pc0dNKSB7XHJcbiAgICAgICAgICAgIGF3YWl0IHNoYWRvd3J1bkNvbWJhdFVwZGF0ZShjaGFuZ2VzLCBvcHRpb25zKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGdhbWUuc29ja2V0LmVtaXQoJ3N5c3RlbS5zaGFkb3dydW41ZScsIHtcclxuICAgICAgICAgICAgICAgIGdtQ29tYmF0VXBkYXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlcyxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHNoYWRvd3J1bkNvbWJhdFVwZGF0ZSA9IGFzeW5jIChjaGFuZ2VzLCBvcHRpb25zKSA9PiB7XHJcbiAgICBjb25zdCB7IGNvbWJhdCB9ID0gZ2FtZTtcclxuICAgIC8vIHN1YnRhY3QgMTAgZnJvbSBhbGwgaW5pdGlhdGl2ZSwgd2UganVzdCB3ZW50IGludG8gdGhlIG5leHQgaW5pdGlhdGl2ZSBwYXNzXHJcbiAgICBjb25zdCByZW1vdmVkQ29tYmF0YW50cyA9IGNvbWJhdC5nZXRGbGFnKFNZU1RFTV9OQU1FLCAncmVtb3ZlZENvbWJhdGFudHMnKSB8fCBbXTtcclxuICAgIGNvbnN0IGNvbWJhdGFudHMgPSBbXTtcclxuICAgIGZvciAoY29uc3QgYyBvZiBjb21iYXQuY29tYmF0YW50cykge1xyXG4gICAgICAgIGxldCBpbml0ID0gTnVtYmVyKGMuaW5pdGlhdGl2ZSk7XHJcbiAgICAgICAgaW5pdCAtPSAxMDtcclxuICAgICAgICBpZiAoaW5pdCA8PSAwKSByZW1vdmVkQ29tYmF0YW50cy5wdXNoKHsgLi4uYyB9KTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBjb21iYXRhbnRzLnB1c2goeyBfaWQ6IGMuX2lkLCBpbml0aWF0aXZlOiBpbml0IH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGF3YWl0IGNvbWJhdC5kZWxldGVFbWJlZGRlZEVudGl0eShcclxuICAgICAgICAnQ29tYmF0YW50JyxcclxuICAgICAgICByZW1vdmVkQ29tYmF0YW50cy5tYXAoKGMpID0+IGMuX2lkKSxcclxuICAgICAgICB7fSxcclxuICAgICk7XHJcbiAgICBhd2FpdCBjb21iYXQudXBkYXRlRW1iZWRkZWRFbnRpdHkoJ0NvbWJhdGFudCcsIGNvbWJhdGFudHMsIHt9KTtcclxuICAgIGlmIChjb21iYXRhbnRzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIGNvbnN0IG1lc3NhZ2VzID0gW107XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZU9wdGlvbnMgPSBvcHRpb25zLm1lc3NhZ2VPcHRpb25zIHx8IHt9O1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGMgb2YgcmVtb3ZlZENvbWJhdGFudHMpIHtcclxuICAgICAgICAgICAgY29uc3QgYWN0b3JEYXRhID0gYy5hY3RvciA/IGMuYWN0b3IuZGF0YSA6IHt9O1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm11bGEgPSBjb21iYXQuX2dldEluaXRpYXRpdmVGb3JtdWxhKGMpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgcm9sbDogUm9sbCA9IG5ldyBSb2xsKGZvcm11bGEsIGFjdG9yRGF0YSkucm9sbCgpO1xyXG4gICAgICAgICAgICBjLmluaXRpYXRpdmUgPSByb2xsLnRvdGFsO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgcm9sbE1vZGUgPSBtZXNzYWdlT3B0aW9ucy5yb2xsTW9kZSB8fCBjLnRva2VuLmhpZGRlbiB8fCBjLmhpZGRlbiA/ICdnbXJvbGwnIDogJ3JvbGwnO1xyXG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlRGF0YSA9IG1lcmdlT2JqZWN0KFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHNwZWFrZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NlbmU6IGNhbnZhcy5zY2VuZS5faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdG9yOiBjLmFjdG9yID8gYy5hY3Rvci5faWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2tlbjogYy50b2tlbi5faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsaWFzOiBjLnRva2VuLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBmbGF2b3I6IGAke2MudG9rZW4ubmFtZX0gcm9sbHMgZm9yIEluaXRpYXRpdmUhYCxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlT3B0aW9ucyxcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgYXdhaXQgcm9sbC50b01lc3NhZ2UobWVzc2FnZURhdGEsIHtcclxuICAgICAgICAgICAgICAgIHJvbGxNb2RlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgYXdhaXQgY29tYmF0LmNyZWF0ZUVtYmVkZGVkRW50aXR5KCdDb21iYXRhbnQnLCByZW1vdmVkQ29tYmF0YW50cywge30pO1xyXG4gICAgICAgIGF3YWl0IENoYXRNZXNzYWdlLmNyZWF0ZShtZXNzYWdlcyk7XHJcbiAgICAgICAgYXdhaXQgY29tYmF0LnVuc2V0RmxhZyhTWVNURU1fTkFNRSwgJ3JlbW92ZWRDb21iYXRhbnRzJyk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGF3YWl0IGNvbWJhdC5yZXNldEFsbCgpO1xyXG4gICAgICAgIGF3YWl0IGNvbWJhdC5yb2xsQWxsKCk7XHJcbiAgICAgICAgYXdhaXQgY29tYmF0LnVwZGF0ZSh7IHR1cm46IDAgfSk7XHJcbiAgICB9IGVsc2UgaWYgKHJlbW92ZWRDb21iYXRhbnRzLmxlbmd0aCkge1xyXG4gICAgICAgIGF3YWl0IGNvbWJhdC5zZXRGbGFnKFNZU1RFTV9OQU1FLCAncmVtb3ZlZENvbWJhdGFudHMnLCByZW1vdmVkQ29tYmF0YW50cyk7XHJcbiAgICAgICAgYXdhaXQgY29tYmF0LnVwZGF0ZSh7IHR1cm46IDAgfSk7XHJcbiAgICB9XHJcbn07XHJcbiIsImV4cG9ydCBjb25zdCBTUjUgPSB7fTtcclxuXHJcblNSNVsnYXR0cmlidXRlcyddID0ge1xyXG4gICAgYm9keTogJ1NSNS5BdHRyQm9keScsXHJcbiAgICBhZ2lsaXR5OiAnU1I1LkF0dHJBZ2lsaXR5JyxcclxuICAgIHJlYWN0aW9uOiAnU1I1LkF0dHJSZWFjdGlvbicsXHJcbiAgICBzdHJlbmd0aDogJ1NSNS5BdHRyU3RyZW5ndGgnLFxyXG4gICAgd2lsbHBvd2VyOiAnU1I1LkF0dHJXaWxscG93ZXInLFxyXG4gICAgbG9naWM6ICdTUjUuQXR0ckxvZ2ljJyxcclxuICAgIGludHVpdGlvbjogJ1NSNS5BdHRySW50dWl0aW9uJyxcclxuICAgIGNoYXJpc21hOiAnU1I1LkF0dHJDaGFyaXNtYScsXHJcbiAgICBtYWdpYzogJ1NSNS5BdHRyTWFnaWMnLFxyXG4gICAgcmVzb25hbmNlOiAnU1I1LkF0dHJSZXNvbmFuY2UnLFxyXG4gICAgZWRnZTogJ1NSNS5BdHRyRWRnZScsXHJcbiAgICBlc3NlbmNlOiAnU1I1LkF0dHJFc3NlbmNlJyxcclxuICAgIGF0dGFjazogJ1NSNS5NYXRyaXhBdHRyQXR0YWNrJyxcclxuICAgIHNsZWF6ZTogJ1NSNS5NYXRyaXhBdHRyU2xlYXplJyxcclxuICAgIGRhdGFfcHJvY2Vzc2luZzogJ1NSNS5NYXRyaXhBdHRyRGF0YVByb2MnLFxyXG4gICAgZmlyZXdhbGw6ICdTUjUuTWF0cml4QXR0ckZpcmV3YWxsJyxcclxufTtcclxuXHJcblNSNVsnbGltaXRzJ10gPSB7XHJcbiAgICBwaHlzaWNhbDogJ1NSNS5MaW1pdFBoeXNpY2FsJyxcclxuICAgIHNvY2lhbDogJ1NSNS5MaW1pdFNvY2lhbCcsXHJcbiAgICBtZW50YWw6ICdTUjUuTGltaXRNZW50YWwnLFxyXG4gICAgYXR0YWNrOiAnU1I1Lk1hdHJpeEF0dHJBdHRhY2snLFxyXG4gICAgc2xlYXplOiAnU1I1Lk1hdHJpeEF0dHJTbGVhemUnLFxyXG4gICAgZGF0YV9wcm9jZXNzaW5nOiAnU1I1Lk1hdHJpeEF0dHJEYXRhUHJvYycsXHJcbiAgICBmaXJld2FsbDogJ1NSNS5NYXRyaXhBdHRyRmlyZXdhbGwnLFxyXG59O1xyXG5cclxuU1I1WydzcGVjaWFsVHlwZXMnXSA9IHtcclxuICAgIG11bmRhbmU6ICdTUjUuTXVuZGFuZScsXHJcbiAgICBtYWdpYzogJ1NSNS5Bd2FrZW5lZCcsXHJcbiAgICByZXNvbmFuY2U6ICdTUjUuRW1lcmdlZCcsXHJcbn07XHJcblxyXG5TUjVbJ2RhbWFnZVR5cGVzJ10gPSB7XHJcbiAgICBwaHlzaWNhbDogJ1NSNS5EbWdUeXBlUGh5c2ljYWwnLFxyXG4gICAgc3R1bjogJ1NSNS5EbWdUeXBlU3R1bicsXHJcbiAgICBtYXRyaXg6ICdTUjUuRG1nVHlwZU1hdHJpeCcsXHJcbn07XHJcblxyXG5TUjVbJ2VsZW1lbnRUeXBlcyddID0ge1xyXG4gICAgZmlyZTogJ1NSNS5FbGVtZW50RmlyZScsXHJcbiAgICBjb2xkOiAnU1I1LkVsZW1lbnRDb2xkJyxcclxuICAgIGFjaWQ6ICdTUjUuRWxlbWVudEFjaWQnLFxyXG4gICAgZWxlY3RyaWNpdHk6ICdTUjUuRWxlbWVudEVsZWN0cmljaXR5JyxcclxuICAgIHJhZGlhdGlvbjogJ1NSNS5FbGVtZW50UmFkaWF0aW9uJyxcclxufTtcclxuXHJcblNSNVsnc3BlbGxDYXRlZ29yaWVzJ10gPSB7XHJcbiAgICBjb21iYXQ6ICdTUjUuU3BlbGxDYXRDb21iYXQnLFxyXG4gICAgZGV0ZWN0aW9uOiAnU1I1LlNwZWxsQ2F0RGV0ZWN0aW9uJyxcclxuICAgIGhlYWx0aDogJ1NSNS5TcGVsbENhdEhlYWx0aCcsXHJcbiAgICBpbGx1c2lvbjogJ1NSNS5TcGVsbENhdElsbHVzaW9uJyxcclxuICAgIG1hbmlwdWxhdGlvbjogJ1NSNS5TcGVsbENhdE1hbmlwdWxhdGlvbicsXHJcbn07XHJcblxyXG5TUjVbJ3NwZWxsVHlwZXMnXSA9IHtcclxuICAgIHBoeXNpY2FsOiAnU1I1LlNwZWxsVHlwZVBoeXNpY2FsJyxcclxuICAgIG1hbmE6ICdTUjUuU3BlbGxUeXBlTWFuYScsXHJcbn07XHJcblxyXG5TUjVbJ3NwZWxsUmFuZ2VzJ10gPSB7XHJcbiAgICB0b3VjaDogJ1NSNS5TcGVsbFJhbmdlVG91Y2gnLFxyXG4gICAgbG9zOiAnU1I1LlNwZWxsUmFuZ2VMb3MnLFxyXG4gICAgbG9zX2E6ICdTUjUuU3BlbGxSYW5nZUxvc0EnLFxyXG59O1xyXG5cclxuU1I1Wydjb21iYXRTcGVsbFR5cGVzJ10gPSB7XHJcbiAgICBkaXJlY3Q6ICdTUjUuU3BlbGxDb21iYXREaXJlY3QnLFxyXG4gICAgaW5kaXJlY3Q6ICdTUjUuU3BlbGxDb21iYXRJbmRpcmVjdCcsXHJcbn07XHJcblxyXG5TUjVbJ2RldGVjdGlvblNwZWxsVHlwZXMnXSA9IHtcclxuICAgIGRpcmVjdGlvbmFsOiAnU1I1LlNwZWxsRGV0ZWN0aW9uRGlyZWN0aW9uYWwnLFxyXG4gICAgcHN5Y2hpYzogJ1NSNS5TcGVsbERldGVjdGlvblBzeWNoaWMnLFxyXG4gICAgYXJlYTogJ1NSNS5TcGVsbERldGVjdGlvbkFyZWEnLFxyXG59O1xyXG5cclxuU1I1WydpbGx1c2lvblNwZWxsVHlwZXMnXSA9IHtcclxuICAgIG9idmlvdXM6ICdTUjUuU3BlbGxJbGx1c2lvbk9idmlvdXMnLFxyXG4gICAgcmVhbGlzdGljOiAnU1I1LlNwZWxsSWxsdXNpb25SZWFsaXN0aWMnLFxyXG59O1xyXG5cclxuU1I1WydpbGx1c2lvblNwZWxsU2Vuc2VzJ10gPSB7XHJcbiAgICAnc2luZ2xlLXNlbnNlJzogJ1NSNS5TcGVsbElsbHVzaW9uU2luZ2xlU2Vuc2UnLFxyXG4gICAgJ211bHRpLXNlbnNlJzogJ1NSNS5TcGVsbElsbHVzaW9uTXVsdGlTZW5zZScsXHJcbn07XHJcblxyXG5TUjVbJ2F0dHJpYnV0ZVJvbGxzJ10gPSB7XHJcbiAgICBjb21wb3N1cmU6ICdTUjUuUm9sbENvbXBvc3VyZScsXHJcbiAgICBsaWZ0X2NhcnJ5OiAnU1I1LlJvbGxMaWZ0Q2FycnknLFxyXG4gICAganVkZ2VfaW50ZW50aW9uczogJ1NSNS5Sb2xsSnVkZ2VJbnRlbnRpb25zJyxcclxuICAgIG1lbW9yeTogJ1NSNS5Sb2xsTWVtb3J5JyxcclxufTtcclxuXHJcblNSNVsnbWF0cml4VGFyZ2V0cyddID0ge1xyXG4gICAgcGVyc29uYTogJ1NSNS5UYXJnZXRQZXJzb25hJyxcclxuICAgIGRldmljZTogJ1NSNS5UYXJnZXREZXZpY2UnLFxyXG4gICAgZmlsZTogJ1NSNS5UYXJnZXRGaWxlJyxcclxuICAgIHNlbGY6ICdTUjUuVGFyZ2V0U2VsZicsXHJcbiAgICBzcHJpdGU6ICdTUjUuVGFyZ2V0U3ByaXRlJyxcclxuICAgIG90aGVyOiAnU1I1LlRhcmdldE90aGVyJyxcclxufTtcclxuXHJcblNSNVsnZHVyYXRpb25zJ10gPSB7XHJcbiAgICBpbnN0YW50OiAnU1I1LkR1cmF0aW9uSW5zdGFudCcsXHJcbiAgICBzdXN0YWluZWQ6ICdTUjUuRHVyYXRpb25TdXN0YWluZWQnLFxyXG4gICAgcGVybWFuZW50OiAnU1I1LkR1cmF0aW9uUGVybWFuZW50JyxcclxufTtcclxuXHJcblNSNVsnd2VhcG9uQ2F0ZWdvcmllcyddID0ge1xyXG4gICAgcmFuZ2U6ICdTUjUuV2VhcG9uQ2F0UmFuZ2UnLFxyXG4gICAgbWVsZWU6ICdTUjUuV2VhcG9uQ2F0TWVsZWUnLFxyXG4gICAgdGhyb3duOiAnU1I1LldlYXBvbkNhdFRocm93bicsXHJcbn07XHJcblxyXG5TUjVbJ3dlYXBvblJhbmdlcyddID0ge1xyXG4gICAgc2hvcnQ6ICdTUjUuV2VhcG9uUmFuZ2VTaG9ydCcsXHJcbiAgICBtZWRpdW06ICdTUjUuV2VhcG9uUmFuZ2VNZWRpdW0nLFxyXG4gICAgbG9uZzogJ1NSNS5XZWFwb25SYW5nZUxvbmcnLFxyXG4gICAgZXh0cmVtZTogJ1NSNS5XZWFwb25SYW5nZUV4dHJlbWUnLFxyXG59O1xyXG5cclxuU1I1WydxdWFsaXR5VHlwZXMnXSA9IHtcclxuICAgIHBvc2l0aXZlOiAnU1I1LlF1YWxpdHlUeXBlUG9zaXRpdmUnLFxyXG4gICAgbmVnYXRpdmU6ICdTUjUuUXVhbGl0eVR5cGVOZWdhdGl2ZScsXHJcbn07XHJcblxyXG5TUjVbJ2RldmljZUNhdGVnb3JpZXMnXSA9IHtcclxuICAgIGNvbW1saW5rOiAnU1I1LkRldmljZUNhdENvbW1saW5rJyxcclxuICAgIGN5YmVyZGVjazogJ1NSNS5EZXZpY2VDYXRDeWJlcmRlY2snLFxyXG59O1xyXG5cclxuU1I1WydjeWJlcndhcmVHcmFkZXMnXSA9IHtcclxuICAgIHN0YW5kYXJkOiAnU1I1LkN5YmVyd2FyZUdyYWRlU3RhbmRhcmQnLFxyXG4gICAgYWxwaGE6ICdTUjUuQ3liZXJ3YXJlR3JhZGVBbHBoYScsXHJcbiAgICBiZXRhOiAnU1I1LkN5YmVyd2FyZUdyYWRlQmV0YScsXHJcbiAgICBkZWx0YTogJ1NSNS5DeWJlcndhcmVHcmFkZURlbHRhJyxcclxuICAgIHVzZWQ6ICdTUjUuQ3liZXJ3YXJlR3JhZGVVc2VkJyxcclxufTtcclxuXHJcblNSNVsna25vd2xlZGdlU2tpbGxDYXRlZ29yaWVzJ10gPSB7XHJcbiAgICBzdHJlZXQ6ICdTUjUuS25vd2xlZGdlU2tpbGxTdHJlZXQnLFxyXG4gICAgYWNhZGVtaWM6ICdTUjUuS25vd2xlZGdlU2tpbGxBY2FkZW1pYycsXHJcbiAgICBwcm9mZXNzaW9uYWw6ICdTUjUuS25vd2xlZGdlU2tpbGxQcm9mZXNzaW9uYWwnLFxyXG4gICAgaW50ZXJlc3RzOiAnU1I1Lktub3dsZWRnZVNraWxsSW50ZXJlc3RzJyxcclxufTtcclxuXHJcblNSNVsnYWN0aXZlU2tpbGxzJ10gPSB7XHJcbiAgICBhcmNoZXJ5OiAnU1I1LlNraWxsQXJjaGVyeScsXHJcbiAgICBhdXRvbWF0aWNzOiAnU1I1LlNraWxsQXV0b21hdGljcycsXHJcbiAgICBibGFkZXM6ICdTUjUuU2tpbGxCbGFkZXMnLFxyXG4gICAgY2x1YnM6ICdTUjUuU2tpbGxDbHVicycsXHJcbiAgICBleG90aWNfbWVsZWU6ICdTUjUuU2tpbGxFeG90aWNNZWxlZScsXHJcbiAgICBleG90aWNfcmFuZ2U6ICdTUjUuU2tpbGxFeG90aWNSYW5nZScsXHJcbiAgICBoZWF2eV93ZWFwb25zOiAnU1I1LlNraWxsSGVhdnlXZWFwb25zJyxcclxuICAgIGxvbmdhcm1zOiAnU1I1LlNraWxsTG9uZ2FybXMnLFxyXG4gICAgcGlzdG9sczogJ1NSNS5Ta2lsbFBpc3RvbHMnLFxyXG4gICAgdGhyb3dpbmdfd2VhcG9uczogJ1NSNS5Ta2lsbFRocm93aW5nV2VhcG9ucycsXHJcbiAgICB1bmFybWVkX2NvbWJhdDogJ1NSNS5Ta2lsbFVuYXJtZWRDb21iYXQnLFxyXG4gICAgZGlzZ3Vpc2U6ICdTUjUuU2tpbGxEaXNndWlzZScsXHJcbiAgICBkaXZpbmc6ICdTUjUuU2tpbGxEaXZpbmcnLFxyXG4gICAgZXNjYXBlX2FydGlzdDogJ1NSNS5Ta2lsbEVzY2FwZUFydGlzdCcsXHJcbiAgICBmcmVlX2ZhbGw6ICdTUjUuU2tpbGxGcmVlRmFsbCcsXHJcbiAgICBneW1uYXN0aWNzOiAnU1I1LlNraWxsR3ltbmFzdGljcycsXHJcbiAgICBwYWxtaW5nOiAnU1I1LlNraWxsUGFsbWluZycsXHJcbiAgICBwZXJjZXB0aW9uOiAnU1I1LlNraWxsUGVyY2VwdGlvbicsXHJcbiAgICBydW5uaW5nOiAnU1I1LlNraWxsUnVubmluZycsXHJcbiAgICBzbmVha2luZzogJ1NSNS5Ta2lsbFNuZWFraW5nJyxcclxuICAgIHN1cnZpdmFsOiAnU1I1LlNraWxsU3Vydml2YWwnLFxyXG4gICAgc3dpbW1pbmc6ICdTUjUuU2tpbGxTd2ltbWluZycsXHJcbiAgICB0cmFja2luZzogJ1NSNS5Ta2lsbFRyYWNraW5nJyxcclxuICAgIGNvbjogJ1NSNS5Ta2lsbENvbicsXHJcbiAgICBldGlxdWV0dGU6ICdTUjUuU2tpbGxFdGlxdWV0dGUnLFxyXG4gICAgaW1wZXJzb25hdGlvbjogJ1NSNS5Ta2lsbEltcGVyc29uYXRpb24nLFxyXG4gICAgaW5zdHJ1Y3Rpb246ICdTUjUuU2tpbGxJbnN0cnVjdGlvbicsXHJcbiAgICBpbnRpbWlkYXRpb246ICdTUjUuU2tpbGxJbnRpbWlkYXRpb24nLFxyXG4gICAgbGVhZGVyc2hpcDogJ1NSNS5Ta2lsbExlYWRlcnNoaXAnLFxyXG4gICAgbmVnb3RpYXRpb246ICdTUjUuU2tpbGxOZWdvdGlhdGlvbicsXHJcbiAgICBwZXJmb3JtYW5jZTogJ1NSNS5Ta2lsbFBlcmZvcm1hbmNlJyxcclxuICAgIGFsY2hlbXk6ICdTUjUuU2tpbGxBbGNoZW15JyxcclxuICAgIGFyY2FuYTogJ1NSNS5Ta2lsbEFyY2FuYScsXHJcbiAgICBhcnRpZmljaW5nOiAnU1I1LlNraWxsQXJ0aWZpY2luZycsXHJcbiAgICBhc3NlbnNpbmc6ICdTUjUuU2tpbGxBc3NlbnNpbmcnLFxyXG4gICAgYXN0cmFsX2NvbWJhdDogJ1NSNS5Ta2lsbEFzdHJhbENvbWJhdCcsXHJcbiAgICBiYW5pc2hpbmc6ICdTUjUuU2tpbGxCYW5pc2hpbmcnLFxyXG4gICAgYmluZGluZzogJ1NSNS5Ta2lsbEJpbmRpbmcnLFxyXG4gICAgY291bnRlcnNwZWxsaW5nOiAnU1I1LlNraWxsQ291bnRlcnNwZWxsaW5nJyxcclxuICAgIGRpc2VuY2hhbnRpbmc6ICdTUjUuU2tpbGxEaXNlbmNoYW50aW5nJyxcclxuICAgIHJpdHVhbF9zcGVsbGNhc3Rpbmc6ICdTUjUuU2tpbGxSaXR1YWxTcGVsbGNhc3RpbmcnLFxyXG4gICAgc3BlbGxjYXN0aW5nOiAnU1I1LlNraWxsU3BlbGxjYXN0aW5nJyxcclxuICAgIHN1bW1vbmluZzogJ1NSNS5Ta2lsbFN1bW1vbmluZycsXHJcbiAgICBjb21waWxpbmc6ICdTUjUuU2tpbGxDb21waWxpbmcnLFxyXG4gICAgZGVjb21waWxpbmc6ICdTUjUuU2tpbGxEZWNvbXBpbGluZycsXHJcbiAgICByZWdpc3RlcmluZzogJ1NSNS5Ta2lsbFJlZ2lzdGVyaW5nJyxcclxuICAgIGFlcm9uYXV0aWNzX21lY2hhbmljOiAnU1I1LlNraWxsQWVyb25hdXRpY3NNZWNoYW5pYycsXHJcbiAgICBhdXRvbW90aXZlX21lY2hhbmljOiAnU1I1LlNraWxsQXV0b21vdGl2ZU1lY2hhbmljJyxcclxuICAgIGluZHVzdHJpYWxfbWVjaGFuaWM6ICdTUjUuU2tpbGxJbmR1c3RyaWFsTWVjaGFuaWMnLFxyXG4gICAgbmF1dGljYWxfbWVjaGFuaWM6ICdTUjUuU2tpbGxOYXV0aWNhbE1lY2hhbmljJyxcclxuICAgIGFuaW1hbF9oYW5kbGluZzogJ1NSNS5Ta2lsbEFuaW1hbEhhbmRsaW5nJyxcclxuICAgIGFybW9yZXI6ICdTUjUuU2tpbGxBcm1vcmVyJyxcclxuICAgIGFydGlzYW46ICdTUjUuU2tpbGxBcnRpc2FuJyxcclxuICAgIGJpb3RlY2hub2xvZ3k6ICdTUjUuU2tpbGxCaW90ZWNobm9sb2d5JyxcclxuICAgIGNoZW1pc3RyeTogJ1NSNS5Ta2lsbENoZW1pc3RyeScsXHJcbiAgICBjb21wdXRlcjogJ1NSNS5Ta2lsbENvbXB1dGVyJyxcclxuICAgIGN5YmVyY29tYmF0OiAnU1I1LlNraWxsQ3liZXJjb21iYXQnLFxyXG4gICAgY3liZXJ0ZWNobm9sb2d5OiAnU1I1LlNraWxsQ3liZXJ0ZWNobm9sb2d5JyxcclxuICAgIGRlbW9saXRpb25zOiAnU1I1LlNraWxsRGVtb2xpdGlvbnMnLFxyXG4gICAgZWxlY3Ryb25pY193YXJmYXJlOiAnU1I1LlNraWxsRWxlY3Ryb25pY1dhcmZhcmUnLFxyXG4gICAgZmlyc3RfYWlkOiAnU1I1LlNraWxsRmlyc3RBaWQnLFxyXG4gICAgZm9yZ2VyeTogJ1NSNS5Ta2lsbEZvcmdlcnknLFxyXG4gICAgaGFja2luZzogJ1NSNS5Ta2lsbEhhY2tpbmcnLFxyXG4gICAgaGFyZHdhcmU6ICdTUjUuU2tpbGxIYXJkd2FyZScsXHJcbiAgICBsb2Nrc21pdGg6ICdTUjUuU2tpbGxMb2Nrc21pdGgnLFxyXG4gICAgbWVkaWNpbmU6ICdTUjUuU2tpbGxNZWRpY2luZScsXHJcbiAgICBuYXZpZ2F0aW9uOiAnU1I1LlNraWxsTmF2aWdhdGlvbicsXHJcbiAgICBzb2Z0d2FyZTogJ1NSNS5Ta2lsbFNvZnR3YXJlJyxcclxuICAgIGd1bm5lcnk6ICdTUjUuU2tpbGxHdW5uZXJ5JyxcclxuICAgIHBpbG90X2Flcm9zcGFjZTogJ1NSNS5Ta2lsbFBpbG90QWVyb3NwYWNlJyxcclxuICAgIHBpbG90X2FpcmNyYWZ0OiAnU1I1LlNraWxsUGlsb3RBaXJjcmFmdCcsXHJcbiAgICBwaWxvdF93YWxrZXI6ICdTUjUuU2tpbGxQaWxvdFdhbGtlcicsXHJcbiAgICBwaWxvdF9ncm91bmRfY3JhZnQ6ICdTUjUuU2tpbGxQaWxvdEdyb3VuZENyYWZ0JyxcclxuICAgIHBpbG90X3dhdGVyX2NyYWZ0OiAnU1I1LlNraWxsUGlsb3RXYXRlckNyYWZ0JyxcclxuICAgIHBpbG90X2V4b3RpY192ZWhpY2xlOiAnU1I1LlNraWxsUGlsb3RFeG90aWNWZWhpY2xlJyxcclxufTtcclxuXHJcblNSNVsnYWN0aW9uVHlwZXMnXSA9IHtcclxuICAgIG5vbmU6ICdTUjUuQWN0aW9uVHlwZU5vbmUnLFxyXG4gICAgZnJlZTogJ1NSNS5BY3Rpb25UeXBlRnJlZScsXHJcbiAgICBzaW1wbGU6ICdTUjUuQWN0aW9uVHlwZVNpbXBsZScsXHJcbiAgICBjb21wbGV4OiAnU1I1LkFjdGlvblR5cGVDb21wbGV4JyxcclxuICAgIHZhcmllczogJ1NSNS5BY3Rpb25UeXBlVmFyaWVzJyxcclxufTtcclxuXHJcblNSNVsnbWF0cml4QXR0cmlidXRlcyddID0ge1xyXG4gICAgYXR0YWNrOiAnU1I1Lk1hdHJpeEF0dHJBdHRhY2snLFxyXG4gICAgc2xlYXplOiAnU1I1Lk1hdHJpeEF0dHJTbGVhemUnLFxyXG4gICAgZGF0YV9wcm9jZXNzaW5nOiAnU1I1Lk1hdHJpeEF0dHJEYXRhUHJvYycsXHJcbiAgICBmaXJld2FsbDogJ1NSNS5NYXRyaXhBdHRyRmlyZXdhbGwnLFxyXG59O1xyXG5cclxuU1I1Wydpbml0aWF0aXZlQ2F0ZWdvcmllcyddID0ge1xyXG4gICAgbWVhdHNwYWNlOiAnU1I1LkluaXRDYXRNZWF0c3BhY2UnLFxyXG4gICAgYXN0cmFsOiAnU1I1LkluaXRDYXRBc3RyYWwnLFxyXG4gICAgbWF0cml4OiAnU1I1LkluaXRDYXRNYXRyaXgnLFxyXG59O1xyXG5cclxuU1I1Wydtb2RpZmljYXRpb25UeXBlcyddID0ge1xyXG4gICAgd2VhcG9uOiAnU1I1LldlYXBvbicsXHJcbiAgICBhcm1vcjogJ1NSNS5Bcm1vcicsXHJcbn07XHJcblxyXG5TUjVbJ21vdW50UG9pbnRzJ10gPSB7XHJcbiAgICBiYXJyZWw6ICdTUjUuQmFycmVsJyxcclxuICAgIHN0b2NrOiAnU1I1LlN0b2NrJyxcclxuICAgIHRvcDogJ1NSNS5Ub3AnLFxyXG4gICAgc2lkZTogJ1NSNS5TaWRlJyxcclxuICAgIGludGVybmFsOiAnU1I1LkludGVybmFsJyxcclxufTtcclxuXHJcblNSNVsnbGlmZXN0eWxlVHlwZXMnXSA9IHtcclxuICAgIHN0cmVldDogJ1NSNS5MaWZlc3R5bGVTdHJlZXQnLFxyXG4gICAgc3F1YXR0ZXI6ICdTUjUuTGlmZXN0eWxlU3F1YXR0ZXInLFxyXG4gICAgbG93OiAnU1I1LkxpZmVzdHlsZUxvdycsXHJcbiAgICBtZWRpdW06ICdTUjUuTGlmZXN0eWxlTWlkZGxlJyxcclxuICAgIGhpZ2g6ICdTUjUuTGlmZXN0eWxlSGlnaCcsXHJcbiAgICBsdXhvcnk6ICdTUjUuTGlmZXN0eWxlTHV4b3J5JyxcclxuICAgIG90aGVyOiAnU1I1LkxpZmVzdHlsZU90aGVyJyxcclxufTtcclxuXHJcblNSNVsna2Jtb2QnXSA9IHtcclxuICAgIFNUQU5EQVJEOiAnc2hpZnRLZXknLFxyXG4gICAgRURHRTogJ2FsdEtleScsXHJcbiAgICBTUEVDOiAnY3RybEtleScsXHJcbn07XHJcblxyXG5TUjVbJ2FjdG9yTW9kaWZpZXJzJ10gPSB7XHJcbiAgICBzb2FrOiAnU1I1LlJvbGxTb2FrJyxcclxuICAgIGRyYWluOiAnU1I1LkRyYWluJyxcclxuICAgIGFybW9yOiAnU1I1LkFybW9yJyxcclxuICAgIHBoeXNpY2FsX2xpbWl0OiAnU1I1LlBoeXNpY2FsTGltaXQnLFxyXG4gICAgc29jaWFsX2xpbWl0OiAnU1I1LlNvY2lhbExpbWl0JyxcclxuICAgIG1lbnRhbF9saW1pdDogJ1NSNS5NZW50YWxMaW1pdCcsXHJcbiAgICBzdHVuX3RyYWNrOiAnU1I1LlN0dW5UcmFjaycsXHJcbiAgICBwaHlzaWNhbF90cmFjazogJ1NSNS5QaHlzaWNhbFRyYWNrJyxcclxuICAgIG1lYXRfaW5pdGlhdGl2ZTogJ1NSNS5NZWF0U3BhY2VJbml0JyxcclxuICAgIG1lYXRfaW5pdGlhdGl2ZV9kaWNlOiAnU1I1Lk1lYXRTcGFjZURpY2UnLFxyXG4gICAgYXN0cmFsX2luaXRpYXRpdmU6ICdTUjUuQXN0cmFsSW5pdCcsXHJcbiAgICBhc3RyYWxfaW5pdGlhdGl2ZV9kaWNlOiAnU1I1LkFzdHJhbERpY2UnLFxyXG4gICAgbWF0cml4X2luaXRpYXRpdmU6ICdTUjUuTWF0cml4SW5pdCcsXHJcbiAgICBtYXRyaXhfaW5pdGlhdGl2ZV9kaWNlOiAnU1I1Lk1hdHJpeERpY2UnLFxyXG4gICAgY29tcG9zdXJlOiAnU1I1LlJvbGxDb21wb3N1cmUnLFxyXG4gICAgbGlmdF9jYXJyeTogJ1NSNS5Sb2xsTGlmdENhcnJ5JyxcclxuICAgIGp1ZGdlX2ludGVudGlvbnM6ICdTUjUuUm9sbEp1ZGdlSW50ZW50aW9ucycsXHJcbiAgICBtZW1vcnk6ICdTUjUuUm9sbE1lbW9yeScsXHJcbiAgICB3YWxrOiAnU1I1LldhbGsnLFxyXG4gICAgcnVuOiAnU1I1LlJ1bicsXHJcbiAgICBkZWZlbnNlOiAnU1I1LlJvbGxEZWZlbnNlJyxcclxuICAgIHdvdW5kX3RvbGVyYW5jZTogJ1NSNS5Xb3VuZFRvbGVyYW5jZScsXHJcbiAgICBlc3NlbmNlOiAnU1I1LkF0dHJFc3NlbmNlJyxcclxuICAgIGZhZGU6ICdTUjUuUm9sbEZhZGUnLFxyXG4gICAgZ2xvYmFsOiAnU1I1Lkdsb2JhbCcsXHJcbn07XHJcblxyXG5TUjVbJ3Byb2dyYW1UeXBlcyddID0ge1xyXG4gICAgY29tbW9uX3Byb2dyYW06ICdTUjUuQ29tbW9uUHJvZ3JhbScsXHJcbiAgICBoYWNraW5nX3Byb2dyYW06ICdTUjUuSGFja2luZ1Byb2dyYW0nLFxyXG4gICAgYWdlbnQ6ICdTUjUuQWdlbnQnLFxyXG59O1xyXG5cclxuU1I1WydzcGlyaXRUeXBlcyddID0ge1xyXG4gICAgLy8gYmFzZSB0eXBlc1xyXG4gICAgYWlyOiAnU1I1LlNwaXJpdC5BaXInLFxyXG4gICAgYmVhc3RzOiAnU1I1LlNwaXJpdC5CZWFzdHMnLFxyXG4gICAgZWFydGg6ICdTUjUuU3Bpcml0LkVhcnRoJyxcclxuICAgIGZpcmU6ICdTUjUuU3Bpcml0LkZpcmUnLFxyXG4gICAgZ3VhcmRpYW46ICdTUjUuU3Bpcml0Lkd1YXJkaWFuJyxcclxuICAgIGd1aWRhbmNlOiAnU1I1LlNwaXJpdC5HdWlkYW5jZScsXHJcbiAgICBtYW46ICdTUjUuU3Bpcml0Lk1hbicsXHJcbiAgICBwbGFudDogJ1NSNS5TcGlyaXQuUGxhbnQnLFxyXG4gICAgdGFzazogJ1NSNS5TcGlyaXQuVGFzaycsXHJcbiAgICB3YXRlcjogJ1NSNS5TcGlyaXQuV2F0ZXInLFxyXG5cclxuICAgIC8vIHRveGljIHR5cGVzXHJcbiAgICB0b3hpY19haXI6ICdTUjUuU3Bpcml0LlRveGljQWlyJyxcclxuICAgIHRveGljX2JlYXN0czogJ1NSNS5TcGlyaXQuVG94aWNCZWFzdHMnLFxyXG4gICAgdG94aWNfZWFydGg6ICdTUjUuU3Bpcml0LlRveGljRWFydGgnLFxyXG4gICAgdG94aWNfZmlyZTogJ1NSNS5TcGlyaXQuVG94aWNGaXJlJyxcclxuICAgIHRveGljX21hbjogJ1NSNS5TcGlyaXQuVG94aWNNYW4nLFxyXG4gICAgdG94aWNfd2F0ZXI6ICdTUjUuU3Bpcml0LlRveGljV2F0ZXInLFxyXG5cclxuICAgIC8vIGJsb29kIHR5cGVzXHJcbiAgICBibG9vZDogJ1NSNS5TcGlyaXQuQmxvb2QnLFxyXG5cclxuICAgIC8vIHNoYWRvdyB0eXBlc1xyXG4gICAgbXVzZTogJ1NSNS5TcGlyaXQuTXVzZScsXHJcbiAgICBuaWdodG1hcmU6ICdTUjUuU3Bpcml0Lk5pZ2h0bWFyZScsXHJcbiAgICBzaGFkZTogJ1NSNS5TcGlyaXQuU2hhZGUnLFxyXG4gICAgc3VjY3VidXM6ICdTUjUuU3Bpcml0LlN1Y2N1YnVzJyxcclxuICAgIHdyYWl0aDogJ1NSNS5TcGlyaXQuV3JhaXRoJyxcclxuXHJcbiAgICAvLyBzaGVkaW0gdHlwZXNcclxuICAgIHNoZWRpbTogJ1NSNS5TcGlyaXQuU2hlZGltJyxcclxuICAgIG1hc3Rlcl9zaGVkaW06ICdTUjUuU3Bpcml0Lk1hc3RlclNoZWRpbScsXHJcblxyXG4gICAgLy8gaW5zZWN0IHR5cGVzXHJcbiAgICBjYXJldGFrZXI6ICdTUjUuU3Bpcml0LkNhcmV0YWtlcicsXHJcbiAgICBueW1waDogJ1NSNS5TcGlyaXQuTnltcGgnLFxyXG4gICAgc2NvdXQ6ICdTUjUuU3Bpcml0LlNjb3V0JyxcclxuICAgIHNvbGRpZXI6ICdTUjUuU3Bpcml0LlNvbGRpZXInLFxyXG4gICAgd29ya2VyOiAnU1I1LlNwaXJpdC5Xb3JrZXInLFxyXG4gICAgcXVlZW46ICdTUjUuU3Bpcml0LlF1ZWVuJyxcclxufTtcclxuIiwiZXhwb3J0IGNvbnN0IFNZU1RFTV9OQU1FID0gJ3NoYWRvd3J1bjVlJztcclxuZXhwb3J0IGNvbnN0IEZMQUdTID0ge1xyXG4gICAgU2hvd0dsaXRjaEFuaW1hdGlvbjogJ3Nob3dHbGl0Y2hBbmltYXRpb24nLFxyXG59O1xyXG4iLCJleHBvcnQgYWJzdHJhY3QgY2xhc3MgRGF0YVdyYXBwZXI8RGF0YVR5cGU+IHtcclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBkYXRhOiBEYXRhVHlwZSkge31cclxufVxyXG4iLCJpbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi4vaGVscGVycyc7XHJcblxyXG5leHBvcnQgY29uc3QgcmVnaXN0ZXJCYXNpY0hlbHBlcnMgPSAoKSA9PiB7XHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdsb2NhbGl6ZU9iJywgZnVuY3Rpb24gKHN0cklkLCBvYmopIHtcclxuICAgICAgICBpZiAob2JqKSBzdHJJZCA9IG9ialtzdHJJZF07XHJcbiAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZShzdHJJZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCd0b0hlYWRlckNhc2UnLCBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgaWYgKHN0cikgcmV0dXJuIEhlbHBlcnMubGFiZWwoc3RyKTtcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdjb25jYXRTdHJpbmdzJywgZnVuY3Rpb24gKC4uLmFyZ3MpIHtcclxuICAgICAgICByZXR1cm4gYXJncy5qb2luKCcgJyk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdjb25jYXQnLCBmdW5jdGlvbiAoc3RycywgYyA9ICcsJykge1xyXG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHN0cnMpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHJzLmpvaW4oYyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHJzO1xyXG4gICAgfSk7XHJcblxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignZm9yJywgZnVuY3Rpb24gKGZyb206IG51bWJlciwgdG86IG51bWJlciwgb3B0aW9ucykge1xyXG4gICAgICAgIGxldCBhY2N1bSA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSBmcm9tOyBpIDwgdG87IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBhY2N1bSArPSBvcHRpb25zLmZuKGkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGFjY3VtO1xyXG4gICAgfSk7XHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdtb2R1bG8nLCBmdW5jdGlvbiAodjE6IG51bWJlciwgdjI6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiB2MSAlIHYyO1xyXG4gICAgfSk7XHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdkaXZpZGUnLCBmdW5jdGlvbiAodjE6IG51bWJlciwgdjI6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh2MiA9PT0gMCkgcmV0dXJuIDA7XHJcbiAgICAgICAgcmV0dXJuIHYxIC8gdjI7XHJcbiAgICB9KTtcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2hhc3Byb3AnLCBmdW5jdGlvbiAob2JqLCBwcm9wLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcclxuICAgICAgICB9IGVsc2UgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcclxuICAgIH0pO1xyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaWZpbicsIGZ1bmN0aW9uICh2YWwsIGFyciwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmIChhcnIuaW5jbHVkZXModmFsKSkgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBpZiBncmVhdGVyIHRoYW5cclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2lmZ3QnLCBmdW5jdGlvbiAodjEsIHYyLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHYxID4gdjIpIHJldHVybiBvcHRpb25zLmZuKHRoaXMpO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZSh0aGlzKTtcclxuICAgIH0pO1xyXG4gICAgLy8gaWYgbGVzcyB0aGFuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZmx0JywgZnVuY3Rpb24gKHYxLCB2Miwgb3B0aW9ucykge1xyXG4gICAgICAgIGlmICh2MSA8IHYyKSByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcclxuICAgICAgICBlbHNlIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XHJcbiAgICB9KTtcclxuICAgIC8vIGlmIGxlc3MgdGhhbiBvciBlcXVhbFxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaWZsdGUnLCBmdW5jdGlvbiAodjEsIHYyLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHYxIDw9IHYyKSByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcclxuICAgICAgICBlbHNlIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XHJcbiAgICB9KTtcclxuICAgIC8vIGlmIG5vdCBlcXVhbFxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignaWZuZScsIGZ1bmN0aW9uICh2MSwgdjIsIG9wdGlvbnMpIHtcclxuICAgICAgICBpZiAodjEgIT09IHYyKSByZXR1cm4gb3B0aW9ucy5mbih0aGlzKTtcclxuICAgICAgICBlbHNlIHJldHVybiBvcHRpb25zLmludmVyc2UodGhpcyk7XHJcbiAgICB9KTtcclxuICAgIC8vIGlmIGVxdWFsXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpZmUnLCBmdW5jdGlvbiAodjEsIHYyLCBvcHRpb25zKSB7XHJcbiAgICAgICAgaWYgKHYxID09PSB2MikgcmV0dXJuIG9wdGlvbnMuZm4odGhpcyk7XHJcbiAgICAgICAgZWxzZSByZXR1cm4gb3B0aW9ucy5pbnZlcnNlKHRoaXMpO1xyXG4gICAgfSk7XHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdub3QnLCBmdW5jdGlvbiAodjEpIHtcclxuICAgICAgICByZXR1cm4gIXYxO1xyXG4gICAgfSk7XHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdzdW0nLCBmdW5jdGlvbiAodjEsIHYyKSB7XHJcbiAgICAgICAgcmV0dXJuIHYxICsgdjI7XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdpc0RlZmluZWQnLCBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbDtcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gYSBkZWZhdWx0IHZhbHVlIGlmIHRoZSBwcm92aWRlZCB2YWx1ZSBpcyBub3QgZGVmaW5lZCAobnVsbCBvciB1bmRlZmluZWQpXHJcbiAgICAgKi9cclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2RlZmF1bHQnLCBmdW5jdGlvbiAodmFsdWU6IHN0cmluZywgZGVmYXVsdFZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEhhbmRsZWJhcnMuU2FmZVN0cmluZyh2YWx1ZSA/PyBkZWZhdWx0VmFsdWUpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignbG9nJywgZnVuY3Rpb24gKHZhbHVlOiBzdHJpbmcpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2J1aWxkTmFtZScsIGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgY29uc3QgaGFzaDogc3RyaW5nW10gPSBIZWxwZXJzLm9yZGVyS2V5cyhvcHRpb25zLmhhc2gpO1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBPYmplY3QudmFsdWVzKGhhc2gpLnJlZHVjZSgocmV0VmFsLCBjdXJyZW50LCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaW5kZXggPiAwKSByZXRWYWwgKz0gJy4nO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0VmFsICsgY3VycmVudDtcclxuICAgICAgICB9LCAnJyk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIYW5kbGViYXJzLlNhZmVTdHJpbmcobmFtZSk7XHJcbiAgICB9KTtcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2Rpc2FibGVkSGVscGVyJywgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gQm9vbGVhbih2YWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuIHZhbCA/IHZhbCA6IHVuZGVmaW5lZDtcclxuICAgIH0pO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBwcmVsb2FkSGFuZGxlYmFyc1RlbXBsYXRlcyB9IGZyb20gJy4vSGFuZGxlYmFyVGVtcGxhdGVzJztcclxuaW1wb3J0IHsgcmVnaXN0ZXJCYXNpY0hlbHBlcnMgfSBmcm9tICcuL0Jhc2ljSGVscGVycyc7XHJcbmltcG9ydCB7IHJlZ2lzdGVyUm9sbEFuZExhYmVsSGVscGVycyB9IGZyb20gJy4vUm9sbEFuZExhYmVsSGVscGVycyc7XHJcbmltcG9ydCB7IHJlZ2lzdGVySXRlbUxpbmVIZWxwZXJzIH0gZnJvbSAnLi9JdGVtTGluZUhlbHBlcnMnO1xyXG5pbXBvcnQgeyByZWdpc3RlclNraWxsTGluZUhlbHBlcnMgfSBmcm9tICcuL1NraWxsTGluZUhlbHBlcnMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhhbmRsZWJhck1hbmFnZXIge1xyXG4gICAgc3RhdGljIGxvYWRUZW1wbGF0ZXMoKTogdm9pZCB7XHJcbiAgICAgICAgcHJlbG9hZEhhbmRsZWJhcnNUZW1wbGF0ZXMoKTtcclxuICAgIH1cclxuICAgIHN0YXRpYyByZWdpc3RlckhlbHBlcnMoKTogdm9pZCB7XHJcbiAgICAgICAgcmVnaXN0ZXJCYXNpY0hlbHBlcnMoKTtcclxuICAgICAgICByZWdpc3RlclJvbGxBbmRMYWJlbEhlbHBlcnMoKTtcclxuICAgICAgICByZWdpc3Rlckl0ZW1MaW5lSGVscGVycygpO1xyXG4gICAgICAgIHJlZ2lzdGVyU2tpbGxMaW5lSGVscGVycygpO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGNvbnN0IHByZWxvYWRIYW5kbGViYXJzVGVtcGxhdGVzID0gYXN5bmMgKCkgPT4ge1xyXG4gICAgY29uc3QgdGVtcGxhdGVQYXRocyA9IFtcclxuICAgICAgICAvLyBhY3RvciB0YWJzXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvdGFicy9BY3Rpb25zVGFiLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yL3RhYnMvQmlvVGFiLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yL3RhYnMvR2VhclRhYi5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci90YWJzL01hZ2ljVGFiLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yL3RhYnMvTWF0cml4VGFiLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yL3RhYnMvTWlzY1RhYi5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci90YWJzL1NraWxsc1RhYi5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci90YWJzL1NvY2lhbFRhYi5odG1sJyxcclxuXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvdGFicy9zcGlyaXQvU3Bpcml0U2tpbGxzVGFiLmh0bWwnLFxyXG5cclxuICAgICAgICAvLyB1bmNhdGVnb3JpemVkIGxpc3RzXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvSW5pdGlhdGl2ZS5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci9wYXJ0cy9Nb3ZlbWVudC5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci9wYXJ0cy9Qcm9maWxlSW1hZ2UuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvTmFtZUlucHV0Lmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yL3BhcnRzL0FjdGlvbkxpc3QuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvQ29udGFjdExpc3QuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvU2luQW5kTGlmZXN0eWxlTGlzdC5odG1sJyxcclxuXHJcbiAgICAgICAgLy8gbWFnaWNcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci9wYXJ0cy9tYWdpYy9BZGVwdFBvd2VyTGlzdC5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci9wYXJ0cy9tYWdpYy9TcGVsbExpc3QuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvbWFnaWMvU3BlbGxBbmRBZGVwdFBvd2VyTGlzdC5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci9wYXJ0cy9tYWdpYy9TcGlyaXRPcHRpb25zLmh0bWwnLFxyXG5cclxuICAgICAgICAvLyBtYXRyaXhcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci9wYXJ0cy9tYXRyaXgvUHJvZ3JhbUxpc3QuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvbWF0cml4L0NvbXBsZXhGb3JtTGlzdC5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9hY3Rvci9wYXJ0cy9tYXRyaXgvTWF0cml4QXR0cmlidXRlLmh0bWwnLFxyXG5cclxuICAgICAgICAvLyBhdHRyaWJ1dGVzXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvYXR0cmlidXRlcy9BdHRyaWJ1dGUuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvYXR0cmlidXRlcy9BdHRyaWJ1dGVMaXN0Lmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yL3BhcnRzL2F0dHJpYnV0ZXMvU3BlY2lhbEF0dHJpYnV0ZUxpc3QuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvYXR0cmlidXRlcy9MaW1pdHMuaHRtbCcsXHJcblxyXG4gICAgICAgIC8vIHNraWxsc1xyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2FjdG9yL3BhcnRzL3NraWxscy9BY3RpdmVTa2lsbExpc3QuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvYWN0b3IvcGFydHMvc2tpbGxzL0xhbmd1YWdlQW5kS25vd2xlZGdlU2tpbGxMaXN0Lmh0bWwnLFxyXG5cclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9pdGVtL3BhcnRzL2Rlc2NyaXB0aW9uLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvdGVjaG5vbG9neS5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9pdGVtL3BhcnRzL2hlYWRlci5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9pdGVtL3BhcnRzL3dlYXBvbi1hbW1vLWxpc3QuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvaXRlbS9wYXJ0cy93ZWFwb24tbW9kcy1saXN0Lmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvYWN0aW9uLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvZGFtYWdlLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvb3Bwb3NlZC5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9pdGVtL3BhcnRzL3NwZWxsLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvY29tcGxleF9mb3JtLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvd2VhcG9uLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvYXJtb3IuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvaXRlbS9wYXJ0cy9tYXRyaXguaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvaXRlbS9wYXJ0cy9zaW4uaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvaXRlbS9wYXJ0cy9jb250YWN0Lmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvbGlmZXN0eWxlLmh0bWwnLFxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vcGFydHMvYW1tby5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9pdGVtL3BhcnRzL21vZGlmaWNhdGlvbi5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9pdGVtL3BhcnRzL3Byb2dyYW0uaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvcm9sbHMvcGFydHMvcGFydHMtbGlzdC5odG1sJyxcclxuXHJcbiAgICAgICAgLy8gdG8gd3JhcCB0aGUgYm9kaWVzIG9mIHRhYnNcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9jb21tb24vVGFiV3JhcHBlci5odG1sJyxcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9jb21tb24vVmFsdWVJbnB1dC5odG1sJyxcclxuXHJcbiAgICAgICAgLy8gVXNlZnVsIHdyYXBwZXIgYW5kIGltcGxlbWVudGVkIGNvbXBvbmVudHNcclxuICAgICAgICAnc3lzdGVtcy9zaGFkb3dydW41ZS9kaXN0L3RlbXBsYXRlcy9jb21tb24vVmFsdWVNYXhBdHRyaWJ1dGUuaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvY29tbW9uL0F0dHJpYnV0ZS5odG1sJyxcclxuXHJcbiAgICAgICAgLy8gdG8gY3JlYXRlIHRoZSBjb25kaXRpb24gbW9uaXRvcnMgYW5kIGVkZ2UgY291bnRlclxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2NvbW1vbi9Ib3Jpem9udGFsQ2VsbElucHV0Lmh0bWwnLFxyXG5cclxuICAgICAgICAvLyBsb29rcyBsaWtlIGEgTGlzdEhlYWRlclxyXG4gICAgICAgICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2NvbW1vbi9IZWFkZXJCbG9jay5odG1sJyxcclxuXHJcbiAgICAgICAgLy8gbGlzdCBjb21wb25lbnRzXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvY29tbW9uL0xpc3QvTGlzdEl0ZW0uaHRtbCcsXHJcbiAgICAgICAgJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvY29tbW9uL0xpc3QvTGlzdEhlYWRlci5odG1sJyxcclxuICAgIF07XHJcblxyXG4gICAgcmV0dXJuIGxvYWRUZW1wbGF0ZXModGVtcGxhdGVQYXRocyk7XHJcbn07XHJcbiIsImltcG9ydCBTUjVJdGVtVHlwZSA9IFNoYWRvd3J1bi5TUjVJdGVtVHlwZTtcclxuaW1wb3J0IHsgU1I1SXRlbURhdGFXcmFwcGVyIH0gZnJvbSAnLi4vaXRlbS9TUjVJdGVtRGF0YVdyYXBwZXInO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVySXRlbUxpbmVIZWxwZXJzID0gKCkgPT4ge1xyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignSXRlbUhlYWRlckljb25zJywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgY29uc3QgUGx1c0ljb24gPSAnZmFzIGZhLXBsdXMnO1xyXG4gICAgICAgIGNvbnN0IEFkZFRleHQgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5BZGQnKTtcclxuICAgICAgICBjb25zdCBhZGRJY29uID0ge1xyXG4gICAgICAgICAgICBpY29uOiBQbHVzSWNvbixcclxuICAgICAgICAgICAgdGV4dDogQWRkVGV4dCxcclxuICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkNyZWF0ZUl0ZW0nKSxcclxuICAgICAgICAgICAgY3NzQ2xhc3M6ICdpdGVtLWNyZWF0ZScsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzd2l0Y2ggKGlkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2xpZmVzdHlsZSc6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUxpZmVzdHlsZScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFthZGRJY29uXTtcclxuICAgICAgICAgICAgY2FzZSAnY29udGFjdCc6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUNvbnRhY3QnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbYWRkSWNvbl07XHJcbiAgICAgICAgICAgIGNhc2UgJ3Npbic6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbVNJTicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFthZGRJY29uXTtcclxuICAgICAgICAgICAgY2FzZSAnbGljZW5zZSc6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUxpY2Vuc2UnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbYWRkSWNvbl07XHJcbiAgICAgICAgICAgIGNhc2UgJ3F1YWxpdHknOlxyXG4gICAgICAgICAgICAgICAgYWRkSWNvbi50aXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkNyZWF0ZUl0ZW1RdWFsaXR5Jyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2FkZEljb25dO1xyXG4gICAgICAgICAgICBjYXNlICdhZGVwdF9wb3dlcic6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUFkZXB0UG93ZXInKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbYWRkSWNvbl07XHJcbiAgICAgICAgICAgIGNhc2UgJ2FjdGlvbic6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUFjdGlvbicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFthZGRJY29uXTtcclxuICAgICAgICAgICAgY2FzZSAnc3BlbGwnOlxyXG4gICAgICAgICAgICAgICAgYWRkSWNvbi50aXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkNyZWF0ZUl0ZW1TcGVsbCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFthZGRJY29uXTtcclxuICAgICAgICAgICAgY2FzZSAnZ2Vhcic6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUdlYXInKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbYWRkSWNvbl07XHJcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXhfZm9ybSc6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUNvbXBsZXhGb3JtJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2FkZEljb25dO1xyXG4gICAgICAgICAgICBjYXNlICdwcm9ncmFtJzpcclxuICAgICAgICAgICAgICAgIGFkZEljb24udGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5DcmVhdGVJdGVtUHJvZ3JhbScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFthZGRJY29uXTtcclxuICAgICAgICAgICAgY2FzZSAnd2VhcG9uJzpcclxuICAgICAgICAgICAgICAgIGFkZEljb24udGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5DcmVhdGVJdGVtV2VhcG9uJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2FkZEljb25dO1xyXG4gICAgICAgICAgICBjYXNlICdhcm1vcic6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUFybW9yJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2FkZEljb25dO1xyXG4gICAgICAgICAgICBjYXNlICdkZXZpY2UnOlxyXG4gICAgICAgICAgICAgICAgYWRkSWNvbi50aXRsZSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkNyZWF0ZUl0ZW1EZXZpY2UnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbYWRkSWNvbl07XHJcbiAgICAgICAgICAgIGNhc2UgJ2VxdWlwbWVudCc6XHJcbiAgICAgICAgICAgICAgICBhZGRJY29uLnRpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ3JlYXRlSXRlbUVxdWlwbWVudCcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFthZGRJY29uXTtcclxuICAgICAgICAgICAgY2FzZSAnY3liZXJ3YXJlJzpcclxuICAgICAgICAgICAgICAgIGFkZEljb24udGl0bGUgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5DcmVhdGVJdGVtQ3liZXJ3YXJlJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2FkZEljb25dO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ0l0ZW1IZWFkZXJSaWdodFNpZGUnLCBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICBzd2l0Y2ggKGlkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FjdGlvbic6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuU2tpbGwnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAnc2l4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQXR0cmlidXRlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3NpeCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkF0dHJpYnV0ZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdzaXgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5MaW1pdCcpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdzaXgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5Nb2RpZmllcicpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdzaXgnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBjYXNlICd3ZWFwb24nOlxyXG4gICAgICAgICAgICBjYXNlICdhcm1vcic6XHJcbiAgICAgICAgICAgIGNhc2UgJ2RldmljZSc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2VxdWlwbWVudCc6XHJcbiAgICAgICAgICAgIGNhc2UgJ2N5YmVyd2FyZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuUXR5JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGNhc2UgJ2NvbXBsZXhfZm9ybSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuVGFyZ2V0JyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkR1cmF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkZhZGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgY2FzZSAnYWRlcHRfcG93ZXInOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlBvd2VyVHlwZScpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBjYXNlICdzcGVsbCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuU3BlbGxUeXBlJyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlNwZWxsUmFuZ2UnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRHVyYXRpb24nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRHJhaW4nKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgY2FzZSAncXVhbGl0eSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuUXVhbGl0eVR5cGUnKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgY2FzZSAncHJvZ3JhbSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignSXRlbVJpZ2h0U2lkZScsIGZ1bmN0aW9uIChpdGVtOiBTUjVJdGVtVHlwZSkge1xyXG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgU1I1SXRlbURhdGFXcmFwcGVyKGl0ZW0pO1xyXG4gICAgICAgIGNvbnN0IHF0eUlucHV0ID0ge1xyXG4gICAgICAgICAgICBpbnB1dDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ251bWJlcicsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogd3JhcHBlci5nZXRRdWFudGl0eSgpLFxyXG4gICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdpdGVtLXF0eScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzd2l0Y2ggKGl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdhY3Rpb24nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LmFjdGl2ZVNraWxsc1t3cmFwcGVyLmdldEFjdGlvblNraWxsKCkgPz8gJyddKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAnc2l4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKENPTkZJRy5TUjUuYXR0cmlidXRlc1t3cmFwcGVyLmdldEFjdGlvbkF0dHJpYnV0ZSgpID8/ICcnXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3NpeCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LmF0dHJpYnV0ZXNbd3JhcHBlci5nZXRBY3Rpb25BdHRyaWJ1dGUyKCkgPz8gJyddKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAnc2l4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogd3JhcHBlci5nZXRMaW1pdEF0dHJpYnV0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBnYW1lLmkxOG4ubG9jYWxpemUoQ09ORklHLlNSNS5hdHRyaWJ1dGVzW3dyYXBwZXIuZ2V0TGltaXRBdHRyaWJ1dGUoKSA/PyAnJ10pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB3cmFwcGVyLmdldEFjdGlvbkxpbWl0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3NpeCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHdyYXBwZXIuZ2V0QWN0aW9uRGljZVBvb2xNb2QoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzOiAnc2l4JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgY2FzZSAnYXJtb3InOlxyXG4gICAgICAgICAgICBjYXNlICdkZXZpY2UnOlxyXG4gICAgICAgICAgICBjYXNlICdlcXVpcG1lbnQnOlxyXG4gICAgICAgICAgICBjYXNlICdjeWJlcndhcmUnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtxdHlJbnB1dF07XHJcbiAgICAgICAgICAgIGNhc2UgJ3dlYXBvbic6XHJcbiAgICAgICAgICAgICAgICBpZiAod3JhcHBlci5pc1JhbmdlZFdlYXBvbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgY291bnQgPSB3cmFwcGVyLmdldEFtbW8oKT8uY3VycmVudC52YWx1ZSA/PyAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG1heCA9IHdyYXBwZXIuZ2V0QW1tbygpPy5jdXJyZW50Lm1heCA/PyAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRleHQgPSBjb3VudCA8IG1heCA/IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LldlYXBvblJlbG9hZCcpfSAoJHtjb3VudH0vJHttYXh9KWAgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5BbW1vRnVsbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNzc0NsYXNzID0gJ25vLWJyZWFrJyArIChjb3VudCA8IG1heCA/ICcgcmVsb2FkLWFtbW8gcm9sbCcgOiAnIGZhZGVkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5XZWFwb25BbW1vQ291bnQnKX06ICR7Y291bnR9YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNzc0NsYXNzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcXR5SW5wdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtxdHlJbnB1dF07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjYXNlICdxdWFsaXR5JzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBnYW1lLmkxOG4ubG9jYWxpemUoQ09ORklHLlNSNS5xdWFsaXR5VHlwZXNbaXRlbS5kYXRhLnR5cGUgPz8gJyddKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgJ2FkZXB0X3Bvd2VyJzpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBnYW1lLmkxOG4ubG9jYWxpemUoaXRlbS5kYXRhLnR5cGUgPz8gJycpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICBjYXNlICdzcGVsbCc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKENPTkZJRy5TUjUuc3BlbGxUeXBlc1tpdGVtLmRhdGEudHlwZSA/PyAnJ10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBnYW1lLmkxOG4ubG9jYWxpemUoQ09ORklHLlNSNS5zcGVsbFJhbmdlc1tpdGVtLmRhdGEucmFuZ2UgPz8gJyddKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZ2FtZS5pMThuLmxvY2FsaXplKENPTkZJRy5TUjUuZHVyYXRpb25zW2l0ZW0uZGF0YS5kdXJhdGlvbiA/PyAnJ10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB3cmFwcGVyLmdldERyYWluKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF07XHJcblxyXG4gICAgICAgICAgICBjYXNlICdjb21wbGV4X2Zvcm0nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1Lm1hdHJpeFRhcmdldHNbaXRlbS5kYXRhLnRhcmdldCA/PyAnJ10pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBnYW1lLmkxOG4ubG9jYWxpemUoQ09ORklHLlNSNS5kdXJhdGlvbnNbaXRlbS5kYXRhLmR1cmF0aW9uID8/ICcnXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IFN0cmluZyhpdGVtLmRhdGEuZmFkZSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgIGNhc2UgJ3Byb2dyYW0nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6IGBpdGVtLWVxdWlwLXRvZ2dsZSAke3dyYXBwZXIuaXNFcXVpcHBlZCgpID8gJ2xpZ2h0JyA6ICcnfWAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG9ydDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IHdyYXBwZXIuaXNFcXVpcHBlZCgpID8gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuTG9hZGVkJykgOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5Mb2FkJykgKyAnID4+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdJdGVtSWNvbnMnLCBmdW5jdGlvbiAoaXRlbTogU1I1SXRlbVR5cGUpIHtcclxuICAgICAgICBjb25zdCBlZGl0SWNvbiA9IHtcclxuICAgICAgICAgICAgaWNvbjogJ2ZhcyBmYS1lZGl0IGl0ZW0tZWRpdCcsXHJcbiAgICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5FZGl0SXRlbScpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgcmVtb3ZlSWNvbiA9IHtcclxuICAgICAgICAgICAgaWNvbjogJ2ZhcyBmYS10cmFzaCBpdGVtLWRlbGV0ZScsXHJcbiAgICAgICAgICAgIHRpdGxlOiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5EZWxldGVJdGVtJyksXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBlcXVpcEljb24gPSB7XHJcbiAgICAgICAgICAgIGljb246IGAke2l0ZW0uZGF0YS50ZWNobm9sb2d5Py5lcXVpcHBlZCA/ICdmYXMgZmEtY2hlY2stY2lyY2xlJyA6ICdmYXIgZmEtY2lyY2xlJ30gaXRlbS1lcXVpcC10b2dnbGVgLFxyXG4gICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuVG9nZ2xlRXF1aXAnKSxcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGl0ZW0udHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdwcm9ncmFtJzpcclxuICAgICAgICAgICAgY2FzZSAnYXJtb3InOlxyXG4gICAgICAgICAgICBjYXNlICdkZXZpY2UnOlxyXG4gICAgICAgICAgICBjYXNlICdlcXVpcG1lbnQnOlxyXG4gICAgICAgICAgICBjYXNlICdjeWJlcndhcmUnOlxyXG4gICAgICAgICAgICBjYXNlICd3ZWFwb24nOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtlcXVpcEljb24sIGVkaXRJY29uLCByZW1vdmVJY29uXTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZWRpdEljb24sIHJlbW92ZUljb25dO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59O1xyXG4iLCJpbXBvcnQgeyBQYXJ0c0xpc3QgfSBmcm9tICcuLi9wYXJ0cy9QYXJ0c0xpc3QnO1xyXG5pbXBvcnQgTW9kTGlzdCA9IFNoYWRvd3J1bi5Nb2RMaXN0O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyUm9sbEFuZExhYmVsSGVscGVycyA9ICgpID0+IHtcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2RhbWFnZUFiYnJldmlhdGlvbicsIGZ1bmN0aW9uIChkYW1hZ2UpIHtcclxuICAgICAgICBpZiAoZGFtYWdlID09PSAncGh5c2ljYWwnKSByZXR1cm4gJ1AnO1xyXG4gICAgICAgIGlmIChkYW1hZ2UgPT09ICdzdHVuJykgcmV0dXJuICdTJztcclxuICAgICAgICBpZiAoZGFtYWdlID09PSAnbWF0cml4JykgcmV0dXJuICdNJztcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9KTtcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ2RpY2VJY29uJywgZnVuY3Rpb24gKHJvbGwpIHtcclxuICAgICAgICBpZiAocm9sbC5yb2xsKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAocm9sbC5yb2xsKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdyZWQnO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZ3JleSc7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdncmV5JztcclxuICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2dyZXknO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZ3JlZW4nO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA2OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnZ3JlZW4nO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgSGFuZGxlYmFycy5yZWdpc3RlckhlbHBlcignZWxlbWVudEljb24nLCBmdW5jdGlvbiAoZWxlbWVudCkge1xyXG4gICAgICAgIGxldCBpY29uID0gJyc7XHJcbiAgICAgICAgaWYgKGVsZW1lbnQgPT09ICdlbGVjdHJpY2l0eScpIHtcclxuICAgICAgICAgICAgaWNvbiA9ICdmYXMgZmEtYm9sdCc7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSAncmFkaWF0aW9uJykge1xyXG4gICAgICAgICAgICBpY29uID0gJ2ZhcyBmYS1yYWRpYXRpb24tYWx0JztcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQgPT09ICdmaXJlJykge1xyXG4gICAgICAgICAgICBpY29uID0gJ2ZhcyBmYS1maXJlJztcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQgPT09ICdhY2lkJykge1xyXG4gICAgICAgICAgICBpY29uID0gJ2ZhcyBmYS12aWFscyc7XHJcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50ID09PSAnY29sZCcpIHtcclxuICAgICAgICAgICAgaWNvbiA9ICdmYXMgZmEtc25vd2ZsYWtlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGljb247XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdwYXJ0c1RvdGFsJywgZnVuY3Rpb24gKHBhcnRzTGlzdDogTW9kTGlzdDxudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KHBhcnRzTGlzdCk7XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzLnRvdGFsO1xyXG4gICAgfSk7XHJcbn07XHJcbiIsImltcG9ydCBTa2lsbEZpZWxkID0gU2hhZG93cnVuLlNraWxsRmllbGQ7XHJcbmltcG9ydCB7IEhlbHBlcnMgfSBmcm9tICcuLi9oZWxwZXJzJztcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclNraWxsTGluZUhlbHBlcnMgPSAoKSA9PiB7XHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdTa2lsbEhlYWRlckljb25zJywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgY29uc3QgYWRkSWNvbiA9IHtcclxuICAgICAgICAgICAgaWNvbjogJ2ZhcyBmYS1wbHVzJyxcclxuICAgICAgICAgICAgdGl0bGU6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkFkZFNraWxsJyksXHJcbiAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkFkZCcpLFxyXG4gICAgICAgICAgICBjc3NDbGFzczogJycsXHJcbiAgICAgICAgfTtcclxuICAgICAgICBzd2l0Y2ggKGlkKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2FjdGl2ZSc6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3t9XTtcclxuICAgICAgICAgICAgY2FzZSAnbGFuZ3VhZ2UnOlxyXG4gICAgICAgICAgICAgICAgYWRkSWNvbi5jc3NDbGFzcyA9ICdhZGQtbGFuZ3VhZ2UnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFthZGRJY29uXTtcclxuICAgICAgICAgICAgY2FzZSAna25vd2xlZGdlJzpcclxuICAgICAgICAgICAgICAgIGFkZEljb24uY3NzQ2xhc3MgPSAnYWRkLWtub3dsZWRnZSc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2FkZEljb25dO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ1NraWxsSGVhZGVyUmlnaHRTaWRlJywgZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgY29uc3Qgc3BlY3MgPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlNwZWNpYWxpemF0aW9uJyksXHJcbiAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3NraWxsLXNwZWMtaXRlbScsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBydGcgPSB7XHJcbiAgICAgICAgICAgIHRleHQ6IHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlJ0ZycpLFxyXG4gICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdydGcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHN3aXRjaCAoaWQpIHtcclxuICAgICAgICAgICAgY2FzZSAnYWN0aXZlJzpcclxuICAgICAgICAgICAgY2FzZSAna25vd2xlZGdlJzpcclxuICAgICAgICAgICAgY2FzZSAnbGFuZ3VhZ2UnOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzcGVjcywgcnRnXTtcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIEhhbmRsZWJhcnMucmVnaXN0ZXJIZWxwZXIoJ1NraWxsUmlnaHRTaWRlJywgZnVuY3Rpb24gKHNraWxsVHlwZTogc3RyaW5nLCBza2lsbDogU2tpbGxGaWVsZCkge1xyXG4gICAgICAgIGNvbnN0IHNwZWNzID0gQXJyYXkuaXNBcnJheShza2lsbC5zcGVjcykgPyBza2lsbC5zcGVjcyA6IFtza2lsbC5zcGVjc107XHJcbiAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IHNwZWNzLmpvaW4oJywgJykgPz8gJycsXHJcbiAgICAgICAgICAgICAgICAgICAgY3NzQ2xhc3M6ICdza2lsbC1zcGVjLWl0ZW0nLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRleHQ6IEhlbHBlcnMuY2FsY1RvdGFsKHNraWxsKSxcclxuICAgICAgICAgICAgICAgICAgICBjc3NDbGFzczogJ3J0ZycsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIF07XHJcbiAgICB9KTtcclxuXHJcbiAgICBIYW5kbGViYXJzLnJlZ2lzdGVySGVscGVyKCdTa2lsbEljb25zJywgZnVuY3Rpb24gKHNraWxsVHlwZTogc3RyaW5nLCBza2lsbDogU2tpbGxGaWVsZCkge1xyXG4gICAgICAgIGNvbnN0IGVkaXRJY29uID0ge1xyXG4gICAgICAgICAgICBpY29uOiAnZmFzIGZhLWVkaXQnLFxyXG4gICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRWRpdFNraWxsJyksXHJcbiAgICAgICAgICAgIGNzc0NsYXNzOiAnJyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZUljb24gPSB7XHJcbiAgICAgICAgICAgIGljb246ICdmYXMgZmEtdHJhc2gnLFxyXG4gICAgICAgICAgICB0aXRsZTogZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRGVsZXRlU2tpbGwnKSxcclxuICAgICAgICAgICAgY3NzQ2xhc3M6ICcnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgc3dpdGNoIChza2lsbFR5cGUpIHtcclxuICAgICAgICAgICAgY2FzZSAnYWN0aXZlJzpcclxuICAgICAgICAgICAgICAgIGVkaXRJY29uLmNzc0NsYXNzID0gJ3NraWxsLWVkaXQnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtlZGl0SWNvbl07XHJcbiAgICAgICAgICAgIGNhc2UgJ2xhbmd1YWdlJzpcclxuICAgICAgICAgICAgICAgIGVkaXRJY29uLmNzc0NsYXNzID0gJ2xhbmd1YWdlLXNraWxsLWVkaXQnO1xyXG4gICAgICAgICAgICAgICAgcmVtb3ZlSWNvbi5jc3NDbGFzcyA9ICdyZW1vdmUtbGFuZ3VhZ2UnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtlZGl0SWNvbiwgcmVtb3ZlSWNvbl07XHJcbiAgICAgICAgICAgIGNhc2UgJ2tub3dsZWRnZSc6XHJcbiAgICAgICAgICAgICAgICBlZGl0SWNvbi5jc3NDbGFzcyA9ICdrbm93bGVkZ2Utc2tpbGwtZWRpdCc7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVJY29uLmNzc0NsYXNzID0gJ3JlbW92ZS1rbm93bGVkZ2UnO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtlZGl0SWNvbiwgcmVtb3ZlSWNvbl07XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2VkaXRJY29uXTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbn07XHJcbiIsImltcG9ydCBBdHRyaWJ1dGVGaWVsZCA9IFNoYWRvd3J1bi5BdHRyaWJ1dGVGaWVsZDtcclxuaW1wb3J0IFNraWxsRmllbGQgPSBTaGFkb3dydW4uU2tpbGxGaWVsZDtcclxuaW1wb3J0IE1vZGlmaWFibGVWYWx1ZSA9IFNoYWRvd3J1bi5Nb2RpZmlhYmxlVmFsdWU7XHJcbmltcG9ydCB7IFBhcnRzTGlzdCB9IGZyb20gJy4vcGFydHMvUGFydHNMaXN0JztcclxuaW1wb3J0IExhYmVsRmllbGQgPSBTaGFkb3dydW4uTGFiZWxGaWVsZDtcclxuXHJcbmV4cG9ydCBjbGFzcyBIZWxwZXJzIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2FsY3VsYXRlIHRoZSB0b3RhbCB2YWx1ZSBmb3IgYSBkYXRhIG9iamVjdFxyXG4gICAgICogLSBzdG9yZXMgdGhlIHRvdGFsIHZhbHVlIGFuZCByZXR1cm5zIGl0XHJcbiAgICAgKiBAcGFyYW0gZGF0YVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgY2FsY1RvdGFsKGRhdGE6IE1vZGlmaWFibGVWYWx1ZSk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKGRhdGEubW9kID09PSB1bmRlZmluZWQpIGRhdGEubW9kID0gW107XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KGRhdGEubW9kKTtcclxuICAgICAgICBkYXRhLnZhbHVlID0gcGFydHMudG90YWwgKyBkYXRhLmJhc2U7XHJcbiAgICAgICAgZGF0YS5tb2QgPSBwYXJ0cy5saXN0O1xyXG4gICAgICAgIHJldHVybiBkYXRhLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBsaXN0SXRlbUlkKGV2ZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGV2ZW50LmN1cnJlbnRUYXJnZXQuY2xvc2VzdCgnLmxpc3QtaXRlbScpLmRhdGFzZXQuaXRlbUlkO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHJlcGxhY2UgJ1NSNS4ncyBvbiBrZXlzIHdpdGggJ1NSNV9ET1RfJ1xyXG4gICAgc3RhdGljIG9uU2V0RmxhZyhkYXRhKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhICE9PSAnb2JqZWN0JykgcmV0dXJuIGRhdGE7XHJcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCB8fCBkYXRhID09PSBudWxsKSByZXR1cm4gZGF0YTtcclxuICAgICAgICBjb25zdCBuZXdEYXRhID0ge307XHJcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YSkpIHtcclxuICAgICAgICAgICAgY29uc3QgbmV3S2V5ID0ga2V5LnJlcGxhY2UoJ1NSNS4nLCAnU1I1X0RPVF8nKTtcclxuICAgICAgICAgICAgbmV3RGF0YVtuZXdLZXldID0gdGhpcy5vblNldEZsYWcodmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcclxuICAgIH1cclxuICAgIC8vIHJlcGxhY2UgJ1NSNV9ET1RfJyB3aXRoICdTUjUuJyBvbiBrZXlzXHJcbiAgICBzdGF0aWMgb25HZXRGbGFnKGRhdGEpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSByZXR1cm4gZGF0YTtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkIHx8IGRhdGEgPT09IG51bGwpIHJldHVybiBkYXRhO1xyXG4gICAgICAgIGNvbnN0IG5ld0RhdGEgPSB7fTtcclxuICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhkYXRhKSkge1xyXG4gICAgICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXkucmVwbGFjZSgnU1I1X0RPVF8nLCAnU1I1LicpO1xyXG4gICAgICAgICAgICBuZXdEYXRhW25ld0tleV0gPSB0aGlzLm9uR2V0RmxhZyh2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuZXdEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBpc01hdHJpeChhdHRzPzogYm9vbGVhbiB8IChBdHRyaWJ1dGVGaWVsZCB8IHN0cmluZyB8IFNraWxsRmllbGQpW10gfCBBdHRyaWJ1dGVGaWVsZCB8IHN0cmluZyB8IFNraWxsRmllbGQpIHtcclxuICAgICAgICBpZiAoIWF0dHMpIHJldHVybiBmYWxzZTtcclxuICAgICAgICBpZiAodHlwZW9mIGF0dHMgPT09ICdib29sZWFuJykgcmV0dXJuIGF0dHM7XHJcbiAgICAgICAgLy8gYXJyYXkgb2YgbGFiZWxzIHRvIGNoZWNrIGZvciBvbiB0aGUgaW5jb21pbmcgZGF0YVxyXG4gICAgICAgIGNvbnN0IG1hdHJpeExhYmVscyA9IFtcclxuICAgICAgICAgICAgJ1NSNS5NYXRyaXhBdHRyRmlyZXdhbGwnLFxyXG4gICAgICAgICAgICAnU1I1Lk1hdHJpeEF0dHJEYXRhUHJvY2Vzc2luZycsXHJcbiAgICAgICAgICAgICdTUjUuTWF0cml4QXR0clNsZWF6ZScsXHJcbiAgICAgICAgICAgICdTUjUuTWF0cml4QXR0ckF0dGFjaycsXHJcbiAgICAgICAgICAgICdTUjUuU2tpbGxDb21wdXRlcicsXHJcbiAgICAgICAgICAgICdTUjUuU2tpbGxIYWNraW5nJyxcclxuICAgICAgICAgICAgJ1NSNS5Ta2lsbEN5YmVyY29tYmF0JyxcclxuICAgICAgICAgICAgJ1NSNS5Ta2lsbEVsZWN0cm9uaWNXYXJmYXJlJyxcclxuICAgICAgICAgICAgJ1NSNS5Tb2Z0d2FyZScsXHJcbiAgICAgICAgXTtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXR0cykpIGF0dHMgPSBbYXR0c107XHJcbiAgICAgICAgYXR0cyA9IGF0dHMuZmlsdGVyKChhdHQpID0+IGF0dCk7XHJcbiAgICAgICAgLy8gaXRlcmF0ZSBvdmVyIHRoZSBhdHRyaWJ1dGVzIGFuZCByZXR1cm4gdHJ1ZSBpZiB3ZSBmaW5kIGEgbWF0cml4IGF0dFxyXG4gICAgICAgIGZvciAoY29uc3QgYXR0IG9mIGF0dHMpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBhdHQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0cml4TGFiZWxzLmluZGV4T2YoYXR0KSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGF0dCA9PT0gJ29iamVjdCcgJiYgKGF0dCBhcyBMYWJlbEZpZWxkKS5sYWJlbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0cml4TGFiZWxzLmluZGV4T2YoYXR0LmxhYmVsID8/ICcnKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gaWYgd2UgZG9uJ3QgZmluZCBhbnl0aGluZyByZXR1cm4gZmFsc2VcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHBhcnNlSW5wdXRUb1N0cmluZyh2YWw6IG51bWJlciB8IHN0cmluZyB8IHN0cmluZ1tdIHwgdW5kZWZpbmVkKTogc3RyaW5nIHtcclxuICAgICAgICBpZiAodmFsID09PSB1bmRlZmluZWQpIHJldHVybiAnJztcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHJldHVybiB2YWwudG9TdHJpbmcoKTtcclxuICAgICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHJldHVybiB2YWw7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdmFsLmpvaW4oJywnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwYXJzZUlucHV0VG9OdW1iZXIodmFsOiBudW1iZXIgfCBzdHJpbmcgfCBzdHJpbmdbXSB8IHVuZGVmaW5lZCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSByZXR1cm4gdmFsO1xyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICBjb25zdCByZXQgPSArdmFsO1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKHJldCkpIHJldHVybiByZXQ7XHJcbiAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0ciA9IHZhbC5qb2luKCcnKTtcclxuICAgICAgICAgICAgY29uc3QgcmV0ID0gK3N0cjtcclxuICAgICAgICAgICAgaWYgKCFpc05hTihyZXQpKSByZXR1cm4gcmV0O1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldHVwQ3VzdG9tQ2hlY2tib3goYXBwLCBodG1sKSB7XHJcbiAgICAgICAgY29uc3Qgc2V0Q29udGVudCA9IChlbCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja2JveCA9ICQoZWwpLmNoaWxkcmVuKCdpbnB1dFt0eXBlPWNoZWNrYm94XScpO1xyXG4gICAgICAgICAgICBjb25zdCBjaGVja21hcmsgPSAkKGVsKS5jaGlsZHJlbignLmNoZWNrbWFyaycpO1xyXG4gICAgICAgICAgICBpZiAoJChjaGVja2JveCkucHJvcCgnY2hlY2tlZCcpKSB7XHJcbiAgICAgICAgICAgICAgICAkKGNoZWNrbWFyaykuYWRkQ2xhc3MoJ2ZhLWNoZWNrLWNpcmNsZScpO1xyXG4gICAgICAgICAgICAgICAgJChjaGVja21hcmspLnJlbW92ZUNsYXNzKCdmYS1jaXJjbGUnKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICQoY2hlY2ttYXJrKS5hZGRDbGFzcygnZmEtY2lyY2xlJyk7XHJcbiAgICAgICAgICAgICAgICAkKGNoZWNrbWFyaykucmVtb3ZlQ2xhc3MoJ2ZhLWNoZWNrLWNpcmNsZScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBodG1sLmZpbmQoJ2xhYmVsLmNoZWNrYm94JykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHNldENvbnRlbnQodGhpcyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCdsYWJlbC5jaGVja2JveCcpLmNsaWNrKChldmVudCkgPT4gc2V0Q29udGVudChldmVudC5jdXJyZW50VGFyZ2V0KSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuc3VibWl0LWNoZWNrYm94JykuY2hhbmdlKChldmVudCkgPT4gYXBwLl9vblN1Ym1pdChldmVudCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBtYXBSb3VuZHNUb0RlZmVuc2VNb2Qocm91bmRzKSB7XHJcbiAgICAgICAgaWYgKHJvdW5kcyA9PT0gMSkgcmV0dXJuIDA7XHJcbiAgICAgICAgaWYgKHJvdW5kcyA9PT0gMykgcmV0dXJuIC0yO1xyXG4gICAgICAgIGlmIChyb3VuZHMgPT09IDYpIHJldHVybiAtNTtcclxuICAgICAgICBpZiAocm91bmRzID09PSAxMCkgcmV0dXJuIC05O1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBtYXBSb3VuZHNUb0RlZmVuc2VEZXNjKHJvdW5kcykge1xyXG4gICAgICAgIGlmIChyb3VuZHMgPT09IDEpIHJldHVybiAnJztcclxuICAgICAgICBpZiAocm91bmRzID09PSAzKSByZXR1cm4gJy0yJztcclxuICAgICAgICBpZiAocm91bmRzID09PSA2KSByZXR1cm4gJy01JztcclxuICAgICAgICBpZiAocm91bmRzID09PSAxMCkgcmV0dXJuICctOSc7XHJcbiAgICAgICAgaWYgKHJvdW5kcyA9PT0gMjApIHJldHVybiAnU1I1LkR1Y2tPckNvdmVyJztcclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGxhYmVsKHN0cikge1xyXG4gICAgICAgIGNvbnN0IGZyYWdzID0gc3RyLnNwbGl0KCdfJyk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcmFncy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBmcmFnc1tpXSA9IGZyYWdzW2ldLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgZnJhZ3NbaV0uc2xpY2UoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZyYWdzLmZvckVhY2goKGZyYWcsIGlkeCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZnJhZyA9PT0gJ1Byb2Nlc3NpbmcnKSBmcmFnc1tpZHhdID0gJ1Byb2MuJztcclxuICAgICAgICAgICAgaWYgKGZyYWcgPT09ICdNZWNoYW5pYycpIGZyYWdzW2lkeF0gPSAnTWVjaC4nO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmcmFncy5qb2luKCcgJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG9yZGVyS2V5cyhvYmopIHtcclxuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKS5zb3J0KGZ1bmN0aW9uIGtleU9yZGVyKGsxLCBrMikge1xyXG4gICAgICAgICAgICBpZiAoazEgPCBrMikgcmV0dXJuIC0xO1xyXG4gICAgICAgICAgICBpZiAoazEgPiBrMikgcmV0dXJuICsxO1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgY29uc3QgYWZ0ZXIgPSB7fTtcclxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBhZnRlcltrZXlzW2ldXSA9IG9ialtrZXlzW2ldXTtcclxuICAgICAgICAgICAgZGVsZXRlIG9ialtrZXlzW2ldXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIG9ialtrZXlzW2ldXSA9IGFmdGVyW2tleXNbaV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2JqO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzZXROZXN0ZWRWYWx1ZShvYmosIHByb3AsIHZhbCkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG9iaik7XHJcbiAgICAgICAgY29uc29sZS5sb2cocHJvcCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codmFsKTtcclxuICAgICAgICBjb25zdCBwcm9wcyA9IHByb3Auc3BsaXQoJy4nKTtcclxuICAgICAgICBwcm9wcy5mb3JFYWNoKChwKSA9PiAob2JqID0gcCBpbiBvYmogPyBvYmpbcF0gOiBudWxsKSk7XHJcbiAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgc2V0dGluZyAke29ian0gdG8gJHt2YWx9YCk7XHJcbiAgICAgICAgICAgIG9iaiA9IHZhbDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGhhc01vZGlmaWVycyhldmVudCkge1xyXG4gICAgICAgIHJldHVybiBldmVudCAmJiAoZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQubWV0YUtleSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGZpbHRlcihvYmosIGNvbXApIHtcclxuICAgICAgICBjb25zdCByZXRPYmogPSB7fTtcclxuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKG9iaikuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29tcChba2V5LCB2YWx1ZV0pKSByZXRPYmpba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJldE9iajtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYWRkTGFiZWxzKG9iaiwgbGFiZWwpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KCdsYWJlbCcpICYmIG9iai5oYXNPd25Qcm9wZXJ0eSgndmFsdWUnKSAmJiBsYWJlbCAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIG9iai5sYWJlbCA9IGxhYmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5lbnRyaWVzKG9iailcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKFssIHZhbHVlXSkgPT4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JylcclxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IEhlbHBlcnMuYWRkTGFiZWxzKHZhbHVlLCBrZXkpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMnO1xyXG5pbXBvcnQgRGV2aWNlRGF0YSA9IFNoYWRvd3J1bi5EZXZpY2VEYXRhO1xyXG5cclxuZXhwb3J0IGNvbnN0IENoYXREYXRhID0ge1xyXG4gICAgYWN0aW9uOiAoZGF0YSwgbGFiZWxzLCBwcm9wcykgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhLmFjdGlvbikge1xyXG4gICAgICAgICAgICBjb25zdCBsYWJlbFN0cmluZ0xpc3Q6IHN0cmluZ1tdID0gW107XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmFjdGlvbi5za2lsbCkge1xyXG4gICAgICAgICAgICAgICAgbGFiZWxTdHJpbmdMaXN0LnB1c2goSGVscGVycy5sYWJlbChkYXRhLmFjdGlvbi5za2lsbCkpO1xyXG4gICAgICAgICAgICAgICAgbGFiZWxTdHJpbmdMaXN0LnB1c2goSGVscGVycy5sYWJlbChkYXRhLmFjdGlvbi5hdHRyaWJ1dGUpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChkYXRhLmFjdGlvbi5hdHRyaWJ1dGUyKSB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbFN0cmluZ0xpc3QucHVzaChIZWxwZXJzLmxhYmVsKGRhdGEuYWN0aW9uLmF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICAgICAgbGFiZWxTdHJpbmdMaXN0LnB1c2goSGVscGVycy5sYWJlbChkYXRhLmFjdGlvbi5hdHRyaWJ1dGUyKSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGF0YS5hY3Rpb24uYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICBsYWJlbFN0cmluZ0xpc3QucHVzaChIZWxwZXJzLmxhYmVsKGRhdGEuYWN0aW9uLmF0dHJpYnV0ZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmFjdGlvbi5tb2QpIHtcclxuICAgICAgICAgICAgICAgIGxhYmVsU3RyaW5nTGlzdC5wdXNoKGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1Lkl0ZW1Nb2QnKX0gKCR7ZGF0YS5hY3Rpb24ubW9kfSlgKTtcclxuICAgICAgICAgICAgICAgIC8vIFRPRE8gd2hlbiBhbGwgbW9kcyBhcmUgbW9kbGlzdHNcclxuICAgICAgICAgICAgICAgIC8vIE9iamVjdC5lbnRyaWVzKGRhdGEuYWN0aW9uLm1vZCkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PlxyXG4gICAgICAgICAgICAgICAgLy8gICAgIGxhYmVsU3RyaW5nTGlzdC5wdXNoKGAke2dhbWUuaTE4bi5sb2NhbGl6ZShrZXkpfSAoJHt2YWx1ZX0pYClcclxuICAgICAgICAgICAgICAgIC8vICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGxhYmVsU3RyaW5nTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGxhYmVscy5yb2xsID0gbGFiZWxTdHJpbmdMaXN0LmpvaW4oJyArICcpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS5hY3Rpb24ub3Bwb3NlZC50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IG9wcG9zZWQgfSA9IGRhdGEuYWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wcG9zZWQudHlwZSAhPT0gJ2N1c3RvbScpIGxhYmVscy5vcHBvc2VkUm9sbCA9IGB2cy4gJHtIZWxwZXJzLmxhYmVsKG9wcG9zZWQudHlwZSl9YDtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wcG9zZWQuc2tpbGwpIGxhYmVscy5vcHBvc2VkUm9sbCA9IGB2cy4gJHtIZWxwZXJzLmxhYmVsKG9wcG9zZWQuc2tpbGwpfSske0hlbHBlcnMubGFiZWwob3Bwb3NlZC5hdHRyaWJ1dGUpfWA7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGlmIChvcHBvc2VkLmF0dHJpYnV0ZTIpIGxhYmVscy5vcHBvc2VkUm9sbCA9IGB2cy4gJHtIZWxwZXJzLmxhYmVsKG9wcG9zZWQuYXR0cmlidXRlKX0rJHtIZWxwZXJzLmxhYmVsKG9wcG9zZWQuYXR0cmlidXRlMil9YDtcclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG9wcG9zZWQuYXR0cmlidXRlKSBsYWJlbHMub3Bwb3NlZFJvbGwgPSBgdnMuICR7SGVscGVycy5sYWJlbChvcHBvc2VkLmF0dHJpYnV0ZSl9YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gc2V0dXAgYWN0aW9uIHByb3BzXHJcbiAgICAgICAgICAgIC8vIGdvIGluIG9yZGVyIG9mIFwiTGltaXQvQWNjdXJhY3lcIiBcIkRhbWFnZVwiIFwiQVBcIlxyXG4gICAgICAgICAgICAvLyBkb24ndCBhZGQgYWN0aW9uIHR5cGUgaWYgc2V0IHRvICd2YXJpZXMnIG9yICdub25lJyBhcyB0aGF0J3MgcHJldHR5IG11Y2ggdXNlbGVzcyBpbmZvXHJcbiAgICAgICAgICAgIGlmIChkYXRhLmFjdGlvbi50eXBlICE9PSAnJyAmJiBkYXRhLmFjdGlvbi50eXBlICE9PSAndmFyaWVzJyAmJiBkYXRhLmFjdGlvbi50eXBlICE9PSAnbm9uZScpIHtcclxuICAgICAgICAgICAgICAgIHByb3BzLnB1c2goYCR7SGVscGVycy5sYWJlbChkYXRhLmFjdGlvbi50eXBlKX0gQWN0aW9uYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGEuYWN0aW9uLmxpbWl0LnZhbHVlKSBwcm9wcy5wdXNoKGBMaW1pdCAke2RhdGEuYWN0aW9uLmxpbWl0LnZhbHVlfWApO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5hY3Rpb24uZGFtYWdlLnR5cGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgZGFtYWdlIH0gPSBkYXRhLmFjdGlvbjtcclxuICAgICAgICAgICAgICAgIGxldCBkYW1hZ2VTdHJpbmcgPSAnJztcclxuICAgICAgICAgICAgICAgIGxldCBlbGVtZW50U3RyaW5nID0gJyc7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGFtYWdlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlU3RyaW5nID0gYERWICR7ZGFtYWdlLnZhbHVlfSR7ZGFtYWdlLnR5cGUudmFsdWUgPyBkYW1hZ2UudHlwZS52YWx1ZS50b1VwcGVyQ2FzZSgpLmNoYXJBdCgwKSA6ICcnfWA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGFtYWdlLmVsZW1lbnQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgZGFtYWdlIHZhbHVlIGFuZCBhcmUgZWxlY3RyaWMsIGZvbGxvdyB0aGUgY29udmVudGlvbiBvZiAoZSkgYWZ0ZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGFtYWdlLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYW1hZ2UuZWxlbWVudC52YWx1ZSA9PT0gJ2VsZWN0cmljaXR5Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFtYWdlU3RyaW5nICs9ICcgKGUpJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRTdHJpbmcgPSBIZWxwZXJzLmxhYmVsKGRhbWFnZS5lbGVtZW50LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRTdHJpbmcgPSBIZWxwZXJzLmxhYmVsKGRhbWFnZS5lbGVtZW50LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGFtYWdlU3RyaW5nKSBwcm9wcy5wdXNoKGRhbWFnZVN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudFN0cmluZykgcHJvcHMucHVzaChlbGVtZW50U3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIGlmIChkYW1hZ2UuYXAgJiYgZGFtYWdlLmFwLnZhbHVlKSBwcm9wcy5wdXNoKGBBUCAke2RhbWFnZS5hcC52YWx1ZX1gKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBzaW46IChkYXRhLCBsYWJlbHMsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgcHJvcHMucHVzaChgUmF0aW5nICR7ZGF0YS50ZWNobm9sb2d5LnJhdGluZ31gKTtcclxuICAgICAgICBkYXRhLmxpY2Vuc2VzLmZvckVhY2goKGxpY2Vuc2UpID0+IHtcclxuICAgICAgICAgICAgcHJvcHMucHVzaChgJHtsaWNlbnNlLm5hbWV9IFIke2xpY2Vuc2UucnRnfWApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBjb250YWN0OiAoZGF0YSwgbGFiZWxzLCBwcm9wcykgPT4ge1xyXG4gICAgICAgIHByb3BzLnB1c2goZGF0YS50eXBlKTtcclxuICAgICAgICBwcm9wcy5wdXNoKGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkNvbm5lY3Rpb24nKX0gJHtkYXRhLmNvbm5lY3Rpb259YCk7XHJcbiAgICAgICAgcHJvcHMucHVzaChgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5Mb3lhbHR5Jyl9ICR7ZGF0YS5sb3lhbHR5fWApO1xyXG4gICAgICAgIGlmIChkYXRhLmJsYWNrbWFpbCkge1xyXG4gICAgICAgICAgICBwcm9wcy5wdXNoKGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LkJsYWNrbWFpbCcpfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YS5mYW1pbHkpIHtcclxuICAgICAgICAgICAgcHJvcHMucHVzaChnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5GYW1pbHknKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBsaWZlc3R5bGU6IChkYXRhLCBsYWJlbHMsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgcHJvcHMucHVzaChIZWxwZXJzLmxhYmVsKGRhdGEudHlwZSkpO1xyXG4gICAgICAgIGlmIChkYXRhLmNvc3QpIHByb3BzLnB1c2goYMKlJHtkYXRhLmNvc3R9YCk7XHJcbiAgICAgICAgaWYgKGRhdGEuY29tZm9ydHMpIHByb3BzLnB1c2goYENvbWZvcnRzICR7ZGF0YS5jb21mb3J0c31gKTtcclxuICAgICAgICBpZiAoZGF0YS5zZWN1cml0eSkgcHJvcHMucHVzaChgU2VjdXJpdHkgJHtkYXRhLnNlY3VyaXR5fWApO1xyXG4gICAgICAgIGlmIChkYXRhLm5laWdoYm9yaG9vZCkgcHJvcHMucHVzaChgTmVpZ2hib3Job29kICR7ZGF0YS5uZWlnaGJvcmhvb2R9YCk7XHJcbiAgICAgICAgaWYgKGRhdGEuZ3Vlc3RzKSBwcm9wcy5wdXNoKGBHdWVzdHMgJHtkYXRhLmd1ZXN0c31gKTtcclxuICAgIH0sXHJcblxyXG4gICAgYWRlcHRfcG93ZXI6IChkYXRhLCBsYWJlbHMsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgQ2hhdERhdGEuYWN0aW9uKGRhdGEsIGxhYmVscywgcHJvcHMpO1xyXG4gICAgICAgIHByb3BzLnB1c2goYFBQICR7ZGF0YS5wcH1gKTtcclxuICAgICAgICBwcm9wcy5wdXNoKEhlbHBlcnMubGFiZWwoZGF0YS50eXBlKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFybW9yOiAoZGF0YSwgbGFiZWxzLCBwcm9wcykgPT4ge1xyXG4gICAgICAgIGlmIChkYXRhLmFybW9yKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLmFybW9yLnZhbHVlKSBwcm9wcy5wdXNoKGBBcm1vciAke2RhdGEuYXJtb3IubW9kID8gJysnIDogJyd9JHtkYXRhLmFybW9yLnZhbHVlfWApO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5hcm1vci5hY2lkKSBwcm9wcy5wdXNoKGBBY2lkICR7ZGF0YS5hcm1vci5hY2lkfWApO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5hcm1vci5jb2xkKSBwcm9wcy5wdXNoKGBDb2xkICR7ZGF0YS5hcm1vci5jb2xkfWApO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5hcm1vci5maXJlKSBwcm9wcy5wdXNoKGBGaXJlICR7ZGF0YS5hcm1vci5maXJlfWApO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5hcm1vci5lbGVjdHJpY2l0eSkgcHJvcHMucHVzaChgRWxlY3RyaWNpdHkgJHtkYXRhLmFybW9yLmVsZWN0cmljaXR5fWApO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5hcm1vci5yYWRpYXRpb24pIHByb3BzLnB1c2goYFJhZGlhdGlvbiAke2RhdGEuYXJtb3IucmFkaWF0aW9ufWApO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgcHJvZ3JhbTogKGRhdGEsIGxhYmVscywgcHJvcHMpID0+IHtcclxuICAgICAgICBwcm9wcy5wdXNoKGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LnByb2dyYW1UeXBlc1tkYXRhLnR5cGVdKSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNvbXBsZXhfZm9ybTogKGRhdGEsIGxhYmVscywgcHJvcHMpID0+IHtcclxuICAgICAgICBDaGF0RGF0YS5hY3Rpb24oZGF0YSwgbGFiZWxzLCBwcm9wcyk7XHJcbiAgICAgICAgcHJvcHMucHVzaChIZWxwZXJzLmxhYmVsKGRhdGEudGFyZ2V0KSwgSGVscGVycy5sYWJlbChkYXRhLmR1cmF0aW9uKSk7XHJcbiAgICAgICAgY29uc3QgeyBmYWRlIH0gPSBkYXRhO1xyXG4gICAgICAgIGlmIChmYWRlID4gMCkgcHJvcHMucHVzaChgRmFkZSBMKyR7ZmFkZX1gKTtcclxuICAgICAgICBlbHNlIGlmIChmYWRlIDwgMCkgcHJvcHMucHVzaChgRmFkZSBMJHtmYWRlfWApO1xyXG4gICAgICAgIGVsc2UgcHJvcHMucHVzaCgnRmFkZSBMJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGN5YmVyd2FyZTogKGRhdGEsIGxhYmVscywgcHJvcHMpID0+IHtcclxuICAgICAgICBDaGF0RGF0YS5hY3Rpb24oZGF0YSwgbGFiZWxzLCBwcm9wcyk7XHJcbiAgICAgICAgQ2hhdERhdGEuYXJtb3IoZGF0YSwgbGFiZWxzLCBwcm9wcyk7XHJcbiAgICAgICAgaWYgKGRhdGEuZXNzZW5jZSkgcHJvcHMucHVzaChgRXNzICR7ZGF0YS5lc3NlbmNlfWApO1xyXG4gICAgfSxcclxuXHJcbiAgICBkZXZpY2U6IChkYXRhOiBEZXZpY2VEYXRhLCBsYWJlbHMsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgaWYgKGRhdGEudGVjaG5vbG9neSAmJiBkYXRhLnRlY2hub2xvZ3kucmF0aW5nKSBwcm9wcy5wdXNoKGBSYXRpbmcgJHtkYXRhLnRlY2hub2xvZ3kucmF0aW5nfWApO1xyXG4gICAgICAgIGlmIChkYXRhLmNhdGVnb3J5ID09PSAnY3liZXJkZWNrJykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGF0dE4gb2YgT2JqZWN0LnZhbHVlcyhkYXRhLmF0dHMpKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKGAke0hlbHBlcnMubGFiZWwoYXR0Ti5hdHQpfSAke2F0dE4udmFsdWV9YCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGVxdWlwbWVudDogKGRhdGEsIGxhYmVscywgcHJvcHMpID0+IHtcclxuICAgICAgICBpZiAoZGF0YS50ZWNobm9sb2d5ICYmIGRhdGEudGVjaG5vbG9neS5yYXRpbmcpIHByb3BzLnB1c2goYFJhdGluZyAke2RhdGEudGVjaG5vbG9neS5yYXRpbmd9YCk7XHJcbiAgICB9LFxyXG5cclxuICAgIHF1YWxpdHk6IChkYXRhLCBsYWJlbHMsIHByb3BzKSA9PiB7XHJcbiAgICAgICAgQ2hhdERhdGEuYWN0aW9uKGRhdGEsIGxhYmVscywgcHJvcHMpO1xyXG4gICAgICAgIHByb3BzLnB1c2goSGVscGVycy5sYWJlbChkYXRhLnR5cGUpKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gYWRkIHByb3BlcnRpZXMgZm9yIHNwZWxsIGRhdGEsIGZvbGxvdyBvcmRlciBpbiBib29rXHJcbiAgICBzcGVsbDogKGRhdGEsIGxhYmVscywgcHJvcHMpID0+IHtcclxuICAgICAgICAvLyBmaXJzdCBjYXRlZ29yeSBhbmQgdHlwZVxyXG4gICAgICAgIHByb3BzLnB1c2goSGVscGVycy5sYWJlbChkYXRhLmNhdGVnb3J5KSwgSGVscGVycy5sYWJlbChkYXRhLnR5cGUpKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIHN1YnR5cGUgdGFnc1xyXG4gICAgICAgIGlmIChkYXRhLmNhdGVnb3J5ID09PSAnY29tYmF0Jykge1xyXG4gICAgICAgICAgICBwcm9wcy5wdXNoKEhlbHBlcnMubGFiZWwoZGF0YS5jb21iYXQudHlwZSkpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jYXRlZ29yeSA9PT0gJ2hlYWx0aCcpIHtcclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2F0ZWdvcnkgPT09ICdpbGx1c2lvbicpIHtcclxuICAgICAgICAgICAgcHJvcHMucHVzaChkYXRhLmlsbHVzaW9uLnR5cGUpO1xyXG4gICAgICAgICAgICBwcm9wcy5wdXNoKGRhdGEuaWxsdXNpb24uc2Vuc2UpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jYXRlZ29yeSA9PT0gJ21hbmlwdWxhdGlvbicpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEubWFuaXB1bGF0aW9uLmRhbWFnaW5nKSBwcm9wcy5wdXNoKCdEYW1hZ2luZycpO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5tYW5pcHVsYXRpb24ubWVudGFsKSBwcm9wcy5wdXNoKCdNZW50YWwnKTtcclxuICAgICAgICAgICAgaWYgKGRhdGEubWFuaXB1bGF0aW9uLmVudmlyb25tZW50YWwpIHByb3BzLnB1c2goJ0Vudmlyb25tZW50YWwnKTtcclxuICAgICAgICAgICAgaWYgKGRhdGEubWFuaXB1bGF0aW9uLnBoeXNpY2FsKSBwcm9wcy5wdXNoKCdQaHlzaWNhbCcpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5jYXRlZ29yeSA9PT0gJ2RldGVjdGlvbicpIHtcclxuICAgICAgICAgICAgcHJvcHMucHVzaChkYXRhLmlsbHVzaW9uLnR5cGUpO1xyXG4gICAgICAgICAgICBwcm9wcy5wdXNoKGRhdGEuaWxsdXNpb24ucGFzc2l2ZSA/ICdQYXNzaXZlJyA6ICdBY3RpdmUnKTtcclxuICAgICAgICAgICAgaWYgKGRhdGEuaWxsdXNpb24uZXh0ZW5kZWQpIHByb3BzLnB1c2goJ0V4dGVuZGVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGFkZCByYW5nZVxyXG4gICAgICAgIHByb3BzLnB1c2goSGVscGVycy5sYWJlbChkYXRhLnJhbmdlKSk7XHJcblxyXG4gICAgICAgIC8vIGFkZCBhY3Rpb24gZGF0YVxyXG4gICAgICAgIENoYXREYXRhLmFjdGlvbihkYXRhLCBsYWJlbHMsIHByb3BzKTtcclxuXHJcbiAgICAgICAgLy8gYWRkIGR1cmF0aW9uIGRhdGFcclxuICAgICAgICBwcm9wcy5wdXNoKEhlbHBlcnMubGFiZWwoZGF0YS5kdXJhdGlvbikpO1xyXG5cclxuICAgICAgICAvLyBhZGQgZHJhaW4gZGF0YVxyXG4gICAgICAgIGNvbnN0IHsgZHJhaW4gfSA9IGRhdGE7XHJcbiAgICAgICAgaWYgKGRyYWluID4gMCkgcHJvcHMucHVzaChgRHJhaW4gRiske2RyYWlufWApO1xyXG4gICAgICAgIGVsc2UgaWYgKGRyYWluIDwgMCkgcHJvcHMucHVzaChgRHJhaW4gRiR7ZHJhaW59YCk7XHJcbiAgICAgICAgZWxzZSBwcm9wcy5wdXNoKCdEcmFpbiBGJyk7XHJcblxyXG4gICAgICAgIGxhYmVscy5yb2xsID0gJ0Nhc3QnO1xyXG4gICAgfSxcclxuXHJcbiAgICB3ZWFwb246IChkYXRhLCBsYWJlbHMsIHByb3BzLCBpdGVtKSA9PiB7XHJcbiAgICAgICAgQ2hhdERhdGEuYWN0aW9uKGRhdGEsIGxhYmVscywgcHJvcHMpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvcCA9IHByb3BzW2ldO1xyXG4gICAgICAgICAgICBpZiAocHJvcC5pbmNsdWRlcygnTGltaXQnKSkge1xyXG4gICAgICAgICAgICAgICAgcHJvcHNbaV0gPSBwcm9wLnJlcGxhY2UoJ0xpbWl0JywgJ0FjY3VyYWN5Jyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVxdWlwcGVkQW1tbyA9IGl0ZW0/LmdldEVxdWlwcGVkQW1tbygpO1xyXG4gICAgICAgIGlmIChlcXVpcHBlZEFtbW8gJiYgZGF0YS5hbW1vICYmIGRhdGEuYW1tby5jdXJyZW50Py5tYXgpIHtcclxuICAgICAgICAgICAgaWYgKGVxdWlwcGVkQW1tbykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBjdXJyZW50LCBzcGFyZV9jbGlwcyB9ID0gZGF0YS5hbW1vO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVxdWlwcGVkQW1tby5uYW1lKSBwcm9wcy5wdXNoKGAke2VxdWlwcGVkQW1tby5uYW1lfSAoJHtjdXJyZW50LnZhbHVlfS8ke2N1cnJlbnQubWF4fSlgKTtcclxuICAgICAgICAgICAgICAgIGlmIChlcXVpcHBlZEFtbW8uZGF0YS5kYXRhLmJsYXN0LnJhZGl1cykgcHJvcHMucHVzaChgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5CbGFzdFJhZGl1cycpfSAke2VxdWlwcGVkQW1tby5kYXRhLmRhdGEuYmxhc3QucmFkaXVzfW1gKTtcclxuICAgICAgICAgICAgICAgIGlmIChlcXVpcHBlZEFtbW8uZGF0YS5kYXRhLmJsYXN0LmRyb3BvZmYpIHByb3BzLnB1c2goYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRHJvcG9mZicpfSAke2VxdWlwcGVkQW1tby5kYXRhLmRhdGEuYmxhc3QuZHJvcG9mZn0vbWApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNwYXJlX2NsaXBzICYmIHNwYXJlX2NsaXBzLm1heCkgcHJvcHMucHVzaChgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5TcGFyZUNsaXBzJyl9ICgke3NwYXJlX2NsaXBzLnZhbHVlfS8ke3NwYXJlX2NsaXBzLm1heH0pYCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkYXRhLnRlY2hub2xvZ3k/LmNvbmNlYWw/LnZhbHVlKSB7XHJcbiAgICAgICAgICAgIHByb3BzLnB1c2goYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdTUjUuQ29uY2VhbCcpfSAke2RhdGEudGVjaG5vbG9neS5jb25jZWFsLnZhbHVlfWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRhdGEuY2F0ZWdvcnkgPT09ICdyYW5nZScpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEucmFuZ2UucmMpIHtcclxuICAgICAgICAgICAgICAgIGxldCByY1N0cmluZyA9IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlJlY29pbENvbXBlbnNhdGlvbicpfSAke2RhdGEucmFuZ2UucmMudmFsdWV9YDtcclxuICAgICAgICAgICAgICAgIGlmIChpdGVtPy5hY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJjU3RyaW5nICs9IGAgKCR7Z2FtZS5pMThuLmxvY2FsaXplKCdTUjUuVG90YWwnKX0gJHtpdGVtLmFjdG9yLmdldFJlY29pbENvbXBlbnNhdGlvbigpfSlgO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcHJvcHMucHVzaChyY1N0cmluZyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGRhdGEucmFuZ2UubW9kZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld01vZGVzOiBzdHJpbmdbXSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBtb2RlcyB9ID0gZGF0YS5yYW5nZTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2Rlcy5zaW5nbGVfc2hvdCkgbmV3TW9kZXMucHVzaCgnU1I1LldlYXBvbk1vZGVTaW5nbGVTaG90U2hvcnQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2Rlcy5zZW1pX2F1dG8pIG5ld01vZGVzLnB1c2goJ1NSNS5XZWFwb25Nb2RlU2VtaUF1dG9TaG9ydCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZGVzLmJ1cnN0X2ZpcmUpIG5ld01vZGVzLnB1c2goJ1NSNS5XZWFwb25Nb2RlQnVyc3RGaXJlU2hvcnQnKTtcclxuICAgICAgICAgICAgICAgIGlmIChtb2Rlcy5mdWxsX2F1dG8pIG5ld01vZGVzLnB1c2goJ1NSNS5XZWFwb25Nb2RlRnVsbEF1dG9TaG9ydCcpO1xyXG4gICAgICAgICAgICAgICAgcHJvcHMucHVzaChuZXdNb2Rlcy5tYXAoKG0pID0+IGdhbWUuaTE4bi5sb2NhbGl6ZShtKSkuam9pbignLycpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZGF0YS5yYW5nZS5yYW5nZXMpIHByb3BzLnB1c2goQXJyYXkuZnJvbShPYmplY3QudmFsdWVzKGRhdGEucmFuZ2UucmFuZ2VzKSkuam9pbignLycpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2F0ZWdvcnkgPT09ICdtZWxlZScpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEubWVsZWUucmVhY2gpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlYWNoU3RyaW5nID0gYCR7Z2FtZS5pMThuLmxvY2FsaXplKCdTUjUuUmVhY2gnKX0gJHtkYXRhLm1lbGVlLnJlYWNofWA7XHJcbiAgICAgICAgICAgICAgICAvLyBmaW5kIGFjY3VyYWN5IGluIHByb3BzIGFuZCBpbnNlcnQgb3Vyc2VsdmVzIGFmdGVyIGl0XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhY2NJbmRleCA9IHByb3BzLmZpbmRJbmRleCgocCkgPT4gcC5pbmNsdWRlcygnQWNjdXJhY3knKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWNjSW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnNwbGljZShhY2NJbmRleCArIDEsIDAsIHJlYWNoU3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcHMucHVzaChyZWFjaFN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEuY2F0ZWdvcnkgPT09ICd0aHJvd24nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgYmxhc3QgfSA9IGRhdGEudGhyb3duO1xyXG4gICAgICAgICAgICBpZiAoYmxhc3Q/LnJhZGl1cykgcHJvcHMucHVzaChgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5CbGFzdFJhZGl1cycpfSAke2JsYXN0LnJhZGl1c31tYCk7XHJcbiAgICAgICAgICAgIGlmIChibGFzdD8uZHJvcG9mZikgcHJvcHMucHVzaChgJHtnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5Ecm9wb2ZmJyl9ICR7Ymxhc3QuZHJvcG9mZn0vbWApO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEudGhyb3duLnJhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbXVsdCA9IGRhdGEudGhyb3duLnJhbmdlcy5hdHRyaWJ1dGUgJiYgaXRlbT8uYWN0b3IgPyBpdGVtLmFjdG9yLmRhdGEuZGF0YS5hdHRyaWJ1dGVzW2RhdGEudGhyb3duLnJhbmdlcy5hdHRyaWJ1dGVdLnZhbHVlIDogMTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlcyA9IFtkYXRhLnRocm93bi5yYW5nZXMuc2hvcnQsIGRhdGEudGhyb3duLnJhbmdlcy5tZWRpdW0sIGRhdGEudGhyb3duLnJhbmdlcy5sb25nLCBkYXRhLnRocm93bi5yYW5nZXMuZXh0cmVtZV07XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5wdXNoKHJhbmdlcy5tYXAoKHYpID0+IHYgKiBtdWx0KS5qb2luKCcvJykpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufTtcclxuIiwiaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBTUjVBY3RvciB9IGZyb20gJy4uL2FjdG9yL1NSNUFjdG9yJztcclxuaW1wb3J0IHsgU2hhZG93cnVuSXRlbURpYWxvZyB9IGZyb20gJy4uL2FwcHMvZGlhbG9ncy9TaGFkb3dydW5JdGVtRGlhbG9nJztcclxuaW1wb3J0IE1vZExpc3QgPSBTaGFkb3dydW4uTW9kTGlzdDtcclxuaW1wb3J0IEF0dGFja0RhdGEgPSBTaGFkb3dydW4uQXR0YWNrRGF0YTtcclxuaW1wb3J0IEF0dHJpYnV0ZUZpZWxkID0gU2hhZG93cnVuLkF0dHJpYnV0ZUZpZWxkO1xyXG5pbXBvcnQgU2tpbGxGaWVsZCA9IFNoYWRvd3J1bi5Ta2lsbEZpZWxkO1xyXG5pbXBvcnQgTGltaXRGaWVsZCA9IFNoYWRvd3J1bi5MaW1pdEZpZWxkO1xyXG5pbXBvcnQgRmlyZU1vZGVEYXRhID0gU2hhZG93cnVuLkZpcmVNb2RlRGF0YTtcclxuaW1wb3J0IFNwZWxsRm9yY2VEYXRhID0gU2hhZG93cnVuLlNwZWxsRm9yY2VEYXRhO1xyXG5pbXBvcnQgQ29tcGxleEZvcm1MZXZlbERhdGEgPSBTaGFkb3dydW4uQ29tcGxleEZvcm1MZXZlbERhdGE7XHJcbmltcG9ydCBGaXJlUmFuZ2VEYXRhID0gU2hhZG93cnVuLkZpcmVSYW5nZURhdGE7XHJcbmltcG9ydCBCbGFzdERhdGEgPSBTaGFkb3dydW4uQmxhc3REYXRhO1xyXG5pbXBvcnQgeyBDaGF0RGF0YSB9IGZyb20gJy4vQ2hhdERhdGEnO1xyXG5pbXBvcnQgeyBBZHZhbmNlZFJvbGxQcm9wcywgU2hhZG93cnVuUm9sbCwgU2hhZG93cnVuUm9sbGVyIH0gZnJvbSAnLi4vcm9sbHMvU2hhZG93cnVuUm9sbGVyJztcclxuaW1wb3J0IHsgY3JlYXRlQ2hhdERhdGEgfSBmcm9tICcuLi9jaGF0JztcclxuaW1wb3J0IHsgU1lTVEVNX05BTUUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgQ29uZGl0aW9uRGF0YSA9IFNoYWRvd3J1bi5Db25kaXRpb25EYXRhO1xyXG5pbXBvcnQgeyBTUjVJdGVtRGF0YVdyYXBwZXIgfSBmcm9tICcuL1NSNUl0ZW1EYXRhV3JhcHBlcic7XHJcbmltcG9ydCBTUjVJdGVtVHlwZSA9IFNoYWRvd3J1bi5TUjVJdGVtVHlwZTtcclxuaW1wb3J0IHsgUGFydHNMaXN0IH0gZnJvbSAnLi4vcGFydHMvUGFydHNMaXN0JztcclxuXHJcbmV4cG9ydCBjbGFzcyBTUjVJdGVtIGV4dGVuZHMgSXRlbSB7XHJcbiAgICBsYWJlbHM6IHt9ID0ge307XHJcbiAgICBpdGVtczogU1I1SXRlbVtdO1xyXG4gICAgYWN0b3I6IFNSNUFjdG9yO1xyXG5cclxuICAgIHByaXZhdGUgZ2V0IHdyYXBwZXIoKTogU1I1SXRlbURhdGFXcmFwcGVyIHtcclxuICAgICAgICAvLyB3ZSBuZWVkIHRvIGNhc3QgaGVyZSB0byB1bmtub3duIGZpcnN0IHRvIG1ha2UgdHMgaGFwcHlcclxuICAgICAgICByZXR1cm4gbmV3IFNSNUl0ZW1EYXRhV3JhcHBlcigodGhpcy5kYXRhIGFzIHVua25vd24pIGFzIFNSNUl0ZW1UeXBlKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBGbGFnIEZ1bmN0aW9uc1xyXG4gICAgZ2V0TGFzdEZpcmVNb2RlKCk6IEZpcmVNb2RlRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmxhZyhTWVNURU1fTkFNRSwgJ2xhc3RGaXJlTW9kZScpIHx8IHsgdmFsdWU6IDAgfTtcclxuICAgIH1cclxuICAgIGFzeW5jIHNldExhc3RGaXJlTW9kZShmaXJlTW9kZTogRmlyZU1vZGVEYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0RmxhZyhTWVNURU1fTkFNRSwgJ2xhc3RGaXJlTW9kZScsIGZpcmVNb2RlKTtcclxuICAgIH1cclxuICAgIGdldExhc3RTcGVsbEZvcmNlKCk6IFNwZWxsRm9yY2VEYXRhIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRGbGFnKFNZU1RFTV9OQU1FLCAnbGFzdFNwZWxsRm9yY2UnKSB8fCB7IHZhbHVlOiAwIH07XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZXRMYXN0U3BlbGxGb3JjZShmb3JjZTogU3BlbGxGb3JjZURhdGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRGbGFnKFNZU1RFTV9OQU1FLCAnbGFzdFNwZWxsRm9yY2UnLCBmb3JjZSk7XHJcbiAgICB9XHJcbiAgICBnZXRMYXN0Q29tcGxleEZvcm1MZXZlbCgpOiBDb21wbGV4Rm9ybUxldmVsRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RmxhZyhTWVNURU1fTkFNRSwgJ2xhc3RDb21wbGV4Rm9ybUxldmVsJykgfHwgeyB2YWx1ZTogMCB9O1xyXG4gICAgfVxyXG4gICAgYXN5bmMgc2V0TGFzdENvbXBsZXhGb3JtTGV2ZWwobGV2ZWw6IENvbXBsZXhGb3JtTGV2ZWxEYXRhKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc2V0RmxhZyhTWVNURU1fTkFNRSwgJ2xhc3RDb21wbGV4Rm9ybUxldmVsJywgbGV2ZWwpO1xyXG4gICAgfVxyXG4gICAgZ2V0TGFzdEZpcmVSYW5nZU1vZCgpOiBGaXJlUmFuZ2VEYXRhIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRGbGFnKFNZU1RFTV9OQU1FLCAnbGFzdEZpcmVSYW5nZScpIHx8IHsgdmFsdWU6IDAgfTtcclxuICAgIH1cclxuICAgIGFzeW5jIHNldExhc3RGaXJlUmFuZ2VNb2QoZW52aXJvbm1lbnRhbE1vZDogRmlyZVJhbmdlRGF0YSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnNldEZsYWcoU1lTVEVNX05BTUUsICdsYXN0RmlyZVJhbmdlJywgZW52aXJvbm1lbnRhbE1vZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm4gYW4gQXJyYXkgb2YgdGhlIEVtYmVkZGVkIEl0ZW0gRGF0YVxyXG4gICAgICogVE9ETyBwcm9wZXJseSB0eXBlcyB0aGlzXHJcbiAgICAgKi9cclxuICAgIGdldEVtYmVkZGVkSXRlbXMoKTogYW55W10ge1xyXG4gICAgICAgIGxldCBpdGVtcyA9IHRoaXMuZ2V0RmxhZyhTWVNURU1fTkFNRSwgJ2VtYmVkZGVkSXRlbXMnKTtcclxuICAgICAgICBpZiAoaXRlbXMpIHtcclxuICAgICAgICAgICAgLy8gbW92ZWQgdGhpcyBcImhvdGZpeFwiIHRvIGhlcmUgc28gdGhhdCBldmVyeXdoZXJlIHRoYXQgYWNjZXNzZXMgdGhlIGZsYWcganVzdCBnZXRzIGFuIGFycmF5IC0tIFNoYXduXHJcbiAgICAgICAgICAgIC8vVE9ETzogVGhpcyBpcyBhIGhvdGZpeC4gSXRlbXMgc2hvdWxkIGVpdGhlciBhbHdheXMgYmVcclxuICAgICAgICAgICAgLy8gc3RvcmVkIGFzIGFuIGFycmF5IG9yIGFsd2F5cyBiZSBzdG9yZWQgYXMgYSBvYmplY3QuXHJcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpdGVtcykpIHtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdJdGVtczogYW55W10gPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGl0ZW1zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ld0l0ZW1zLnB1c2goaXRlbXNba2V5XSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3SXRlbXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgdGhlIGVtYmVkZGVkIGl0ZW0gZGF0YVxyXG4gICAgICogQHBhcmFtIGl0ZW1zXHJcbiAgICAgKi9cclxuICAgIGFzeW5jIHNldEVtYmVkZGVkSXRlbXMoaXRlbXM6IGFueVtdKSB7XHJcbiAgICAgICAgLy8gY2xlYXIgdGhlIGZsYWcgZmlyc3QgdG8gcmVtb3ZlIHRoZSBwcmV2aW91cyBpdGVtcyAtIGlmIHdlIGRvbid0IGRvIHRoaXMgdGhlbiBpdCBkb2Vzbid0IGFjdHVhbGx5IFwiZGVsZXRlXCIgYW55IGl0ZW1zXHJcbiAgICAgICAgYXdhaXQgdGhpcy51bnNldEZsYWcoU1lTVEVNX05BTUUsICdlbWJlZGRlZEl0ZW1zJyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5zZXRGbGFnKFNZU1RFTV9OQU1FLCAnZW1iZWRkZWRJdGVtcycsIGl0ZW1zKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMYXN0QXR0YWNrKCk6IEF0dGFja0RhdGEgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldEZsYWcoU1lTVEVNX05BTUUsICdsYXN0QXR0YWNrJyk7XHJcbiAgICB9XHJcbiAgICBhc3luYyBzZXRMYXN0QXR0YWNrKGF0dGFjazogQXR0YWNrRGF0YSkge1xyXG4gICAgICAgIC8vIHVuc2V0IHRoZSBmbGFnIGZpcnN0IHRvIGNsZWFyIG9sZCBkYXRhLCBkYXRhIGNhbiBnZXQgd2VpcmQgaWYgbm90IGRvbmVcclxuICAgICAgICBhd2FpdCB0aGlzLnVuc2V0RmxhZyhTWVNURU1fTkFNRSwgJ2xhc3RBdHRhY2snKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5zZXRGbGFnKFNZU1RFTV9OQU1FLCAnbGFzdEF0dGFjaycsIGF0dGFjayk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBkYXRlKGRhdGEsIG9wdGlvbnM/KSB7XHJcbiAgICAgICAgY29uc3QgcmV0ID0gc3VwZXIudXBkYXRlKGRhdGEsIG9wdGlvbnMpO1xyXG4gICAgICAgIHJldC50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYWN0b3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWN0b3IucmVuZGVyKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gcmV0O1xyXG4gICAgfVxyXG4gICAgZ2V0IGhhc09wcG9zZWRSb2xsKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiAhISh0aGlzLmRhdGEuZGF0YS5hY3Rpb24gJiYgdGhpcy5kYXRhLmRhdGEuYWN0aW9uLm9wcG9zZWQudHlwZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc1JvbGwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgeyBhY3Rpb24gfSA9IHRoaXMuZGF0YS5kYXRhO1xyXG4gICAgICAgIHJldHVybiAhIShhY3Rpb24gJiYgYWN0aW9uLnR5cGUgIT09ICcnICYmIChhY3Rpb24uc2tpbGwgfHwgYWN0aW9uLmF0dHJpYnV0ZSkpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGhhc1RlbXBsYXRlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmlzQXJlYU9mRWZmZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZURhdGEoKSB7XHJcbiAgICAgICAgc3VwZXIucHJlcGFyZURhdGEoKTtcclxuICAgICAgICBjb25zdCBsYWJlbHMgPSB7fTtcclxuICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5kYXRhO1xyXG5cclxuICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnc2luJykge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGl0ZW0uZGF0YS5saWNlbnNlcyA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uZGF0YS5saWNlbnNlcyA9IE9iamVjdC52YWx1ZXMoaXRlbS5kYXRhLmxpY2Vuc2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBlcXVpcHBlZE1vZHMgPSB0aGlzLmdldEVxdWlwcGVkTW9kcygpO1xyXG4gICAgICAgIGNvbnN0IGVxdWlwcGVkQW1tbyA9IHRoaXMuZ2V0RXF1aXBwZWRBbW1vKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgdGVjaG5vbG9neSwgcmFuZ2UsIGFjdGlvbiB9ID0gaXRlbS5kYXRhO1xyXG5cclxuICAgICAgICBpZiAodGVjaG5vbG9neSkge1xyXG4gICAgICAgICAgICBpZiAodGVjaG5vbG9neS5jb25kaXRpb25fbW9uaXRvciA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICB0ZWNobm9sb2d5LmNvbmRpdGlvbl9tb25pdG9yID0geyB2YWx1ZTogMCB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRlY2hub2xvZ3kuY29uZGl0aW9uX21vbml0b3IubWF4ID0gOCArIE1hdGguY2VpbCh0ZWNobm9sb2d5LnJhdGluZyAvIDIpO1xyXG5cclxuICAgICAgICAgICAgaWYgKCF0ZWNobm9sb2d5LmNvbmNlYWwpIHRlY2hub2xvZ3kuY29uY2VhbCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29uY2VhbFBhcnRzID0gbmV3IFBhcnRzTGlzdDxudW1iZXI+KCk7XHJcbiAgICAgICAgICAgIGVxdWlwcGVkTW9kcy5mb3JFYWNoKChtb2QpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChtb2QuZGF0YS5kYXRhLnRlY2hub2xvZ3kuY29uY2VhbC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbmNlYWxQYXJ0cy5hZGRVbmlxdWVQYXJ0KG1vZC5uYW1lLCBtb2QuZGF0YS5kYXRhLnRlY2hub2xvZ3kuY29uY2VhbC52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0ZWNobm9sb2d5LmNvbmNlYWwubW9kID0gY29uY2VhbFBhcnRzLmxpc3Q7XHJcblxyXG4gICAgICAgICAgICB0ZWNobm9sb2d5LmNvbmNlYWwudmFsdWUgPSBIZWxwZXJzLmNhbGNUb3RhbCh0ZWNobm9sb2d5LmNvbmNlYWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGFjdGlvbikge1xyXG4gICAgICAgICAgICBhY3Rpb24uYWx0X21vZCA9IDA7XHJcbiAgICAgICAgICAgIGFjdGlvbi5saW1pdC5tb2QgPSBbXTtcclxuICAgICAgICAgICAgYWN0aW9uLmRhbWFnZS5tb2QgPSBbXTtcclxuICAgICAgICAgICAgYWN0aW9uLmRhbWFnZS5hcC5tb2QgPSBbXTtcclxuICAgICAgICAgICAgYWN0aW9uLmRpY2VfcG9vbF9tb2QgPSBbXTtcclxuICAgICAgICAgICAgLy8gaGFuZGxlIG92ZXJyaWRlcyBmcm9tIG1vZHNcclxuICAgICAgICAgICAgY29uc3QgbGltaXRQYXJ0cyA9IG5ldyBQYXJ0c0xpc3QoYWN0aW9uLmxpbWl0Lm1vZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGRwUGFydHMgPSBuZXcgUGFydHNMaXN0KGFjdGlvbi5kaWNlX3Bvb2xfbW9kKTtcclxuICAgICAgICAgICAgZXF1aXBwZWRNb2RzLmZvckVhY2goKG1vZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG1vZC5kYXRhLmRhdGEuYWNjdXJhY3kpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaW1pdFBhcnRzLmFkZFVuaXF1ZVBhcnQobW9kLm5hbWUsIG1vZC5kYXRhLmRhdGEuYWNjdXJhY3kpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG1vZC5kYXRhLmRhdGEuZGljZV9wb29sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHBQYXJ0cy5hZGRVbmlxdWVQYXJ0KG1vZC5uYW1lLCBtb2QuZGF0YS5kYXRhLmRpY2VfcG9vbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGVxdWlwcGVkQW1tbykge1xyXG4gICAgICAgICAgICAgICAgLy8gYWRkIG1vZHMgdG8gZGFtYWdlIGZyb20gYW1tb1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uLmRhbWFnZS5tb2QgPSBQYXJ0c0xpc3QuQWRkVW5pcXVlUGFydChhY3Rpb24uZGFtYWdlLm1vZCwgZXF1aXBwZWRBbW1vLm5hbWUsIGVxdWlwcGVkQW1tby5kYXRhLmRhdGEuZGFtYWdlKTtcclxuICAgICAgICAgICAgICAgIC8vIGFkZCBtb2RzIHRvIGFwIGZyb20gYW1tb1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uLmRhbWFnZS5hcC5tb2QgPSBQYXJ0c0xpc3QuQWRkVW5pcXVlUGFydChhY3Rpb24uZGFtYWdlLmFwLm1vZCwgZXF1aXBwZWRBbW1vLm5hbWUsIGVxdWlwcGVkQW1tby5kYXRhLmRhdGEuYXApO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIG92ZXJyaWRlIGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIGlmIChlcXVpcHBlZEFtbW8uZGF0YS5kYXRhLmVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uZGFtYWdlLmVsZW1lbnQudmFsdWUgPSBlcXVpcHBlZEFtbW8uZGF0YS5kYXRhLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5kYW1hZ2UuZWxlbWVudC52YWx1ZSA9IGFjdGlvbi5kYW1hZ2UuZWxlbWVudC5iYXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIG92ZXJyaWRlIGRhbWFnZSB0eXBlXHJcbiAgICAgICAgICAgICAgICBpZiAoZXF1aXBwZWRBbW1vLmRhdGEuZGF0YS5kYW1hZ2VUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmRhbWFnZS50eXBlLnZhbHVlID0gZXF1aXBwZWRBbW1vLmRhdGEuZGF0YS5kYW1hZ2VUeXBlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24uZGFtYWdlLnR5cGUudmFsdWUgPSBhY3Rpb24uZGFtYWdlLnR5cGUuYmFzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHNldCB2YWx1ZSBpZiB3ZSBkb24ndCBoYXZlIGl0ZW0gb3ZlcnJpZGVzXHJcbiAgICAgICAgICAgICAgICBhY3Rpb24uZGFtYWdlLmVsZW1lbnQudmFsdWUgPSBhY3Rpb24uZGFtYWdlLmVsZW1lbnQuYmFzZTtcclxuICAgICAgICAgICAgICAgIGFjdGlvbi5kYW1hZ2UudHlwZS52YWx1ZSA9IGFjdGlvbi5kYW1hZ2UudHlwZS5iYXNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBvbmNlIGFsbCBkYW1hZ2UgbW9kcyBoYXZlIGJlZW4gYWNjb3VudGVkIGZvciwgc3VtIGJhc2UgYW5kIG1vZCB0byB2YWx1ZVxyXG4gICAgICAgICAgICBhY3Rpb24uZGFtYWdlLnZhbHVlID0gSGVscGVycy5jYWxjVG90YWwoYWN0aW9uLmRhbWFnZSk7XHJcbiAgICAgICAgICAgIGFjdGlvbi5kYW1hZ2UuYXAudmFsdWUgPSBIZWxwZXJzLmNhbGNUb3RhbChhY3Rpb24uZGFtYWdlLmFwKTtcclxuXHJcbiAgICAgICAgICAgIGFjdGlvbi5saW1pdC52YWx1ZSA9IEhlbHBlcnMuY2FsY1RvdGFsKGFjdGlvbi5saW1pdCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5hY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5kYW1hZ2UuYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBhdHRyaWJ1dGUgfSA9IGFjdGlvbi5kYW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVE9ETyBjb252ZXJ0IHRoaXMgaW4gdGhlIHRlbXBsYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmRhbWFnZS5tb2QgPSBQYXJ0c0xpc3QuQWRkVW5pcXVlUGFydChcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uLmRhbWFnZS5tb2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LmF0dHJpYnV0ZXNbYXR0cmlidXRlXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0b3IuZmluZEF0dHJpYnV0ZShhdHRyaWJ1dGUpPy52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbi5kYW1hZ2UudmFsdWUgPSBIZWxwZXJzLmNhbGNUb3RhbChhY3Rpb24uZGFtYWdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ubGltaXQuYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyBhdHRyaWJ1dGUgfSA9IGFjdGlvbi5saW1pdDtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPIGNvbnZlcnQgdGhpcyBpbiB0aGUgdGVtcGxhdGVcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubGltaXQubW9kID0gUGFydHNMaXN0LkFkZFVuaXF1ZVBhcnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbi5saW1pdC5tb2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdhbWUuaTE4bi5sb2NhbGl6ZShDT05GSUcuU1I1LmxpbWl0c1thdHRyaWJ1dGVdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rvci5maW5kTGltaXQoYXR0cmlidXRlKT8udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb24ubGltaXQudmFsdWUgPSBIZWxwZXJzLmNhbGNUb3RhbChhY3Rpb24ubGltaXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAocmFuZ2UpIHtcclxuICAgICAgICAgICAgaWYgKHJhbmdlLnJjKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByYW5nZVBhcnRzID0gbmV3IFBhcnRzTGlzdCgpO1xyXG4gICAgICAgICAgICAgICAgZXF1aXBwZWRNb2RzLmZvckVhY2goKG1vZCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtb2QuZGF0YS5kYXRhLnJjKSByYW5nZVBhcnRzLmFkZFVuaXF1ZVBhcnQobW9kLm5hbWUsIG1vZC5kYXRhLmRhdGEucmMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBvdmVycmlkZXMgZnJvbSBhbW1vXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJhbmdlLnJjLm1vZCA9IHJhbmdlUGFydHMubGlzdDtcclxuICAgICAgICAgICAgICAgIGlmIChyYW5nZS5yYykgcmFuZ2UucmMudmFsdWUgPSBIZWxwZXJzLmNhbGNUb3RhbChyYW5nZS5yYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpdGVtLnR5cGUgPT09ICdhZGVwdF9wb3dlcicpIHtcclxuICAgICAgICAgICAgaXRlbS5kYXRhLnR5cGUgPSBpdGVtLmRhdGEuYWN0aW9uPy50eXBlID8gJ2FjdGl2ZScgOiAncGFzc2l2ZSc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxhYmVscyA9IGxhYmVscztcclxuICAgICAgICBpdGVtWydwcm9wZXJ0aWVzJ10gPSB0aGlzLmdldENoYXREYXRhKCkucHJvcGVydGllcztcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBwb3N0Q2FyZChldmVudD8pIHtcclxuICAgICAgICAvLyB3ZSB3b24ndCB3b3JrIGlmIHdlIGRvbid0IGhhdmUgYW4gYWN0b3JcclxuICAgICAgICBpZiAoIXRoaXMuYWN0b3IpIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3QgcG9zdE9ubHkgPSBldmVudD8uc2hpZnRLZXkgfHwgIXRoaXMuaGFzUm9sbDtcclxuXHJcbiAgICAgICAgY29uc3QgcG9zdCA9IChib251cyA9IHt9KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGlmIG9ubHkgcG9zdCwgZG9uJ3Qgcm9sbCBhbmQgcG9zdCBhIGNhcmQgdmVyc2lvbiAtLSBvdGhlcndpc2Ugcm9sbFxyXG4gICAgICAgICAgICBpZiAocG9zdE9ubHkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdG9rZW4gfSA9IHRoaXMuYWN0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRhY2sgPSB0aGlzLmdldEF0dGFja0RhdGEoMCk7XHJcbiAgICAgICAgICAgICAgICAvLyBkb24ndCBpbmNsdWRlIGFueSBoaXRzXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYXR0YWNrPy5oaXRzO1xyXG4gICAgICAgICAgICAgICAgLy8gZ2VuZXJhdGUgY2hhdCBkYXRhXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVDaGF0RGF0YSh7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1nOiB0aGlzLmltZyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRlc3ROYW1lOiB0aGlzLmdldFJvbGxOYW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0b3I6IHRoaXMuYWN0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgdG9rZW5JZDogdG9rZW4gPyBgJHt0b2tlbi5zY2VuZS5faWR9LiR7dG9rZW4uaWR9YCA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogdGhpcy5nZXRDaGF0RGF0YSgpLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW06IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlld1RlbXBsYXRlOiB0aGlzLmhhc1RlbXBsYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dGFjayxcclxuICAgICAgICAgICAgICAgICAgICAuLi5ib251cyxcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKGNoYXREYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY3JlYXRlIHRoZSBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSwgeyBkaXNwbGF5U2hlZXQ6IGZhbHNlIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvbGxUZXN0KGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgLy8gcHJvbXB0IHVzZXIgaWYgbmVlZGVkXHJcbiAgICAgICAgY29uc3QgZGlhbG9nRGF0YSA9IGF3YWl0IFNoYWRvd3J1bkl0ZW1EaWFsb2cuZnJvbUl0ZW0odGhpcywgZXZlbnQpO1xyXG4gICAgICAgIGlmIChkaWFsb2dEYXRhKSB7XHJcbiAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2Ygb2xkIGNsb3NlIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgIGNvbnN0IG9sZENsb3NlID0gZGlhbG9nRGF0YS5jbG9zZTtcclxuICAgICAgICAgICAgLy8gY2FsbCBwb3N0KCkgYWZ0ZXIgZGlhbG9nIGNsb3Nlc1xyXG4gICAgICAgICAgICBkaWFsb2dEYXRhLmNsb3NlID0gYXN5bmMgKGh0bWwpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvbGRDbG9zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBvbGRDbG9zZSB3ZSBwdXQgb24gdGhlIGRpYWxvZyB3aWxsIHJldHVybiBhIGJvb2xlYW5cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXQgPSAoKGF3YWl0IG9sZENsb3NlKGh0bWwpKSBhcyB1bmtub3duKSBhcyBib29sZWFuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcmV0KSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBwb3N0KCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGlhbG9nKGRpYWxvZ0RhdGEpLnJlbmRlcih0cnVlKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwb3N0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldENoYXREYXRhKGh0bWxPcHRpb25zPykge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBkdXBsaWNhdGUodGhpcy5kYXRhLmRhdGEpO1xyXG4gICAgICAgIGNvbnN0IHsgbGFiZWxzIH0gPSB0aGlzO1xyXG4gICAgICAgIGlmICghZGF0YS5kZXNjcmlwdGlvbikgZGF0YS5kZXNjcmlwdGlvbiA9IHt9O1xyXG5cclxuICAgICAgICBkYXRhLmRlc2NyaXB0aW9uLnZhbHVlID0gVGV4dEVkaXRvci5lbnJpY2hIVE1MKGRhdGEuZGVzY3JpcHRpb24udmFsdWUsIGh0bWxPcHRpb25zKTtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvcHMgPSBbXTtcclxuICAgICAgICBjb25zdCBmdW5jID0gQ2hhdERhdGFbdGhpcy5kYXRhLnR5cGVdO1xyXG4gICAgICAgIGlmIChmdW5jKSBmdW5jKGR1cGxpY2F0ZShkYXRhKSwgbGFiZWxzLCBwcm9wcywgdGhpcyk7XHJcblxyXG4gICAgICAgIGRhdGEucHJvcGVydGllcyA9IHByb3BzLmZpbHRlcigocCkgPT4gISFwKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T3Bwb3NlZFRlc3ROYW1lKCk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IG5hbWUgPSAnJztcclxuICAgICAgICBpZiAodGhpcy5kYXRhLmRhdGEuYWN0aW9uPy5vcHBvc2VkPy50eXBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgb3Bwb3NlZCB9ID0gdGhpcy5kYXRhLmRhdGEuYWN0aW9uO1xyXG4gICAgICAgICAgICBpZiAob3Bwb3NlZC50eXBlICE9PSAnY3VzdG9tJykge1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IGAke0hlbHBlcnMubGFiZWwob3Bwb3NlZC50eXBlKX1gO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wcG9zZWQuc2tpbGwpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBgJHtIZWxwZXJzLmxhYmVsKG9wcG9zZWQuc2tpbGwpfSske0hlbHBlcnMubGFiZWwob3Bwb3NlZC5hdHRyaWJ1dGUpfWA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3Bwb3NlZC5hdHRyaWJ1dGUyKSB7XHJcbiAgICAgICAgICAgICAgICBuYW1lID0gYCR7SGVscGVycy5sYWJlbChvcHBvc2VkLmF0dHJpYnV0ZSl9KyR7SGVscGVycy5sYWJlbChvcHBvc2VkLmF0dHJpYnV0ZTIpfWA7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3Bwb3NlZC5hdHRyaWJ1dGUpIHtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSBgJHtIZWxwZXJzLmxhYmVsKG9wcG9zZWQuYXR0cmlidXRlKX1gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG1vZCA9IHRoaXMuZ2V0T3Bwb3NlZFRlc3RNb2RpZmllcigpO1xyXG4gICAgICAgIGlmIChtb2QpIG5hbWUgKz0gYCAke21vZH1gO1xyXG4gICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9wcG9zZWRUZXN0TW9kKCk6IFBhcnRzTGlzdDxudW1iZXI+IHtcclxuICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3Q8bnVtYmVyPigpO1xyXG4gICAgICAgIGlmICh0aGlzLmhhc0RlZmVuc2VUZXN0KCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNBcmVhT2ZFZmZlY3QoKSkge1xyXG4gICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LkFvZScsIC0yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc1JhbmdlZFdlYXBvbigpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJlTW9kZURhdGEgPSB0aGlzLmdldExhc3RGaXJlTW9kZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpcmVNb2RlRGF0YT8uZGVmZW5zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaXJlTW9kZURhdGEuZGVmZW5zZSAhPT0gJ1NSNS5EdWNrT3JDb3ZlcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyZU1vZGUgPSArZmlyZU1vZGVEYXRhLmRlZmVuc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5GaXJlTW9kZScsIGZpcmVNb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhcnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGdldE9wcG9zZWRUZXN0TW9kaWZpZXIoKTogc3RyaW5nIHtcclxuICAgICAgICBjb25zdCB0ZXN0TW9kID0gdGhpcy5nZXRPcHBvc2VkVGVzdE1vZCgpO1xyXG4gICAgICAgIGNvbnN0IHRvdGFsID0gdGVzdE1vZC50b3RhbDtcclxuICAgICAgICBpZiAodG90YWwpIHJldHVybiBgKCR7dG90YWx9KWA7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUmFuZ2VkV2VhcG9uKCkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpcmVNb2RlRGF0YSA9IHRoaXMuZ2V0TGFzdEZpcmVNb2RlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmlyZU1vZGVEYXRhPy5kZWZlbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpcmVNb2RlRGF0YS5kZWZlbnNlID09PSAnU1I1LkR1Y2tPckNvdmVyJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuRHVja09yQ292ZXInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJsYXN0RGF0YSgpOiBCbGFzdERhdGEgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIC8vIGNhbiBvbmx5IGhhbmRsZSBzcGVsbHMgYW5kIGdyZW5hZGUgcmlnaHQgbm93XHJcbiAgICAgICAgaWYgKHRoaXMuaXNTcGVsbCgpICYmIHRoaXMuaXNBcmVhT2ZFZmZlY3QoKSkge1xyXG4gICAgICAgICAgICAvLyBkaXN0YW5jZSBvbiBzcGVsbHMgaXMgZXF1YWwgdG8gZm9yY2VcclxuICAgICAgICAgICAgbGV0IGRpc3RhbmNlID0gdGhpcy5nZXRMYXN0U3BlbGxGb3JjZSgpLnZhbHVlO1xyXG4gICAgICAgICAgICAvLyBleHRlbmRlZCBzcGVsbHMgbXVsdGlwbHkgYnkgMTBcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGF0YS5kYXRhLmV4dGVuZGVkKSBkaXN0YW5jZSAqPSAxMDtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHJhZGl1czogZGlzdGFuY2UsXHJcbiAgICAgICAgICAgICAgICBkcm9wb2ZmOiAwLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0dyZW5hZGUoKSkge1xyXG4gICAgICAgICAgICAvLyB1c2UgYmxhc3QgcmFkaXVzXHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlID0gdGhpcy5kYXRhLmRhdGEudGhyb3duLmJsYXN0LnJhZGl1cztcclxuICAgICAgICAgICAgY29uc3QgZHJvcG9mZiA9IHRoaXMuZGF0YS5kYXRhLnRocm93bi5ibGFzdC5kcm9wb2ZmO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBkaXN0YW5jZSxcclxuICAgICAgICAgICAgICAgIGRyb3BvZmY6IGRyb3BvZmYsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmhhc0V4cGxvc2l2ZUFtbW8oKSkge1xyXG4gICAgICAgICAgICBjb25zdCBhbW1vID0gdGhpcy5nZXRFcXVpcHBlZEFtbW8oKTtcclxuICAgICAgICAgICAgY29uc3QgZGlzdGFuY2UgPSBhbW1vLmRhdGEuZGF0YS5ibGFzdC5yYWRpdXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGRyb3BvZmYgPSBhbW1vLmRhdGEuZGF0YS5ibGFzdC5kcm9wb2ZmO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgcmFkaXVzOiBkaXN0YW5jZSxcclxuICAgICAgICAgICAgICAgIGRyb3BvZmYsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGdldEVxdWlwcGVkQW1tbygpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuaXRlbXMgfHwgW10pLmZpbHRlcigoaXRlbSkgPT4gaXRlbS50eXBlID09PSAnYW1tbycgJiYgaXRlbS5kYXRhLmRhdGE/LnRlY2hub2xvZ3k/LmVxdWlwcGVkKVswXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFcXVpcHBlZE1vZHMoKSB7XHJcbiAgICAgICAgcmV0dXJuICh0aGlzLml0ZW1zIHx8IFtdKS5maWx0ZXIoKGl0ZW0pID0+IGl0ZW0udHlwZSA9PT0gJ21vZGlmaWNhdGlvbicgJiYgaXRlbS5kYXRhLmRhdGEudHlwZSA9PT0gJ3dlYXBvbicgJiYgaXRlbS5kYXRhLmRhdGE/LnRlY2hub2xvZ3k/LmVxdWlwcGVkKTtcclxuICAgIH1cclxuXHJcbiAgICBoYXNFeHBsb3NpdmVBbW1vKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGNvbnN0IGFtbW8gPSB0aGlzLmdldEVxdWlwcGVkQW1tbygpO1xyXG4gICAgICAgIHJldHVybiBhbW1vPy5kYXRhPy5kYXRhPy5ibGFzdD8ucmFkaXVzID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlcXVpcFdlYXBvbk1vZChpaWQpIHtcclxuICAgICAgICBjb25zdCBtb2QgPSB0aGlzLmdldE93bmVkSXRlbShpaWQpO1xyXG4gICAgICAgIGlmIChtb2QpIHtcclxuICAgICAgICAgICAgY29uc3QgZHVwRGF0YSA9IGR1cGxpY2F0ZShtb2QuZGF0YSk7XHJcbiAgICAgICAgICAgIGR1cERhdGEuZGF0YS50ZWNobm9sb2d5LmVxdWlwcGVkID0gIWR1cERhdGEuZGF0YS50ZWNobm9sb2d5LmVxdWlwcGVkO1xyXG4gICAgICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZU93bmVkSXRlbShkdXBEYXRhKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc0FtbW8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLmFtbW8gIT09IHVuZGVmaW5lZDtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyB1c2VBbW1vKGZpcmVNb2RlKSB7XHJcbiAgICAgICAgY29uc3QgZHVwRGF0YSA9IGR1cGxpY2F0ZSh0aGlzLmRhdGEpO1xyXG4gICAgICAgIGNvbnN0IHsgYW1tbyB9ID0gZHVwRGF0YS5kYXRhO1xyXG4gICAgICAgIGlmIChhbW1vKSB7XHJcbiAgICAgICAgICAgIGFtbW8uY3VycmVudC52YWx1ZSA9IE1hdGgubWF4KDAsIGFtbW8uY3VycmVudC52YWx1ZSAtIGZpcmVNb2RlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlKGR1cERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByZWxvYWRBbW1vKCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBkdXBsaWNhdGUodGhpcy5kYXRhKTtcclxuICAgICAgICBjb25zdCB7IGFtbW8gfSA9IGRhdGEuZGF0YTtcclxuICAgICAgICBjb25zdCBkaWZmID0gYW1tby5jdXJyZW50Lm1heCAtIGFtbW8uY3VycmVudC52YWx1ZTtcclxuICAgICAgICBhbW1vLmN1cnJlbnQudmFsdWUgPSBhbW1vLmN1cnJlbnQubWF4O1xyXG5cclxuICAgICAgICBpZiAoYW1tby5zcGFyZV9jbGlwcykge1xyXG4gICAgICAgICAgICBhbW1vLnNwYXJlX2NsaXBzLnZhbHVlID0gTWF0aC5tYXgoMCwgYW1tby5zcGFyZV9jbGlwcy52YWx1ZSAtIDEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCB0aGlzLnVwZGF0ZShkYXRhKTtcclxuXHJcbiAgICAgICAgY29uc3QgbmV3QW1tdW5pdGlvbiA9ICh0aGlzLml0ZW1zIHx8IFtdKVxyXG4gICAgICAgICAgICAuZmlsdGVyKChpKSA9PiBpLmRhdGEudHlwZSA9PT0gJ2FtbW8nKVxyXG4gICAgICAgICAgICAucmVkdWNlKChhY2M6IEJhc2VFbnRpdHlEYXRhW10sIGl0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGVjaG5vbG9neSB9ID0gaXRlbS5kYXRhLmRhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAodGVjaG5vbG9neS5lcXVpcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHF0eSA9IHRlY2hub2xvZ3kucXVhbnRpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVjaG5vbG9neS5xdWFudGl0eSA9IE1hdGgubWF4KDAsIHF0eSAtIGRpZmYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFjYy5wdXNoKGl0ZW0uZGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xyXG4gICAgICAgICAgICB9LCBbXSk7XHJcbiAgICAgICAgaWYgKG5ld0FtbXVuaXRpb24ubGVuZ3RoKSBhd2FpdCB0aGlzLnVwZGF0ZU93bmVkSXRlbShuZXdBbW11bml0aW9uKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBlcXVpcEFtbW8oaWlkKSB7XHJcbiAgICAgICAgLy8gb25seSBhbGxvdyBhbW1vIHRoYXQgd2FzIGp1c3QgY2xpY2tlZCB0byBiZSBlcXVpcHBlZFxyXG4gICAgICAgIGNvbnN0IGFtbW8gPSB0aGlzLml0ZW1zXHJcbiAgICAgICAgICAgID8uZmlsdGVyKChpdGVtKSA9PiBpdGVtLnR5cGUgPT09ICdhbW1vJylcclxuICAgICAgICAgICAgLm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0T3duZWRJdGVtKGl0ZW0uX2lkKTtcclxuICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5kYXRhLmRhdGEudGVjaG5vbG9neS5lcXVpcHBlZCA9IGlpZCA9PT0gaXRlbS5faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuZGF0YTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVPd25lZEl0ZW0oYW1tbyk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkTmV3TGljZW5zZSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gZHVwbGljYXRlKHRoaXMuZGF0YSk7XHJcbiAgICAgICAgY29uc3QgeyBsaWNlbnNlcyB9ID0gZGF0YS5kYXRhO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbGljZW5zZXMgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgIGRhdGEuZGF0YS5saWNlbnNlcyA9IE9iamVjdC52YWx1ZXMobGljZW5zZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRhLmRhdGEubGljZW5zZXMucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICcnLFxyXG4gICAgICAgICAgICBydGc6ICcnLFxyXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJycsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGUoZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Um9sbFBhcnRzTGlzdCgpOiBNb2RMaXN0PG51bWJlcj4ge1xyXG4gICAgICAgIC8vIHdlIG9ubHkgaGF2ZSBhIHJvbGwgaWYgd2UgaGF2ZSBhbiBhY3Rpb24gb3IgYW4gYWN0b3JcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5kYXRhLmFjdGlvbiB8fCAhdGhpcy5hY3RvcikgcmV0dXJuIFtdO1xyXG5cclxuICAgICAgICBjb25zdCBwYXJ0cyA9IG5ldyBQYXJ0c0xpc3QoZHVwbGljYXRlKHRoaXMuZ2V0TW9kaWZpZXJMaXN0KCkpKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc2tpbGwgPSB0aGlzLmFjdG9yLmZpbmRBY3RpdmVTa2lsbCh0aGlzLmdldEFjdGlvblNraWxsKCkpO1xyXG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IHRoaXMuYWN0b3IuZmluZEF0dHJpYnV0ZSh0aGlzLmdldEFjdGlvbkF0dHJpYnV0ZSgpKTtcclxuICAgICAgICBjb25zdCBhdHRyaWJ1dGUyID0gdGhpcy5hY3Rvci5maW5kQXR0cmlidXRlKHRoaXMuZ2V0QWN0aW9uQXR0cmlidXRlMigpKTtcclxuXHJcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAmJiBhdHRyaWJ1dGUubGFiZWwpIHBhcnRzLmFkZFBhcnQoYXR0cmlidXRlLmxhYmVsLCBhdHRyaWJ1dGUudmFsdWUpO1xyXG5cclxuICAgICAgICAvLyBpZiB3ZSBoYXZlIGEgdmFsaWQgc2tpbGwsIGRvbid0IGxvb2sgZm9yIGEgc2Vjb25kIGF0dHJpYnV0ZVxyXG4gICAgICAgIGlmIChza2lsbCAmJiBza2lsbC5sYWJlbCkge1xyXG4gICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KHNraWxsLmxhYmVsLCBza2lsbC52YWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChza2lsbC52YWx1ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LkRlZmF1bHRpbmcnLCAtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZTIgJiYgYXR0cmlidXRlMi5sYWJlbCkgcGFydHMuYWRkVW5pcXVlUGFydChhdHRyaWJ1dGUyLmxhYmVsLCBhdHRyaWJ1dGUyLnZhbHVlKTtcclxuXHJcbiAgICAgICAgY29uc3Qgc3BlYyA9IHRoaXMuZ2V0QWN0aW9uU3BlY2lhbGl6YXRpb24oKTtcclxuICAgICAgICBpZiAoc3BlYykgcGFydHMuYWRkVW5pcXVlUGFydChzcGVjLCAyKTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9kID0gcGFyc2VJbnQodGhpcy5kYXRhLmRhdGEuYWN0aW9uLm1vZCB8fCAwKTtcclxuICAgICAgICBpZiAobW9kKSBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuSXRlbU1vZCcsIG1vZCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGF0dHM6IChBdHRyaWJ1dGVGaWVsZCB8IFNraWxsRmllbGQpW10gfCBib29sZWFuID0gW107XHJcbiAgICAgICAgaWYgKGF0dHJpYnV0ZSAhPT0gdW5kZWZpbmVkKSBhdHRzLnB1c2goYXR0cmlidXRlKTtcclxuICAgICAgICBpZiAoYXR0cmlidXRlMiAhPT0gdW5kZWZpbmVkKSBhdHRzLnB1c2goYXR0cmlidXRlMik7XHJcbiAgICAgICAgaWYgKHNraWxsICE9PSB1bmRlZmluZWQpIGF0dHMucHVzaChza2lsbCk7XHJcbiAgICAgICAgLy8gYWRkIGdsb2JhbCBwYXJ0cyBmcm9tIGFjdG9yXHJcbiAgICAgICAgdGhpcy5hY3Rvci5fYWRkR2xvYmFsUGFydHMocGFydHMpO1xyXG4gICAgICAgIHRoaXMuYWN0b3IuX2FkZE1hdHJpeFBhcnRzKHBhcnRzLCBhdHRzKTtcclxuICAgICAgICB0aGlzLl9hZGRXZWFwb25QYXJ0cyhwYXJ0cyk7XHJcblxyXG4gICAgICAgIHJldHVybiBwYXJ0cy5saXN0O1xyXG4gICAgfVxyXG5cclxuICAgIGNhbGN1bGF0ZVJlY29pbCgpIHtcclxuICAgICAgICBjb25zdCBsYXN0RmlyZU1vZGUgPSB0aGlzLmdldExhc3RGaXJlTW9kZSgpO1xyXG4gICAgICAgIGlmICghbGFzdEZpcmVNb2RlKSByZXR1cm4gMDtcclxuICAgICAgICBpZiAobGFzdEZpcmVNb2RlLnZhbHVlID09PSAyMCkgcmV0dXJuIDA7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgubWluKHRoaXMuZ2V0UmVjb2lsQ29tcGVuc2F0aW9uKHRydWUpIC0gKHRoaXMuZ2V0TGFzdEZpcmVNb2RlKCk/LnZhbHVlIHx8IDApLCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBfYWRkV2VhcG9uUGFydHMocGFydHM6IFBhcnRzTGlzdDxudW1iZXI+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNSYW5nZWRXZWFwb24oKSkge1xyXG4gICAgICAgICAgICBjb25zdCByZWNvaWwgPSB0aGlzLmNhbGN1bGF0ZVJlY29pbCgpO1xyXG4gICAgICAgICAgICBpZiAocmVjb2lsKSBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuUmVjb2lsJywgcmVjb2lsKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlTGljZW5zZShpbmRleCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBkdXBsaWNhdGUodGhpcy5kYXRhKTtcclxuICAgICAgICBjb25zdCB7IGxpY2Vuc2VzIH0gPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgbGljZW5zZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZShkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyByb2xsT3Bwb3NlZFRlc3QodGFyZ2V0OiBTUjVBY3RvciwgZXYpIHtcclxuICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHRoaXMuZGF0YS5kYXRhO1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGV2ZW50OiBldixcclxuICAgICAgICAgICAgZmlyZU1vZGVEZWZlbnNlOiAwLFxyXG4gICAgICAgICAgICBjb3ZlcjogZmFsc2UsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgbGFzdEF0dGFjayA9IHRoaXMuZ2V0TGFzdEF0dGFjaygpO1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5nZXRPcHBvc2VkVGVzdE1vZCgpO1xyXG4gICAgICAgIGNvbnN0IHsgb3Bwb3NlZCB9ID0gaXRlbURhdGEuYWN0aW9uO1xyXG5cclxuICAgICAgICBpZiAob3Bwb3NlZC50eXBlID09PSAnZGVmZW5zZScpIHtcclxuICAgICAgICAgICAgaWYgKGxhc3RBdHRhY2spIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbnNbJ2luY29taW5nQXR0YWNrJ10gPSBsYXN0QXR0YWNrO1xyXG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb3ZlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdEF0dGFjay5maXJlTW9kZT8uZGVmZW5zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMuZmlyZU1vZGVEZWZlbnNlID0gK2xhc3RBdHRhY2suZmlyZU1vZGUuZGVmZW5zZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LnJvbGxEZWZlbnNlKG9wdGlvbnMsIHBhcnRzLmxpc3QpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAob3Bwb3NlZC50eXBlID09PSAnc29haycpIHtcclxuICAgICAgICAgICAgb3B0aW9uc1snZGFtYWdlJ10gPSBsYXN0QXR0YWNrPy5kYW1hZ2U7XHJcbiAgICAgICAgICAgIG9wdGlvbnNbJ2F0dGFja2VySGl0cyddID0gbGFzdEF0dGFjaz8uaGl0cztcclxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5yb2xsU29hayhvcHRpb25zLCBwYXJ0cy5saXN0KTtcclxuICAgICAgICB9IGVsc2UgaWYgKG9wcG9zZWQudHlwZSA9PT0gJ2FybW9yJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LnJvbGxBcm1vcihvcHRpb25zKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAob3Bwb3NlZC5za2lsbCAmJiBvcHBvc2VkLmF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5yb2xsU2tpbGwob3Bwb3NlZC5za2lsbCwge1xyXG4gICAgICAgICAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiBvcHBvc2VkLmF0dHJpYnV0ZSxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wcG9zZWQuYXR0cmlidXRlICYmIG9wcG9zZWQuYXR0cmlidXRlMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldC5yb2xsVHdvQXR0cmlidXRlcyhbb3Bwb3NlZC5hdHRyaWJ1dGUsIG9wcG9zZWQuYXR0cmlidXRlMl0sIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG9wcG9zZWQuYXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFyZ2V0LnJvbGxTaW5nbGVBdHRyaWJ1dGUob3Bwb3NlZC5hdHRyaWJ1dGUsIG9wdGlvbnMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHJvbGxFeHRyYVRlc3QodHlwZTogc3RyaW5nLCBldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldHMgPSBTUjVJdGVtLmdldFRhcmdldHMoKTtcclxuICAgICAgICBpZiAodHlwZSA9PT0gJ29wcG9zZWQnKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0YXJnZXRzKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnJvbGxPcHBvc2VkVGVzdCh0LCBldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSb2xscyBhIHRlc3QgdXNpbmcgdGhlIGxhdGVzdCBzdG9yZWQgZGF0YSBvbiB0aGUgaXRlbSAoZm9yY2UsIGZpcmVNb2RlLCBsZXZlbClcclxuICAgICAqIEBwYXJhbSBldmVudCAtIG1vdXNlIGV2ZW50XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIGFueSBhZGRpdGlvbmFsIHJvbGwgb3B0aW9ucyB0byBwYXNzIGFsb25nIC0gbm90ZSB0aGF0IGN1cnJlbnRseSB0aGUgSXRlbSB3aWxsIG92ZXJ3cml0ZSAtLSBXSVBcclxuICAgICAqL1xyXG4gICAgYXN5bmMgcm9sbFRlc3QoZXZlbnQsIG9wdGlvbnM/OiBQYXJ0aWFsPEFkdmFuY2VkUm9sbFByb3BzPik6IFByb21pc2U8U2hhZG93cnVuUm9sbCB8IHVuZGVmaW5lZD4ge1xyXG4gICAgICAgIGNvbnN0IHByb21pc2UgPSBTaGFkb3dydW5Sb2xsZXIuaXRlbVJvbGwoZXZlbnQsIHRoaXMsIG9wdGlvbnMpO1xyXG5cclxuICAgICAgICAvLyBoYW5kbGUgcHJvbWlzZSB3aGVuIGl0IHJlc29sdmVzIGZvciBvdXIgb3duIHN0dWZmXHJcbiAgICAgICAgcHJvbWlzZS50aGVuKGFzeW5jIChyb2xsKSA9PiB7XHJcbiAgICAgICAgICAgIC8vIGNvbXBsZXggZm9ybSBoYW5kbGVzIGZhZGVcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNDb21wbGV4Rm9ybSgpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0b3RhbEZhZGUgPSBNYXRoLm1heCh0aGlzLmdldEZhZGUoKSArIHRoaXMuZ2V0TGFzdENvbXBsZXhGb3JtTGV2ZWwoKS52YWx1ZSwgMik7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFjdG9yLnJvbGxGYWRlKHsgZXZlbnQgfSwgdG90YWxGYWRlKTtcclxuICAgICAgICAgICAgfSAvLyBzcGVsbHMgaGFuZGxlIGRyYWluLCBmb3JjZSwgYW5kIGF0dGFjayBkYXRhXHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuaXNTcGVsbCgpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0NvbWJhdFNwZWxsKCkgJiYgcm9sbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dGFja0RhdGEgPSB0aGlzLmdldEF0dGFja0RhdGEocm9sbC50b3RhbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGF0dGFja0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRMYXN0QXR0YWNrKGF0dGFja0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGZvcmNlRGF0YSA9IHRoaXMuZ2V0TGFzdFNwZWxsRm9yY2UoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGRyYWluID0gTWF0aC5tYXgodGhpcy5nZXREcmFpbigpICsgZm9yY2VEYXRhLnZhbHVlICsgKGZvcmNlRGF0YS5yZWNrbGVzcyA/IDMgOiAwKSwgMik7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmFjdG9yPy5yb2xsRHJhaW4oeyBldmVudCB9LCBkcmFpbik7XHJcbiAgICAgICAgICAgIH0gLy8gd2VhcG9ucyBoYW5kbGUgYW1tbyBhbmQgYXR0YWNrIGRhdGFcclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5kYXRhLnR5cGUgPT09ICd3ZWFwb24nKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhdHRhY2tEYXRhID0gdGhpcy5nZXRBdHRhY2tEYXRhKHJvbGw/LnRvdGFsIHx8IDApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGF0dGFja0RhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLnNldExhc3RBdHRhY2soYXR0YWNrRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5oYXNBbW1vKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlyZU1vZGUgPSB0aGlzLmdldExhc3RGaXJlTW9kZSgpPy52YWx1ZSB8fCAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMudXNlQW1tbyhmaXJlTW9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByb21pc2U7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEl0ZW1Gcm9tTWVzc2FnZShodG1sKTogU1I1SXRlbSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgY2FyZCA9IGh0bWwuZmluZCgnLmNoYXQtY2FyZCcpO1xyXG4gICAgICAgIGxldCBhY3RvcjtcclxuICAgICAgICBjb25zdCB0b2tlbktleSA9IGNhcmQuZGF0YSgndG9rZW5JZCcpO1xyXG4gICAgICAgIGlmICh0b2tlbktleSkge1xyXG4gICAgICAgICAgICBjb25zdCBbc2NlbmVJZCwgdG9rZW5JZF0gPSB0b2tlbktleS5zcGxpdCgnLicpO1xyXG4gICAgICAgICAgICBsZXQgdG9rZW47XHJcbiAgICAgICAgICAgIGlmIChzY2VuZUlkID09PSBjYW52YXMuc2NlbmUuX2lkKSB0b2tlbiA9IGNhbnZhcy50b2tlbnMuZ2V0KHRva2VuSWQpO1xyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNjZW5lOiBTY2VuZSA9IGdhbWUuc2NlbmVzLmdldChzY2VuZUlkKTtcclxuICAgICAgICAgICAgICAgIGlmICghc2NlbmUpIHJldHVybjtcclxuICAgICAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRva2VuRGF0YSA9IHNjZW5lLmRhdGEudG9rZW5zLmZpbmQoKHQpID0+IHQuaWQgPT09IE51bWJlcih0b2tlbklkKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodG9rZW5EYXRhKSB0b2tlbiA9IG5ldyBUb2tlbih0b2tlbkRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdG9rZW4pIHJldHVybjtcclxuICAgICAgICAgICAgYWN0b3IgPSBBY3Rvci5mcm9tVG9rZW4odG9rZW4pO1xyXG4gICAgICAgIH0gZWxzZSBhY3RvciA9IGdhbWUuYWN0b3JzLmdldChjYXJkLmRhdGEoJ2FjdG9ySWQnKSk7XHJcblxyXG4gICAgICAgIGlmICghYWN0b3IpIHJldHVybjtcclxuICAgICAgICBjb25zdCBpdGVtSWQgPSBjYXJkLmRhdGEoJ2l0ZW1JZCcpO1xyXG4gICAgICAgIHJldHVybiBhY3Rvci5nZXRPd25lZEl0ZW0oaXRlbUlkKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0VGFyZ2V0cygpIHtcclxuICAgICAgICBjb25zdCB7IGNoYXJhY3RlciB9ID0gZ2FtZS51c2VyO1xyXG4gICAgICAgIGNvbnN0IHsgY29udHJvbGxlZCB9ID0gY2FudmFzLnRva2VucztcclxuICAgICAgICBjb25zdCB0YXJnZXRzID0gY29udHJvbGxlZC5yZWR1Y2UoKGFyciwgdCkgPT4gKHQuYWN0b3IgPyBhcnIuY29uY2F0KFt0LmFjdG9yXSkgOiBhcnIpLCBbXSk7XHJcbiAgICAgICAgaWYgKGNoYXJhY3RlciAmJiBjb250cm9sbGVkLmxlbmd0aCA9PT0gMCkgdGFyZ2V0cy5wdXNoKGNoYXJhY3Rlcik7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRzLmxlbmd0aCkgdGhyb3cgbmV3IEVycm9yKGBZb3UgbXVzdCBkZXNpZ25hdGUgYSBzcGVjaWZpYyBUb2tlbiBhcyB0aGUgcm9sbCB0YXJnZXRgKTtcclxuICAgICAgICByZXR1cm4gdGFyZ2V0cztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZSBhbiBpdGVtIGluIHRoaXMgaXRlbVxyXG4gICAgICogQHBhcmFtIGl0ZW1EYXRhXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAgICovXHJcbiAgICBhc3luYyBjcmVhdGVPd25lZEl0ZW0oaXRlbURhdGEsIG9wdGlvbnMgPSB7fSkge1xyXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShpdGVtRGF0YSkpIGl0ZW1EYXRhID0gW2l0ZW1EYXRhXTtcclxuICAgICAgICAvLyB3ZWFwb25zIGFjY2VwdCBpdGVtc1xyXG4gICAgICAgIGlmICh0aGlzLnR5cGUgPT09ICd3ZWFwb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtcyA9IGR1cGxpY2F0ZSh0aGlzLmdldEVtYmVkZGVkSXRlbXMoKSk7XHJcblxyXG4gICAgICAgICAgICBpdGVtRGF0YS5mb3JFYWNoKChvZ0l0ZW0pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW0gPSBkdXBsaWNhdGUob2dJdGVtKTtcclxuICAgICAgICAgICAgICAgIGl0ZW0uX2lkID0gcmFuZG9tSUQoMTYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2FtbW8nIHx8IGl0ZW0udHlwZSA9PT0gJ21vZGlmaWNhdGlvbicpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXRlbT8uZGF0YT8udGVjaG5vbG9neT8uZXF1aXBwZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS5kYXRhLnRlY2hub2xvZ3kuZXF1aXBwZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudEl0ZW1zLnB1c2goaXRlbSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgdGhpcy5zZXRFbWJlZGRlZEl0ZW1zKGN1cnJlbnRJdGVtcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMucHJlcGFyZUVtYmVkZGVkRW50aXRpZXMoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnByZXBhcmVEYXRhKCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5yZW5kZXIoZmFsc2UpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUHJlcGFyZSBlbWJlZGRlZEl0ZW1zXHJcbiAgICAgKi9cclxuICAgIHByZXBhcmVFbWJlZGRlZEVudGl0aWVzKCkge1xyXG4gICAgICAgIHN1cGVyLnByZXBhcmVFbWJlZGRlZEVudGl0aWVzKCk7XHJcbiAgICAgICAgbGV0IGl0ZW1zID0gdGhpcy5nZXRFbWJlZGRlZEl0ZW1zKCk7XHJcbiAgICAgICAgaWYgKGl0ZW1zKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gKHRoaXMuaXRlbXMgfHwgW10pLnJlZHVjZSgob2JqZWN0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBvYmplY3RbaS5pZF0gPSBpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcclxuICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1zID0gaXRlbXMubWFwKChpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5faWQgaW4gZXhpc3RpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gZXhpc3RpbmdbaS5faWRdO1xyXG4gICAgICAgICAgICAgICAgICAgIGEuZGF0YSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYS5wcmVwYXJlRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBkaXJ0eSB0aGluZ3MgZG9uZSBoZXJlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBJdGVtLmNyZWF0ZU93bmVkKGksIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0T3duZWRJdGVtKGl0ZW1JZCkge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5pdGVtcztcclxuICAgICAgICBpZiAoIWl0ZW1zKSByZXR1cm47XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmZpbmQoKGkpID0+IGkuX2lkID09PSBpdGVtSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIHVwZGF0ZU93bmVkSXRlbShjaGFuZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgaXRlbXMgPSBkdXBsaWNhdGUodGhpcy5nZXRFbWJlZGRlZEl0ZW1zKCkpO1xyXG4gICAgICAgIGlmICghaXRlbXMpIHJldHVybjtcclxuICAgICAgICBjaGFuZ2VzID0gQXJyYXkuaXNBcnJheShjaGFuZ2VzKSA/IGNoYW5nZXMgOiBbY2hhbmdlc107XHJcbiAgICAgICAgaWYgKCFjaGFuZ2VzIHx8IGNoYW5nZXMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcbiAgICAgICAgY2hhbmdlcy5mb3JFYWNoKChpdGVtQ2hhbmdlcykgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGl0ZW1zLmZpbmRJbmRleCgoaSkgPT4gaS5faWQgPT09IGl0ZW1DaGFuZ2VzLl9pZCk7XHJcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IGl0ZW1zW2luZGV4XTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIGl0ZW1DaGFuZ2VzID0gZXhwYW5kT2JqZWN0KGl0ZW1DaGFuZ2VzKTtcclxuICAgICAgICAgICAgICAgIG1lcmdlT2JqZWN0KGl0ZW0sIGl0ZW1DaGFuZ2VzKTtcclxuICAgICAgICAgICAgICAgIGl0ZW1zW2luZGV4XSA9IGl0ZW07XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLml0ZW1zW2luZGV4XS5kYXRhID0gaXRlbXNbaW5kZXhdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0RW1iZWRkZWRJdGVtcyhpdGVtcyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5wcmVwYXJlRW1iZWRkZWRFbnRpdGllcygpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHJlcGFyZURhdGEoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbmRlcihmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgdXBkYXRlRW1iZWRkZWRFbnRpdHkoZW1iZWRkZWROYW1lOiBzdHJpbmcsIHVwZGF0ZURhdGE6IG9iamVjdCB8IG9iamVjdFtdLCBvcHRpb25zPzogb2JqZWN0KSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy51cGRhdGVPd25lZEl0ZW0odXBkYXRlRGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgYW4gb3duZWQgaXRlbVxyXG4gICAgICogQHBhcmFtIGRlbGV0ZWRcclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fVxyXG4gICAgICovXHJcbiAgICBhc3luYyBkZWxldGVPd25lZEl0ZW0oZGVsZXRlZCkge1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gZHVwbGljYXRlKHRoaXMuZ2V0RW1iZWRkZWRJdGVtcygpKTtcclxuICAgICAgICBpZiAoIWl0ZW1zKSByZXR1cm47XHJcblxyXG4gICAgICAgIGNvbnN0IGlkeCA9IGl0ZW1zLmZpbmRJbmRleCgoaSkgPT4gaS5faWQgPT09IGRlbGV0ZWQgfHwgTnVtYmVyKGkuX2lkKSA9PT0gZGVsZXRlZCk7XHJcbiAgICAgICAgaWYgKGlkeCA9PT0gLTEpIHRocm93IG5ldyBFcnJvcihgU2hhZG93cnVuNWUgfCBDb3VsZG4ndCBmaW5kIG93bmVkIGl0ZW0gJHtkZWxldGVkfWApO1xyXG4gICAgICAgIGl0ZW1zLnNwbGljZShpZHgsIDEpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMuc2V0RW1iZWRkZWRJdGVtcyhpdGVtcyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5wcmVwYXJlRW1iZWRkZWRFbnRpdGllcygpO1xyXG4gICAgICAgIGF3YWl0IHRoaXMucHJlcGFyZURhdGEoKTtcclxuICAgICAgICBhd2FpdCB0aGlzLnJlbmRlcihmYWxzZSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgb3BlblBkZlNvdXJjZSgpIHtcclxuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLmdldEJvb2tTb3VyY2UoKTtcclxuICAgICAgICBpZiAoc291cmNlID09PSAnJykge1xyXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuZXJyb3IoZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuU291cmNlRmllbGRFbXB0eUVycm9yJykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBUT0RPIG9wZW4gUERGIHRvIGNvcnJlY3QgbG9jYXRpb25cclxuICAgICAgICAvLyBwYXJzZSBob3dldmVyIHlvdSBuZWVkLCBhbGwgXCJidXR0b25zXCIgd2lsbCBsZWFkIHRvIHRoaXMgZnVuY3Rpb25cclxuICAgICAgICBjb25zdCBbY29kZSwgcGFnZV0gPSBzb3VyY2Uuc3BsaXQoJyAnKTtcclxuICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICB1aS5QREZvdW5kcnkub3BlblBERkJ5Q29kZShjb2RlLCBwYXJzZUludChwYWdlKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXR0YWNrRGF0YShoaXRzOiBudW1iZXIpOiBBdHRhY2tEYXRhIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICBpZiAoIXRoaXMuZGF0YS5kYXRhLmFjdGlvbj8uZGFtYWdlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIGNvbnN0IGRhbWFnZSA9IHRoaXMuZGF0YS5kYXRhLmFjdGlvbi5kYW1hZ2U7XHJcbiAgICAgICAgY29uc3QgZGF0YTogQXR0YWNrRGF0YSA9IHtcclxuICAgICAgICAgICAgaGl0cyxcclxuICAgICAgICAgICAgZGFtYWdlOiBkYW1hZ2UsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb21iYXRTcGVsbCgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcmNlID0gdGhpcy5nZXRMYXN0U3BlbGxGb3JjZSgpLnZhbHVlO1xyXG4gICAgICAgICAgICBjb25zdCBkYW1hZ2VQYXJ0cyA9IG5ldyBQYXJ0c0xpc3QoZGF0YS5kYW1hZ2UubW9kKTtcclxuICAgICAgICAgICAgZGF0YS5mb3JjZSA9IGZvcmNlO1xyXG4gICAgICAgICAgICBkYXRhLmRhbWFnZS5iYXNlID0gZm9yY2U7XHJcbiAgICAgICAgICAgIGRhdGEuZGFtYWdlLnZhbHVlID0gZm9yY2UgKyBkYW1hZ2VQYXJ0cy50b3RhbDtcclxuICAgICAgICAgICAgZGF0YS5kYW1hZ2UuYXAudmFsdWUgPSAtZm9yY2UgKyBkYW1hZ2VQYXJ0cy50b3RhbDtcclxuICAgICAgICAgICAgZGF0YS5kYW1hZ2UuYXAuYmFzZSA9IC1mb3JjZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzQ29tcGxleEZvcm0oKSkge1xyXG4gICAgICAgICAgICBkYXRhLmxldmVsID0gdGhpcy5nZXRMYXN0Q29tcGxleEZvcm1MZXZlbCgpLnZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaXNNZWxlZVdlYXBvbigpKSB7XHJcbiAgICAgICAgICAgIGRhdGEucmVhY2ggPSB0aGlzLmdldFJlYWNoKCk7XHJcbiAgICAgICAgICAgIGRhdGEuYWNjdXJhY3kgPSB0aGlzLmdldEFjdGlvbkxpbWl0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pc1JhbmdlZFdlYXBvbigpKSB7XHJcbiAgICAgICAgICAgIGRhdGEuZmlyZU1vZGUgPSB0aGlzLmdldExhc3RGaXJlTW9kZSgpO1xyXG4gICAgICAgICAgICBkYXRhLmFjY3VyYWN5ID0gdGhpcy5nZXRBY3Rpb25MaW1pdCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYmxhc3REYXRhID0gdGhpcy5nZXRCbGFzdERhdGEoKTtcclxuICAgICAgICBpZiAoYmxhc3REYXRhKSBkYXRhLmJsYXN0ID0gYmxhc3REYXRhO1xyXG5cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSb2xsTmFtZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICh0aGlzLmlzUmFuZ2VkV2VhcG9uKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlJhbmdlV2VhcG9uQXR0YWNrJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzTWVsZWVXZWFwb24oKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuTWVsZWVXZWFwb25BdHRhY2snKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuaXNDb21iYXRTcGVsbCgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5TcGVsbEF0dGFjaycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pc1NwZWxsKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlNwZWxsQ2FzdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5oYXNSb2xsKSByZXR1cm4gdGhpcy5uYW1lO1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGltaXQoKTogTGltaXRGaWVsZCB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgbGltaXQgPSB0aGlzLmRhdGEuZGF0YS5hY3Rpb24/LmxpbWl0O1xyXG4gICAgICAgIGlmICghbGltaXQpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YS50eXBlID09PSAnd2VhcG9uJykge1xyXG4gICAgICAgICAgICBsaW1pdC5sYWJlbCA9ICdTUjUuQWNjdXJhY3knO1xyXG4gICAgICAgIH0gZWxzZSBpZiAobGltaXQ/LmF0dHJpYnV0ZSkge1xyXG4gICAgICAgICAgICBsaW1pdC5sYWJlbCA9IENPTkZJRy5TUjUuYXR0cmlidXRlc1tsaW1pdC5hdHRyaWJ1dGVdO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc1NwZWxsKCkpIHtcclxuICAgICAgICAgICAgbGltaXQudmFsdWUgPSB0aGlzLmdldExhc3RTcGVsbEZvcmNlKCkudmFsdWU7XHJcbiAgICAgICAgICAgIGxpbWl0LmxhYmVsID0gJ1NSNS5Gb3JjZSc7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ29tcGxleEZvcm0oKSkge1xyXG4gICAgICAgICAgICBsaW1pdC52YWx1ZSA9IHRoaXMuZ2V0TGFzdENvbXBsZXhGb3JtTGV2ZWwoKS52YWx1ZTtcclxuICAgICAgICAgICAgbGltaXQubGFiZWwgPSAnU1I1LkxldmVsJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsaW1pdC5sYWJlbCA9ICdTUjUuTGltaXQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGltaXQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdmVycmlkZSBzZXRGbGFnIHRvIHJlbW92ZSB0aGUgJ1NSNS4nIGZyb20ga2V5cyBpbiBtb2RsaXN0cywgb3RoZXJ3aXNlIGl0IGhhbmRsZXMgdGhlbSBhcyBlbWJlZGRlZCBrZXlzXHJcbiAgICAgKiBAcGFyYW0gc2NvcGVcclxuICAgICAqIEBwYXJhbSBrZXlcclxuICAgICAqIEBwYXJhbSB2YWx1ZVxyXG4gICAgICovXHJcbiAgICBzZXRGbGFnKHNjb3BlOiBzdHJpbmcsIGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogUHJvbWlzZTxFbnRpdHk+IHtcclxuICAgICAgICBjb25zdCBuZXdWYWx1ZSA9IEhlbHBlcnMub25TZXRGbGFnKHZhbHVlKTtcclxuICAgICAgICByZXR1cm4gc3VwZXIuc2V0RmxhZyhzY29wZSwga2V5LCBuZXdWYWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPdmVycmlkZSBnZXRGbGFnIHRvIGFkZCBiYWNrIHRoZSAnU1I1Licga2V5cyBjb3JyZWN0bHkgdG8gYmUgaGFuZGxlZFxyXG4gICAgICogQHBhcmFtIHNjb3BlXHJcbiAgICAgKiBAcGFyYW0ga2V5XHJcbiAgICAgKi9cclxuICAgIGdldEZsYWcoc2NvcGU6IHN0cmluZywga2V5OiBzdHJpbmcpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBzdXBlci5nZXRGbGFnKHNjb3BlLCBrZXkpO1xyXG4gICAgICAgIHJldHVybiBIZWxwZXJzLm9uR2V0RmxhZyhkYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFBhc3N0aHJvdWdoIGZ1bmN0aW9uc1xyXG4gICAgICovXHJcbiAgICBpc0FyZWFPZkVmZmVjdCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmlzQXJlYU9mRWZmZWN0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNBcm1vcigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmlzQXJtb3IoKTtcclxuICAgIH1cclxuXHJcbiAgICBoYXNBcm1vckJhc2UoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5oYXNBcm1vckJhc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBoYXNBcm1vckFjY2Vzc29yeSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmhhc0FybW9yQWNjZXNzb3J5KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFzQXJtb3IoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5oYXNBcm1vcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzR3JlbmFkZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmlzR3JlbmFkZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzV2VhcG9uKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuaXNXZWFwb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0N5YmVyd2FyZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmlzQ3liZXJ3YXJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNDb21iYXRTcGVsbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmlzQ29tYmF0U3BlbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc1JhbmdlZFdlYXBvbigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmlzUmFuZ2VkV2VhcG9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTcGVsbCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmlzU3BlbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0NvbXBsZXhGb3JtKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuaXNDb21wbGV4Rm9ybSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzTWVsZWVXZWFwb24oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5pc01lbGVlV2VhcG9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEZXZpY2UoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5pc0RldmljZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzRXF1aXBwZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5pc0VxdWlwcGVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNDeWJlcmRlY2soKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5pc0N5YmVyZGVjaygpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJvb2tTb3VyY2UoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldEJvb2tTb3VyY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDb25kaXRpb25Nb25pdG9yKCk6IENvbmRpdGlvbkRhdGEge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuZ2V0Q29uZGl0aW9uTW9uaXRvcigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJhdGluZygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuZ2V0UmF0aW5nKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QXJtb3JWYWx1ZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuZ2V0QXJtb3JWYWx1ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFybW9yRWxlbWVudHMoKTogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5nZXRBcm1vckVsZW1lbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RXNzZW5jZUxvc3MoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldEVzc2VuY2VMb3NzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QVNERigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldEFTREYoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBY3Rpb25Ta2lsbCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuZ2V0QWN0aW9uU2tpbGwoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBY3Rpb25BdHRyaWJ1dGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldEFjdGlvbkF0dHJpYnV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFjdGlvbkF0dHJpYnV0ZTIoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldEFjdGlvbkF0dHJpYnV0ZTIoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBY3Rpb25MaW1pdCgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZXIuZ2V0QWN0aW9uTGltaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNb2RpZmllckxpc3QoKTogTW9kTGlzdDxudW1iZXI+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldE1vZGlmaWVyTGlzdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFjdGlvblNwZWNpYWxpemF0aW9uKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5nZXRBY3Rpb25TcGVjaWFsaXphdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERyYWluKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlci5nZXREcmFpbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEZhZGUoKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVyLmdldEZhZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSZWNvaWxDb21wZW5zYXRpb24oaW5jbHVkZUFjdG9yOiBib29sZWFuID0gdHJ1ZSk6IG51bWJlciB7XHJcbiAgICAgICAgbGV0IHJjID0gdGhpcy53cmFwcGVyLmdldFJlY29pbENvbXBlbnNhdGlvbigpO1xyXG4gICAgICAgIGlmIChpbmNsdWRlQWN0b3IgJiYgdGhpcy5hY3Rvcikge1xyXG4gICAgICAgICAgICByYyArPSB0aGlzLmFjdG9yLmdldFJlY29pbENvbXBlbnNhdGlvbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVhY2goKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAodGhpcy5pc01lbGVlV2VhcG9uKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLm1lbGVlPy5yZWFjaCA/PyAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gMDtcclxuICAgIH1cclxuXHJcbiAgICBoYXNEZWZlbnNlVGVzdCgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRhdGEuYWN0aW9uPy5vcHBvc2VkPy50eXBlID09PSAnZGVmZW5zZSc7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgRGF0YVdyYXBwZXIgfSBmcm9tICcuLi9kYXRhV3JhcHBlcnMvRGF0YVdyYXBwZXInO1xyXG5pbXBvcnQgU1I1SXRlbVR5cGUgPSBTaGFkb3dydW4uU1I1SXRlbVR5cGU7XHJcbmltcG9ydCBDb25kaXRpb25EYXRhID0gU2hhZG93cnVuLkNvbmRpdGlvbkRhdGE7XHJcbmltcG9ydCBNb2RMaXN0ID0gU2hhZG93cnVuLk1vZExpc3Q7XHJcbmltcG9ydCBTUjVJdGVtRGF0YSA9IFNoYWRvd3J1bi5TUjVJdGVtRGF0YTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTUjVJdGVtRGF0YVdyYXBwZXIgZXh0ZW5kcyBEYXRhV3JhcHBlcjxTUjVJdGVtVHlwZT4ge1xyXG4gICAgZ2V0RGF0YSgpOiBTUjVJdGVtRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQXJlYU9mRWZmZWN0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIC8vIFRPRE8gZmlndXJlIG91dCBob3cgdG8gZGV0ZWN0IGV4cGxvc2l2ZSBhbW1vXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNHcmVuYWRlKCkgfHwgKHRoaXMuaXNTcGVsbCgpICYmIHRoaXMuZGF0YS5kYXRhLnJhbmdlID09PSAnbG9zX2EnKTsgLy98fCB0aGlzLmhhc0V4cGxvc2l2ZUFtbW8oKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0FybW9yKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEudHlwZSA9PT0gJ2FybW9yJztcclxuICAgIH1cclxuXHJcbiAgICBoYXNBcm1vckJhc2UoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaGFzQXJtb3IoKSAmJiAhdGhpcy5kYXRhLmRhdGEuYXJtb3I/Lm1vZDtcclxuICAgIH1cclxuXHJcbiAgICBoYXNBcm1vckFjY2Vzc29yeSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5oYXNBcm1vcigpICYmICh0aGlzLmRhdGEuZGF0YS5hcm1vcj8ubW9kID8/IGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBoYXNBcm1vcigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRBcm1vclZhbHVlKCkgPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlzR3JlbmFkZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1Rocm93bldlYXBvbigpICYmICh0aGlzLmRhdGEuZGF0YS50aHJvd24/LmJsYXN0LnJhZGl1cyA/PyAwKSA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgaXNUaHJvd25XZWFwb24oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNXZWFwb24oKSAmJiB0aGlzLmRhdGEuZGF0YS5jYXRlZ29yeSA9PT0gJ3Rocm93bic7XHJcbiAgICB9XHJcblxyXG4gICAgaXNXZWFwb24oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS50eXBlID09PSAnd2VhcG9uJztcclxuICAgIH1cclxuXHJcbiAgICBpc0N5YmVyd2FyZSgpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLnR5cGUgPT09ICdjeWJlcndhcmUnO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ29tYmF0U3BlbGwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTcGVsbCgpICYmIHRoaXMuZGF0YS5kYXRhLmNhdGVnb3J5ID09PSAnY29tYmF0JztcclxuICAgIH1cclxuXHJcbiAgICBpc1JhbmdlZFdlYXBvbigpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc1dlYXBvbigpICYmIHRoaXMuZGF0YS5kYXRhLmNhdGVnb3J5ID09PSAncmFuZ2UnO1xyXG4gICAgfVxyXG5cclxuICAgIGlzU3BlbGwoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS50eXBlID09PSAnc3BlbGwnO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ29tcGxleEZvcm0oKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS50eXBlID09PSAnY29tcGxleF9mb3JtJztcclxuICAgIH1cclxuXHJcbiAgICBpc01lbGVlV2VhcG9uKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEudHlwZSA9PT0gJ3dlYXBvbicgJiYgdGhpcy5kYXRhLmRhdGEuY2F0ZWdvcnkgPT09ICdtZWxlZSc7XHJcbiAgICB9XHJcblxyXG4gICAgaXNEZXZpY2UoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS50eXBlID09PSAnZGV2aWNlJztcclxuICAgIH1cclxuXHJcbiAgICBpc0VxdWlwcGVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS50ZWNobm9sb2d5Py5lcXVpcHBlZCB8fCBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpc0N5YmVyZGVjaygpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pc0RldmljZSgpICYmIHRoaXMuZGF0YS5kYXRhLmNhdGVnb3J5ID09PSAnY3liZXJkZWNrJztcclxuICAgIH1cclxuXHJcbiAgICBnZXRJZCgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuX2lkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEJvb2tTb3VyY2UoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRhdGEuZGVzY3JpcHRpb24uc291cmNlO1xyXG4gICAgfVxyXG5cclxuICAgIGdldENvbmRpdGlvbk1vbml0b3IoKTogQ29uZGl0aW9uRGF0YSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLnRlY2hub2xvZ3k/LmNvbmRpdGlvbl9tb25pdG9yID8/IHsgdmFsdWU6IDAsIG1heDogMCB9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJhdGluZygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS50ZWNobm9sb2d5Py5yYXRpbmcgfHwgMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBcm1vclZhbHVlKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhPy5hcm1vcj8udmFsdWUgPz8gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBcm1vckVsZW1lbnRzKCk6IHsgW2tleTogc3RyaW5nXTogbnVtYmVyIH0ge1xyXG4gICAgICAgIC8vIFRPRE8gY2xlYW4gdGhpcyB1cFxyXG4gICAgICAgIGNvbnN0IHsgZmlyZSwgZWxlY3RyaWNpdHksIGNvbGQsIGFjaWQgfSA9IHRoaXMuZGF0YS5kYXRhLmFybW9yIHx8IHt9O1xyXG4gICAgICAgIHJldHVybiB7IGZpcmU6IGZpcmUgPz8gMCwgZWxlY3RyaWNpdHk6IGVsZWN0cmljaXR5ID8/IDAsIGNvbGQ6IGNvbGQgPz8gMCwgYWNpZDogYWNpZCA/PyAwIH07XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEubmFtZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFc3NlbmNlTG9zcygpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YT8uZXNzZW5jZSA/PyAwO1xyXG4gICAgfVxyXG5cclxuICAgIGdldEFtbW8oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLmFtbW87XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QVNERigpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNEZXZpY2UoKSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgLy8gbWF0cml4IGF0dHJpYnV0ZXMgYXJlIHNldCB1cCBhcyBhbiBvYmplY3RcclxuICAgICAgICBjb25zdCBtYXRyaXggPSB7XHJcbiAgICAgICAgICAgIGF0dGFjazoge1xyXG4gICAgICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgICAgICBkZXZpY2VfYXR0OiAnJyxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2xlYXplOiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICAgICAgICAgIGRldmljZV9hdHQ6ICcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhX3Byb2Nlc3Npbmc6IHtcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLmdldFJhdGluZygpLFxyXG4gICAgICAgICAgICAgICAgZGV2aWNlX2F0dDogJycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZpcmV3YWxsOiB7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5nZXRSYXRpbmcoKSxcclxuICAgICAgICAgICAgICAgIGRldmljZV9hdHQ6ICcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzQ3liZXJkZWNrKCkpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqIHtcclxuICAgICAgICAgICAgICogICAgIGF0dE46IHtcclxuICAgICAgICAgICAgICogICAgICAgICB2YWx1ZTogbnVtYmVyLFxyXG4gICAgICAgICAgICAgKiAgICAgICAgIGF0dDogc3RyaW5nICh0aGUgQVNERiBhdHRyaWJ1dGUpXHJcbiAgICAgICAgICAgICAqICAgICB9XHJcbiAgICAgICAgICAgICAqIH1cclxuICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgIGNvbnN0IGF0dHM6IHsgW2tleTogc3RyaW5nXTogeyB2YWx1ZTogbnVtYmVyOyBhdHQ6IHN0cmluZyB9IH0gfCB1bmRlZmluZWQgPSB0aGlzLmRhdGEuZGF0YS5hdHRzO1xyXG4gICAgICAgICAgICBpZiAoYXR0cykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgW2tleSwgYXR0XSBvZiBPYmplY3QuZW50cmllcyhhdHRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hdHJpeFthdHQuYXR0XS52YWx1ZSA9IGF0dC52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBtYXRyaXhbYXR0LmF0dF0uZGV2aWNlX2F0dCA9IGtleTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG1hdHJpeDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRRdWFudGl0eSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YT8udGVjaG5vbG9neT8ucXVhbnRpdHkgfHwgMTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBY3Rpb25EaWNlUG9vbE1vZCgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS5hY3Rpb24/Lm1vZDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRMaW1pdEF0dHJpYnV0ZSgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS5hY3Rpb24/LmxpbWl0Py5hdHRyaWJ1dGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWN0aW9uU2tpbGwoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRhdGEuYWN0aW9uPy5za2lsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBY3Rpb25BdHRyaWJ1dGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRhdGEuYWN0aW9uPy5hdHRyaWJ1dGU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWN0aW9uQXR0cmlidXRlMigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS5hY3Rpb24/LmF0dHJpYnV0ZTI7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0QWN0aW9uTGltaXQoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmRhdGEuYWN0aW9uPy5saW1pdD8udmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TW9kaWZpZXJMaXN0KCk6IE1vZExpc3Q8bnVtYmVyPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLmFjdGlvbj8uZGljZV9wb29sX21vZCB8fCBbXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRBY3Rpb25TcGVjaWFsaXphdGlvbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xyXG4gICAgICAgIGlmICh0aGlzLmRhdGEuZGF0YS5hY3Rpb24/LnNwZWMpIHJldHVybiAnU1I1LlNwZWNpYWxpemF0aW9uJztcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIGdldERyYWluKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLmRyYWluIHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0RmFkZSgpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS5mYWRlIHx8IDA7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVjb2lsQ29tcGVuc2F0aW9uKCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzUmFuZ2VkV2VhcG9uKCkpIHJldHVybiAwO1xyXG4gICAgICAgIGNvbnN0IGJhc2UgPSB0aGlzLmRhdGEuZGF0YT8ucmFuZ2U/LnJjLnZhbHVlID8/ICcwJztcclxuICAgICAgICByZXR1cm4gTnVtYmVyKGJhc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJlYWNoKCk6IG51bWJlciB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNNZWxlZVdlYXBvbigpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEuZGF0YS5tZWxlZT8ucmVhY2ggPz8gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICB9XHJcblxyXG4gICAgaGFzRGVmZW5zZVRlc3QoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YS5kYXRhLmFjdGlvbj8ub3Bwb3NlZD8udHlwZSA9PT0gJ2RlZmVuc2UnO1xyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IEhlbHBlcnMgfSBmcm9tICcuLi9oZWxwZXJzJztcclxuaW1wb3J0IHsgU1I1SXRlbSB9IGZyb20gJy4vU1I1SXRlbSc7XHJcblxyXG4vKipcclxuICogRXh0ZW5kIHRoZSBiYXNpYyBJdGVtU2hlZXQgd2l0aCBzb21lIHZlcnkgc2ltcGxlIG1vZGlmaWNhdGlvbnNcclxuICovXHJcbmV4cG9ydCBjbGFzcyBTUjVJdGVtU2hlZXQgZXh0ZW5kcyBJdGVtU2hlZXQge1xyXG4gICAgaXRlbTogU1I1SXRlbTtcclxuICAgIHByaXZhdGUgX3Nob3duRGVzYzogYW55W107XHJcbiAgICBwcml2YXRlIF9zY3JvbGw6IHN0cmluZztcclxuICAgIGNvbnN0cnVjdG9yKC4uLmFyZ3MpIHtcclxuICAgICAgICBzdXBlciguLi5hcmdzKTtcclxuICAgICAgICB0aGlzLl9zaG93bkRlc2MgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRFbWJlZGRlZEl0ZW1zKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLml0ZW0uaXRlbXMgfHwgW107XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHRlbmQgYW5kIG92ZXJyaWRlIHRoZSBkZWZhdWx0IG9wdGlvbnMgdXNlZCBieSB0aGUgU2ltcGxlIEl0ZW0gU2hlZXRcclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBnZXQgZGVmYXVsdE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KHN1cGVyLmRlZmF1bHRPcHRpb25zLCB7XHJcbiAgICAgICAgICAgIGNsYXNzZXM6IFsnc3I1JywgJ3NoZWV0JywgJ2l0ZW0nXSxcclxuICAgICAgICAgICAgd2lkdGg6IDY1MCxcclxuICAgICAgICAgICAgaGVpZ2h0OiA0NTAsXHJcbiAgICAgICAgICAgIHRhYnM6IFt7IG5hdlNlbGVjdG9yOiAnLnRhYnMnLCBjb250ZW50U2VsZWN0b3I6ICcuc2hlZXRib2R5JyB9XSxcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgdGVtcGxhdGUoKSB7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9ICdzeXN0ZW1zL3NoYWRvd3J1bjVlL2Rpc3QvdGVtcGxhdGVzL2l0ZW0vJztcclxuICAgICAgICByZXR1cm4gYCR7cGF0aH0ke3RoaXMuaXRlbS5kYXRhLnR5cGV9Lmh0bWxgO1xyXG4gICAgfVxyXG5cclxuICAgIC8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcmVwYXJlIGRhdGEgZm9yIHJlbmRlcmluZyB0aGUgSXRlbSBzaGVldFxyXG4gICAgICogVGhlIHByZXBhcmVkIGRhdGEgb2JqZWN0IGNvbnRhaW5zIGJvdGggdGhlIGFjdG9yIGRhdGEgYXMgd2VsbCBhcyBhZGRpdGlvbmFsIHNoZWV0IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgZ2V0RGF0YSgpIHtcclxuICAgICAgICBjb25zdCBkYXRhID0gc3VwZXIuZ2V0RGF0YSgpO1xyXG4gICAgICAgIGNvbnN0IGl0ZW1EYXRhID0gZGF0YS5kYXRhO1xyXG5cclxuICAgICAgICBpZiAoaXRlbURhdGEuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IGFjdGlvbiB9ID0gaXRlbURhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLm1vZCA9PT0gMCkgZGVsZXRlIGFjdGlvbi5tb2Q7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmxpbWl0ID09PSAwKSBkZWxldGUgYWN0aW9uLmxpbWl0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGFjdGlvbi5kYW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmRhbWFnZS5tb2QgPT09IDApIGRlbGV0ZSBhY3Rpb24uZGFtYWdlLm1vZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmRhbWFnZS5hcC5tb2QgPT09IDApIGRlbGV0ZSBhY3Rpb24uZGFtYWdlLmFwLm1vZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpb24ubGltaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aW9uLmxpbWl0Lm1vZCA9PT0gMCkgZGVsZXRlIGFjdGlvbi5saW1pdC5tb2Q7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChpdGVtRGF0YS50ZWNobm9sb2d5KSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ZWNoID0gaXRlbURhdGEudGVjaG5vbG9neTtcclxuICAgICAgICAgICAgICAgIGlmICh0ZWNoLnJhdGluZyA9PT0gMCkgZGVsZXRlIHRlY2gucmF0aW5nO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlY2gucXVhbnRpdHkgPT09IDApIGRlbGV0ZSB0ZWNoLnF1YW50aXR5O1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlY2guY29zdCA9PT0gMCkgZGVsZXRlIHRlY2guY29zdDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRhdGFbJ2NvbmZpZyddID0gQ09ORklHLlNSNTtcclxuICAgICAgICBjb25zdCBpdGVtcyA9IHRoaXMuZ2V0RW1iZWRkZWRJdGVtcygpO1xyXG4gICAgICAgIGNvbnN0IFthbW11bml0aW9uLCB3ZWFwb25Nb2RzLCBhcm1vck1vZHNdID0gaXRlbXMucmVkdWNlKFxyXG4gICAgICAgICAgICAocGFydHM6IFtCYXNlRW50aXR5RGF0YVtdLCBCYXNlRW50aXR5RGF0YVtdLCBCYXNlRW50aXR5RGF0YVtdXSwgaXRlbTogU1I1SXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ2FtbW8nKSBwYXJ0c1swXS5wdXNoKGl0ZW0uZGF0YSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbS50eXBlID09PSAnbW9kaWZpY2F0aW9uJyAmJiBpdGVtLmRhdGEuZGF0YS50eXBlID09PSAnd2VhcG9uJykgcGFydHNbMV0ucHVzaChpdGVtLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ21vZGlmaWNhdGlvbicgJiYgaXRlbS5kYXRhLmRhdGEudHlwZSA9PT0gJ2FybW9yJykgcGFydHNbMl0ucHVzaChpdGVtLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnRzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBbW10sIFtdLCBbXV0sXHJcbiAgICAgICAgKTtcclxuICAgICAgICBkYXRhWydhbW11bml0aW9uJ10gPSBhbW11bml0aW9uO1xyXG4gICAgICAgIGRhdGFbJ3dlYXBvbk1vZHMnXSA9IHdlYXBvbk1vZHM7XHJcbiAgICAgICAgZGF0YVsnYXJtb3JNb2RzJ10gPSBhcm1vck1vZHM7XHJcbiAgICAgICAgLy8gVE9ETyBzZXQgdG8gdGhlIHByb3BlciBib29sZWFuIGZvciBpZiB0aGUgc291cmNlIFBERiBjYW4gYmUgYWNjZXNzZWRcclxuICAgICAgICAvLyBJJ20gdGhpbmtpbmcgbWF5YmUgY2hlY2sgZm9yIHRoZSBtb2QgYmVpbmcgaW5zdGFsbGVkP1xyXG4gICAgICAgIGRhdGFbJ2hhc1NvdXJjZVBkZkF2YWlsYWJsZSddID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFjdGl2YXRlIGV2ZW50IGxpc3RlbmVycyB1c2luZyB0aGUgcHJlcGFyZWQgc2hlZXQgSFRNTFxyXG4gICAgICogQHBhcmFtIGh0bWwge0hUTUx9ICAgVGhlIHByZXBhcmVkIEhUTUwgb2JqZWN0IHJlYWR5IHRvIGJlIHJlbmRlcmVkIGludG8gdGhlIERPTVxyXG4gICAgICovXHJcbiAgICBhY3RpdmF0ZUxpc3RlbmVycyhodG1sKSB7XHJcbiAgICAgICAgc3VwZXIuYWN0aXZhdGVMaXN0ZW5lcnMoaHRtbCk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbS50eXBlID09PSAnd2VhcG9uJykge1xyXG4gICAgICAgICAgICB0aGlzLmZvcm0ub25kcmFnb3ZlciA9IChldmVudCkgPT4gdGhpcy5fb25EcmFnT3ZlcihldmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuZm9ybS5vbmRyb3AgPSAoZXZlbnQpID0+IHRoaXMuX29uRHJvcChldmVudCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGh0bWwuZmluZCgnLmFkZC1uZXctYW1tbycpLmNsaWNrKHRoaXMuX29uQWRkTmV3QW1tby5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5hbW1vLWVxdWlwJykuY2xpY2sodGhpcy5fb25BbW1vRXF1aXAuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuYW1tby1kZWxldGUnKS5jbGljayh0aGlzLl9vbkFtbW9SZW1vdmUuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcuYW1tby1yZWxvYWQnKS5jbGljayh0aGlzLl9vbkFtbW9SZWxvYWQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGh0bWwuZmluZCgnLmVkaXQtaXRlbScpLmNsaWNrKHRoaXMuX29uRWRpdEl0ZW0uYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGh0bWwuZmluZCgnLmFkZC1uZXctbW9kJykuY2xpY2sodGhpcy5fb25BZGRXZWFwb25Nb2QuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgaHRtbC5maW5kKCcubW9kLWVxdWlwJykuY2xpY2sodGhpcy5fb25XZWFwb25Nb2RFcXVpcC5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5tb2QtZGVsZXRlJykuY2xpY2sodGhpcy5fb25XZWFwb25Nb2RSZW1vdmUuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGh0bWwuZmluZCgnLmFkZC1uZXctbGljZW5zZScpLmNsaWNrKHRoaXMuX29uQWRkTGljZW5zZS5iaW5kKHRoaXMpKTtcclxuICAgICAgICBodG1sLmZpbmQoJy5saWNlbnNlLWRlbGV0ZScpLm9uKCdjbGljaycsIHRoaXMuX29uUmVtb3ZlTGljZW5zZS5iaW5kKHRoaXMpKTtcclxuXHJcbiAgICAgICAgaHRtbC5maW5kKCcub3Blbi1zb3VyY2UtcGRmJykub24oJ2NsaWNrJywgdGhpcy5fb25PcGVuU291cmNlUGRmLmJpbmQodGhpcykpO1xyXG5cclxuICAgICAgICBodG1sLmZpbmQoJy5oYXMtZGVzYycpLmNsaWNrKChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gJChldmVudC5jdXJyZW50VGFyZ2V0KS5wYXJlbnRzKCcubGlzdC1pdGVtJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlpZCA9ICQoaXRlbSkuZGF0YSgpLml0ZW07XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gaXRlbS5uZXh0KCk7XHJcbiAgICAgICAgICAgIGZpZWxkLnRvZ2dsZSgpO1xyXG4gICAgICAgICAgICBpZiAoaWlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZmllbGQuaXMoJzp2aXNpYmxlJykpIHRoaXMuX3Nob3duRGVzYy5wdXNoKGlpZCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIHRoaXMuX3Nob3duRGVzYyA9IHRoaXMuX3Nob3duRGVzYy5maWx0ZXIoKHZhbCkgPT4gdmFsICE9PSBpaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGh0bWwuZmluZCgnLmhpZGRlbicpLmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBfb25EcmFnT3ZlcihldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vbkRyb3AoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGxldCBkYXRhO1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGV2ZW50LmRhdGFUcmFuc2Zlci5nZXREYXRhKCd0ZXh0L3BsYWluJykpO1xyXG4gICAgICAgICAgICBpZiAoZGF0YS50eXBlICE9PSAnSXRlbScpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTaGFkb3dydW41ZSB8IENhbiBvbmx5IGRyb3AgSXRlbXMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnU2hhZG93cnVuNWUgfCBkcm9wIGVycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBpdGVtO1xyXG4gICAgICAgIC8vIENhc2UgMSAtIERhdGEgZXhwbGljaXRseSBwcm92aWRlZFxyXG4gICAgICAgIGlmIChkYXRhLmRhdGEpIHtcclxuICAgICAgICAgICAgLy8gVE9ETyB0ZXN0XHJcbiAgICAgICAgICAgIGlmICh0aGlzLml0ZW0uaXNPd25lZCAmJiBkYXRhLmFjdG9ySWQgPT09IHRoaXMuaXRlbS5hY3Rvcj8uX2lkICYmIGRhdGEuZGF0YS5faWQgPT09IHRoaXMuaXRlbS5faWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTaGFkb3dydW41ZSB8IENhbnQgZHJvcCBpdGVtIG9uIGl0c2VsZicpO1xyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcignQXJlIHlvdSB0cnlpbmcgdG8gYnJlYWsgdGhlIGdhbWU/PycpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGl0ZW0gPSBkYXRhO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YS5wYWNrKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGRhdGEpO1xyXG4gICAgICAgICAgICAvLyBDYXNlIDIgLSBGcm9tIGEgQ29tcGVuZGl1bSBQYWNrXHJcbiAgICAgICAgICAgIC8vIFRPRE8gdGVzdFxyXG4gICAgICAgICAgICBpdGVtID0gYXdhaXQgdGhpcy5fZ2V0SXRlbUZyb21Db2xsZWN0aW9uKGRhdGEucGFjaywgZGF0YS5pZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gQ2FzZSAzIC0gRnJvbSBhIFdvcmxkIEVudGl0eVxyXG4gICAgICAgICAgICBpdGVtID0gZ2FtZS5pdGVtcy5nZXQoZGF0YS5pZCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLml0ZW0uY3JlYXRlT3duZWRJdGVtKGl0ZW0uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgX2dldEl0ZW1Gcm9tQ29sbGVjdGlvbihjb2xsZWN0aW9uLCBpdGVtSWQpIHtcclxuICAgICAgICBjb25zdCBwYWNrID0gZ2FtZS5wYWNrcy5maW5kKChwKSA9PiBwLmNvbGxlY3Rpb24gPT09IGNvbGxlY3Rpb24pO1xyXG4gICAgICAgIHJldHVybiBwYWNrLmdldEVudGl0eShpdGVtSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIF9ldmVudElkKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICByZXR1cm4gZXZlbnQuY3VycmVudFRhcmdldC5jbG9zZXN0KCcubGlzdC1pdGVtJykuZGF0YXNldC5pdGVtSWQ7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uT3BlblNvdXJjZVBkZihldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5pdGVtLm9wZW5QZGZTb3VyY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25FZGl0SXRlbShldmVudCkge1xyXG4gICAgICAgIGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW0uZ2V0T3duZWRJdGVtKHRoaXMuX2V2ZW50SWQoZXZlbnQpKTtcclxuICAgICAgICBpZiAoaXRlbSkge1xyXG4gICAgICAgICAgICBpdGVtLnNoZWV0LnJlbmRlcih0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uQWRkTGljZW5zZShldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5pdGVtLmFkZE5ld0xpY2Vuc2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25SZW1vdmVMaWNlbnNlKGV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zdCBpbmRleCA9IGV2ZW50LmN1cnJlbnRUYXJnZXQuZGF0YXNldC5pbmRleDtcclxuICAgICAgICBpZiAoaW5kZXggPj0gMCkgdGhpcy5pdGVtLnJlbW92ZUxpY2Vuc2UoaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vbldlYXBvbk1vZFJlbW92ZShldmVudCkge1xyXG4gICAgICAgIHRoaXMuaXRlbS5kZWxldGVPd25lZEl0ZW0odGhpcy5fZXZlbnRJZChldmVudCkpO1xyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIF9vbldlYXBvbk1vZEVxdWlwKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pdGVtLmVxdWlwV2VhcG9uTW9kKHRoaXMuX2V2ZW50SWQoZXZlbnQpKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25BZGRXZWFwb25Nb2QoZXZlbnQpIHtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSAnbW9kaWZpY2F0aW9uJztcclxuICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgICAgbmFtZTogYE5ldyAke0hlbHBlcnMubGFiZWwodHlwZSl9YCxcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgZGF0YTogZHVwbGljYXRlKGdhbWUuc3lzdGVtLm1vZGVsLkl0ZW0ubW9kaWZpY2F0aW9uKSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIGl0ZW1EYXRhLmRhdGEudHlwZSA9ICd3ZWFwb24nO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCBpdGVtID0gSXRlbS5jcmVhdGVPd25lZChpdGVtRGF0YSwgdGhpcy5pdGVtKTtcclxuICAgICAgICB0aGlzLml0ZW0uY3JlYXRlT3duZWRJdGVtKGl0ZW0uZGF0YSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uQW1tb1JlbG9hZChldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5pdGVtLnJlbG9hZEFtbW8oKTtcclxuICAgIH1cclxuXHJcbiAgICBhc3luYyBfb25BbW1vUmVtb3ZlKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pdGVtLmRlbGV0ZU93bmVkSXRlbSh0aGlzLl9ldmVudElkKGV2ZW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgYXN5bmMgX29uQW1tb0VxdWlwKGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5pdGVtLmVxdWlwQW1tbyh0aGlzLl9ldmVudElkKGV2ZW50KSk7XHJcbiAgICB9XHJcblxyXG4gICAgX29uQWRkTmV3QW1tbyhldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc3QgdHlwZSA9ICdhbW1vJztcclxuICAgICAgICBjb25zdCBpdGVtRGF0YSA9IHtcclxuICAgICAgICAgICAgbmFtZTogYE5ldyAke0hlbHBlcnMubGFiZWwodHlwZSl9YCxcclxuICAgICAgICAgICAgdHlwZTogdHlwZSxcclxuICAgICAgICAgICAgZGF0YTogZHVwbGljYXRlKGdhbWUuc3lzdGVtLm1vZGVsLkl0ZW0uYW1tbyksXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgY29uc3QgaXRlbSA9IEl0ZW0uY3JlYXRlT3duZWQoaXRlbURhdGEsIHRoaXMuaXRlbSk7XHJcbiAgICAgICAgdGhpcy5pdGVtLmNyZWF0ZU93bmVkSXRlbShpdGVtLmRhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX2ZpbmRBY3RpdmVMaXN0KCkge1xyXG4gICAgICAgIHJldHVybiAkKHRoaXMuZWxlbWVudCkuZmluZCgnLnRhYi5hY3RpdmUgLnNjcm9sbC1hcmVhJyk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIFRoaXMgaXMgbmVlZGVkIHRvIGNpcmN1bXZlbnQgQXBwbGljYXRpb24uY2xvc2Ugc2V0dGluZyBjbG9zZWQgc3RhdGUgZWFybHksIGR1ZSB0byBpdCdzIGFzeW5jIGFuaW1hdGlvblxyXG4gICAgICogLSBUaGUgbGVuZ3RoIG9mIHRoZSBjbG9zaW5nIGFuaW1hdGlvbiBjYW4ndCBiZSBsb25nZXIgdGhlbiBhbnkgYXdhaXQgdGltZSBpbiB0aGUgY2xvc2luZyBjeWNsZVxyXG4gICAgICogLSBGb3JtQXBwbGljYXRpb24uX29uU3VibWl0IHdpbGwgb3RoZXJ3aXNlIHNldCAuX3N0YXRlIHRvIFJFTkRFUkVEIGV2ZW4gaWYgdGhlIEFwcGxpY2F0aW9uIHdpbmRvdyBoYXMgY2xvc2VkIGFscmVhZHlcclxuICAgICAqIC0gU3Vic2VxdWVudCByZW5kZXIgY2FsbHMgdGhlbiB3aWxsIHNob3cgdGhlIHdpbmRvdyBhZ2FpbiwgZHVlIHRvIGl0J3Mgc3RhdGVcclxuICAgICAqXHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGZpeFN0YWxlUmVuZGVyZWRTdGF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09IEFwcGxpY2F0aW9uLlJFTkRFUl9TVEFURVMuUkVOREVSRUQgJiYgdWkud2luZG93c1t0aGlzLmFwcElkXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgU1I1SXRlbVNoZWV0IGFwcCBmb3IgJHt0aGlzLmVudGl0eS5uYW1lfSBpcyBzZXQgYXMgUkVOREVSRUQgYnV0IGhhcyBubyB3aW5kb3cgcmVnaXN0ZXJlZC4gRml4aW5nIGFwcCBpbnRlcm5hbCByZW5kZXIgc3RhdGUuIFRoaXMgaXMgYSBrbm93biBidWcuYCk7XHJcbiAgICAgICAgICAgIC8vIEhvdGZpeGluZyBpbnN0ZWFkIG9mIHRoaXMuY2xvc2UoKSBzaW5jZSBGb3JtQXBwbGljYXRpb24uY2xvc2UoKSBleHBlY3RzIGZvcm0gZWxlbWVudHMsIHdoaWNoIGRvbid0IGV4aXN0IGFueW1vcmUuXHJcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gQXBwbGljYXRpb24uUkVOREVSX1NUQVRFUy5DTE9TRUQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgYXN5bmMgX3JlbmRlcihmb3JjZSA9IGZhbHNlLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGZvciBhIHRpbWluZyBidWcuIFNlZSBmdW5jdGlvbiBkb2MgZm9yIGNvZGUgcmVtb3ZhbC4gR29vZCBsdWNrLCB0aGVyZSBiZSBkcmFnb25zIGhlcmUuIC0gdGFNXHJcbiAgICAgICAgdGhpcy5maXhTdGFsZVJlbmRlcmVkU3RhdGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5fc2F2ZVNjcm9sbFBvc2l0aW9ucygpO1xyXG4gICAgICAgIGF3YWl0IHN1cGVyLl9yZW5kZXIoZm9yY2UsIG9wdGlvbnMpO1xyXG4gICAgICAgIHRoaXMuX3Jlc3RvcmVTY3JvbGxQb3NpdGlvbnMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF9yZXN0b3JlU2Nyb2xsUG9zaXRpb25zKCkge1xyXG4gICAgICAgIGNvbnN0IGFjdGl2ZUxpc3QgPSB0aGlzLl9maW5kQWN0aXZlTGlzdCgpO1xyXG4gICAgICAgIGlmIChhY3RpdmVMaXN0Lmxlbmd0aCAmJiB0aGlzLl9zY3JvbGwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhY3RpdmVMaXN0LnByb3AoJ3Njcm9sbFRvcCcsIHRoaXMuX3Njcm9sbCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3NhdmVTY3JvbGxQb3NpdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgYWN0aXZlTGlzdCA9IHRoaXMuX2ZpbmRBY3RpdmVMaXN0KCk7XHJcbiAgICAgICAgaWYgKGFjdGl2ZUxpc3QubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Njcm9sbCA9IGFjdGl2ZUxpc3QucHJvcCgnc2Nyb2xsVG9wJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiIsImltcG9ydCB7IFNSNUl0ZW1TaGVldCB9IGZyb20gJy4vaXRlbS9TUjVJdGVtU2hlZXQnO1xyXG5pbXBvcnQgeyBTUjVBY3RvclNoZWV0IH0gZnJvbSAnLi9hY3Rvci9TUjVBY3RvclNoZWV0JztcclxuaW1wb3J0IHsgU1I1QWN0b3IgfSBmcm9tICcuL2FjdG9yL1NSNUFjdG9yJztcclxuaW1wb3J0IHsgU1I1SXRlbSB9IGZyb20gJy4vaXRlbS9TUjVJdGVtJztcclxuaW1wb3J0IHsgU1I1IH0gZnJvbSAnLi9jb25maWcnO1xyXG5pbXBvcnQgeyBIZWxwZXJzIH0gZnJvbSAnLi9oZWxwZXJzJztcclxuaW1wb3J0IHsgcmVnaXN0ZXJTeXN0ZW1TZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xyXG5pbXBvcnQgeyBwcmVDb21iYXRVcGRhdGUsIHNoYWRvd3J1bkNvbWJhdFVwZGF0ZSB9IGZyb20gJy4vY29tYmF0JztcclxuaW1wb3J0IHsgbWVhc3VyZURpc3RhbmNlIH0gZnJvbSAnLi9jYW52YXMnO1xyXG5pbXBvcnQgKiBhcyBjaGF0IGZyb20gJy4vY2hhdCc7XHJcbmltcG9ydCB7IE92ZXJ3YXRjaFNjb3JlVHJhY2tlciB9IGZyb20gJy4vYXBwcy9nbXRvb2xzL092ZXJ3YXRjaFNjb3JlVHJhY2tlcic7XHJcbmltcG9ydCB7IFNoYWRvd3J1blJvbGxlciB9IGZyb20gJy4vcm9sbHMvU2hhZG93cnVuUm9sbGVyJztcclxuaW1wb3J0IHsgTWlncmF0b3IgfSBmcm9tICcuL21pZ3JhdG9yL01pZ3JhdG9yJztcclxuaW1wb3J0IHsgU1lTVEVNX05BTUUgfSBmcm9tICcuL2NvbnN0YW50cyc7XHJcbmltcG9ydCB7IEhhbmRsZWJhck1hbmFnZXIgfSBmcm9tICcuL2hhbmRsZWJhcnMvSGFuZGxlYmFyTWFuYWdlcic7XHJcblxyXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG4vKiAgRm91bmRyeSBWVFQgSW5pdGlhbGl6YXRpb24gICAgICAgICAgICAgICAgICAqL1xyXG4vKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xyXG5cclxuSG9va3Mub25jZSgnaW5pdCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnNvbGUubG9nKCdMb2FkaW5nIFNoYWRvd3J1biA1ZSBTeXN0ZW0nKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBzaGFkb3dydW41ZSBuYW1lc3BhY2Ugd2l0aGluIHRoZSBnYW1lIGdsb2JhbFxyXG4gICAgZ2FtZVsnc2hhZG93cnVuNWUnXSA9IHtcclxuICAgICAgICBTUjVBY3RvcixcclxuICAgICAgICBTaGFkb3dydW5Sb2xsZXIsXHJcbiAgICAgICAgU1I1SXRlbSxcclxuICAgICAgICByb2xsSXRlbU1hY3JvLFxyXG4gICAgfTtcclxuXHJcbiAgICBDT05GSUcuU1I1ID0gU1I1O1xyXG4gICAgQ09ORklHLkFjdG9yLmVudGl0eUNsYXNzID0gU1I1QWN0b3I7XHJcbiAgICBDT05GSUcuSXRlbS5lbnRpdHlDbGFzcyA9IFNSNUl0ZW07XHJcblxyXG4gICAgcmVnaXN0ZXJTeXN0ZW1TZXR0aW5ncygpO1xyXG5cclxuICAgIC8vIFJlZ2lzdGVyIHNoZWV0IGFwcGxpY2F0aW9uIGNsYXNzZXNcclxuICAgIEFjdG9ycy51bnJlZ2lzdGVyU2hlZXQoJ2NvcmUnLCBBY3RvclNoZWV0KTtcclxuICAgIEFjdG9ycy5yZWdpc3RlclNoZWV0KFNZU1RFTV9OQU1FLCBTUjVBY3RvclNoZWV0LCB7IG1ha2VEZWZhdWx0OiB0cnVlIH0pO1xyXG4gICAgSXRlbXMudW5yZWdpc3RlclNoZWV0KCdjb3JlJywgSXRlbVNoZWV0KTtcclxuICAgIEl0ZW1zLnJlZ2lzdGVyU2hlZXQoU1lTVEVNX05BTUUsIFNSNUl0ZW1TaGVldCwgeyBtYWtlRGVmYXVsdDogdHJ1ZSB9KTtcclxuXHJcbiAgICBbJ3JlbmRlclNSNUFjdG9yU2hlZXQnLCAncmVuZGVyU1I1SXRlbVNoZWV0J10uZm9yRWFjaCgocykgPT4ge1xyXG4gICAgICAgIEhvb2tzLm9uKHMsIChhcHAsIGh0bWwpID0+IEhlbHBlcnMuc2V0dXBDdXN0b21DaGVja2JveChhcHAsIGh0bWwpKTtcclxuICAgIH0pO1xyXG5cclxuICAgIEhhbmRsZWJhck1hbmFnZXIubG9hZFRlbXBsYXRlcygpO1xyXG5cclxuICAgIC8vIENPTkZJRy5kZWJ1Zy5ob29rcyA9IHRydWU7XHJcbn0pO1xyXG5cclxuSG9va3Mub24oJ2NhbnZhc0luaXQnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyB0aGlzIGRvZXMgYWN0dWFsbHkgZXhpc3QuIEZpeCBpbiB0eXBlcz9cclxuICAgIC8vIEB0cy1pZ25vcmVcclxuICAgIFNxdWFyZUdyaWQucHJvdG90eXBlLm1lYXN1cmVEaXN0YW5jZSA9IG1lYXN1cmVEaXN0YW5jZTtcclxufSk7XHJcblxyXG5Ib29rcy5vbigncmVhZHknLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyB0aGlzIGlzIGNvcnJlY3QsIHdpbGwgbmVlZCB0byBiZSBmaXhlZCBpbiBmb3VuZHJ5IHR5cGVzXHJcbiAgICAvLyBAdHMtaWdub3JlXHJcbiAgICBnYW1lLnNvY2tldC5vbignc3lzdGVtLnNoYWRvd3J1bjVlJywgKGRhdGEpID0+IHtcclxuICAgICAgICBpZiAoZ2FtZS51c2VyLmlzR00gJiYgZGF0YS5nbUNvbWJhdFVwZGF0ZSkge1xyXG4gICAgICAgICAgICBzaGFkb3dydW5Db21iYXRVcGRhdGUoZGF0YS5nbUNvbWJhdFVwZGF0ZS5jaGFuZ2VzLCBkYXRhLmdtQ29tYmF0VXBkYXRlLm9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xyXG4gICAgICAgIE1pZ3JhdG9yLkJlZ2luTWlncmF0aW9uKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBkaWNlSWNvblNlbGVjdG9yID0gJyNjaGF0LWNvbnRyb2xzIC5yb2xsLXR5cGUtc2VsZWN0IC5mYS1kaWNlLWQyMCc7XHJcbiAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCBkaWNlSWNvblNlbGVjdG9yLCAoKSA9PiBTaGFkb3dydW5Sb2xsZXIucHJvbXB0Um9sbCgpKTtcclxufSk7XHJcblxyXG5Ib29rcy5vbigncHJlVXBkYXRlQ29tYmF0JywgcHJlQ29tYmF0VXBkYXRlKTtcclxuSG9va3Mub24oJ3JlbmRlckNoYXRNZXNzYWdlJywgKGFwcCwgaHRtbCkgPT4ge1xyXG4gICAgY2hhdC5hZGRSb2xsTGlzdGVuZXJzKGFwcCwgaHRtbCk7XHJcbn0pO1xyXG5cclxuSG9va3Mub24oJ2dldENoYXRMb2dFbnRyeUNvbnRleHQnLCBjaGF0LmFkZENoYXRNZXNzYWdlQ29udGV4dE9wdGlvbnMpO1xyXG5cclxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuLyogIEhvdGJhciBNYWNyb3MgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cclxuLyogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuXHJcbkhvb2tzLm9uKCdob3RiYXJEcm9wJywgKGJhciwgZGF0YSwgc2xvdCkgPT4ge1xyXG4gICAgaWYgKGRhdGEudHlwZSAhPT0gJ0l0ZW0nKSByZXR1cm47XHJcblxyXG4gICAgY3JlYXRlSXRlbU1hY3JvKGRhdGEuZGF0YSwgc2xvdCk7XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn0pO1xyXG5cclxuSG9va3Mub24oJ3JlbmRlclNjZW5lQ29udHJvbHMnLCAoY29udHJvbHMsIGh0bWwpID0+IHtcclxuICAgIGh0bWwuZmluZCgnW2RhdGEtdG9vbD1cIm92ZXJ3YXRjaC1zY29yZS10cmFja2VyXCJdJykub24oJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBuZXcgT3ZlcndhdGNoU2NvcmVUcmFja2VyKCkucmVuZGVyKHRydWUpO1xyXG4gICAgfSk7XHJcbn0pO1xyXG5cclxuSG9va3Mub24oJ2dldFNjZW5lQ29udHJvbEJ1dHRvbnMnLCAoY29udHJvbHMpID0+IHtcclxuICAgIGlmIChnYW1lLnVzZXIuaXNHTSkge1xyXG4gICAgICAgIGNvbnN0IHRva2VuQ29udHJvbHMgPSBjb250cm9scy5maW5kKChjKSA9PiBjLm5hbWUgPT09ICd0b2tlbicpO1xyXG4gICAgICAgIHRva2VuQ29udHJvbHMudG9vbHMucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWU6ICdvdmVyd2F0Y2gtc2NvcmUtdHJhY2tlcicsXHJcbiAgICAgICAgICAgIHRpdGxlOiAnQ09OVFJPTFMuU1I1Lk92ZXJ3YXRjaFNjb3JlVHJhY2tlcicsXHJcbiAgICAgICAgICAgIGljb246ICdmYXMgZmEtbmV0d29yay13aXJlZCcsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0pO1xyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIE1hY3JvIGZyb20gYW4gSXRlbSBkcm9wLlxyXG4gKiBHZXQgYW4gZXhpc3RpbmcgaXRlbSBtYWNybyBpZiBvbmUgZXhpc3RzLCBvdGhlcndpc2UgY3JlYXRlIGEgbmV3IG9uZS5cclxuICogQHBhcmFtIHtPYmplY3R9IGl0ZW0gICAgIFRoZSBpdGVtIGRhdGFcclxuICogQHBhcmFtIHtudW1iZXJ9IHNsb3QgICAgIFRoZSBob3RiYXIgc2xvdCB0byB1c2VcclxuICogQHJldHVybnMge1Byb21pc2V9XHJcbiAqL1xyXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVJdGVtTWFjcm8oaXRlbSwgc2xvdCkge1xyXG4gICAgY29uc3QgY29tbWFuZCA9IGBnYW1lLnNoYWRvd3J1bjVlLnJvbGxJdGVtTWFjcm8oXCIke2l0ZW0ubmFtZX1cIik7YDtcclxuICAgIGxldCBtYWNybyA9IGdhbWUubWFjcm9zLmVudGl0aWVzLmZpbmQoKG0pID0+IG0ubmFtZSA9PT0gaXRlbS5uYW1lKTtcclxuICAgIGlmICghbWFjcm8pIHtcclxuICAgICAgICBtYWNybyA9IChhd2FpdCBNYWNyby5jcmVhdGUoXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdzY3JpcHQnLFxyXG4gICAgICAgICAgICAgICAgaW1nOiBpdGVtLmltZyxcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6IGNvbW1hbmQsXHJcbiAgICAgICAgICAgICAgICBmbGFnczogeyAnc2hhZG93cnVuNWUuaXRlbU1hY3JvJzogdHJ1ZSB9LFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB7IGRpc3BsYXlTaGVldDogZmFsc2UgfSxcclxuICAgICAgICApKSBhcyBNYWNybztcclxuICAgIH1cclxuICAgIGlmIChtYWNybykgZ2FtZS51c2VyLmFzc2lnbkhvdGJhck1hY3JvKG1hY3JvLCBzbG90KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIENyZWF0ZSBhIE1hY3JvIGZyb20gYW4gSXRlbSBkcm9wLlxyXG4gKiBHZXQgYW4gZXhpc3RpbmcgaXRlbSBtYWNybyBpZiBvbmUgZXhpc3RzLCBvdGhlcndpc2UgY3JlYXRlIGEgbmV3IG9uZS5cclxuICogQHBhcmFtIHtzdHJpbmd9IGl0ZW1OYW1lXHJcbiAqIEByZXR1cm4ge1Byb21pc2V9XHJcbiAqL1xyXG5mdW5jdGlvbiByb2xsSXRlbU1hY3JvKGl0ZW1OYW1lKSB7XHJcbiAgICBjb25zdCBzcGVha2VyID0gQ2hhdE1lc3NhZ2UuZ2V0U3BlYWtlcigpO1xyXG4gICAgbGV0IGFjdG9yO1xyXG4gICAgaWYgKHNwZWFrZXIudG9rZW4pIGFjdG9yID0gZ2FtZS5hY3RvcnMudG9rZW5zW3NwZWFrZXIudG9rZW5dO1xyXG4gICAgaWYgKCFhY3RvcikgYWN0b3IgPSBnYW1lLmFjdG9ycy5nZXQoc3BlYWtlci5hY3Rvcik7XHJcbiAgICBjb25zdCBpdGVtID0gYWN0b3IgPyBhY3Rvci5pdGVtcy5maW5kKChpKSA9PiBpLm5hbWUgPT09IGl0ZW1OYW1lKSA6IG51bGw7XHJcbiAgICBpZiAoIWl0ZW0pIHtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgcmV0dXJuIHVpLm5vdGlmaWNhdGlvbnMud2FybihgWW91ciBjb250cm9sbGVkIEFjdG9yIGRvZXMgbm90IGhhdmUgYW4gaXRlbSBuYW1lZCAke2l0ZW1OYW1lfWApO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpdGVtLnBvc3RDYXJkKCk7XHJcbn1cclxuXHJcbkhhbmRsZWJhck1hbmFnZXIucmVnaXN0ZXJIZWxwZXJzKCk7XHJcblxyXG4iLCJpbXBvcnQgeyBWZXJzaW9uTWlncmF0aW9uIH0gZnJvbSAnLi9WZXJzaW9uTWlncmF0aW9uJztcclxuaW1wb3J0IHsgTGVnYWN5TWlncmF0aW9uIH0gZnJvbSAnLi92ZXJzaW9ucy9MZWdhY3lNaWdyYXRpb24nO1xyXG5pbXBvcnQgeyBWZXJzaW9uMF82XzUgfSBmcm9tICcuL3ZlcnNpb25zL1ZlcnNpb24wXzZfNSc7XHJcbmltcG9ydCB7IFZlcnNpb24wXzZfMTAgfSBmcm9tICcuL3ZlcnNpb25zL1ZlcnNpb24wXzZfMTAnO1xyXG5cclxudHlwZSBWZXJzaW9uRGVmaW5pdGlvbiA9IHtcclxuICAgIHZlcnNpb25OdW1iZXI6IHN0cmluZztcclxuICAgIG1pZ3JhdGlvbjogVmVyc2lvbk1pZ3JhdGlvbjtcclxufTtcclxuZXhwb3J0IGNsYXNzIE1pZ3JhdG9yIHtcclxuICAgIC8vIE1hcCBvZiBhbGwgdmVyc2lvbiBtaWdyYXRpb25zIHRvIHRoZWlyIHRhcmdldCB2ZXJzaW9uIG51bWJlcnMuXHJcbiAgICBwcml2YXRlIHN0YXRpYyByZWFkb25seSBzX1ZlcnNpb25zOiBWZXJzaW9uRGVmaW5pdGlvbltdID0gW1xyXG4gICAgICAgIHsgdmVyc2lvbk51bWJlcjogTGVnYWN5TWlncmF0aW9uLlRhcmdldFZlcnNpb24sIG1pZ3JhdGlvbjogbmV3IExlZ2FjeU1pZ3JhdGlvbigpIH0sXHJcbiAgICAgICAgeyB2ZXJzaW9uTnVtYmVyOiBWZXJzaW9uMF82XzUuVGFyZ2V0VmVyc2lvbiwgbWlncmF0aW9uOiBuZXcgVmVyc2lvbjBfNl81KCkgfSxcclxuICAgICAgICB7IHZlcnNpb25OdW1iZXI6IFZlcnNpb24wXzZfMTAuVGFyZ2V0VmVyc2lvbiwgbWlncmF0aW9uOiBuZXcgVmVyc2lvbjBfNl8xMCgpIH0sXHJcbiAgICBdO1xyXG5cclxuICAgIC8vVE9ETzogQ2FsbCBvbiBJbml0KClcclxuICAgIHB1YmxpYyBzdGF0aWMgYXN5bmMgQmVnaW5NaWdyYXRpb24oKSB7XHJcbiAgICAgICAgbGV0IGN1cnJlbnRWZXJzaW9uID0gZ2FtZS5zZXR0aW5ncy5nZXQoVmVyc2lvbk1pZ3JhdGlvbi5NT0RVTEVfTkFNRSwgVmVyc2lvbk1pZ3JhdGlvbi5LRVlfREFUQV9WRVJTSU9OKTtcclxuICAgICAgICBpZiAoY3VycmVudFZlcnNpb24gPT09IHVuZGVmaW5lZCB8fCBjdXJyZW50VmVyc2lvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjdXJyZW50VmVyc2lvbiA9IFZlcnNpb25NaWdyYXRpb24uTk9fVkVSU0lPTjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG1pZ3JhdGlvbnMgPSBNaWdyYXRvci5zX1ZlcnNpb25zLmZpbHRlcigoeyB2ZXJzaW9uTnVtYmVyIH0pID0+IHtcclxuICAgICAgICAgICAgLy8gaWYgdmVyc2lvbk5VbWJlciBpcyBncmVhdGVyIHRoYW4gY3VycmVudFZlcnNpb24sIHdlIG5lZWQgdG8gYXBwbHkgdGhpcyBtaWdyYXRpb25cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZVZlcnNpb24odmVyc2lvbk51bWJlciwgY3VycmVudFZlcnNpb24pID09PSAxO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBObyBtaWdyYXRpb25zIGFyZSByZXF1aXJlZCwgZXhpdC5cclxuICAgICAgICBpZiAobWlncmF0aW9ucy5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgbG9jYWxpemVkV2FybmluZ1RpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuTUlHUkFUSU9OLldhcm5pbmdUaXRsZScpO1xyXG4gICAgICAgIGNvbnN0IGxvY2FsaXplZFdhcm5pbmdIZWFkZXIgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5NSUdSQVRJT04uV2FybmluZ0hlYWRlcicpO1xyXG4gICAgICAgIGNvbnN0IGxvY2FsaXplZFdhcm5pbmdSZXF1aXJlZCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1Lk1JR1JBVElPTi5XYXJuaW5nUmVxdWlyZWQnKTtcclxuICAgICAgICBjb25zdCBsb2NhbGl6ZWRXYXJuaW5nRGVzY3JpcHRpb24gPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5NSUdSQVRJT04uV2FybmluZ0Rlc2NyaXB0aW9uJyk7XHJcbiAgICAgICAgY29uc3QgbG9jYWxpemVkV2FybmluZ0JhY2t1cCA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1Lk1JR1JBVElPTi5XYXJuaW5nQmFja3VwJyk7XHJcbiAgICAgICAgY29uc3QgbG9jYWxpemVkV2FybmluZ0JlZ2luID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuTUlHUkFUSU9OLkJlZ2luTWlncmF0aW9uJyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGQgPSBuZXcgRGlhbG9nKHtcclxuICAgICAgICAgICAgdGl0bGU6IGxvY2FsaXplZFdhcm5pbmdUaXRsZSxcclxuICAgICAgICAgICAgY29udGVudDpcclxuICAgICAgICAgICAgICAgIGA8aDIgc3R5bGU9XCJjb2xvcjogcmVkOyB0ZXh0LWFsaWduOiBjZW50ZXJcIj4ke2xvY2FsaXplZFdhcm5pbmdIZWFkZXJ9PC9oMj5gICtcclxuICAgICAgICAgICAgICAgIGA8cCBzdHlsZT1cInRleHQtYWxpZ246IGNlbnRlclwiPjxpPiR7bG9jYWxpemVkV2FybmluZ1JlcXVpcmVkfTwvaT48L3A+YCArXHJcbiAgICAgICAgICAgICAgICBgPHA+JHtsb2NhbGl6ZWRXYXJuaW5nRGVzY3JpcHRpb259PC9wPmAgK1xyXG4gICAgICAgICAgICAgICAgYDxoMyBzdHlsZT1cImNvbG9yOiByZWRcIj4ke2xvY2FsaXplZFdhcm5pbmdCYWNrdXB9PC9oMz5gLFxyXG4gICAgICAgICAgICBidXR0b25zOiB7XHJcbiAgICAgICAgICAgICAgICBvazoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBsb2NhbGl6ZWRXYXJuaW5nQmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMubWlncmF0ZShtaWdyYXRpb25zKSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdvaycsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgZC5yZW5kZXIodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgbWlncmF0ZShtaWdyYXRpb25zOiBWZXJzaW9uRGVmaW5pdGlvbltdKSB7XHJcbiAgICAgICAgLy8gd2Ugd2FudCB0byBhcHBseSBtaWdyYXRpb25zIGluIGFzY2VuZGluZyBvcmRlciB1bnRpbCB3ZSdyZSB1cCB0byB0aGUgbGF0ZXN0XHJcbiAgICAgICAgbWlncmF0aW9ucy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVWZXJzaW9uKGEudmVyc2lvbk51bWJlciwgYi52ZXJzaW9uTnVtYmVyKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5taWdyYXRlV29ybGQoZ2FtZSwgbWlncmF0aW9ucyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5taWdyYXRlQ29tcGVuZGl1bShnYW1lLCBtaWdyYXRpb25zKTtcclxuXHJcbiAgICAgICAgY29uc3QgbG9jYWxpemVkV2FybmluZ1RpdGxlID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuTUlHUkFUSU9OLlN1Y2Nlc3NUaXRsZScpO1xyXG4gICAgICAgIGNvbnN0IGxvY2FsaXplZFdhcm5pbmdIZWFkZXIgPSBnYW1lLmkxOG4ubG9jYWxpemUoJ1NSNS5NSUdSQVRJT04uU3VjY2Vzc0hlYWRlcicpO1xyXG4gICAgICAgIGNvbnN0IGxvY2FsaXplZFN1Y2Nlc3NEZXNjcmlwdGlvbiA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1Lk1JR1JBVElPTi5TdWNjZXNzRGVzY3JpcHRpb24nKTtcclxuICAgICAgICBjb25zdCBsb2NhbGl6ZWRTdWNjZXNzUGFja3NJbmZvID0gZ2FtZS5pMThuLmxvY2FsaXplKCdTUjUuTUlHUkFUSU9OLlN1Y2Nlc3NQYWNrc0luZm8nKTtcclxuICAgICAgICBjb25zdCBsb2NhbGl6ZWRTdWNjZXNzQ29uZmlybSA9IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1Lk1JR1JBVElPTi5TdWNjZXNzQ29uZmlybScpO1xyXG4gICAgICAgIGNvbnN0IHBhY2tzRGlhbG9nID0gbmV3IERpYWxvZyh7XHJcbiAgICAgICAgICAgIHRpdGxlOiBsb2NhbGl6ZWRXYXJuaW5nVGl0bGUsXHJcbiAgICAgICAgICAgIGNvbnRlbnQ6XHJcbiAgICAgICAgICAgICAgICBgPGgyIHN0eWxlPVwidGV4dC1hbGlnbjogY2VudGVyOyBjb2xvcjogZ3JlZW5cIj4ke2xvY2FsaXplZFdhcm5pbmdIZWFkZXJ9PC9oMj5gICtcclxuICAgICAgICAgICAgICAgIGA8cD4ke2xvY2FsaXplZFN1Y2Nlc3NEZXNjcmlwdGlvbn08L3A+YCArXHJcbiAgICAgICAgICAgICAgICBgPHAgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXJcIj48aT4ke2xvY2FsaXplZFN1Y2Nlc3NQYWNrc0luZm99PC9pPjwvcD5gLFxyXG4gICAgICAgICAgICBidXR0b25zOiB7XHJcbiAgICAgICAgICAgICAgICBvazoge1xyXG4gICAgICAgICAgICAgICAgICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1jaGVja1wiPjwvaT4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBsb2NhbGl6ZWRTdWNjZXNzQ29uZmlybSxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmF1bHQ6ICdvaycsXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGFja3NEaWFsb2cucmVuZGVyKHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWlncmF0ZSBhbGwgd29ybGQgb2JqZWN0c1xyXG4gICAgICogQHBhcmFtIGdhbWVcclxuICAgICAqIEBwYXJhbSBtaWdyYXRpb25zXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIG1pZ3JhdGVXb3JsZChnYW1lOiBHYW1lLCBtaWdyYXRpb25zOiBWZXJzaW9uRGVmaW5pdGlvbltdKSB7XHJcbiAgICAgICAgLy8gUnVuIHRoZSBtaWdyYXRpb25zIGluIG9yZGVyXHJcbiAgICAgICAgZm9yIChjb25zdCB7IG1pZ3JhdGlvbiB9IG9mIG1pZ3JhdGlvbnMpIHtcclxuICAgICAgICAgICAgYXdhaXQgbWlncmF0aW9uLk1pZ3JhdGUoZ2FtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZSBvdmVyIGFsbCB3b3JsZCBjb21wZW5kaXVtIHBhY2tzXHJcbiAgICAgKiBAcGFyYW0gZ2FtZSBHYW1lIHRoYXQgd2lsbCBiZSBtaWdyYXRlZFxyXG4gICAgICogQHBhcmFtIG1pZ3JhdGlvbnMgSW5zdGFuY2VzIG9mIHRoZSB2ZXJzaW9uIG1pZ3JhdGlvblxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBhc3luYyBtaWdyYXRlQ29tcGVuZGl1bShnYW1lOiBHYW1lLCBtaWdyYXRpb25zOiBWZXJzaW9uRGVmaW5pdGlvbltdKSB7XHJcbiAgICAgICAgLy8gTWlncmF0ZSBXb3JsZCBDb21wZW5kaXVtIFBhY2tzXHJcbiAgICAgICAgY29uc3QgcGFja3MgPSBnYW1lLnBhY2tzLmZpbHRlcigocGFjaykgPT4gcGFjay5tZXRhZGF0YS5wYWNrYWdlID09PSAnd29ybGQnICYmIFsnQWN0b3InLCAnSXRlbScsICdTY2VuZSddLmluY2x1ZGVzKHBhY2subWV0YWRhdGEuZW50aXR5KSk7XHJcblxyXG4gICAgICAgIC8vIFJ1biB0aGUgbWlncmF0aW9ucyBpbiBvcmRlciBvbiBlYWNoIHBhY2suXHJcbiAgICAgICAgZm9yIChjb25zdCBwYWNrIG9mIHBhY2tzKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgeyBtaWdyYXRpb24gfSBvZiBtaWdyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBtaWdyYXRpb24uTWlncmF0ZUNvbXBlbmRpdW1QYWNrKHBhY2spO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIGZvdW5kIGF0OiBodHRwczovL2hlbGxvYWNtLmNvbS90aGUtamF2YXNjcmlwdC1mdW5jdGlvbi10by1jb21wYXJlLXZlcnNpb24tbnVtYmVyLXN0cmluZ3MvXHJcbiAgICAvLyB1cGRhdGVkIGZvciB0eXBlc2NyaXB0XHJcbiAgICAvKipcclxuICAgICAqIGNvbXBhcmUgdHdvIHZlcnNpb24gbnVtYmVycywgcmV0dXJucyAxIGlmIHYxID4gdjIsIC0xIGlmIHYxIDwgdjIsIDAgaWYgZXF1YWxcclxuICAgICAqIEBwYXJhbSB2MVxyXG4gICAgICogQHBhcmFtIHYyXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBzdGF0aWMgY29tcGFyZVZlcnNpb24odjE6IHN0cmluZywgdjI6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHMxID0gdjEuc3BsaXQoJy4nKS5tYXAoKHMpID0+IHBhcnNlSW50KHMsIDEwKSk7XHJcbiAgICAgICAgY29uc3QgczIgPSB2Mi5zcGxpdCgnLicpLm1hcCgocykgPT4gcGFyc2VJbnQocywgMTApKTtcclxuICAgICAgICBjb25zdCBrID0gTWF0aC5taW4odjEubGVuZ3RoLCB2Mi5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgazsgKytpKSB7XHJcbiAgICAgICAgICAgIGlmIChzMVtpXSA+IHMyW2ldKSByZXR1cm4gMTtcclxuICAgICAgICAgICAgaWYgKHMxW2ldIDwgczJbaV0pIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHYxLmxlbmd0aCA9PT0gdjIubGVuZ3RoID8gMCA6IHYxLmxlbmd0aCA8IHYyLmxlbmd0aCA/IC0xIDogMTtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBTUjVBY3RvciB9IGZyb20gJy4uL2FjdG9yL1NSNUFjdG9yJztcclxuXHJcbi8qKlxyXG4gKiBDb252ZXJ0cyBhIGdhbWUncyBkYXRhIG1vZGVsIGZyb20gc291cmNlIHZlcnNpb24gdG8gYSB0YXJnZXQgdmVyc2lvbi5cclxuICogRXh0ZW5kaW5nIGNsYXNzZXMgYXJlIG9ubHkgcmVxdWlyZWQgdG8gaGFuZGxlIGl0ZW1zLCBhY3RvcnMsIGFuZCBzY2VuZXMsXHJcbiAqICBvdGhlciBtZXRob2RzIGFyZSBpbXBsZW1lbnRhYmxlIHB1cmVseSBmb3IgY29udmVuaWVuY2UgYW5kIGF0b21pY2l0eS5cclxuICovXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWZXJzaW9uTWlncmF0aW9uIHtcclxuICAgIHN0YXRpYyByZWFkb25seSBNT0RVTEVfTkFNRSA9ICdzaGFkb3dydW41ZSc7XHJcbiAgICBzdGF0aWMgcmVhZG9ubHkgS0VZX0RBVEFfVkVSU0lPTiA9ICdzeXN0ZW1NaWdyYXRpb25WZXJzaW9uJztcclxuICAgIHN0YXRpYyByZWFkb25seSBOT19WRVJTSU9OID0gJzAnO1xyXG5cclxuICAgIHByaXZhdGUgbV9BYm9ydDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gICAgcHJpdmF0ZSBtX0Fib3J0UmVhc29uOiBzdHJpbmc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgYWxsb3dlZCB2ZXJzaW9uIHRoaXMgbWlncmF0b3Igc2hvdWxkIGJlIGFibGUgdG8gb3BlcmF0ZSBvbi5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFic3RyYWN0IGdldCBTb3VyY2VWZXJzaW9uKCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHJlc3VsdGluZyB2ZXJzaW9uIHRoaXMgbWlncmF0b3Igd2lsbCBwcm9kdWNlLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0IFRhcmdldFZlcnNpb24oKTogc3RyaW5nO1xyXG5cclxuICAgIHB1YmxpYyBnZXQgU291cmNlVmVyc2lvbkZyaWVuZGx5TmFtZSgpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBgdiR7dGhpcy5Tb3VyY2VWZXJzaW9ufWA7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgZ2V0IFRhcmdldFZlcnNpb25GcmllbmRseU5hbWUoKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gYHYke3RoaXMuVGFyZ2V0VmVyc2lvbn1gO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogRmxhZyB0aGUgbWlncmF0aW9uIHRvIGJlIGFib3J0ZWQuXHJcbiAgICAgKiBAcGFyYW0gcmVhc29uIFRoZSByZWFzb24gdGhhdCB0aGUgbWlncmF0aW9uIG11c3QgYmUgYWJvcnRlZCwgdG8gYmUgZGlzcGxheWVkXHJcbiAgICAgKiAgdG8gdGhlIHVzZXIgYW5kIHJldHVybmVkIGZyb20gdGhlIG1pZ3JhdGlvbiBjYWxsLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYWJvcnQocmVhc29uOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1fQWJvcnQgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMubV9BYm9ydFJlYXNvbiA9IHJlYXNvbjtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgdWkubm90aWZpY2F0aW9ucy5lcnJvcihgRGF0YSBtaWdyYXRpb24gaGFzIGJlZW4gYWJvcnRlZDogJHtyZWFzb259YCwgeyBwZXJtYW5lbnQ6IHRydWUgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBCZWdpbiBtaWdyYXRpb24gZm9yIHRoZSBzcGVjaWZpZWQgZ2FtZS5cclxuICAgICAqIEBwYXJhbSBnYW1lIFRoZSB3b3JsZCB0aGF0IHNob3VsZCBiZSBtaWdyYXRlZC5cclxuICAgICAqL1xyXG4gICAgcHVibGljIGFzeW5jIE1pZ3JhdGUoZ2FtZTogR2FtZSkge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ETyBVbmlnbm9yZSB3aGVuIEZvdW5kcnkgVHlwZXMgdXBkYXRlc1xyXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhgQmVnaW5uaW5nIFNoYWRvd3J1biBzeXN0ZW0gbWlncmF0aW9uIGZyb20gdmVyc2lvbiAke3RoaXMuU291cmNlVmVyc2lvbkZyaWVuZGx5TmFtZX0gdG8gJHt0aGlzLlRhcmdldFZlcnNpb25GcmllbmRseU5hbWV9LmApO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ETyBVbmlnbm9yZSB3aGVuIEZvdW5kcnkgVHlwZXMgdXBkYXRlc1xyXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMud2FybihgUGxlYXNlIGRvIG5vdCBjbG9zZSB5b3VyIGdhbWUgb3Igc2h1dGRvd24gRm91bmRyeVZUVC5gLCB7XHJcbiAgICAgICAgICAgIHBlcm1hbmVudDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8gTWFwIG9mIGVudGl0aWVzIHRvIHVwZGF0ZSwgc3RvcmUgdW50aWwgbGF0ZXIgdG8gcmVkdWNlIGNoYW5jZSBvZiBwYXJ0aWFsIHVwZGF0ZXNcclxuICAgICAgICAvLyB3aGljaCBtYXkgcmVzdWx0IGluIGltcG9zc2libGUgZ2FtZSBzdGF0ZXMuXHJcbiAgICAgICAgY29uc3QgZW50aXR5VXBkYXRlczogTWFwPEVudGl0eSwgRW50aXR5VXBkYXRlPiA9IG5ldyBNYXA8RW50aXR5LCBFbnRpdHlVcGRhdGU+KCk7XHJcblxyXG4gICAgICAgIC8vIE1pZ3JhdGUgV29ybGQgSXRlbXNcclxuICAgICAgICBhd2FpdCB0aGlzLlByZU1pZ3JhdGVJdGVtRGF0YShnYW1lLCBlbnRpdHlVcGRhdGVzKTtcclxuICAgICAgICBpZiAodGhpcy5tX0Fib3J0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh0aGlzLm1fQWJvcnRSZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCB0aGlzLkl0ZXJhdGVJdGVtcyhnYW1lLCBlbnRpdHlVcGRhdGVzKTtcclxuICAgICAgICBhd2FpdCB0aGlzLlBvc3RNaWdyYXRlSXRlbURhdGEoZ2FtZSwgZW50aXR5VXBkYXRlcyk7XHJcbiAgICAgICAgaWYgKHRoaXMubV9BYm9ydCkge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QodGhpcy5tX0Fib3J0UmVhc29uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIE1pZ3JhdGUgV29ybGQgQWN0b3JzXHJcbiAgICAgICAgYXdhaXQgdGhpcy5QcmVNaWdyYXRlQWN0b3JEYXRhKGdhbWUsIGVudGl0eVVwZGF0ZXMpO1xyXG4gICAgICAgIGlmICh0aGlzLm1fQWJvcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHRoaXMubV9BYm9ydFJlYXNvbik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGF3YWl0IHRoaXMuSXRlcmF0ZUFjdG9ycyhnYW1lLCBlbnRpdHlVcGRhdGVzKTtcclxuICAgICAgICBhd2FpdCB0aGlzLlBvc3RNaWdyYXRlQWN0b3JEYXRhKGdhbWUsIGVudGl0eVVwZGF0ZXMpO1xyXG4gICAgICAgIGlmICh0aGlzLm1fQWJvcnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHRoaXMubV9BYm9ydFJlYXNvbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBNaWdyYXRlIEFjdG9yIFRva2Vuc1xyXG4gICAgICAgIGF3YWl0IHRoaXMuUHJlTWlncmF0ZVNjZW5lRGF0YShnYW1lLCBlbnRpdHlVcGRhdGVzKTtcclxuICAgICAgICBpZiAodGhpcy5tX0Fib3J0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh0aGlzLm1fQWJvcnRSZWFzb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBhd2FpdCB0aGlzLkl0ZXJhdGVTY2VuZXMoZ2FtZSwgZW50aXR5VXBkYXRlcyk7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5Qb3N0TWlncmF0ZVNjZW5lRGF0YShnYW1lLCBlbnRpdHlVcGRhdGVzKTtcclxuICAgICAgICBpZiAodGhpcy5tX0Fib3J0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdCh0aGlzLm1fQWJvcnRSZWFzb24pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQXBwbHkgdGhlIHVwZGF0ZXMsIHRoaXMgc2hvdWxkICphbHdheXMqIHdvcmssIG5vdyB0aGF0IHBhcnNpbmcgaXMgY29tcGxldGUuXHJcbiAgICAgICAgYXdhaXQgdGhpcy5BcHBseShlbnRpdHlVcGRhdGVzKTtcclxuXHJcbiAgICAgICAgYXdhaXQgZ2FtZS5zZXR0aW5ncy5zZXQoVmVyc2lvbk1pZ3JhdGlvbi5NT0RVTEVfTkFNRSwgVmVyc2lvbk1pZ3JhdGlvbi5LRVlfREFUQV9WRVJTSU9OLCB0aGlzLlRhcmdldFZlcnNpb24pO1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmUgVE9ETyBVbmlnbm9yZSB3aGVuIEZvdW5kcnkgVHlwZXMgdXBkYXRlc1xyXG4gICAgICAgIHVpLm5vdGlmaWNhdGlvbnMuaW5mbyhgU2hhZG93cnVuIHN5c3RlbSBtaWdyYXRpb24gc3VjY2Vzc2Z1bGx5IG1pZ3JhdGVkIHRvIHZlcnNpb24gJHt0aGlzLlRhcmdldFZlcnNpb259LmAsIHsgcGVybWFuZW50OiB0cnVlIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbGllcyB0aGUgc3BlY2lmaWVkIG1hcHBpbmcgb2YgZW50aXRpZXMsIGl0ZXJhdGl2ZWx5IHVwZGF0aW5nIGVhY2guXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5VXBkYXRlcyBBIG1hcHBpbmcgb2YgZW50aXR5IHVwZGF0ZURhdGEgcGFpcnMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBBcHBseShlbnRpdHlVcGRhdGVzOiBNYXA8RW50aXR5LCBFbnRpdHlVcGRhdGU+KSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBbZW50aXR5LCB7IHVwZGF0ZURhdGEsIGVtYmVkZGVkSXRlbXMgfV0gb2YgZW50aXR5VXBkYXRlcykge1xyXG4gICAgICAgICAgICBpZiAoZW1iZWRkZWRJdGVtcyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0b3IgPSBlbnRpdHkgYXMgU1I1QWN0b3I7XHJcbiAgICAgICAgICAgICAgICBhd2FpdCBhY3Rvci51cGRhdGVPd25lZEl0ZW0oZW1iZWRkZWRJdGVtcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgYXdhaXQgZW50aXR5LnVwZGF0ZSh1cGRhdGVEYXRhLCB7IGVuZm9yY2VUeXBlczogZmFsc2UgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZSB0aHJvdWdoIGFsbCBzY2VuZXMgYW5kIG1pZ3JhdGUgZWFjaCBpZiBuZWVkZWQuXHJcbiAgICAgKiBAcGFyYW0gZ2FtZVxyXG4gICAgICogQHBhcmFtIGVudGl0eVVwZGF0ZXNcclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFzeW5jIEl0ZXJhdGVTY2VuZXMoZ2FtZTogR2FtZSwgZW50aXR5VXBkYXRlczogTWFwPEVudGl0eSwgRW50aXR5VXBkYXRlPikge1xyXG4gICAgICAgIGZvciAoY29uc3Qgc2NlbmUgb2YgZ2FtZS5zY2VuZXMuZW50aXRpZXMpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGlmICghKGF3YWl0IHRoaXMuU2hvdWxkTWlncmF0ZVNjZW5lRGF0YShzY2VuZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHNjZW5lLl9pZCA9PT0gJ01Bd1NGaGxYUmlwaXhPV3cnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ1NjZW5lIFByZS1VcGRhdGUnKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzY2VuZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYE1pZ3JhdGluZyBTY2VuZSBlbnRpdHkgJHtzY2VuZS5uYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IGF3YWl0IHRoaXMuTWlncmF0ZVNjZW5lRGF0YShkdXBsaWNhdGUoc2NlbmUuZGF0YSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBoYXNUb2tlblVwZGF0ZXMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEudG9rZW5zID0gYXdhaXQgUHJvbWlzZS5hbGwoXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIHNjZW5lLmRhdGEudG9rZW5zLm1hcChhc3luYyAodG9rZW4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzT2JqZWN0RW1wdHkodG9rZW4uYWN0b3JEYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9rZW5EYXRhVXBkYXRlID0gYXdhaXQgdGhpcy5NaWdyYXRlQWN0b3JEYXRhKHRva2VuLmFjdG9yRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNPYmplY3RFbXB0eSh0b2tlbkRhdGFVcGRhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNUb2tlblVwZGF0ZXMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9rZW5EYXRhVXBkYXRlWydfaWQnXSA9IHRva2VuLl9pZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdUb2tlbiA9IGR1cGxpY2F0ZSh0b2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUb2tlbi5hY3RvckRhdGEgPSBhd2FpdCBtZXJnZU9iamVjdCh0b2tlbi5hY3RvckRhdGEsIHRva2VuRGF0YVVwZGF0ZSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZm9yY2VUeXBlczogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wbGFjZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG5ld1Rva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0b2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGlmIChzY2VuZS5faWQgPT09ICdNQXdTRmhsWFJpcGl4T1d3Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdTY2VuZSBQcmUtVXBkYXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coc2NlbmUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChpc09iamVjdEVtcHR5KHVwZGF0ZURhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZXhwYW5kT2JqZWN0KHVwZGF0ZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgZW50aXR5VXBkYXRlcy5zZXQoc2NlbmUsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYmVkZGVkSXRlbXM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZSB0aHJvdWdoIGFsbCBpdGVtcyBhbmQgbWlncmF0ZSBlYWNoIGlmIG5lZWRlZC5cclxuICAgICAqIEBwYXJhbSBnYW1lIFRoZSBnYW1lIHRvIGJlIHVwZGF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5VXBkYXRlcyBUaGUgY3VycmVudCBtYXAgb2YgZW50aXR5IHVwZGF0ZXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBJdGVyYXRlSXRlbXMoZ2FtZTogR2FtZSwgZW50aXR5VXBkYXRlczogTWFwPEVudGl0eSwgRW50aXR5VXBkYXRlPikge1xyXG4gICAgICAgIGZvciAoY29uc3QgaXRlbSBvZiBnYW1lLml0ZW1zLmVudGl0aWVzKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShhd2FpdCB0aGlzLlNob3VsZE1pZ3JhdGVJdGVtRGF0YShpdGVtLmRhdGEpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBNaWdyYXRpbmcgSXRlbTogJHtpdGVtLm5hbWV9YCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVEYXRhID0gYXdhaXQgdGhpcy5NaWdyYXRlSXRlbURhdGEoaXRlbS5kYXRhKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3RFbXB0eSh1cGRhdGVEYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGV4cGFuZE9iamVjdCh1cGRhdGVEYXRhKTtcclxuICAgICAgICAgICAgICAgIGVudGl0eVVwZGF0ZXMuc2V0KGl0ZW0sIHtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhLFxyXG4gICAgICAgICAgICAgICAgICAgIGVtYmVkZGVkSXRlbXM6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZSB0aHJvdWdoIGFsbCBhY3RvcnMgYW5kIG1pZ3JhdGUgZWFjaCBpZiBuZWVkZWQuXHJcbiAgICAgKiBAcGFyYW0gZ2FtZSBUaGUgZ2FtZSB0byBiZSB1cGRhdGVkLlxyXG4gICAgICogQHBhcmFtIGVudGl0eVVwZGF0ZXMgVGhlIGN1cnJlbnQgbWFwIG9mIGVudGl0eSB1cGRhdGVzLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgSXRlcmF0ZUFjdG9ycyhnYW1lOiBHYW1lLCBlbnRpdHlVcGRhdGVzOiBNYXA8RW50aXR5LCBFbnRpdHlVcGRhdGU+KSB7XHJcbiAgICAgICAgZm9yIChjb25zdCBhY3RvciBvZiBnYW1lLmFjdG9ycy5lbnRpdGllcykge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoYXdhaXQgdGhpcy5TaG91bGRNaWdyYXRlQWN0b3JEYXRhKGFjdG9yLmRhdGEpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBNaWdyYXRpbmcgQWN0b3IgJHthY3Rvci5uYW1lfWApO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coYWN0b3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdXBkYXRlRGF0YSA9IGF3YWl0IHRoaXMuTWlncmF0ZUFjdG9yRGF0YShkdXBsaWNhdGUoYWN0b3IuZGF0YSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2codXBkYXRlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmICh1cGRhdGVEYXRhLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaXRlbXMgPSB1cGRhdGVEYXRhLml0ZW1zO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB1cGRhdGVEYXRhLml0ZW1zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGV4cGFuZE9iamVjdCh1cGRhdGVEYXRhKTtcclxuICAgICAgICAgICAgICAgIGVudGl0eVVwZGF0ZXMuc2V0KGFjdG9yLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBlbWJlZGRlZEl0ZW1zOiBpdGVtcyxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogSXRlcmF0ZSBvdmVyIGFuIGFjdG9yJ3MgaXRlbXMsIHVwZGF0aW5nIHRob3NlIHRoYXQgbmVlZCB1cGRhdGluZy5cclxuICAgICAqIEBwYXJhbSBhY3RvckRhdGEgVGhlIGFjdG9yIHRvIGl0ZXJhdGUgb3ZlclxyXG4gICAgICogQHBhcmFtIHVwZGF0ZURhdGEgVGhlIGV4aXN0aW5nIHVwZGF0ZSBkYXRhIHRvIG1lcmdlIGludG9cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFzeW5jIEl0ZXJhdGVBY3Rvckl0ZW1zKGFjdG9yRGF0YTogQWN0b3JEYXRhLCB1cGRhdGVEYXRhKSB7XHJcbiAgICAgICAgbGV0IGhhc0l0ZW1VcGRhdGVzID0gZmFsc2U7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIGlmIChhY3RvckRhdGEuaXRlbXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtcyA9IGF3YWl0IFByb21pc2UuYWxsKFxyXG4gICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgYWN0b3JEYXRhLml0ZW1zLm1hcChhc3luYyAoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtVXBkYXRlID0gYXdhaXQgdGhpcy5NaWdyYXRlSXRlbURhdGEoaXRlbSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaXNPYmplY3RFbXB0eShpdGVtVXBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoYXNJdGVtVXBkYXRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1VcGRhdGVbJ19pZCddID0gaXRlbS5faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCBtZXJnZU9iamVjdChpdGVtLCBpdGVtVXBkYXRlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmZvcmNlVHlwZXM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wbGFjZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgICBpZiAoaGFzSXRlbVVwZGF0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEuaXRlbXMgPSBpdGVtcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZURhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhIHNjZW5lIHJlcXVpcmVzIHVwZGF0ZXMuXHJcbiAgICAgKiBAcGFyYW0gc2NlbmUgVGhlIHNjZW5lIHRvIGNoZWNrLlxyXG4gICAgICogQHJldHVybiBBIHByb21pc2UgdGhhdCByZXNvbHZlcyB0cnVlIG9yIGZhbHNlLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgU2hvdWxkTWlncmF0ZVNjZW5lRGF0YShzY2VuZTogU2NlbmUpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1pZ3JhdGUgdGhlIHNwZWNpZmllZCBzY2VuZSdzIGRhdGEuXHJcbiAgICAgKiBAcGFyYW0gc2NlbmUgVGhlIHNjZW5lIHRvIG1pZ3JhdGUuXHJcbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHVwZGF0ZSBkYXRhLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgTWlncmF0ZVNjZW5lRGF0YShzY2VuZTogYW55KTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERvIHNvbWV0aGluZyByaWdodCBiZWZvcmUgc2NlbmUgZGF0YSBpcyBtaWdyYXRlZC5cclxuICAgICAqIEBwYXJhbSBnYW1lIFRoZSBnYW1lIHRvIGJlIHVwZGF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5VXBkYXRlcyBUaGUgY3VycmVudCBtYXAgb2YgZW50aXR5IHVwZGF0ZXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBQcmVNaWdyYXRlU2NlbmVEYXRhKGdhbWU6IEdhbWUsIGVudGl0eVVwZGF0ZXM6IE1hcDxFbnRpdHksIEVudGl0eVVwZGF0ZT4pOiBQcm9taXNlPHZvaWQ+IHt9XHJcbiAgICAvKipcclxuICAgICAqIERvIHNvbWV0aGluZyByaWdodCBiZWZvcmUgc2NlbmUgZGF0YSBpcyBtaWdyYXRlZC5cclxuICAgICAqIEBwYXJhbSBnYW1lIFRoZSBnYW1lIHRvIGJlIHVwZGF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5VXBkYXRlcyBUaGUgY3VycmVudCBtYXAgb2YgZW50aXR5IHVwZGF0ZXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBQb3N0TWlncmF0ZVNjZW5lRGF0YShnYW1lOiBHYW1lLCBlbnRpdHlVcGRhdGVzOiBNYXA8RW50aXR5LCBFbnRpdHlVcGRhdGU+KTogUHJvbWlzZTx2b2lkPiB7fVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgYW4gaXRlbSByZXF1aXJlcyB1cGRhdGVzLlxyXG4gICAgICogQHBhcmFtIGl0ZW0gVGhlIGl0ZW0gdG8gY2hlY2suXHJcbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRydWUgb3IgZmFsc2UuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBTaG91bGRNaWdyYXRlSXRlbURhdGEoaXRlbTogQmFzZUVudGl0eURhdGEpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1pZ3JhdGUgdGhlIHNwZWNpZmllZCBpdGVtJ3MgZGF0YS5cclxuICAgICAqIEBwYXJhbSBpdGVtIFRoZSBpdGVtIHRvIG1pZ3JhdGUuXHJcbiAgICAgKiBAcmV0dXJuIEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIHVwZGF0ZSBkYXRhLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgTWlncmF0ZUl0ZW1EYXRhKGl0ZW06IEJhc2VFbnRpdHlEYXRhKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4ge307XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIERvIHNvbWV0aGluZyByaWdodCBiZWZvcmUgaXRlbSBkYXRhIGlzIG1pZ3JhdGVkLlxyXG4gICAgICogQHBhcmFtIGdhbWUgVGhlIGdhbWUgdG8gYmUgdXBkYXRlZC5cclxuICAgICAqIEBwYXJhbSBlbnRpdHlVcGRhdGVzIFRoZSBjdXJyZW50IG1hcCBvZiBlbnRpdHkgdXBkYXRlcy5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFzeW5jIFByZU1pZ3JhdGVJdGVtRGF0YShnYW1lOiBHYW1lLCBlbnRpdHlVcGRhdGVzOiBNYXA8RW50aXR5LCBFbnRpdHlVcGRhdGU+KTogUHJvbWlzZTx2b2lkPiB7fVxyXG4gICAgLyoqXHJcbiAgICAgKiBEbyBzb21ldGhpbmcgcmlnaHQgYmVmb3JlIGl0ZW0gZGF0YSBpcyBtaWdyYXRlZC5cclxuICAgICAqIEBwYXJhbSBnYW1lIFRoZSBnYW1lIHRvIGJlIHVwZGF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gZW50aXR5VXBkYXRlcyBUaGUgY3VycmVudCBtYXAgb2YgZW50aXR5IHVwZGF0ZXMuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBQb3N0TWlncmF0ZUl0ZW1EYXRhKGdhbWU6IEdhbWUsIGVudGl0eVVwZGF0ZXM6IE1hcDxFbnRpdHksIEVudGl0eVVwZGF0ZT4pOiBQcm9taXNlPHZvaWQ+IHt9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBhbiBhY3RvciByZXF1aXJlcyB1cGRhdGVzLlxyXG4gICAgICogQHBhcmFtIGFjdG9yIFRoZSBhY3RvciB0byBjaGVjay5cclxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgdHJ1ZSBvciBmYWxzZS5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFzeW5jIFNob3VsZE1pZ3JhdGVBY3RvckRhdGEoYWN0b3I6IEFjdG9yRGF0YSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWlncmF0ZSB0aGUgc3BlY2lmaWVkIGFjdG9yJ3MgZGF0YS5cclxuICAgICAqIEBwYXJhbSBhY3RvciBUaGUgYWN0b3IgdG8gbWlncmF0ZS5cclxuICAgICAqIEByZXR1cm4gQSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgdXBkYXRlIGRhdGEuXHJcbiAgICAgKi9cclxuICAgIHByb3RlY3RlZCBhc3luYyBNaWdyYXRlQWN0b3JEYXRhKGFjdG9yOiBBY3RvckRhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRG8gc29tZXRoaW5nIHJpZ2h0IGJlZm9yZSBhY3RvciBkYXRhIGlzIG1pZ3JhdGVkLlxyXG4gICAgICogQHBhcmFtIGdhbWUgVGhlIGdhbWUgdG8gYmUgdXBkYXRlZC5cclxuICAgICAqIEBwYXJhbSBlbnRpdHlVcGRhdGVzIFRoZSBjdXJyZW50IG1hcCBvZiBlbnRpdHkgdXBkYXRlcy5cclxuICAgICAqL1xyXG4gICAgcHJvdGVjdGVkIGFzeW5jIFByZU1pZ3JhdGVBY3RvckRhdGEoZ2FtZTogR2FtZSwgZW50aXR5VXBkYXRlczogTWFwPEVudGl0eSwgRW50aXR5VXBkYXRlPik6IFByb21pc2U8dm9pZD4ge31cclxuICAgIC8qKlxyXG4gICAgICogRG8gc29tZXRoaW5nIHJpZ2h0IGFmdGVyIGFjdG9yIGRhdGEgaXMgbWlncmF0ZWQuXHJcbiAgICAgKiBAcGFyYW0gZ2FtZSBUaGUgZ2FtZSB0byBiZSB1cGRhdGVkLlxyXG4gICAgICogQHBhcmFtIGVudGl0eVVwZGF0ZXMgVGhlIGN1cnJlbnQgbWFwIG9mIGVudGl0eSB1cGRhdGVzLlxyXG4gICAgICovXHJcbiAgICBwcm90ZWN0ZWQgYXN5bmMgUG9zdE1pZ3JhdGVBY3RvckRhdGEoZ2FtZTogR2FtZSwgZW50aXR5VXBkYXRlczogTWFwPEVudGl0eSwgRW50aXR5VXBkYXRlPik6IFByb21pc2U8dm9pZD4ge31cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1pZ3JhdGUgYSBjb21wZW5kaXVtIHBhY2tcclxuICAgICAqIEBwYXJhbSBwYWNrXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhc3luYyBNaWdyYXRlQ29tcGVuZGl1bVBhY2socGFjazogQ29tcGVuZGl1bSkge1xyXG4gICAgICAgIGNvbnN0IGVudGl0eSA9IHBhY2subWV0YWRhdGEuZW50aXR5O1xyXG4gICAgICAgIGlmICghWydBY3RvcicsICdJdGVtJywgJ1NjZW5lJ10uaW5jbHVkZXMoZW50aXR5KSkgcmV0dXJuO1xyXG5cclxuICAgICAgICAvLyBCZWdpbiBieSByZXF1ZXN0aW5nIHNlcnZlci1zaWRlIGRhdGEgbW9kZWwgbWlncmF0aW9uIGFuZCBnZXQgdGhlIG1pZ3JhdGVkIGNvbnRlbnRcclxuICAgICAgICBhd2FpdCBwYWNrLm1pZ3JhdGUoe30pO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCBwYWNrLmdldENvbnRlbnQoKTtcclxuXHJcbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGNvbXBlbmRpdW0gZW50cmllcyAtIGFwcGx5aW5nIGZpbmUtdHVuZWQgbWlncmF0aW9uIGZ1bmN0aW9uc1xyXG4gICAgICAgIGZvciAobGV0IGVudCBvZiBjb250ZW50KSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdXBkYXRlRGF0YTogYW55ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRpdHkgPT09ICdJdGVtJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEgPSBhd2FpdCB0aGlzLk1pZ3JhdGVJdGVtRGF0YShlbnQuZGF0YSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc09iamVjdEVtcHR5KHVwZGF0ZURhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgZXhwYW5kT2JqZWN0KHVwZGF0ZURhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ19pZCddID0gZW50Ll9pZDtcclxuICAgICAgICAgICAgICAgICAgICBhd2FpdCBwYWNrLnVwZGF0ZUVudGl0eSh1cGRhdGVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiBVbmNvbW1lbnQgd2hlbiBmb3VuZHJ5IGFsbG93cyBlbWJlZGRlZHMgdG8gYmUgdXBkYXRlZCBpbiBwYWNrc1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIH0gZWxzZSBpZiAoZW50aXR5ID09PSAnQWN0b3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVwZGF0ZURhdGEgPSBhd2FpdCB0aGlzLk1pZ3JhdGVBY3RvckRhdGEoZW50LmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmIChpc09iamVjdEVtcHR5KHVwZGF0ZURhdGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVwZGF0ZURhdGFbJ19pZCddID0gZW50Ll9pZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgYXdhaXQgcGFjay51cGRhdGVFbnRpdHkodXBkYXRlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVudGl0eSA9PT0gJ1NjZW5lJykge1xyXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEgPSBhd2FpdCB0aGlzLk1pZ3JhdGVTY2VuZURhdGEoZW50LmRhdGEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3RFbXB0eSh1cGRhdGVEYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGV4cGFuZE9iamVjdCh1cGRhdGVEYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVEYXRhWydfaWQnXSA9IGVudC5faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgcGFjay51cGRhdGVFbnRpdHkodXBkYXRlRGF0YSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnNvbGUubG9nKGBNaWdyYXRlZCBhbGwgJHtlbnRpdHl9IGVudGl0aWVzIGZyb20gQ29tcGVuZGl1bSAke3BhY2suY29sbGVjdGlvbn1gKTtcclxuICAgIH1cclxufVxyXG5cclxudHlwZSBFbnRpdHlVcGRhdGUgPSB7XHJcbiAgICB1cGRhdGVEYXRhOiBhbnk7XHJcbiAgICBlbWJlZGRlZEl0ZW1zOiBudWxsIHwgYW55W107XHJcbn07XHJcbiIsImltcG9ydCB7IFZlcnNpb25NaWdyYXRpb24gfSBmcm9tICcuLi9WZXJzaW9uTWlncmF0aW9uJztcclxuXHJcbi8qKlxyXG4gKiBNaWdyYXRlcyB0aGUgZGF0YSBtb2RlbCBmb3IgTGVnYWN5IG1pZ3JhdGlvbnMgcHJpb3IgdG8gMC42LjRcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMZWdhY3lNaWdyYXRpb24gZXh0ZW5kcyBWZXJzaW9uTWlncmF0aW9uIHtcclxuICAgIGdldCBTb3VyY2VWZXJzaW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICcwJztcclxuICAgIH1cclxuICAgIGdldCBUYXJnZXRWZXJzaW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIExlZ2FjeU1pZ3JhdGlvbi5UYXJnZXRWZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldCBUYXJnZXRWZXJzaW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICcwLjYuNCc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIE1pZ3JhdGVBY3RvckRhdGEoYWN0b3JEYXRhOiBBY3RvckRhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGxldCB1cGRhdGVEYXRhOiBhbnkgPSB7fTtcclxuICAgICAgICBMZWdhY3lNaWdyYXRpb24ubWlncmF0ZUFjdG9yT3ZlcmZsb3coYWN0b3JEYXRhLCB1cGRhdGVEYXRhKTtcclxuICAgICAgICBMZWdhY3lNaWdyYXRpb24ubWlncmF0ZUFjdG9yU2tpbGxzKGFjdG9yRGF0YSwgdXBkYXRlRGF0YSk7XHJcblxyXG4gICAgICAgIHVwZGF0ZURhdGEgPSBhd2FpdCB0aGlzLkl0ZXJhdGVBY3Rvckl0ZW1zKGFjdG9yRGF0YSwgdXBkYXRlRGF0YSk7XHJcblxyXG4gICAgICAgIHJldHVybiB1cGRhdGVEYXRhO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBNaWdyYXRlSXRlbURhdGEoaXRlbTogQmFzZUVudGl0eURhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVwZGF0ZURhdGEgPSB7fTtcclxuICAgICAgICBMZWdhY3lNaWdyYXRpb24ubWlncmF0ZURhbWFnZVR5cGVBbmRFbGVtZW50KGl0ZW0sIHVwZGF0ZURhdGEpO1xyXG4gICAgICAgIExlZ2FjeU1pZ3JhdGlvbi5taWdyYXRlSXRlbXNBZGRBY3Rpb25zKGl0ZW0sIHVwZGF0ZURhdGEpO1xyXG4gICAgICAgIExlZ2FjeU1pZ3JhdGlvbi5taWdyYXRlQWN0b3JPdmVyZmxvdyhpdGVtLCB1cGRhdGVEYXRhKTtcclxuICAgICAgICBMZWdhY3lNaWdyYXRpb24ubWlncmF0ZUl0ZW1zQWRkQ2FwYWNpdHkoaXRlbSwgdXBkYXRlRGF0YSk7XHJcbiAgICAgICAgTGVnYWN5TWlncmF0aW9uLm1pZ3JhdGVJdGVtc0FtbW8oaXRlbSwgdXBkYXRlRGF0YSk7XHJcbiAgICAgICAgTGVnYWN5TWlncmF0aW9uLm1pZ3JhdGVJdGVtc0NvbmNlYWwoaXRlbSwgdXBkYXRlRGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZURhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIE1pZ3JhdGVTY2VuZURhdGEoc2NlbmU6IGFueSk6IFByb21pc2U8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBTaG91bGRNaWdyYXRlQWN0b3JEYXRhKGFjdG9yRGF0YTogQWN0b3JEYXRhKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIFNob3VsZE1pZ3JhdGVJdGVtRGF0YShpdGVtOiBCYXNlRW50aXR5RGF0YSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBTaG91bGRNaWdyYXRlU2NlbmVEYXRhKHNjZW5lOiBTY2VuZSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gc2NlbmUuZGF0YS50b2tlbnM/Lmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNaWdyYXRlIGFjdG9yIG92ZXJmbG93IGZyb20gYW4gaW50ZWdlciB0byBhbiBvYmplY3RcclxuICAgICAqIC0gaXQgd2Fzbid0IGV2ZW4gZGlzcGxheWVkIGJlZm9yZSBzbyB3ZSBrbm93IGl0IGlzIDBcclxuICAgICAqIEBwYXJhbSBhY3RvckRhdGFcclxuICAgICAqIEBwYXJhbSB1cGRhdGVEYXRhXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgc3RhdGljIG1pZ3JhdGVBY3Rvck92ZXJmbG93KGFjdG9yRGF0YSwgdXBkYXRlRGF0YSkge1xyXG4gICAgICAgIGlmIChnZXRQcm9wZXJ0eShhY3RvckRhdGEuZGF0YSwgJ3RyYWNrLnBoeXNpY2FsLm92ZXJmbG93JykgPT09IDApIHtcclxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnZGF0YS50cmFjay5waHlzaWNhbC5vdmVyZmxvdy52YWx1ZSddID0gMDtcclxuICAgICAgICAgICAgdXBkYXRlRGF0YVsnZGF0YS50cmFjay5waHlzaWNhbC5vdmVyZmxvdy5tYXgnXSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWlncmF0ZSBhY3RvciBza2lsbHMgc3BlY2lhbGl6YXRpb25zIHRvIGJlIGEgbGlzdCBpbnN0ZWFkIG9mIHN0cmluZ1xyXG4gICAgICogQHBhcmFtIGFjdG9yRGF0YVxyXG4gICAgICogQHBhcmFtIHVwZGF0ZURhdGFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgbWlncmF0ZUFjdG9yU2tpbGxzKGFjdG9yRGF0YSwgdXBkYXRlRGF0YSkge1xyXG4gICAgICAgIGlmICghYWN0b3JEYXRhLmRhdGE/LnNraWxscz8uYWN0aXZlKSByZXR1cm47XHJcbiAgICAgICAgY29uc3Qgc3BsaXRSZWdleCA9IC9bLFxcL3wuXSsvO1xyXG5cclxuICAgICAgICBjb25zdCByZWR1Y2VyID0gKHJ1bm5pbmcsIFtrZXksIHZhbF0pID0+IHtcclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbC5zcGVjcykgJiYgdmFsLnNwZWNzKSB7XHJcbiAgICAgICAgICAgICAgICBydW5uaW5nW2tleV0gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3BlY3M6IHZhbC5zcGVjcy5zcGxpdChzcGxpdFJlZ2V4KS5maWx0ZXIoKHMpID0+IHMgIT09ICcnKSxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJ1bm5pbmc7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKGFjdG9yRGF0YS5kYXRhLnNraWxscykge1xyXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydkYXRhLnNraWxscy5hY3RpdmUnXSA9IE9iamVjdC5lbnRyaWVzKGFjdG9yRGF0YS5kYXRhLnNraWxscy5hY3RpdmUpLnJlZHVjZShyZWR1Y2VyLCB7fSk7XHJcbiAgICAgICAgICAgIGlmIChhY3RvckRhdGEuZGF0YS5za2lsbHMua25vd2xlZGdlKSB7XHJcbiAgICAgICAgICAgICAgICB1cGRhdGVEYXRhWydkYXRhLnNraWxscy5rbm93bGVkZ2Uuc3RyZWV0LnZhbHVlJ10gPSBPYmplY3QuZW50cmllcyhhY3RvckRhdGEuZGF0YS5za2lsbHM/Lmtub3dsZWRnZT8uc3RyZWV0Py52YWx1ZSkucmVkdWNlKHJlZHVjZXIsIHt9KTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ2RhdGEuc2tpbGxzLmtub3dsZWRnZS5wcm9mZXNzaW9uYWwudmFsdWUnXSA9IE9iamVjdC5lbnRyaWVzKGFjdG9yRGF0YS5kYXRhLnNraWxscz8ua25vd2xlZGdlPy5wcm9mZXNzaW9uYWw/LnZhbHVlKS5yZWR1Y2UocmVkdWNlciwge30pO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnZGF0YS5za2lsbHMua25vd2xlZGdlLmFjYWRlbWljLnZhbHVlJ10gPSBPYmplY3QuZW50cmllcyhhY3RvckRhdGEuZGF0YS5za2lsbHM/Lmtub3dsZWRnZT8uYWNhZGVtaWM/LnZhbHVlKS5yZWR1Y2UocmVkdWNlciwge30pO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnZGF0YS5za2lsbHMua25vd2xlZGdlLmludGVyZXN0cy52YWx1ZSddID0gT2JqZWN0LmVudHJpZXMoYWN0b3JEYXRhLmRhdGEuc2tpbGxzPy5rbm93bGVkZ2U/LmludGVyZXN0cz8udmFsdWUpLnJlZHVjZShyZWR1Y2VyLCB7fSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGFjdG9yRGF0YS5kYXRhLnNraWxscy5sYW5ndWFnZSkge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnZGF0YS5za2lsbHMubGFuZ3VhZ2UudmFsdWUnXSA9IE9iamVjdC5lbnRyaWVzKGFjdG9yRGF0YS5kYXRhLnNraWxscz8ubGFuZ3VhZ2U/LnZhbHVlKS5yZWR1Y2UocmVkdWNlciwge30pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBpdGVtXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlRGF0YVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBtaWdyYXRlRGFtYWdlVHlwZUFuZEVsZW1lbnQoaXRlbSwgdXBkYXRlRGF0YSkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdNaWdyYXRpbmcgRGFtYWdlIGFuZCBFbGVtZW50cycpO1xyXG4gICAgICAgIGlmIChpdGVtLmRhdGEuYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IGl0ZW0uZGF0YS5hY3Rpb247XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYWN0aW9uLmRhbWFnZS50eXBlID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YVsnZGF0YS5hY3Rpb24uZGFtYWdlLnR5cGUuYmFzZSddID0gaXRlbS5kYXRhLmFjdGlvbi5kYW1hZ2UudHlwZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGFjdGlvbi5kYW1hZ2UuZWxlbWVudCA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGFbJ2RhdGEuYWN0aW9uLmRhbWFnZS5lbGVtZW50LmJhc2UnXSA9IGl0ZW0uZGF0YS5hY3Rpb24uZGFtYWdlLmVsZW1lbnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNaWdyYXRlIGFtbW8gZnJvbSByYW5nZWQgd2VhcG9ucyBvbmx5IHRvIGFsbCB3ZWFwb25zXHJcbiAgICAgKiBAcGFyYW0gaXRlbVxyXG4gICAgICogQHBhcmFtIHVwZGF0ZURhdGFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgbWlncmF0ZUl0ZW1zQW1tbyhpdGVtLCB1cGRhdGVEYXRhKSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ01pZ3JhdGluZyBBbW1vJyk7XHJcbiAgICAgICAgaWYgKGl0ZW0udHlwZSA9PT0gJ3dlYXBvbicgJiYgaXRlbS5kYXRhLmFtbW8gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudEFtbW8gPSB7IHZhbHVlOiAwLCBtYXg6IDAgfTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uZGF0YS5jYXRlZ29yeSA9PT0gJ3JhbmdlJyAmJiBpdGVtLmRhdGEucmFuZ2UgJiYgaXRlbS5kYXRhLnJhbmdlLmFtbW8pIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvcHkgb3ZlciBhbW1vIGNvdW50XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvbGRBbW1vID0gaXRlbS5kYXRhLnJhbmdlLmFtbW87XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QW1tby52YWx1ZSA9IG9sZEFtbW8udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50QW1tby5tYXggPSBvbGRBbW1vLm1heDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1cGRhdGVEYXRhWydkYXRhLmFtbW8nXSA9IHtcclxuICAgICAgICAgICAgICAgIHNwYXJlX2NsaXBzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4OiAwLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogY3VycmVudEFtbW8udmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4OiBjdXJyZW50QW1tby5tYXgsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIE1pZ3JhdGUgY29uY2VhbCBuYW1lXHJcbiAgICAgKiBAcGFyYW0gaXRlbVxyXG4gICAgICogQHBhcmFtIHVwZGF0ZURhdGFcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzdGF0aWMgbWlncmF0ZUl0ZW1zQ29uY2VhbChpdGVtLCB1cGRhdGVEYXRhKSB7XHJcbiAgICAgICAgaWYgKGl0ZW0uZGF0YS50ZWNobm9sb2d5Py5jb25jZWFsYWJpbGl0eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHVwZGF0ZURhdGFbJ2RhdGEudGVjaG5vbG9neS5jb25jZWFsJ10gPSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlOiBpdGVtLmRhdGEudGVjaG5vbG9neS5jb25jZWFsYWJpbGl0eSxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgY2FwYWNpdHkgdG8gaXRlbXNcclxuICAgICAqIEBwYXJhbSBpdGVtXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlRGF0YVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBtaWdyYXRlSXRlbXNBZGRDYXBhY2l0eShpdGVtLCB1cGRhdGVEYXRhKSB7XHJcbiAgICAgICAgaWYgKFsnY3liZXJ3YXJlJ10uaW5jbHVkZXMoaXRlbS50eXBlKSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5kYXRhLmNhcGFjaXR5ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZURhdGEuZGF0YS5jYXBhY2l0eSA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBBZGQgYWN0aW9ucyB0byBuZWVkZWQgaXRlbXNcclxuICAgICAqIEBwYXJhbSBpdGVtXHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlRGF0YVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBtaWdyYXRlSXRlbXNBZGRBY3Rpb25zKGl0ZW0sIHVwZGF0ZURhdGEpIHtcclxuICAgICAgICBpZiAoWydxdWFsaXR5JywgJ2N5YmVyd2FyZSddLmluY2x1ZGVzKGl0ZW0udHlwZSkpIHtcclxuICAgICAgICAgICAgaWYgKGl0ZW0uZGF0YS5hY3Rpb24gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWN0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhdGVnb3J5OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTI6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNraWxsOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBzcGVjOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICBtb2Q6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGltaXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBleHRlbmRlZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgZGFtYWdlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9wcG9zZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZTI6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBza2lsbDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1cGRhdGVEYXRhLmRhdGEpIHVwZGF0ZURhdGEuZGF0YSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlRGF0YS5kYXRhLmFjdGlvbiA9IGFjdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgeyBWZXJzaW9uTWlncmF0aW9uIH0gZnJvbSAnLi4vVmVyc2lvbk1pZ3JhdGlvbic7XHJcbmltcG9ydCBTUjVBY3RvclR5cGUgPSBTaGFkb3dydW4uU1I1QWN0b3JUeXBlO1xyXG5cclxuLyoqXHJcbiAqIEFkZCBkZWZhdWx0IHZhbHVlIG9mIHdpbGxwb3dlciB0byB0aGUgZnVsbF9kZWZlbnNlX2F0dHJpYnV0ZSBmaWVsZFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZlcnNpb24wXzZfMTAgZXh0ZW5kcyBWZXJzaW9uTWlncmF0aW9uIHtcclxuICAgIGdldCBTb3VyY2VWZXJzaW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICcwLjYuOSc7XHJcbiAgICB9XHJcbiAgICBnZXQgVGFyZ2V0VmVyc2lvbigpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiBWZXJzaW9uMF82XzEwLlRhcmdldFZlcnNpb247XHJcbiAgICB9XHJcbiAgICBzdGF0aWMgZ2V0IFRhcmdldFZlcnNpb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJzAuNi4xMCc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIE1pZ3JhdGVBY3RvckRhdGEoYWN0b3JEYXRhOiBTUjVBY3RvclR5cGUpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGlmIChhY3RvckRhdGEuZGF0YT8uYXR0cmlidXRlcz8uZWRnZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4ge307XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGVkZ2U6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZTogYWN0b3JEYXRhLmRhdGEuYXR0cmlidXRlcy5lZGdlLm1heCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGFjdG9yRGF0YS5kYXRhLmF0dHJpYnV0ZXMuZWRnZS5tYXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXM6IGFjdG9yRGF0YS5kYXRhLmF0dHJpYnV0ZXMuZWRnZS52YWx1ZSxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBTaG91bGRNaWdyYXRlQWN0b3JEYXRhKGFjdG9yRGF0YTogU1I1QWN0b3JUeXBlKTogUHJvbWlzZTxib29sZWFuPiB7XHJcbiAgICAgICAgcmV0dXJuIGFjdG9yRGF0YS5kYXRhLmF0dHJpYnV0ZXMuZWRnZT8udXNlcyA9PT0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBTaG91bGRNaWdyYXRlU2NlbmVEYXRhKHNjZW5lOiBTY2VuZSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gc2NlbmUuZGF0YS50b2tlbnM/Lmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgVmVyc2lvbk1pZ3JhdGlvbiB9IGZyb20gJy4uL1ZlcnNpb25NaWdyYXRpb24nO1xyXG5cclxuLyoqXHJcbiAqIEFkZCBkZWZhdWx0IHZhbHVlIG9mIHdpbGxwb3dlciB0byB0aGUgZnVsbF9kZWZlbnNlX2F0dHJpYnV0ZSBmaWVsZFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFZlcnNpb24wXzZfNSBleHRlbmRzIFZlcnNpb25NaWdyYXRpb24ge1xyXG4gICAgZ2V0IFNvdXJjZVZlcnNpb24oKTogc3RyaW5nIHtcclxuICAgICAgICByZXR1cm4gJzAuNi40JztcclxuICAgIH1cclxuICAgIGdldCBUYXJnZXRWZXJzaW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIFZlcnNpb24wXzZfNS5UYXJnZXRWZXJzaW9uO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGdldCBUYXJnZXRWZXJzaW9uKCk6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuICcwLjYuNSc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIE1pZ3JhdGVBY3RvckRhdGEoYWN0b3JEYXRhOiBBY3RvckRhdGEpOiBQcm9taXNlPGFueT4ge1xyXG4gICAgICAgIGxldCB1cGRhdGVEYXRhOiBhbnkgPSB7fTtcclxuICAgICAgICBpZiAodXBkYXRlRGF0YS5kYXRhID09PSB1bmRlZmluZWQpIHVwZGF0ZURhdGEuZGF0YSA9IHt9O1xyXG4gICAgICAgIHVwZGF0ZURhdGEuZGF0YS5mdWxsX2RlZmVuc2VfYXR0cmlidXRlID0gJ3dpbGxwb3dlcic7XHJcbiAgICAgICAgcmV0dXJuIHVwZGF0ZURhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGFzeW5jIFNob3VsZE1pZ3JhdGVBY3RvckRhdGEoYWN0b3JEYXRhOiBhbnkpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgICAgICByZXR1cm4gYWN0b3JEYXRhLmRhdGEuZnVsbF9kZWZlbnNlX2F0dHJpYnV0ZSA9PT0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBhc3luYyBTaG91bGRNaWdyYXRlU2NlbmVEYXRhKHNjZW5lOiBTY2VuZSk6IFByb21pc2U8Ym9vbGVhbj4ge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gc2NlbmUuZGF0YS50b2tlbnM/Lmxlbmd0aCA+IDA7XHJcbiAgICB9XHJcbn1cclxuIiwiaW1wb3J0IE1vZExpc3QgPSBTaGFkb3dydW4uTW9kTGlzdDtcclxuaW1wb3J0IE1vZExpc3RFbnRyeSA9IFNoYWRvd3J1bi5Nb2RMaXN0RW50cnk7XHJcblxyXG5leHBvcnQgY2xhc3MgUGFydHNMaXN0PFRUeXBlPiB7XHJcbiAgICBnZXQgbGlzdCgpOiBNb2RMaXN0PFRUeXBlPiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3Quc2xpY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgbGVuZ3RoKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xpc3QubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB0b3RhbCgpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCB0b3RhbCA9IDA7XHJcbiAgICAgICAgZm9yIChjb25zdCBwYXJ0IG9mIHRoaXMuX2xpc3QpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBwYXJ0LnZhbHVlID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICAgICAgdG90YWwgKz0gcGFydC52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFydFZhbHVlKG5hbWU6IHN0cmluZyk6IFRUeXBlIHwgdW5kZWZpbmVkIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbGlzdC5maW5kKChwYXJ0KSA9PiBwYXJ0Lm5hbWUgPT09IG5hbWUpPy52YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBjbGVhcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLl9saXN0Lmxlbmd0aCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfbGlzdDogTW9kTGlzdDxUVHlwZT47XHJcblxyXG4gICAgY29uc3RydWN0b3IocGFydHM/OiBNb2RMaXN0PFRUeXBlPikge1xyXG4gICAgICAgIGxldCBhY3R1YWxQYXJ0cyA9IFtdIGFzIE1vZExpc3Q8VFR5cGU+O1xyXG4gICAgICAgIGlmIChwYXJ0cykge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJ0cykpIHtcclxuICAgICAgICAgICAgICAgIGFjdHVhbFBhcnRzID0gcGFydHM7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcnRzID09PSAnb2JqZWN0Jykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbbmFtZSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHBhcnRzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGlmIGl0J3MgYSBudW1iZXIsIHdlIGFyZSBkZWFsaW5nIHdpdGggYW4gYXJyYXkgYXMgYW4gb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKG5hbWUpKSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWxQYXJ0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAodmFsdWUgYXMgTW9kTGlzdEVudHJ5PFRUeXBlPikubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogKHZhbHVlIGFzIE1vZExpc3RFbnRyeTxUVHlwZT4pLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3R1YWxQYXJ0cy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBhcyBNb2RMaXN0RW50cnk8VFR5cGU+KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9saXN0ID0gYWN0dWFsUGFydHM7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkUGFydChuYW1lOiBzdHJpbmcsIHZhbHVlOiBUVHlwZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX2xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIG5hbWUsXHJcbiAgICAgICAgICAgIHZhbHVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFVuaXF1ZVBhcnQobmFtZTogc3RyaW5nLCB2YWx1ZT86IFRUeXBlLCBvdmVyd3JpdGUgPSB0cnVlKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0LmZpbmRJbmRleCgocGFydCkgPT4gcGFydC5uYW1lID09PSBuYW1lKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAvLyBpZiB3ZSBleGlzdCBhbmQgc2hvdWxkJ3ZlIG92ZXJ3cml0ZSwgcmV0dXJuXHJcbiAgICAgICAgICAgIGlmICghb3ZlcndyaXRlKSByZXR1cm47XHJcblxyXG4gICAgICAgICAgICB0aGlzLl9saXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIC8vIGlmIHdlIGFyZSBwYXNzZWQgdW5kZWZpbmVkLCByZW1vdmUgdGhlIHZhbHVlXHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSBudWxsKSByZXR1cm47XHJcbiAgICAgICAgICAgIC8vIHJlY3Vyc2l2ZWx5IGdvIHRocm91Z2ggdW50aWwgd2Ugbm8gbG9uZ2VyIGhhdmUgYSBwYXJ0IG9mIHRoaXMgbmFtZVxyXG4gICAgICAgICAgICB0aGlzLmFkZFVuaXF1ZVBhcnQobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5hZGRQYXJ0KG5hbWUsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlUGFydChuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuX2xpc3QuZmluZEluZGV4KChwYXJ0KSA9PiBwYXJ0Lm5hbWUgPT09IG5hbWUpO1xyXG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRNZXNzYWdlT3V0cHV0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmxpc3Q7XHJcbiAgICAgICAgLy8gY29uc3QgbW9kcyA9IHt9O1xyXG4gICAgICAgIC8vIGZvciAoY29uc3QgcGFydCBvZiB0aGlzLl9saXN0KSB7XHJcbiAgICAgICAgLy8gICAgIGlmIChtb2RzW3BhcnQubmFtZV0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgICAgbW9kc1twYXJ0Lm5hbWVdID0gcGFydC52YWx1ZTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICAvLyByZXR1cm4gbW9kcztcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgQWRkVW5pcXVlUGFydDxUVHlwZT4obGlzdDogTW9kTGlzdDxUVHlwZT4sIG5hbWU6IHN0cmluZywgdmFsdWU6IFRUeXBlLCBvdmVyd3JpdGUgPSB0cnVlKTogTW9kTGlzdDxUVHlwZT4ge1xyXG4gICAgICAgIGNvbnN0IHBhcnRzID0gbmV3IFBhcnRzTGlzdChsaXN0KTtcclxuICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KG5hbWUsIHZhbHVlLCBvdmVyd3JpdGUpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy5fbGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgVG90YWwobGlzdDogTW9kTGlzdDxudW1iZXI+KSB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KGxpc3QpO1xyXG4gICAgICAgIHJldHVybiBwYXJ0cy50b3RhbDtcclxuICAgIH1cclxufVxyXG4iLCJpbXBvcnQgTW9kTGlzdCA9IFNoYWRvd3J1bi5Nb2RMaXN0O1xyXG5pbXBvcnQgUm9sbEV2ZW50ID0gU2hhZG93cnVuLlJvbGxFdmVudDtcclxuaW1wb3J0IEJhc2VWYWx1ZVBhaXIgPSBTaGFkb3dydW4uQmFzZVZhbHVlUGFpcjtcclxuaW1wb3J0IExhYmVsRmllbGQgPSBTaGFkb3dydW4uTGFiZWxGaWVsZDtcclxuaW1wb3J0IEF0dGFja0RhdGEgPSBTaGFkb3dydW4uQXR0YWNrRGF0YTtcclxuaW1wb3J0IERhbWFnZURhdGEgPSBTaGFkb3dydW4uRGFtYWdlRGF0YTtcclxuaW1wb3J0IHsgSGVscGVycyB9IGZyb20gJy4uL2hlbHBlcnMnO1xyXG5pbXBvcnQgeyBTUjVBY3RvciB9IGZyb20gJy4uL2FjdG9yL1NSNUFjdG9yJztcclxuaW1wb3J0IHsgU1I1SXRlbSB9IGZyb20gJy4uL2l0ZW0vU1I1SXRlbSc7XHJcbmltcG9ydCB7IGNyZWF0ZUNoYXREYXRhLCBUZW1wbGF0ZURhdGEgfSBmcm9tICcuLi9jaGF0JztcclxuaW1wb3J0IHsgU1lTVEVNX05BTUUgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5pbXBvcnQgeyBQYXJ0c0xpc3QgfSBmcm9tICcuLi9wYXJ0cy9QYXJ0c0xpc3QnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBCYXNpY1JvbGxQcm9wcyB7XHJcbiAgICBuYW1lPzogc3RyaW5nO1xyXG4gICAgaW1nPzogc3RyaW5nO1xyXG4gICAgcGFydHM/OiBNb2RMaXN0PG51bWJlcj47XHJcbiAgICBsaW1pdD86IEJhc2VWYWx1ZVBhaXI8bnVtYmVyPiAmIExhYmVsRmllbGQ7XHJcbiAgICBleHBsb2RlU2l4ZXM/OiBib29sZWFuO1xyXG4gICAgdGl0bGU/OiBzdHJpbmc7XHJcbiAgICBhY3Rvcj86IFNSNUFjdG9yO1xyXG4gICAgaXRlbT86IFNSNUl0ZW07XHJcbiAgICBhdHRhY2s/OiBBdHRhY2tEYXRhO1xyXG4gICAgaW5jb21pbmdBdHRhY2s/OiBBdHRhY2tEYXRhO1xyXG4gICAgaW5jb21pbmdEcmFpbj86IExhYmVsRmllbGQgJiB7XHJcbiAgICAgICAgdmFsdWU6IG51bWJlcjtcclxuICAgIH07XHJcbiAgICBzb2FrPzogRGFtYWdlRGF0YTtcclxuICAgIHRlc3RzPzoge1xyXG4gICAgICAgIGxhYmVsOiBzdHJpbmc7XHJcbiAgICAgICAgdHlwZTogc3RyaW5nO1xyXG4gICAgfVtdO1xyXG4gICAgZGVzY3JpcHRpb24/OiBvYmplY3Q7XHJcbiAgICBwcmV2aWV3VGVtcGxhdGU/OiBib29sZWFuO1xyXG4gICAgaGlkZVJvbGxNZXNzYWdlPzogYm9vbGVhbjtcclxuICAgIHJvbGxNb2RlPzoga2V5b2YgdHlwZW9mIENPTkZJRy5EaWNlLnJvbGxNb2RlcztcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBSb2xsRGlhbG9nT3B0aW9ucyB7XHJcbiAgICBlbnZpcm9ubWVudGFsPzogbnVtYmVyIHwgYm9vbGVhbjtcclxuICAgIHByb21wdD86IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQWR2YW5jZWRSb2xsUHJvcHMgZXh0ZW5kcyBCYXNpY1JvbGxQcm9wcyB7XHJcbiAgICBldmVudD86IFJvbGxFdmVudDtcclxuICAgIGV4dGVuZGVkPzogYm9vbGVhbjtcclxuICAgIHdvdW5kcz86IGJvb2xlYW47XHJcbiAgICBhZnRlcj86IChyb2xsOiBSb2xsIHwgdW5kZWZpbmVkKSA9PiB2b2lkO1xyXG4gICAgZGlhbG9nT3B0aW9ucz86IFJvbGxEaWFsb2dPcHRpb25zO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2hhZG93cnVuUm9sbCBleHRlbmRzIFJvbGwge1xyXG4gICAgdGVtcGxhdGVEYXRhOiBUZW1wbGF0ZURhdGEgfCB1bmRlZmluZWQ7XHJcbiAgICAvLyBhZGQgY2xhc3MgUm9sbCB0byB0aGUganNvbiBzbyBkaWNlLXNvLW5pY2Ugd29ya3NcclxuICAgIHRvSlNPTigpOiBhbnkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBzdXBlci50b0pTT04oKTtcclxuICAgICAgICBkYXRhLmNsYXNzID0gJ1JvbGwnO1xyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU2hhZG93cnVuUm9sbGVyIHtcclxuICAgIHN0YXRpYyBpdGVtUm9sbChldmVudCwgaXRlbTogU1I1SXRlbSwgb3B0aW9ucz86IFBhcnRpYWw8QWR2YW5jZWRSb2xsUHJvcHM+KTogUHJvbWlzZTxTaGFkb3dydW5Sb2xsIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBpdGVtLmdldFJvbGxQYXJ0c0xpc3QoKTtcclxuICAgICAgICBsZXQgbGltaXQgPSBpdGVtLmdldExpbWl0KCk7XHJcbiAgICAgICAgbGV0IHRpdGxlID0gaXRlbS5nZXRSb2xsTmFtZSgpO1xyXG5cclxuICAgICAgICBjb25zdCByb2xsRGF0YTogQWR2YW5jZWRSb2xsUHJvcHMgPSB7XHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXHJcbiAgICAgICAgICAgIGV2ZW50OiBldmVudCxcclxuICAgICAgICAgICAgZGlhbG9nT3B0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgZW52aXJvbm1lbnRhbDogdHJ1ZSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGFydHMsXHJcbiAgICAgICAgICAgIGFjdG9yOiBpdGVtLmFjdG9yLFxyXG4gICAgICAgICAgICBpdGVtLFxyXG4gICAgICAgICAgICBsaW1pdCxcclxuICAgICAgICAgICAgdGl0bGUsXHJcbiAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgaW1nOiBpdGVtLmltZyxcclxuICAgICAgICAgICAgcHJldmlld1RlbXBsYXRlOiBpdGVtLmhhc1RlbXBsYXRlLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcm9sbERhdGFbJ2F0dGFjayddID0gaXRlbS5nZXRBdHRhY2tEYXRhKDApO1xyXG4gICAgICAgIHJvbGxEYXRhWydibGFzdCddID0gaXRlbS5nZXRCbGFzdERhdGEoKTtcclxuXHJcbiAgICAgICAgaWYgKGl0ZW0uaGFzT3Bwb3NlZFJvbGwpIHtcclxuICAgICAgICAgICAgcm9sbERhdGFbJ3Rlc3RzJ10gPSBbXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw6IGl0ZW0uZ2V0T3Bwb3NlZFRlc3ROYW1lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ29wcG9zZWQnLFxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGl0ZW0uaXNNZWxlZVdlYXBvbigpKSB7XHJcbiAgICAgICAgICAgIHJvbGxEYXRhWydyZWFjaCddID0gaXRlbS5nZXRSZWFjaCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaXRlbS5pc1JhbmdlZFdlYXBvbigpKSB7XHJcbiAgICAgICAgICAgIHJvbGxEYXRhWydmaXJlTW9kZSddID0gaXRlbS5nZXRMYXN0RmlyZU1vZGUoKT8ubGFiZWw7XHJcbiAgICAgICAgICAgIGlmIChyb2xsRGF0YS5kaWFsb2dPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICByb2xsRGF0YS5kaWFsb2dPcHRpb25zLmVudmlyb25tZW50YWwgPSBpdGVtLmdldExhc3RGaXJlUmFuZ2VNb2QoKS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByb2xsRGF0YS5kZXNjcmlwdGlvbiA9IGl0ZW0uZ2V0Q2hhdERhdGEoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFNoYWRvd3J1blJvbGxlci5hZHZhbmNlZFJvbGwocm9sbERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBzaGFkb3dydW5Gb3JtdWxhKHtcclxuICAgICAgICBwYXJ0czogcGFydHNQcm9wcyxcclxuICAgICAgICBsaW1pdCxcclxuICAgICAgICBleHBsb2RlLFxyXG4gICAgfToge1xyXG4gICAgICAgIHBhcnRzOiBNb2RMaXN0PG51bWJlcj47XHJcbiAgICAgICAgbGltaXQ/OiBCYXNlVmFsdWVQYWlyPG51bWJlcj4gJiBMYWJlbEZpZWxkO1xyXG4gICAgICAgIGV4cGxvZGU/OiBib29sZWFuO1xyXG4gICAgfSk6IHN0cmluZyB7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KHBhcnRzUHJvcHMpO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gcGFydHMudG90YWw7XHJcbiAgICAgICAgaWYgKGNvdW50IDw9IDApIHtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICB1aS5ub3RpZmljYXRpb25zLmVycm9yKGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlJvbGxPbmVEaWUnKSk7XHJcbiAgICAgICAgICAgIHJldHVybiAnMGQ2Y3M+PTUnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZm9ybXVsYSA9IGAke2NvdW50fWQ2YDtcclxuICAgICAgICBpZiAoZXhwbG9kZSkge1xyXG4gICAgICAgICAgICBmb3JtdWxhICs9ICd4Nic7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChsaW1pdD8udmFsdWUpIHtcclxuICAgICAgICAgICAgZm9ybXVsYSArPSBga2gke2xpbWl0LnZhbHVlfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZvcm11bGEgKz0gJ2NzPj01JztcclxuICAgICAgICByZXR1cm4gZm9ybXVsYTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgYmFzaWNSb2xsKHtcclxuICAgICAgICBwYXJ0czogcGFydHNQcm9wcyA9IFtdLFxyXG4gICAgICAgIGxpbWl0LFxyXG4gICAgICAgIGV4cGxvZGVTaXhlcyxcclxuICAgICAgICB0aXRsZSxcclxuICAgICAgICBhY3RvcixcclxuICAgICAgICBpbWcgPSBhY3Rvcj8uaW1nLFxyXG4gICAgICAgIG5hbWUgPSBhY3Rvcj8ubmFtZSxcclxuICAgICAgICBoaWRlUm9sbE1lc3NhZ2UsXHJcbiAgICAgICAgcm9sbE1vZGUsXHJcbiAgICAgICAgLi4ucHJvcHNcclxuICAgIH06IEJhc2ljUm9sbFByb3BzKTogUHJvbWlzZTxTaGFkb3dydW5Sb2xsIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgbGV0IHJvbGw7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KHBhcnRzUHJvcHMpO1xyXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgZm9ybXVsYSA9IHRoaXMuc2hhZG93cnVuRm9ybXVsYSh7IHBhcnRzOiBwYXJ0cy5saXN0LCBsaW1pdCwgZXhwbG9kZTogZXhwbG9kZVNpeGVzIH0pO1xyXG4gICAgICAgICAgICBpZiAoIWZvcm11bGEpIHJldHVybjtcclxuICAgICAgICAgICAgcm9sbCA9IG5ldyBTaGFkb3dydW5Sb2xsKGZvcm11bGEpO1xyXG4gICAgICAgICAgICByb2xsLnJvbGwoKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChnYW1lLnNldHRpbmdzLmdldChTWVNURU1fTkFNRSwgJ2Rpc3BsYXlEZWZhdWx0Um9sbENhcmQnKSkge1xyXG4gICAgICAgICAgICAgICAgYXdhaXQgcm9sbC50b01lc3NhZ2Uoe1xyXG4gICAgICAgICAgICAgICAgICAgIHNwZWFrZXI6IENoYXRNZXNzYWdlLmdldFNwZWFrZXIoeyBhY3RvcjogYWN0b3IgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgZmxhdm9yOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICByb2xsTW9kZTogcm9sbE1vZGUsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gc3RhcnQgb2YgY3VzdG9tIG1lc3NhZ2VcclxuICAgICAgICBjb25zdCBkaWNlID0gcm9sbD8ucGFydHNbMF0ucm9sbHM7XHJcbiAgICAgICAgY29uc3QgdG9rZW4gPSBhY3Rvcj8udG9rZW47XHJcblxyXG4gICAgICAgIGxldCBnbGl0Y2ggPSBmYWxzZTtcclxuICAgICAgICBpZiAocm9sbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGxldCBvbmVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIHJvbGwuZGljZS5mb3JFYWNoKChkaWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGRpZS5yb2xscy5mb3JFYWNoKChyZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LnJvbGwgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25lQ291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGdsaXRjaCA9IG9uZUNvdW50ID4gTWF0aC5mbG9vcihwYXJ0cy50b3RhbCAvIDIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGVEYXRhID0ge1xyXG4gICAgICAgICAgICBhY3RvcjogYWN0b3IsXHJcbiAgICAgICAgICAgIGhlYWRlcjoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogbmFtZSB8fCAnJyxcclxuICAgICAgICAgICAgICAgIGltZzogaW1nIHx8ICcnLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0b2tlbklkOiB0b2tlbiA/IGAke3Rva2VuLnNjZW5lLl9pZH0uJHt0b2tlbi5pZH1gIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICByb2xsTW9kZSxcclxuICAgICAgICAgICAgZGljZSxcclxuICAgICAgICAgICAgbGltaXQsXHJcbiAgICAgICAgICAgIHRlc3ROYW1lOiB0aXRsZSxcclxuICAgICAgICAgICAgZGljZVBvb2w6IHBhcnRzLnRvdGFsLFxyXG4gICAgICAgICAgICBwYXJ0czogcGFydHMubGlzdCxcclxuICAgICAgICAgICAgaGl0czogcm9sbD8udG90YWwsXHJcbiAgICAgICAgICAgIGdsaXRjaCxcclxuICAgICAgICAgICAgLi4ucHJvcHMsXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHJvbGwpIHtcclxuICAgICAgICAgICAgcm9sbC50ZW1wbGF0ZURhdGEgPSB0ZW1wbGF0ZURhdGE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIWhpZGVSb2xsTWVzc2FnZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjaGF0RGF0YSA9IGF3YWl0IGNyZWF0ZUNoYXREYXRhKHRlbXBsYXRlRGF0YSwgcm9sbCk7XHJcbiAgICAgICAgICAgIENoYXRNZXNzYWdlLmNyZWF0ZShjaGF0RGF0YSwgeyBkaXNwbGF5U2hlZXQ6IGZhbHNlIH0pLnRoZW4oKG1lc3NhZ2UpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJvbGw7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBQcm9tcHQgYSByb2xsIGZvciB0aGUgdXNlclxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcHJvbXB0Um9sbCgpOiBQcm9taXNlPFNoYWRvd3J1blJvbGwgfCB1bmRlZmluZWQ+IHtcclxuICAgICAgICBjb25zdCBsYXN0Um9sbCA9IGdhbWUudXNlci5nZXRGbGFnKFNZU1RFTV9OQU1FLCAnbGFzdFJvbGxQcm9tcHRWYWx1ZScpIHx8IDA7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBbeyBuYW1lOiAnU1I1Lkxhc3RSb2xsJywgdmFsdWU6IGxhc3RSb2xsIH1dO1xyXG4gICAgICAgIHJldHVybiBTaGFkb3dydW5Sb2xsZXIuYWR2YW5jZWRSb2xsKHsgcGFydHMsIHRpdGxlOiAnUm9sbCcsIGRpYWxvZ09wdGlvbnM6IHsgcHJvbXB0OiB0cnVlIH0gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdGFydCBhbiBhZHZhbmNlZCByb2xsXHJcbiAgICAgKiAtIFByb21wdHMgdGhlIHVzZXIgZm9yIG1vZGlmaWVyc1xyXG4gICAgICogQHBhcmFtIHByb3BzXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBhZHZhbmNlZFJvbGwocHJvcHM6IEFkdmFuY2VkUm9sbFByb3BzKTogUHJvbWlzZTxTaGFkb3dydW5Sb2xsIHwgdW5kZWZpbmVkPiB7XHJcbiAgICAgICAgLy8gZGVzdHJ1Y3R1cmUgd2hhdCB3ZSBuZWVkIHRvIHVzZSBmcm9tIHByb3BzXHJcbiAgICAgICAgLy8gYW55IHZhbHVlIHB1bGxlZCBvdXQgbmVlZHMgdG8gYmUgdXBkYXRlZCBiYWNrIGluIHByb3BzIGlmIGNoYW5nZWRcclxuICAgICAgICBjb25zdCB7IHRpdGxlLCBhY3RvciwgcGFydHM6IHBhcnRzUHJvcHMgPSBbXSwgbGltaXQsIGV4dGVuZGVkLCB3b3VuZHMgPSB0cnVlLCBhZnRlciwgZGlhbG9nT3B0aW9ucyB9ID0gcHJvcHM7XHJcbiAgICAgICAgY29uc3QgcGFydHMgPSBuZXcgUGFydHNMaXN0KHBhcnRzUHJvcHMpO1xyXG5cclxuICAgICAgICAvLyByZW1vdmUgbGltaXRzIGlmIGdhbWUgc2V0dGluZ3MgaXMgc2V0XHJcbiAgICAgICAgaWYgKCFnYW1lLnNldHRpbmdzLmdldChTWVNURU1fTkFNRSwgJ2FwcGx5TGltaXRzJykpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHByb3BzLmxpbWl0O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gVE9ETyBjcmVhdGUgXCJmYXN0IHJvbGxcIiBvcHRpb25cclxuXHJcbiAgICAgICAgY29uc3Qgcm9sbE1vZGUgPSBnYW1lLnNldHRpbmdzLmdldCgnY29yZScsICdyb2xsTW9kZScpO1xyXG5cclxuICAgICAgICBsZXQgZGlhbG9nRGF0YSA9IHtcclxuICAgICAgICAgICAgb3B0aW9uczogZGlhbG9nT3B0aW9ucyxcclxuICAgICAgICAgICAgZXh0ZW5kZWQsXHJcbiAgICAgICAgICAgIGRpY2VfcG9vbDogcGFydHMudG90YWwsXHJcbiAgICAgICAgICAgIHBhcnRzOiBwYXJ0cy5nZXRNZXNzYWdlT3V0cHV0KCksXHJcbiAgICAgICAgICAgIGxpbWl0OiBsaW1pdD8udmFsdWUsXHJcbiAgICAgICAgICAgIHdvdW5kcyxcclxuICAgICAgICAgICAgd291bmRWYWx1ZTogYWN0b3I/LmdldFdvdW5kTW9kaWZpZXIoKSxcclxuICAgICAgICAgICAgcm9sbE1vZGUsXHJcbiAgICAgICAgICAgIHJvbGxNb2RlczogQ09ORklHLkRpY2Uucm9sbE1vZGVzLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgbGV0IHRlbXBsYXRlID0gJ3N5c3RlbXMvc2hhZG93cnVuNWUvZGlzdC90ZW1wbGF0ZXMvcm9sbHMvcm9sbC1kaWFsb2cuaHRtbCc7XHJcbiAgICAgICAgbGV0IGVkZ2UgPSBmYWxzZTtcclxuICAgICAgICBsZXQgY2FuY2VsID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgY29uc3QgYnV0dG9ucyA9IHtcclxuICAgICAgICAgICAgcm9sbDoge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IGdhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlJvbGwnKSxcclxuICAgICAgICAgICAgICAgIGljb246ICc8aSBjbGFzcz1cImZhcyBmYS1kaWNlLXNpeFwiPjwvaT4nLFxyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IChjYW5jZWwgPSBmYWxzZSksXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoYWN0b3IpIHtcclxuICAgICAgICAgICAgYnV0dG9uc1snZWRnZSddID0ge1xyXG4gICAgICAgICAgICAgICAgbGFiZWw6IGAke2dhbWUuaTE4bi5sb2NhbGl6ZSgnU1I1LlB1c2hUaGVMaW1pdCcpfSAoKyR7YWN0b3IuZ2V0RWRnZSgpLnZhbHVlfSlgLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogJzxpIGNsYXNzPVwiZmFzIGZhLWJvbWJcIj48L2k+JyxcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZWRnZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XHJcbiAgICAgICAgICAgIHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlLCBkaWFsb2dEYXRhKS50aGVuKChkbGcpID0+IHtcclxuICAgICAgICAgICAgICAgIG5ldyBEaWFsb2coe1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcclxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBkbGcsXHJcbiAgICAgICAgICAgICAgICAgICAgYnV0dG9ucyxcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OiAncm9sbCcsXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNsb3NlOiBhc3luYyAoaHRtbCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2FuY2VsKSByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgYWN0dWFsIGRpY2VfcG9vbCBmcm9tIHRoZSBkaWZmZXJlbmNlIG9mIGluaXRpYWwgcGFydHMgYW5kIHZhbHVlIGluIHRoZSBkaWFsb2dcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRpY2VQb29sVmFsdWUgPSBIZWxwZXJzLnBhcnNlSW5wdXRUb051bWJlcigkKGh0bWwpLmZpbmQoJ1tuYW1lPVwiZGljZV9wb29sXCJdJykudmFsKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpYWxvZ09wdGlvbnM/LnByb21wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGdhbWUudXNlci5zZXRGbGFnKFNZU1RFTV9OQU1FLCAnbGFzdFJvbGxQcm9tcHRWYWx1ZScsIGRpY2VQb29sVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LkJhc2UnLCBkaWNlUG9vbFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGltaXRWYWx1ZSA9IEhlbHBlcnMucGFyc2VJbnB1dFRvTnVtYmVyKCQoaHRtbCkuZmluZCgnW25hbWU9XCJsaW1pdFwiXScpLnZhbCgpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW1pdCAmJiBsaW1pdC52YWx1ZSAhPT0gbGltaXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXQudmFsdWUgPSBsaW1pdFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGltaXQuYmFzZSA9IGxpbWl0VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW1pdC5sYWJlbCA9ICdTUjUuT3ZlcnJpZGUnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB3b3VuZFZhbHVlID0gSGVscGVycy5wYXJzZUlucHV0VG9OdW1iZXIoJChodG1sKS5maW5kKCdbbmFtZT1cIndvdW5kc1wiXScpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2l0dWF0aW9uTW9kID0gSGVscGVycy5wYXJzZUlucHV0VG9OdW1iZXIoJChodG1sKS5maW5kKCdbbmFtZT1cImRwX21vZFwiXScpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW52aXJvbm1lbnRNb2QgPSBIZWxwZXJzLnBhcnNlSW5wdXRUb051bWJlcigkKGh0bWwpLmZpbmQoJ1tuYW1lPVwib3B0aW9ucy5lbnZpcm9ubWVudGFsXCJdJykudmFsKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdvdW5kcyAmJiB3b3VuZFZhbHVlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuV291bmRzJywgd291bmRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy53b3VuZHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaXR1YXRpb25Nb2QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5TaXR1YXRpb25hbE1vZGlmaWVyJywgc2l0dWF0aW9uTW9kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZW52aXJvbm1lbnRNb2QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRzLmFkZFVuaXF1ZVBhcnQoJ1NSNS5FbnZpcm9ubWVudE1vZGlmaWVyJywgZW52aXJvbm1lbnRNb2QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwcm9wcy5kaWFsb2dPcHRpb25zKSBwcm9wcy5kaWFsb2dPcHRpb25zID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5kaWFsb2dPcHRpb25zLmVudmlyb25tZW50YWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRlbmRlZFN0cmluZyA9IEhlbHBlcnMucGFyc2VJbnB1dFRvU3RyaW5nKCQoaHRtbCkuZmluZCgnW25hbWU9XCJleHRlbmRlZFwiXScpLnZhbCgpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0ZW5kZWQgPSBleHRlbmRlZFN0cmluZyA9PT0gJ3RydWUnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVkZ2UgJiYgYWN0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLmV4cGxvZGVTaXhlcyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5hZGRVbmlxdWVQYXJ0KCdTUjUuUHVzaFRoZUxpbWl0JywgYWN0b3IuZ2V0RWRnZSgpLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcm9wcy5saW1pdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IGFjdG9yLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2RhdGEuYXR0cmlidXRlcy5lZGdlLnVzZXMnOiBhY3Rvci5kYXRhLmRhdGEuYXR0cmlidXRlcy5lZGdlLnVzZXMgLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3BzLnJvbGxNb2RlID0gSGVscGVycy5wYXJzZUlucHV0VG9TdHJpbmcoJChodG1sKS5maW5kKCdbbmFtZT1yb2xsTW9kZV0nKS52YWwoKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5wYXJ0cyA9IHBhcnRzLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLmJhc2ljUm9sbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5wcm9wcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXh0ZW5kZWQgJiYgcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY3VycmVudEV4dGVuZGVkID0gcGFydHMuZ2V0UGFydFZhbHVlKCdTUjUuRXh0ZW5kZWQnKSA/PyAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMuYWRkVW5pcXVlUGFydCgnU1I1LkV4dGVuZGVkJywgY3VycmVudEV4dGVuZGVkIC0gMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5wYXJ0cyA9IHBhcnRzLmxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgYSBiaXQgb2YgYSBkZWxheSB0byByb2xsIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYWR2YW5jZWRSb2xsKHByb3BzKSwgNDAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWZ0ZXIgJiYgcikgci50aGVuKChyb2xsKSA9PiBhZnRlcihyb2xsKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIH0pLnJlbmRlcih0cnVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiLy8gZ2FtZSBzZXR0aW5ncyBmb3Igc2hhZG93cnVuIDVlXHJcblxyXG5pbXBvcnQgeyBWZXJzaW9uTWlncmF0aW9uIH0gZnJvbSAnLi9taWdyYXRvci9WZXJzaW9uTWlncmF0aW9uJztcclxuaW1wb3J0IHsgRkxBR1MsIFNZU1RFTV9OQU1FIH0gZnJvbSAnLi9jb25zdGFudHMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyU3lzdGVtU2V0dGluZ3MgPSAoKSA9PiB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWdpc3RlciBkaWFnb25hbCBtb3ZlbWVudCBydWxlIHNldHRpbmdcclxuICAgICAqL1xyXG4gICAgZ2FtZS5zZXR0aW5ncy5yZWdpc3RlcihTWVNURU1fTkFNRSwgJ2RpYWdvbmFsTW92ZW1lbnQnLCB7XHJcbiAgICAgICAgbmFtZTogJ1NFVFRJTkdTLkRpYWdvbmFsTW92ZW1lbnROYW1lJyxcclxuICAgICAgICBoaW50OiAnU0VUVElOR1MuRGlhZ29uYWxNb3ZlbWVudERlc2NyaXB0aW9uJyxcclxuICAgICAgICBzY29wZTogJ3dvcmxkJyxcclxuICAgICAgICBjb25maWc6IHRydWUsXHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIGRlZmF1bHQ6ICcxLTItMScsXHJcbiAgICAgICAgY2hvaWNlczoge1xyXG4gICAgICAgICAgICAnMS0xLTEnOiAnU0VUVElOR1MuSWdub3JlRGlhZ29uYWwnLFxyXG4gICAgICAgICAgICAnMS0yLTEnOiAnU0VUVElOR1MuRXN0aW1hdGVEaWFnb25hbCcsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNoYW5nZTogKHJ1bGUpID0+IChjYW52YXMuZ3JpZC5kaWFnb25hbFJ1bGUgPSBydWxlKSxcclxuICAgIH0pO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogRGVmYXVsdCBsaW1pdCBiZWhhdmlvclxyXG4gICAgICovXHJcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKFNZU1RFTV9OQU1FLCAnYXBwbHlMaW1pdHMnLCB7XHJcbiAgICAgICAgbmFtZTogJ1NFVFRJTkdTLkFwcGx5TGltaXRzTmFtZScsXHJcbiAgICAgICAgaGludDogJ1NFVFRJTkdTLkFwcGx5TGltaXRzRGVzY3JpcHRpb24nLFxyXG4gICAgICAgIHNjb3BlOiAnd29ybGQnLFxyXG4gICAgICAgIGNvbmZpZzogdHJ1ZSxcclxuICAgICAgICB0eXBlOiBCb29sZWFuLFxyXG4gICAgICAgIGRlZmF1bHQ6IHRydWUsXHJcbiAgICB9KTtcclxuXHJcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKFNZU1RFTV9OQU1FLCAnZGlzcGxheURlZmF1bHRSb2xsQ2FyZCcsIHtcclxuICAgICAgICBuYW1lOiAnU0VUVElOR1MuRGlzcGxheURlZmF1bHRSb2xsQ2FyZE5hbWUnLFxyXG4gICAgICAgIGhpbnQ6ICdTRVRUSU5HUy5EaXNwbGF5RGVmYXVsdFJvbGxDYXJkRGVzY3JpcHRpb24nLFxyXG4gICAgICAgIHNjb3BlOiAndXNlcicsXHJcbiAgICAgICAgY29uZmlnOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgZGVmYXVsdDogZmFsc2UsXHJcbiAgICB9KTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRyYWNrIHN5c3RlbSB2ZXJzaW9uIHVwb24gd2hpY2ggYSBtaWdyYXRpb24gd2FzIGxhc3QgYXBwbGllZFxyXG4gICAgICovXHJcbiAgICBnYW1lLnNldHRpbmdzLnJlZ2lzdGVyKFNZU1RFTV9OQU1FLCBWZXJzaW9uTWlncmF0aW9uLktFWV9EQVRBX1ZFUlNJT04sIHtcclxuICAgICAgICBuYW1lOiAnU3lzdGVtIERhdGEgVmVyc2lvbi4nLFxyXG4gICAgICAgIHNjb3BlOiAnd29ybGQnLFxyXG4gICAgICAgIGNvbmZpZzogZmFsc2UsXHJcbiAgICAgICAgdHlwZTogU3RyaW5nLFxyXG4gICAgICAgIGRlZmF1bHQ6ICcwJyxcclxuICAgIH0pO1xyXG5cclxuICAgIGdhbWUuc2V0dGluZ3MucmVnaXN0ZXIoU1lTVEVNX05BTUUsIEZMQUdTLlNob3dHbGl0Y2hBbmltYXRpb24sIHtcclxuICAgICAgICBuYW1lOiAnU0VUVElOR1MuU2hvd0dsaXRjaEFuaW1hdGlvbk5hbWUnLFxyXG4gICAgICAgIGhpbnQ6ICdTRVRUSU5HUy5TaG93R2xpdGNoQW5pbWF0aW9uRGVzY3JpcHRpb24nLFxyXG4gICAgICAgIHNjb3BlOiAndXNlcicsXHJcbiAgICAgICAgY29uZmlnOiB0cnVlLFxyXG4gICAgICAgIHR5cGU6IEJvb2xlYW4sXHJcbiAgICAgICAgZGVmYXVsdDogdHJ1ZSxcclxuICAgIH0pXHJcbn07XHJcbiIsImltcG9ydCB7IFNSNUl0ZW0gfSBmcm9tICcuL2l0ZW0vU1I1SXRlbSc7XHJcblxyXG5leHBvcnQgdHlwZSBTaGFkb3dydW5UZW1wbGF0ZURhdGEgPSB7XHJcbiAgICB0OiBzdHJpbmc7XHJcbiAgICB1c2VyOiBVc2VyIHwgc3RyaW5nO1xyXG4gICAgZGlzdGFuY2U6IG51bWJlcjtcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxuICAgIGZpbGxDb2xvcjogc3RyaW5nO1xyXG4gICAgZGlyZWN0aW9uOiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCAvLyBAdHMtaWdub3JlXHJcbmNsYXNzIFRlbXBsYXRlIGV4dGVuZHMgTWVhc3VyZWRUZW1wbGF0ZSB7XHJcbiAgICBkYXRhOiBTaGFkb3dydW5UZW1wbGF0ZURhdGE7XHJcbiAgICBsYXllcjogUGxhY2VhYmxlc0xheWVyO1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgaXRlbT86IFNSNUl0ZW07XHJcbiAgICBvbkNvbXBsZXRlPzogKCkgPT4gdm9pZDtcclxuXHJcbiAgICBzdGF0aWMgZnJvbUl0ZW0oaXRlbTogU1I1SXRlbSwgb25Db21wbGV0ZT86ICgpID0+IHZvaWQpOiBUZW1wbGF0ZSB8IHVuZGVmaW5lZCB7XHJcbiAgICAgICAgY29uc3QgdGVtcGxhdGVTaGFwZSA9ICdjaXJjbGUnO1xyXG5cclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZURhdGEgPSB7XHJcbiAgICAgICAgICAgIHQ6IHRlbXBsYXRlU2hhcGUsXHJcbiAgICAgICAgICAgIHVzZXI6IGdhbWUudXNlci5faWQsXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogMCxcclxuICAgICAgICAgICAgeDogMCxcclxuICAgICAgICAgICAgeTogMCxcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICBmaWxsQ29sb3I6IGdhbWUudXNlci5jb2xvcixcclxuICAgICAgICB9O1xyXG4gICAgICAgIGNvbnN0IGJsYXN0ID0gaXRlbS5nZXRCbGFzdERhdGEoKTtcclxuICAgICAgICB0ZW1wbGF0ZURhdGFbJ2Rpc3RhbmNlJ10gPSBibGFzdD8ucmFkaXVzO1xyXG4gICAgICAgIHRlbXBsYXRlRGF0YVsnZHJvcG9mZiddID0gYmxhc3Q/LmRyb3BvZmY7XHJcblxyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICBjb25zdCB0ZW1wbGF0ZSA9IG5ldyB0aGlzKHRlbXBsYXRlRGF0YSk7XHJcbiAgICAgICAgdGVtcGxhdGUuaXRlbSA9IGl0ZW07XHJcbiAgICAgICAgdGVtcGxhdGUub25Db21wbGV0ZSA9IG9uQ29tcGxldGU7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBsYXRlO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdQcmV2aWV3KCkge1xyXG4gICAgICAgIGNvbnN0IGluaXRpYWxMYXllciA9IGNhbnZhcy5hY3RpdmVMYXllcjtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgdGhpcy5kcmF3KCk7XHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIHRoaXMubGF5ZXIuYWN0aXZhdGUoKTtcclxuICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgdGhpcy5sYXllci5wcmV2aWV3LmFkZENoaWxkKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuYWN0aXZhdGVQcmV2aWV3TGlzdGVuZXJzKGluaXRpYWxMYXllcik7XHJcbiAgICB9XHJcblxyXG4gICAgYWN0aXZhdGVQcmV2aWV3TGlzdGVuZXJzKGluaXRpYWxMYXllcjogQ2FudmFzTGF5ZXIpIHtcclxuICAgICAgICBjb25zdCBoYW5kbGVycyA9IHt9O1xyXG4gICAgICAgIGxldCBtb3ZlVGltZSA9IDA7XHJcblxyXG4gICAgICAgIC8vIFVwZGF0ZSBwbGFjZW1lbnQgKG1vdXNlLW1vdmUpXHJcbiAgICAgICAgaGFuZGxlcnNbJ21tJ10gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGxldCBub3cgPSBEYXRlLm5vdygpOyAvLyBBcHBseSBhIDIwbXMgdGhyb3R0bGVcclxuICAgICAgICAgICAgaWYgKG5vdyAtIG1vdmVUaW1lIDw9IDIwKSByZXR1cm47XHJcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IGV2ZW50LmRhdGEuZ2V0TG9jYWxQb3NpdGlvbih0aGlzLmxheWVyKTtcclxuICAgICAgICAgICAgY29uc3Qgc25hcHBlZCA9IGNhbnZhcy5ncmlkLmdldFNuYXBwZWRQb3NpdGlvbihjZW50ZXIueCwgY2VudGVyLnksIDIpO1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEueCA9IHNuYXBwZWQueDtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnkgPSBzbmFwcGVkLnk7XHJcbiAgICAgICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGhpcy5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgIG1vdmVUaW1lID0gbm93O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIENhbmNlbCB0aGUgd29ya2Zsb3cgKHJpZ2h0LWNsaWNrKVxyXG4gICAgICAgIGhhbmRsZXJzWydyYyddID0gKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmxheWVyLnByZXZpZXcucmVtb3ZlQ2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgY2FudmFzLnN0YWdlLm9mZignbW91c2Vtb3ZlJywgaGFuZGxlcnNbJ21tJ10pO1xyXG4gICAgICAgICAgICBjYW52YXMuc3RhZ2Uub2ZmKCdtb3VzZWRvd24nLCBoYW5kbGVyc1snbGMnXSk7XHJcbiAgICAgICAgICAgIGNhbnZhcy5hcHAudmlldy5vbmNvbnRleHRtZW51ID0gbnVsbDtcclxuICAgICAgICAgICAgY2FudmFzLmFwcC52aWV3Lm9ud2hlZWwgPSBudWxsO1xyXG4gICAgICAgICAgICBpbml0aWFsTGF5ZXIuYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9uQ29tcGxldGUpIHRoaXMub25Db21wbGV0ZSgpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIENvbmZpcm0gdGhlIHdvcmtmbG93IChsZWZ0LWNsaWNrKVxyXG4gICAgICAgIGhhbmRsZXJzWydsYyddID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGhhbmRsZXJzWydyYyddKGV2ZW50KTtcclxuXHJcbiAgICAgICAgICAgIC8vIENvbmZpcm0gZmluYWwgc25hcHBlZCBwb3NpdGlvblxyXG4gICAgICAgICAgICBjb25zdCBkZXN0aW5hdGlvbiA9IGNhbnZhcy5ncmlkLmdldFNuYXBwZWRQb3NpdGlvbih0aGlzLngsIHRoaXMueSwgMik7XHJcbiAgICAgICAgICAgIHRoaXMuZGF0YS54ID0gZGVzdGluYXRpb24ueDtcclxuICAgICAgICAgICAgdGhpcy5kYXRhLnkgPSBkZXN0aW5hdGlvbi55O1xyXG5cclxuICAgICAgICAgICAgLy8gQ3JlYXRlIHRoZSB0ZW1wbGF0ZVxyXG4gICAgICAgICAgICBjYW52YXMuc2NlbmUuY3JlYXRlRW1iZWRkZWRFbnRpdHkoJ01lYXN1cmVkVGVtcGxhdGUnLCB0aGlzLmRhdGEpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFJvdGF0ZSB0aGUgdGVtcGxhdGUgYnkgMyBkZWdyZWUgaW5jcmVtZW50cyAobW91c2Utd2hlZWwpXHJcbiAgICAgICAgaGFuZGxlcnNbJ213J10gPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYgKGV2ZW50LmN0cmxLZXkpIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7IC8vIEF2b2lkIHpvb21pbmcgdGhlIGJyb3dzZXIgd2luZG93XHJcbiAgICAgICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBsZXQgZGVsdGEgPSBjYW52YXMuZ3JpZC50eXBlID4gQ09OU1QuR1JJRF9UWVBFUy5TUVVBUkUgPyAzMCA6IDE1O1xyXG4gICAgICAgICAgICBsZXQgc25hcCA9IGV2ZW50LnNoaWZ0S2V5ID8gZGVsdGEgOiA1O1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEuZGlyZWN0aW9uICs9IHNuYXAgKiBNYXRoLnNpZ24oZXZlbnQuZGVsdGFZKTtcclxuICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBBY3RpdmF0ZSBsaXN0ZW5lcnNcclxuICAgICAgICBjYW52YXMuc3RhZ2Uub24oJ21vdXNlbW92ZScsIGhhbmRsZXJzWydtbSddKTtcclxuICAgICAgICBjYW52YXMuc3RhZ2Uub24oJ21vdXNlZG93bicsIGhhbmRsZXJzWydsYyddKTtcclxuICAgICAgICBjYW52YXMuYXBwLnZpZXcub25jb250ZXh0bWVudSA9IGhhbmRsZXJzWydyYyddO1xyXG4gICAgICAgIGNhbnZhcy5hcHAudmlldy5vbndoZWVsID0gaGFuZGxlcnNbJ213J107XHJcbiAgICB9XHJcbn1cclxuIl19"}