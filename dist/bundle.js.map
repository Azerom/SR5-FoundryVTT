{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/@babel/runtime/helpers/assertThisInitialized.js","node_modules/@babel/runtime/helpers/asyncToGenerator.js","node_modules/@babel/runtime/helpers/classCallCheck.js","node_modules/@babel/runtime/helpers/createClass.js","node_modules/@babel/runtime/helpers/defineProperty.js","node_modules/@babel/runtime/helpers/get.js","node_modules/@babel/runtime/helpers/getPrototypeOf.js","node_modules/@babel/runtime/helpers/inherits.js","node_modules/@babel/runtime/helpers/interopRequireDefault.js","node_modules/@babel/runtime/helpers/possibleConstructorReturn.js","node_modules/@babel/runtime/helpers/setPrototypeOf.js","node_modules/@babel/runtime/helpers/superPropBase.js","node_modules/@babel/runtime/helpers/typeof.js","node_modules/@babel/runtime/regenerator/index.js","node_modules/regenerator-runtime/runtime.js","src/module/actor/SR5Actor.ts","src/module/actor/SR5ActorSheet.ts","src/module/actor/prep/ActorPrepFactory.ts","src/module/actor/prep/BaseActorPrep.ts","src/module/actor/prep/CharacterPrep.ts","src/module/actor/prep/SpiritPrep.ts","src/module/actor/prep/SpritePrep.ts","src/module/actor/prep/VehiclePrep.ts","src/module/actor/prep/functions/AttributesPrep.ts","src/module/actor/prep/functions/ConditionMonitorsPrep.ts","src/module/actor/prep/functions/InitiativePrep.ts","src/module/actor/prep/functions/ItemPrep.ts","src/module/actor/prep/functions/LimitsPrep.ts","src/module/actor/prep/functions/MatrixPrep.ts","src/module/actor/prep/functions/ModifiersPrep.ts","src/module/actor/prep/functions/MovementPrep.ts","src/module/actor/prep/functions/NPCPrep.ts","src/module/actor/prep/functions/SkillsPrep.ts","src/module/actor/prep/functions/WoundsPrep.ts","src/module/apps/chummer-import-form.js","src/module/apps/dialogs/ShadowrunItemDialog.ts","src/module/apps/gmtools/OverwatchScoreTracker.js","src/module/apps/skills/KnowledgeSkillEditForm.ts","src/module/apps/skills/LanguageSkillEditForm.ts","src/module/apps/skills/SkillEditForm.ts","src/module/canvas.ts","src/module/chat.ts","src/module/combat.ts","src/module/config.ts","src/module/constants.ts","src/module/dataTemplates.ts","src/module/dataWrappers/DataWrapper.ts","src/module/handlebars/BasicHelpers.ts","src/module/handlebars/HandlebarManager.ts","src/module/handlebars/HandlebarTemplates.ts","src/module/handlebars/ItemLineHelpers.ts","src/module/handlebars/RollAndLabelHelpers.ts","src/module/handlebars/SkillLineHelpers.ts","src/module/helpers.ts","src/module/hooks.ts","src/module/item/ChatData.ts","src/module/item/SR5Item.ts","src/module/item/SR5ItemDataWrapper.ts","src/module/item/SR5ItemSheet.ts","src/module/macros.ts","src/module/main.ts","src/module/migrator/Migrator.ts","src/module/migrator/VersionMigration.ts","src/module/migrator/versions/LegacyMigration.ts","src/module/migrator/versions/Version0_6_10.ts","src/module/migrator/versions/Version0_6_5.ts","src/module/migrator/versions/Version0_7_2.ts","src/module/parts/PartsList.ts","src/module/rolls/ShadowrunRoller.ts","src/module/settings.ts","src/module/template.ts"],"names":[],"mappings":"AAAA;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChuBA,8DAA2D;AAC3D,wCAAqC;AAarC,4CAAkD;AAElD,kDAA+C;AAC/C,8DAA2D;AAQ3D,MAAa,QAAS,SAAQ,KAAK;IACzB,MAAM,CAAC,IAAI,EAAE,OAAQ;;;;;YACvB,MAAM,OAAM,MAAM,YAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAClC,2CAA2C;YAC3C,sEAAsE;YACt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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nmodule.exports = _assertThisInitialized;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nmodule.exports = _classCallCheck;","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nmodule.exports = _createClass;","function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nmodule.exports = _defineProperty;","var superPropBase = require(\"./superPropBase\");\n\nfunction _get(target, property, receiver) {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    module.exports = _get = Reflect.get;\n  } else {\n    module.exports = _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get(target, property, receiver || target);\n}\n\nmodule.exports = _get;","function _getPrototypeOf(o) {\n  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nmodule.exports = _getPrototypeOf;","var setPrototypeOf = require(\"./setPrototypeOf\");\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) setPrototypeOf(subClass, superClass);\n}\n\nmodule.exports = _inherits;","function _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nmodule.exports = _interopRequireDefault;","var _typeof = require(\"../helpers/typeof\");\n\nvar assertThisInitialized = require(\"./assertThisInitialized\");\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return assertThisInitialized(self);\n}\n\nmodule.exports = _possibleConstructorReturn;","function _setPrototypeOf(o, p) {\n  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nmodule.exports = _setPrototypeOf;","var getPrototypeOf = require(\"./getPrototypeOf\");\n\nfunction _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}\n\nmodule.exports = _superPropBase;","function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    module.exports = _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    module.exports = _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nmodule.exports = _typeof;","module.exports = require(\"regenerator-runtime\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n","import { ShadowrunRoller } from '../rolls/ShadowrunRoller';\nimport { Helpers } from '../helpers';\nimport { SR5Item } from '../item/SR5Item';\nimport ActorRollOptions = Shadowrun.ActorRollOptions;\nimport DefenseRollOptions = Shadowrun.DefenseRollOptions;\nimport SoakRollOptions = Shadowrun.SoakRollOptions;\nimport AttributeField = Shadowrun.AttributeField;\nimport SkillRollOptions = Shadowrun.SkillRollOptions;\nimport SkillField = Shadowrun.SkillField;\nimport ModList = Shadowrun.ModList;\nimport BaseValuePair = Shadowrun.BaseValuePair;\nimport ModifiableValue = Shadowrun.ModifiableValue;\nimport LabelField = Shadowrun.LabelField;\nimport LimitField = Shadowrun.LimitField;\nimport { SYSTEM_NAME, FLAGS } from '../constants';\nimport SR5ActorType = Shadowrun.SR5ActorType;\nimport { PartsList } from '../parts/PartsList';\nimport { ActorPrepFactory } from './prep/ActorPrepFactory';\nimport DamageData = Shadowrun.DamageData;\nimport DamageElement = Shadowrun.DamageElement;\nimport EdgeAttributeField = Shadowrun.EdgeAttributeField;\nimport VehicleActorData = Shadowrun.VehicleActorData;\nimport VehicleStat = Shadowrun.VehicleStat;\nimport RemovableSkills = Shadowrun.RemovableSkills;\n\nexport class SR5Actor extends Actor {\n    async update(data, options?) {\n        await super.update(data, options);\n        // trigger update for all items with action\n        // needed for rolls to properly update when items or attributes update\n        const itemUpdates: Item[] = [];\n        // @ts-ignore\n        for (let item of this.data.items) {\n            if (item && item.data.action) {\n                itemUpdates.push(item);\n            }\n        }\n        await this.updateEmbeddedEntity('OwnedItem', itemUpdates);\n        return this;\n    }\n\n    getOverwatchScore() {\n        const os = this.getFlag(SYSTEM_NAME, 'overwatchScore');\n        return os !== undefined ? os : 0;\n    }\n\n    async setOverwatchScore(value) {\n        const num = parseInt(value);\n        if (!isNaN(num)) {\n            return this.setFlag(SYSTEM_NAME, 'overwatchScore', num);\n        }\n    }\n\n    prepareData() {\n        super.prepareData();\n\n        const actorData = this.data as SR5ActorType;\n        const prepper = ActorPrepFactory.Create(actorData);\n        if (prepper) {\n            prepper.prepare();\n        }\n    }\n\n    getModifier(modifierName: string): number | undefined {\n        return this.data.data.modifiers[modifierName];\n    }\n\n    findActiveSkill(skillName?: string): SkillField | undefined {\n        if (skillName === undefined) return undefined;\n        return this.data.data.skills.active[skillName];\n    }\n\n    findAttribute(attributeName?: string): AttributeField | undefined {\n        if (attributeName === undefined) return undefined;\n        return this.data.data.attributes[attributeName];\n    }\n\n    findVehicleStat(statName?: string): VehicleStat | undefined {\n        if (statName === undefined) return undefined;\n        return this.data.data.vehicle_stats[statName];\n    }\n\n    findLimitFromAttribute(attributeName?: string): LimitField | undefined {\n        if (attributeName === undefined) return undefined;\n        const attribute = this.findAttribute(attributeName);\n        if (!attribute?.limit) return undefined;\n        return this.findLimit(attribute.limit);\n    }\n\n    findLimit(limitName?: string): LimitField | undefined {\n        if (!limitName) return undefined;\n        return this.data.data.limits[limitName];\n    }\n\n    getWoundModifier(): number {\n        return -1 * this.data.data.wounds?.value || 0;\n    }\n\n    getEdge(): EdgeAttributeField {\n        return this.data.data.attributes.edge;\n    }\n\n    getArmor(): BaseValuePair<number> & ModifiableValue & LabelField {\n        return this.data.data.armor;\n    }\n\n    getOwnedSR5Item(itemId: string): SR5Item | null {\n        return (super.getOwnedItem(itemId) as unknown) as SR5Item;\n    }\n\n    getMatrixDevice(): SR5Item | undefined | null {\n        const matrix = this.data.data.matrix;\n        if (matrix.device) return this.getOwnedSR5Item(matrix.device);\n        return undefined;\n    }\n\n    getFullDefenseAttribute(): AttributeField | undefined {\n        if (this.isVehicle()) {\n            return this.findVehicleStat('pilot');\n        } else {\n            let att = this.data.data.full_defense_attribute;\n            if (!att) att = 'willpower';\n            return this.findAttribute(att);\n        }\n    }\n\n    getEquippedWeapons(): SR5Item[] {\n        return this.items.filter((item) => item.isEquipped() && item.data.type === 'weapon');\n    }\n\n    getRecoilCompensation(): number {\n        let total = 1; // always get 1\n        const strength = this.findAttribute('strength');\n        if (strength) {\n            total += Math.ceil(strength.value / 3);\n        }\n        return total;\n    }\n\n    getDeviceRating(): number {\n        return this.data.data.matrix.rating;\n    }\n\n    isVehicle() {\n        return this.data.type === 'vehicle';\n    }\n\n    isGrunt() {\n        return this.data.data.is_npc && this.data.data.npc.is_grunt;\n    }\n\n    getVehicleTypeSkill(): SkillField | undefined {\n        let skill: SkillField | undefined;\n        switch (this.data.data.vehicleType) {\n            case 'air':\n                skill = this.findActiveSkill('pilot_aircraft');\n                break;\n            case 'ground':\n                skill = this.findActiveSkill('pilot_ground_craft');\n                break;\n            case 'water':\n                skill = this.findActiveSkill('pilot_water_craft');\n                break;\n            case 'aerospace':\n                skill = this.findActiveSkill('pilot_aerospace');\n                break;\n            case 'walker':\n                skill = this.findActiveSkill('pilot_walker');\n                break;\n            case 'exotic':\n                skill = this.findActiveSkill('pilot_exotic_vehicle');\n                break;\n            default:\n                break;\n        }\n        return skill;\n    }\n\n    getSkill(skillId: string): SkillField|undefined {\n        const {skills} = this.data.data;\n        if (skills.active.hasOwnProperty(skillId)) {\n            return skills.active[skillId];\n        }\n        if (skills.language.value.hasOwnProperty(skillId)) {\n            return skills.language.value[skillId];\n        }\n        // Knowledge skills are de-normalized into categories (street, hobby, ...)\n        for (const categoryKey in skills.knowledge) {\n            if (skills.knowledge.hasOwnProperty(categoryKey)) {\n                const category = skills.knowledge[categoryKey];\n                if (category.value.hasOwnProperty(skillId)) {\n                    return category.value[skillId];\n                }\n            }\n        }\n    }\n\n    getSkillLabel(skillId: string): string {\n        const skill = this.getSkill(skillId);\n        if (!skill) {\n            return '';\n        }\n\n        return skill.label ? skill.label : skill.name ? skill.name : '';\n    }\n\n    addKnowledgeSkill(category, skill?) {\n        const defaultSkill = {\n            name: '',\n            specs: [],\n            base: 0,\n            value: 0,\n            mod: 0,\n        };\n        skill = {\n            ...defaultSkill,\n            ...skill,\n        };\n\n        const id = randomID(16);\n        const value = {};\n        value[id] = skill;\n        const fieldName = `data.skills.knowledge.${category}.value`;\n        const updateData = {};\n        updateData[fieldName] = value;\n        this.update(updateData);\n    }\n\n    removeLanguageSkill(skillId) {\n        const value = {};\n        value[skillId] = { _delete: true };\n        this.update({ 'data.skills.language.value': value });\n    }\n\n    addLanguageSkill(skill) {\n        const defaultSkill = {\n            name: '',\n            specs: [],\n            base: 0,\n            value: 0,\n            mod: 0,\n        };\n        skill = {\n            ...defaultSkill,\n            ...skill,\n        };\n\n        const id = randomID(16);\n        const value = {};\n        value[id] = skill;\n        const fieldName = `data.skills.language.value`;\n        const updateData = {};\n        updateData[fieldName] = value;\n        this.update(updateData);\n    }\n\n    removeKnowledgeSkill(skillId, category) {\n        const value = {};\n        const updateData = {};\n\n        const dataString = `data.skills.knowledge.${category}.value`;\n        value[skillId] = { _delete: true };\n        updateData[dataString] = value;\n\n        this.update(updateData);\n    }\n\n    rollFade(options: ActorRollOptions = {}, incoming = -1) {\n        const wil = duplicate(this.data.data.attributes.willpower);\n        const res = duplicate(this.data.data.attributes.resonance);\n        const data = this.data.data;\n\n        const parts = new PartsList<number>();\n        parts.addUniquePart(wil.label, wil.value);\n        parts.addUniquePart(res.label, res.value);\n        if (data.modifiers.fade) parts.addUniquePart('SR5.Bonus', data.modifiers.fade);\n\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Fade')}`;\n        const incomingDrain = {\n            label: 'SR5.Fade',\n            value: incoming,\n        };\n        return ShadowrunRoller.advancedRoll({\n            event: options.event,\n            parts: parts.list,\n            actor: this,\n            title: title,\n            wounds: false,\n            incomingDrain,\n        });\n    }\n\n    rollDrain(options: ActorRollOptions = {}, incoming = -1) {\n        const wil = duplicate(this.data.data.attributes.willpower);\n        const drainAtt = duplicate(this.data.data.attributes[this.data.data.magic.attribute]);\n\n        const parts = new PartsList<number>();\n        parts.addPart(wil.label, wil.value);\n        parts.addPart(drainAtt.label, drainAtt.value);\n        if (this.data.data.modifiers.drain) parts.addUniquePart('SR5.Bonus', this.data.data.modifiers.drain);\n\n        let title = `${game.i18n.localize('SR5.Resist')} ${game.i18n.localize('SR5.Drain')}`;\n        const incomingDrain = {\n            label: 'SR5.Drain',\n            value: incoming,\n        };\n        return ShadowrunRoller.advancedRoll({\n            event: options.event,\n            parts: parts.list,\n            actor: this,\n            title: title,\n            wounds: false,\n            incomingDrain,\n        });\n    }\n\n    rollArmor(options: ActorRollOptions = {}, partsProps: ModList<number> = []) {\n        const parts = new PartsList(partsProps);\n        this._addArmorParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options.event,\n            actor: this,\n            parts: parts.list,\n            title: game.i18n.localize('SR5.Armor'),\n            wounds: false,\n        });\n    }\n\n    rollDefense(options: DefenseRollOptions = {}, partsProps: ModList<number> = []) {\n        const parts = new PartsList(partsProps);\n        this._addDefenseParts(parts);\n        // full defense is always added\n        const activeDefenses = {\n            full_defense: {\n                label: 'SR5.FullDefense',\n                value: this.getFullDefenseAttribute()?.value,\n                initMod: -10,\n            },\n        };\n        // if we have a melee attack\n        if (options.incomingAttack?.reach) {\n            activeDefenses['dodge'] = {\n                label: 'SR5.Dodge',\n                value: this.findActiveSkill('gymnastics')?.value,\n                initMod: -5,\n            };\n            activeDefenses['block'] = {\n                label: 'SR5.Block',\n                value: this.findActiveSkill('unarmed_combat')?.value,\n                initMod: -5,\n            };\n            const equippedMeleeWeapons = this.getEquippedWeapons().filter((w) => w.isMeleeWeapon());\n            let defenseReach = 0;\n            equippedMeleeWeapons.forEach((weapon) => {\n                activeDefenses[`parry-${weapon.name}`] = {\n                    label: 'SR5.Parry',\n                    weapon: weapon.name,\n                    value: this.findActiveSkill(weapon.getActionSkill())?.value,\n                    init: -5,\n                };\n                defenseReach = Math.max(defenseReach, weapon.getReach());\n            });\n            const incomingReach = options.incomingAttack.reach;\n            const netReach = defenseReach - incomingReach;\n            if (netReach !== 0) {\n                parts.addUniquePart('SR5.Reach', netReach);\n            }\n        }\n        let dialogData = {\n            parts: parts.getMessageOutput(),\n            cover: options.cover,\n            activeDefenses,\n        };\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-defense.html';\n        let cancel = true;\n        const incomingAttack = options.incomingAttack;\n        const event = options.event;\n        return new Promise((resolve) => {\n            renderTemplate(template, dialogData).then((dlg) => {\n                new Dialog({\n                    title: game.i18n.localize('SR5.Defense'),\n                    content: dlg,\n                    buttons: {\n                        continue: {\n                            label: game.i18n.localize('SR5.Continue'),\n                            callback: () => (cancel = false),\n                        },\n                    },\n                    default: 'normal',\n                    close: async (html) => {\n                        if (cancel) return;\n                        let cover = Helpers.parseInputToNumber($(html).find('[name=cover]').val());\n                        let special = Helpers.parseInputToString($(html).find('[name=activeDefense]').val());\n                        if (special) {\n                            // TODO subtract initiative score when Foundry updates to 0.7.0\n                            const defense = activeDefenses[special];\n                            parts.addUniquePart(defense.label, defense.value);\n                        }\n                        if (cover) parts.addUniquePart('SR5.Cover', cover);\n\n                        resolve(\n                            ShadowrunRoller.advancedRoll({\n                                event: event,\n                                actor: this,\n                                parts: parts.list,\n                                title: game.i18n.localize('SR5.DefenseTest'),\n                                incomingAttack,\n                            }).then(async (roll: Roll | undefined) => {\n                                if (incomingAttack && roll) {\n                                    let defenderHits = roll.total;\n                                    let attackerHits = incomingAttack.hits || 0;\n                                    let netHits = attackerHits - defenderHits;\n\n                                    if (netHits >= 0) {\n                                        const damage = incomingAttack.damage;\n                                        damage.mod = PartsList.AddUniquePart(damage.mod, 'SR5.NetHits', netHits);\n                                        damage.value = Helpers.calcTotal(damage);\n\n                                        const soakRollOptions = {\n                                            event: event,\n                                            damage: damage,\n                                        };\n                                        await this.rollSoak(soakRollOptions);\n                                    }\n                                }\n                            }),\n                        );\n                    },\n                }).render(true);\n            });\n        });\n    }\n\n    rollSoak(options?: SoakRollOptions, partsProps: ModList<number> = []) {\n        const parts = new PartsList(partsProps);\n        this._addSoakParts(parts);\n        let dialogData = {\n            damage: options?.damage,\n            parts: parts.getMessageOutput(),\n            elementTypes: CONFIG.SR5.elementTypes,\n        };\n        let id = '';\n        let cancel = true;\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-soak.html';\n        return new Promise((resolve) => {\n            renderTemplate(template, dialogData).then((dlg) => {\n                new Dialog({\n                    title: game.i18n.localize('SR5.DamageResistanceTest'),\n                    content: dlg,\n                    buttons: {\n                        continue: {\n                            label: game.i18n.localize('SR5.Continue'),\n                            callback: () => {\n                                id = 'default';\n                                cancel = false;\n                            },\n                        },\n                    },\n                    close: async (html) => {\n                        if (cancel) return;\n\n                        const soak: DamageData = options?.damage\n                            ? options.damage\n                            : {\n                                  base: 0,\n                                  value: 0,\n                                  mod: [],\n                                  ap: {\n                                      base: 0,\n                                      value: 0,\n                                      mod: [],\n                                  },\n                                  attribute: '' as const,\n                                  type: {\n                                      base: '',\n                                      value: '',\n                                  },\n                                  element: {\n                                      base: '',\n                                      value: '',\n                                  },\n                              };\n\n                        const armor = this.getArmor();\n\n                        // handle element changes\n                        const element = Helpers.parseInputToString($(html).find('[name=element]').val());\n                        if (element) {\n                            soak.element.value = element as DamageElement;\n                        }\n                        const bonusArmor = armor[element] ?? 0;\n                        if (bonusArmor) {\n                            parts.addUniquePart(CONFIG.SR5.elementTypes[element], bonusArmor);\n                        }\n\n                        // handle ap changes\n                        const ap = Helpers.parseInputToNumber($(html).find('[name=ap]').val());\n                        if (ap) {\n                            let armorVal = armor.value + bonusArmor;\n\n                            // don't take more AP than armor\n                            parts.addUniquePart('SR5.AP', Math.max(ap, -armorVal));\n                        }\n\n                        // handle incoming damage changes\n                        const incomingDamage = Helpers.parseInputToNumber($(html).find('[name=incomingDamage]').val());\n                        if (incomingDamage) {\n                            const totalDamage = Helpers.calcTotal(soak);\n                            if (totalDamage !== incomingDamage) {\n                                const diff = incomingDamage - totalDamage;\n                                // add part and calc total again\n                                soak.mod = PartsList.AddUniquePart(soak.mod, 'SR5.UserInput', diff);\n                                soak.value = Helpers.calcTotal(soak);\n                            }\n\n                            const totalAp = Helpers.calcTotal(soak.ap);\n                            if (totalAp !== ap) {\n                                const diff = ap - totalAp;\n                                // add part and calc total\n                                soak.ap.mod = PartsList.AddUniquePart(soak.ap.mod, 'SR5.UserInput', diff);\n                                soak.ap.value = Helpers.calcTotal(soak.ap);\n                            }\n                        }\n\n                        let title = game.i18n.localize('SR5.SoakTest');\n                        resolve(\n                            ShadowrunRoller.advancedRoll({\n                                event: options?.event,\n                                actor: this,\n                                soak: soak,\n                                parts: parts.list,\n                                title: title,\n                                wounds: false,\n                            }),\n                        );\n                    },\n                }).render(true);\n            });\n        });\n    }\n\n    rollSingleAttribute(attId, options: ActorRollOptions) {\n        const attr = duplicate(this.data.data.attributes[attId]);\n        const parts = new PartsList<number>();\n        parts.addUniquePart(attr.label, attr.value);\n        this._addMatrixParts(parts, attr);\n        this._addGlobalParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            actor: this,\n            parts: parts.list,\n            title: Helpers.label(attId),\n        });\n    }\n\n    rollTwoAttributes([id1, id2], options: ActorRollOptions) {\n        const attr1 = duplicate(this.data.data.attributes[id1]);\n        const attr2 = duplicate(this.data.data.attributes[id2]);\n        const label1 = Helpers.label(id1);\n        const label2 = Helpers.label(id2);\n        const parts = new PartsList<number>();\n        parts.addPart(attr1.label, attr1.value);\n        parts.addPart(attr2.label, attr2.value);\n        this._addMatrixParts(parts, [attr1, attr2]);\n        this._addGlobalParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            actor: this,\n            parts: parts.list,\n            title: `${label1} + ${label2}`,\n        });\n    }\n\n    rollNaturalRecovery(track, options?: ActorRollOptions) {\n        let id1 = 'body';\n        let id2 = 'willpower';\n        let title = 'Natural Recover';\n        if (track === 'physical') {\n            id2 = 'body';\n            title += ' - Physical - 1 Day';\n        } else {\n            title += ' - Stun - 1 Hour';\n        }\n        let att1 = duplicate(this.data.data.attributes[id1]);\n        let att2 = duplicate(this.data.data.attributes[id2]);\n        const parts = new PartsList<number>();\n        parts.addPart(att1.label, att1.value);\n        parts.addPart(att2.label, att2.value);\n\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            actor: this,\n            parts: parts.list,\n            title: title,\n            extended: true,\n            after: async (roll: Roll | undefined) => {\n                if (!roll) return;\n                let hits = roll.total;\n                let current = this.data.data.track[track].value;\n\n                current = Math.max(current - hits, 0);\n\n                let key = `data.track.${track}.value`;\n\n                let u = {};\n                u[key] = current;\n                await this.update(u);\n            },\n        });\n    }\n\n    async rollMatrixAttribute(attr, options?: ActorRollOptions) {\n        let matrix_att = duplicate(this.data.data.matrix[attr]);\n        let title = game.i18n.localize(CONFIG.SR5.matrixAttributes[attr]);\n        const parts = new PartsList<number>();\n        parts.addPart(CONFIG.SR5.matrixAttributes[attr], matrix_att.value);\n\n        if (options && options.event && options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\n        if (Helpers.hasModifiers(options?.event)) {\n            return ShadowrunRoller.advancedRoll({\n                event: options?.event,\n                actor: this,\n                parts: parts.list,\n                title: title,\n            });\n        }\n        const attributes = Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0);\n        const attribute = 'willpower';\n\n        let dialogData = {\n            attribute: attribute,\n            attributes: attributes,\n        };\n        const buttons = {\n            roll: {\n                label: 'Continue',\n                callback: () => (cancel = false),\n            },\n        };\n\n        let cancel = true;\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/matrix-roll.html', dialogData).then((dlg) => {\n            new Dialog({\n                title: `${title} Test`,\n                content: dlg,\n                buttons: buttons,\n                close: async (html) => {\n                    if (cancel) return;\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=attribute]').val());\n                    let att: AttributeField | undefined = undefined;\n                    if (newAtt) {\n                        att = this.data.data.attributes[newAtt];\n                        title += ` + ${game.i18n.localize(CONFIG.SR5.attributes[newAtt])}`;\n                    }\n                    if (att !== undefined) {\n                        if (att.value && att.label) parts.addPart(att.label, att.value);\n                        this._addMatrixParts(parts, true);\n                        this._addGlobalParts(parts);\n                        return ShadowrunRoller.advancedRoll({\n                            event: options?.event,\n                            actor: this,\n                            parts: parts.list,\n                            title: title,\n                        });\n                    }\n                },\n            }).render(true);\n        });\n    }\n\n    promptRoll(options?: ActorRollOptions) {\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            title: 'Roll',\n            parts: [],\n            actor: this,\n            dialogOptions: {\n                prompt: true,\n            },\n        });\n    }\n\n    rollDeviceRating(options?: ActorRollOptions) {\n        const title = game.i18n.localize('SR5.Labels.ActorSheet.DeviceRating');\n        const parts = new PartsList<number>();\n        const rating = this.getDeviceRating();\n        // add device rating twice as this is the most common roll\n        parts.addPart(title, rating);\n        parts.addPart(title, rating);\n        this._addGlobalParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            title,\n            parts: parts.list,\n            actor: this,\n        });\n    }\n\n    rollAttributesTest(rollId, options?: ActorRollOptions) {\n        const title = game.i18n.localize(CONFIG.SR5.attributeRolls[rollId]);\n        const atts = this.data.data.attributes;\n        const modifiers = this.data.data.modifiers;\n        const parts = new PartsList<number>();\n        if (rollId === 'composure') {\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\n            if (modifiers.composure) parts.addUniquePart('SR5.Bonus', modifiers.composure);\n        } else if (rollId === 'judge_intentions') {\n            parts.addUniquePart(atts.charisma.label, atts.charisma.value);\n            parts.addUniquePart(atts.intuition.label, atts.intuition.value);\n            if (modifiers.judge_intentions) parts.addUniquePart('SR5.Bonus', modifiers.judge_intentions);\n        } else if (rollId === 'lift_carry') {\n            parts.addUniquePart(atts.strength.label, atts.strength.value);\n            parts.addUniquePart(atts.body.label, atts.body.value);\n            if (modifiers.lift_carry) parts.addUniquePart('SR5.Bonus', modifiers.lift_carry);\n        } else if (rollId === 'memory') {\n            parts.addUniquePart(atts.willpower.label, atts.willpower.value);\n            parts.addUniquePart(atts.logic.label, atts.logic.value);\n            if (modifiers.memory) parts.addUniquePart('SR5.Bonus', modifiers.memory);\n        }\n\n        this._addGlobalParts(parts);\n        return ShadowrunRoller.advancedRoll({\n            event: options?.event,\n            actor: this,\n            parts: parts.list,\n            title: `${title} Test`,\n        });\n    }\n\n    rollSkill(skill: SkillField, options?: SkillRollOptions) {\n        let att = duplicate(this.data.data.attributes[skill.attribute]);\n        let title = game.i18n.localize(skill.label);\n\n        if (options?.attribute) att = this.data.data.attributes[options.attribute];\n        let limit = this.data.data.limits[att.limit];\n        const parts = new PartsList<number>();\n        parts.addUniquePart(skill.label, skill.value);\n\n        if (options?.event && Helpers.hasModifiers(options?.event)) {\n            parts.addUniquePart(att.label, att.value);\n            if (options.event[CONFIG.SR5.kbmod.SPEC]) parts.addUniquePart('SR5.Specialization', 2);\n\n            this._addMatrixParts(parts, [att, skill]);\n            this._addGlobalParts(parts);\n            return ShadowrunRoller.advancedRoll({\n                event: options.event,\n                actor: this,\n                parts: parts.list,\n                limit,\n                title: `${title} Test`,\n            });\n        }\n        let dialogData = {\n            attribute: skill.attribute,\n            attributes: Helpers.filter(this.data.data.attributes, ([, value]) => value.value > 0),\n            limit: att.limit,\n            limits: this.data.data.limits,\n        };\n        let cancel = true;\n        let spec = '';\n\n        let buttons = {\n            roll: {\n                label: 'Normal',\n                callback: () => (cancel = false),\n            },\n        };\n        // add specializations to dialog as buttons\n        if (skill.specs?.length) {\n            skill.specs.forEach(\n                (s) =>\n                    (buttons[s] = {\n                        label: s,\n                        callback: () => {\n                            cancel = false;\n                            spec = s;\n                        },\n                    }),\n            );\n        }\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/skill-roll.html', dialogData).then((dlg) => {\n            new Dialog({\n                title: `${title} Test`,\n                content: dlg,\n                buttons,\n                close: async (html) => {\n                    if (cancel) return;\n                    const newAtt = Helpers.parseInputToString($(html).find('[name=\"attribute\"]').val());\n                    const newLimit = Helpers.parseInputToString($(html).find('[name=\"attribute.limit\"]').val());\n                    att = this.data.data.attributes[newAtt];\n                    title += ` + ${game.i18n.localize(CONFIG.SR5.attributes[newAtt])}`;\n                    limit = this.data.data.limits[newLimit];\n                    parts.addUniquePart(att.label, att.value);\n                    if (skill.value === 0) parts.addUniquePart('SR5.Defaulting', -1);\n                    if (spec) parts.addUniquePart('SR5.Specialization', 2);\n                    this._addMatrixParts(parts, [att, skill]);\n                    this._addGlobalParts(parts);\n                    return ShadowrunRoller.advancedRoll({\n                        event: options?.event,\n                        actor: this,\n                        parts: parts.list,\n                        limit,\n                        title: `${title} Test`,\n                    });\n                },\n            }).render(true);\n        });\n    }\n\n    rollDronePerception(options?: ActorRollOptions) {\n        if (!this.isVehicle()) {\n            return undefined;\n        }\n        const actorData = duplicate(this.data.data) as VehicleActorData;\n        if (actorData.controlMode === 'autopilot') {\n            const parts = new PartsList<number>();\n\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\n            // TODO possibly look for autosoft item level?\n            const perception = this.findActiveSkill('perception');\n            const limit = this.findLimit('sensor');\n\n            if (perception && limit) {\n                parts.addPart('SR5.Vehicle.Clearsight', Helpers.calcTotal(perception));\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\n\n                this._addGlobalParts(parts);\n\n                return ShadowrunRoller.advancedRoll({\n                    event: options?.event,\n                    actor: this,\n                    parts: parts.list,\n                    limit,\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollDronePerception'),\n                });\n            }\n        } else {\n            this.rollActiveSkill('perception', options);\n        }\n    }\n\n    rollPilotVehicle(options?: ActorRollOptions) {\n        if (!this.isVehicle()) {\n            return undefined;\n        }\n        const actorData = duplicate(this.data.data) as VehicleActorData;\n        if (actorData.controlMode === 'autopilot') {\n            const parts = new PartsList<number>();\n\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\n            let skill: SkillField | undefined = this.getVehicleTypeSkill();\n            const environment = actorData.environment;\n            const limit = this.findLimit(environment);\n\n            if (skill && limit) {\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\n                // TODO possibly look for autosoft item level?\n                parts.addPart('SR5.Vehicle.Maneuvering', Helpers.calcTotal(skill));\n\n                this._addGlobalParts(parts);\n\n                return ShadowrunRoller.advancedRoll({\n                    event: options?.event,\n                    actor: this,\n                    parts: parts.list,\n                    limit,\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollPilotVehicleTest'),\n                });\n            }\n        } else {\n            this.rollActiveSkill('perception', options);\n        }\n    }\n\n    rollDroneInfiltration(options?: ActorRollOptions) {\n        if (!this.isVehicle()) {\n            return undefined;\n        }\n        const actorData = duplicate(this.data.data) as VehicleActorData;\n        if (actorData.controlMode === 'autopilot') {\n            const parts = new PartsList<number>();\n\n            const pilot = Helpers.calcTotal(actorData.vehicle_stats.pilot);\n            // TODO possibly look for autosoft item level?\n            const sneaking = this.findActiveSkill('sneaking');\n            const limit = this.findLimit('sensor');\n\n            if (sneaking && limit) {\n                parts.addPart('SR5.Vehicle.Stealth', Helpers.calcTotal(sneaking));\n                parts.addPart('SR5.Vehicle.Stats.Pilot', pilot);\n\n                this._addGlobalParts(parts);\n\n                return ShadowrunRoller.advancedRoll({\n                    event: options?.event,\n                    actor: this,\n                    parts: parts.list,\n                    limit,\n                    title: game.i18n.localize('SR5.Labels.ActorSheet.RollDroneInfiltration'),\n                });\n            }\n        } else {\n            this.rollActiveSkill('sneaking', options);\n        }\n    }\n\n    rollKnowledgeSkill(catId: string, skillId: string, options?: SkillRollOptions) {\n        const category = duplicate(this.data.data.skills.knowledge[catId]);\n        const skill = duplicate(category.value[skillId]);\n        skill.attribute = category.attribute;\n        skill.label = skill.name;\n        return this.rollSkill(skill, options);\n    }\n\n    rollLanguageSkill(skillId: string, options?: SkillRollOptions) {\n        const skill = duplicate(this.data.data.skills.language.value[skillId]);\n        skill.attribute = 'intuition';\n        skill.label = skill.name;\n        return this.rollSkill(skill, options);\n    }\n\n    rollActiveSkill(skillId: string, options?: SkillRollOptions) {\n        const skill = duplicate(this.data.data.skills.active[skillId]);\n        return this.rollSkill(skill, options);\n    }\n\n    rollAttribute(attId, options?: ActorRollOptions) {\n        let title = game.i18n.localize(CONFIG.SR5.attributes[attId]);\n        const att = duplicate(this.data.data.attributes[attId]);\n        const atts = duplicate(this.data.data.attributes);\n        const parts = new PartsList<number>();\n        parts.addUniquePart(att.label, att.value);\n        let dialogData = {\n            attribute: att,\n            attributes: atts,\n        };\n        let cancel = true;\n        renderTemplate('systems/shadowrun5e/dist/templates/rolls/single-attribute.html', dialogData).then((dlg) => {\n            new Dialog({\n                title: `${title} Attribute Test`,\n                content: dlg,\n                buttons: {\n                    roll: {\n                        label: 'Continue',\n                        callback: () => (cancel = false),\n                    },\n                },\n                default: 'roll',\n                close: async (html) => {\n                    if (cancel) return;\n\n                    const att2Id: string = Helpers.parseInputToString($(html).find('[name=attribute2]').val());\n                    let att2: AttributeField | undefined = undefined;\n                    if (att2Id !== 'none') {\n                        att2 = atts[att2Id];\n                        if (att2?.label) {\n                            parts.addUniquePart(att2.label, att2.value);\n                            const att2IdLabel = game.i18n.localize(CONFIG.SR5.attributes[att2Id]);\n                            title += ` + ${att2IdLabel}`;\n                        }\n                    }\n                    if (att2Id === 'default') {\n                        parts.addUniquePart('SR5.Defaulting', -1);\n                    }\n                    this._addMatrixParts(parts, [att, att2]);\n                    this._addGlobalParts(parts);\n                    return ShadowrunRoller.advancedRoll({\n                        event: options?.event,\n                        title: `${title} Test`,\n                        actor: this,\n                        parts: parts.list,\n                    });\n                },\n            }).render(true);\n        });\n    }\n\n    _addMatrixParts(parts: PartsList<number>, atts) {\n        if (Helpers.isMatrix(atts)) {\n            const m = this.data.data.matrix;\n            if (m.hot_sim) parts.addUniquePart('SR5.HotSim', 2);\n            if (m.running_silent) parts.addUniquePart('SR5.RunningSilent', -2);\n        }\n    }\n    _addGlobalParts(parts: PartsList<number>) {\n        if (this.data.data.modifiers.global) {\n            parts.addUniquePart('SR5.Global', this.data.data.modifiers.global);\n        }\n    }\n\n    _addDefenseParts(parts: PartsList<number>) {\n        if (this.isVehicle()) {\n            const pilot = this.findVehicleStat('pilot');\n            if (pilot) {\n                parts.addUniquePart(pilot.label, Helpers.calcTotal(pilot));\n            }\n            const skill = this.getVehicleTypeSkill();\n            if (skill) {\n                parts.addUniquePart('SR5.Vehicle.Maneuvering', Helpers.calcTotal(skill));\n            }\n        } else {\n            const reaction = this.findAttribute('reaction');\n            const intuition = this.findAttribute('intuition');\n\n            if (reaction) {\n                parts.addUniquePart(reaction.label || 'SR5.Reaction', reaction.value);\n            }\n            if (intuition) {\n                parts.addUniquePart(intuition.label || 'SR5.Intuition', intuition.value);\n            }\n        }\n\n        const mod = this.getModifier('defense');\n        if (mod) {\n            parts.addUniquePart('SR5.Bonus', mod);\n        }\n    }\n\n    _addArmorParts(parts: PartsList<number>) {\n        const armor = this.getArmor();\n        if (armor) {\n            parts.addUniquePart(armor.label || 'SR5.Armor', armor.base);\n            for (let part of armor.mod) {\n                parts.addUniquePart(part.name, part.value);\n            }\n        }\n    }\n\n    _addSoakParts(parts: PartsList<number>) {\n        const body = this.findAttribute('body');\n        if (body) {\n            parts.addUniquePart(body.label || 'SR5.Body', body.value);\n        }\n        const mod = this.getModifier('soak');\n        if (mod) {\n            parts.addUniquePart(\"SR5.Bonus\", mod);\n        }\n        this._addArmorParts(parts);\n    }\n\n    static async pushTheLimit(li) {\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\n\n        if (msg.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll)) {\n            let actor = (msg.user.character as unknown) as SR5Actor;\n            if (!actor) {\n                // get controlled tokens\n                const tokens = canvas.tokens.controlled;\n                if (tokens.length > 0) {\n                    for (let token of tokens) {\n                        if (token.actor.owner) {\n                            actor = token.actor;\n                            break;\n                        }\n                    }\n                }\n            }\n            if (actor) {\n                const parts = new PartsList<number>();\n                parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\n                ShadowrunRoller.basicRoll({\n                    title: ` - ${game.i18n.localize('SR5.PushTheLimit')}`,\n                    parts: parts.list,\n                    actor: actor,\n                }).then(() => {\n                    actor.update({\n                        'data.attributes.edge.uses': actor.getEdge().uses - 1,\n                    });\n                });\n            } else {\n                // @ts-ignore\n                ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\n            }\n        }\n    }\n\n    static async secondChance(li) {\n        let msg: ChatMessage = game.messages.get(li.data().messageId);\n        // @ts-ignore\n        let roll: Roll = JSON.parse(msg.data?.roll);\n        let formula = roll.formula;\n        let hits = roll.total;\n        let re = /(\\d+)d6/;\n        let matches = formula.match(re);\n        if (matches && matches[1]) {\n            let match = matches[1];\n            let pool = parseInt(match.replace('d6', ''));\n            if (!isNaN(pool) && !isNaN(hits)) {\n                let actor = (msg.user.character as unknown) as SR5Actor;\n                if (!actor) {\n                    // get controlled tokens\n                    const tokens = canvas.tokens.controlled;\n                    if (tokens.length > 0) {\n                        for (let token of tokens) {\n                            if (token.actor.owner) {\n                                actor = token.actor;\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (actor) {\n                    const parts = new PartsList<number>();\n                    parts.addUniquePart('SR5.OriginalDicePool', pool);\n                    parts.addUniquePart('SR5.Successes', -hits);\n\n                    return ShadowrunRoller.basicRoll({\n                        title: ` - Second Chance`,\n                        parts: parts.list,\n                        actor: actor,\n                    }).then(() => {\n                        actor.update({\n                            'data.attributes.edge.uses': actor.getEdge().uses - 1,\n                        });\n                    });\n                } else {\n                    // @ts-ignore\n                    ui.notifications.warn(game.i18n.localize('SR5.SelectTokenMessage'));\n                }\n            }\n        }\n    }\n\n    /**\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\n     * @param scope\n     * @param key\n     * @param value\n     */\n    setFlag(scope: string, key: string, value: any): Promise<this> {\n        const newValue = Helpers.onSetFlag(value);\n        return super.setFlag(scope, key, newValue);\n    }\n\n    /**\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\n     * @param scope\n     * @param key\n     */\n    getFlag(scope: string, key: string): any {\n        const data = super.getFlag(scope, key);\n        return Helpers.onGetFlag(data);\n    }\n}\n","import { Helpers } from '../helpers';\nimport { ChummerImportForm } from '../apps/chummer-import-form';\nimport { SkillEditForm } from '../apps/skills/SkillEditForm';\nimport { KnowledgeSkillEditForm } from '../apps/skills/KnowledgeSkillEditForm';\nimport { LanguageSkillEditForm } from '../apps/skills/LanguageSkillEditForm';\nimport SR5ActorSheetData = Shadowrun.SR5ActorSheetData;\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\nimport Skills = Shadowrun.Skills;\nimport { SR5Actor } from './SR5Actor';\nimport MatrixAttribute = Shadowrun.MatrixAttribute;\nimport {SR5} from \"../config\";\nimport SkillField = Shadowrun.SkillField;\n\n// Use SR5ActorSheet._showSkillEditForm to only ever render one SkillEditForm instance.\n// Should multiple instances be open, Foundry will cause cross talk between skills and actors,\n// when opened in succession, causing SkillEditForm to wrongfully overwrite the wrong data.\nlet globalSkillAppId: number = -1;\n\n/**\n * Extend the basic ActorSheet with some very simple modifications\n */\nexport class SR5ActorSheet extends ActorSheet {\n    _shownDesc: string[];\n    _filters: SR5SheetFilters;\n    actor: SR5Actor;\n    _scroll: string;\n\n    constructor(...args) {\n        super(...args);\n\n        /**\n         * Keep track of the currently active sheet tab\n         * @type {string}\n         */\n        this._shownDesc = [];\n        this._filters = {\n            skills: '',\n            showUntrainedSkills: true\n        };\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Extend and override the default options used by the 5e Actor Sheet\n     * @returns {Object}\n     */\n    static get defaultOptions() {\n        return mergeObject(super.defaultOptions, {\n            classes: ['sr5', 'sheet', 'actor'],\n            width: 880,\n            height: 690,\n            tabs: [\n                {\n                    navSelector: '.tabs',\n                    contentSelector: '.sheetbody',\n                    initial: 'skills',\n                },\n            ],\n        });\n    }\n\n    get template() {\n        const path = 'systems/shadowrun5e/dist/templates/actor/';\n        return `${path}${this.actor.data.type}.html`;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Prepare data for rendering the Actor sheet\n     * The prepared data object contains both the actor data as well as additional sheet options\n     */\n    getData() {\n        const data: SR5ActorSheetData = (super.getData() as unknown) as SR5ActorSheetData;\n\n        // General purpose fields...\n        data.config = CONFIG.SR5;\n        data.filters = this._filters;\n\n        this._prepareMatrixAttributes(data);\n        this._prepareActorAttributes(data);\n\n        this._prepareItems(data);\n        this._prepareSkillsWithFilters(data);\n        this._prepareActorTypeFields(data);\n        this._prepareCharacterFields(data);\n\n        return data;\n    }\n\n    _isSkillMagic(id, skill) {\n        return skill.attribute === 'magic' || id === 'astral_combat' || id === 'assensing';\n    }\n\n    _isSkillResonance(skill) {\n        return skill.attribute === 'resonance'\n    }\n\n    _getSkillLabelOrName(skill) {\n        // Custom skills don't have labels, use their name instead.\n        return skill.label ? game.i18n.localize(skill.label) : skill.name;\n    }\n\n    _doesSkillContainText(key, skill, text) {\n        if (!text) {\n            return true;\n        }\n\n        // Search both english keys, localized labels and all specializations.\n        const name = this._getSkillLabelOrName(skill);\n        const searchKey = skill.name === undefined ? key : '';\n        let searchString = `${searchKey} ${name} ${skill?.specs?.join(' ')}`;\n\n        return searchString.toLowerCase().search(text.toLowerCase()) > -1;\n    }\n\n    _prepareCharacterFields(data: SR5ActorSheetData) {\n        // Empty zero value modifiers for display purposes.\n        const { modifiers: mods } = data.data;\n        for (let [key, value] of Object.entries(mods)) {\n            if (value === 0) mods[key] = '';\n        }\n\n        data.awakened = data.data.special === 'magic';\n        data.emerged = data.data.special === 'resonance';\n        data.woundTolerance = 3 + (Number(mods['wound_tolerance']) || 0);\n    }\n\n    _prepareActorTypeFields(data: SR5ActorSheetData) {\n        data.isCharacter = this.actor.data.type === 'character';\n        data.isSpirit = this.actor.data.type === 'spirit';\n    }\n\n    _prepareMatrixAttributes(data) {\n        const { matrix } = data.data;\n        if (matrix) {\n            const cleanupAttribute = (attribute: MatrixAttribute) => {\n                const att = matrix[attribute];\n                if (att) {\n                    if (!att.mod) att.mod = {};\n                    if (att.temp === 0) delete att.temp;\n                }\n            };\n\n            ['firewall', 'data_processing', 'sleaze', 'attack'].forEach((att: MatrixAttribute) => cleanupAttribute(att));\n        }\n    }\n\n    _prepareActorAttributes(data: SR5ActorSheetData) {\n        // Clear visible, zero value attributes temporary modifiers so they appear blank.\n        const attrs = data.data.attributes;\n        for (let [, att] of Object.entries(attrs)) {\n            if (!att.hidden) {\n                if (att.temp === 0) delete att.temp;\n            }\n        }\n    }\n\n    _prepareSkillsWithFilters(data: SR5ActorSheetData) {\n        this._filterActiveSkills(data);\n        this._filterKnowledgeSkills(data);\n        this._filterLanguageSkills(data);\n    }\n\n    _filterActiveSkills(data: SR5ActorSheetData) {\n        // Handle active skills directly, as it doesn't use sub-categories.\n        data.data.skills.active = this._filterSkills(data, data.data.skills.active);\n    }\n\n    _filterKnowledgeSkills(data: SR5ActorSheetData) {\n        // Knowledge skill have separate sub-categories.\n        Object.keys(SR5.knowledgeSkillCategories).forEach(category => {\n            if (!data.data.skills.knowledge.hasOwnProperty(category)) {\n                console.warn(`Knowledge Skill doesn't provide configured category ${category}`);\n                return;\n            }\n            data.data.skills.knowledge[category].value = this._filterSkills(data, data.data.skills.knowledge[category].value);\n        });\n    }\n\n    _filterLanguageSkills(data: SR5ActorSheetData) {\n        // Language Skills have no sub-categories.\n        data.data.skills.language.value = this._filterSkills(data, data.data.skills.language.value);\n    }\n\n    _filterSkills(data: SR5ActorSheetData, skills: Skills) {\n        const filteredSkills = {};\n        for (let [key, skill] of Object.entries(skills)) {\n            if (this._showSkill(key, skill, data)) {\n                filteredSkills[key] = skill;\n            }\n        }\n        Helpers.orderKeys(filteredSkills);\n        return filteredSkills\n    }\n\n    _showSkill(key, skill, data) {\n        if (this._showMagicSkills(key, skill, data)) {\n            return true;\n        }\n        if (this._showResonanceSkills(key, skill, data)) {\n            return true;\n        }\n\n        return this._showGeneralSkill(key, skill);\n    }\n\n    _isSkillFiltered(skillId, skill) {\n        // a newly created skill should be filtered, no matter what.\n        const isFilterable = this._getSkillLabelOrName(skill).length > 0;\n        const isHiddenForText = !this._doesSkillContainText(skillId, skill, this._filters.skills);\n        const isHiddenForUntrained = !this._filters.showUntrainedSkills && skill.value === 0;\n\n        return !(isFilterable && (isHiddenForUntrained || isHiddenForText))\n    }\n\n    _showGeneralSkill(skillId, skill: SkillField) {\n        return !this._isSkillMagic(skillId, skill) &&\n               !this._isSkillResonance(skill) &&\n               this._isSkillFiltered(skillId, skill);\n    }\n\n    _showMagicSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\n        return this._isSkillMagic(skillId, skill) &&\n              data.data.special === 'magic' &&\n              this._isSkillFiltered(skillId, skill);\n    }\n\n    _showResonanceSkills(skillId, skill: SkillField, data: SR5ActorSheetData) {\n        return this._isSkillResonance(skill) &&\n               data.data.special === 'resonance' &&\n               this._isSkillFiltered(skillId, skill);\n    }\n\n    _prepareItems(data) {\n        const inventory = {};\n        inventory['weapon'] = {\n            label: game.i18n.localize('SR5.Weapon'),\n            items: [],\n            dataset: {\n                type: 'weapon',\n            },\n        };\n        if (this.actor.data.type === 'character') {\n            inventory['armor'] = {\n                label: game.i18n.localize('SR5.Armor'),\n                items: [],\n                dataset: {\n                    type: 'armor',\n                },\n            };\n            inventory['device'] = {\n                label: game.i18n.localize('SR5.Device'),\n                items: [],\n                dataset: {\n                    type: 'device',\n                },\n            };\n            inventory['equipment'] = {\n                label: game.i18n.localize('SR5.Equipment'),\n                items: [],\n                dataset: {\n                    type: 'equipment',\n                },\n            };\n            inventory['cyberware'] = {\n                label: game.i18n.localize('SR5.Cyberware'),\n                items: [],\n                dataset: {\n                    type: 'cyberware',\n                },\n            };\n        }\n\n        let [\n            items,\n            spells,\n            qualities,\n            adept_powers,\n            actions,\n            complex_forms,\n            lifestyles,\n            contacts,\n            sins,\n            programs,\n            critter_powers,\n            sprite_powers,\n        ] = data.items.reduce(\n            (arr, item) => {\n                item.isStack = item.data.quantity ? item.data.quantity > 1 : false;\n                if (item.type === 'spell') arr[1].push(item);\n                else if (item.type === 'quality') arr[2].push(item);\n                else if (item.type === 'adept_power') arr[3].push(item);\n                else if (item.type === 'action') arr[4].push(item);\n                else if (item.type === 'complex_form') arr[5].push(item);\n                else if (item.type === 'lifestyle') arr[6].push(item);\n                else if (item.type === 'contact') arr[7].push(item);\n                else if (item.type === 'sin') arr[8].push(item);\n                else if (item.type === 'program') arr[9].push(item);\n                else if (item.type === 'critter_power') arr[10].push(item);\n                else if (item.type === 'sprite_power') arr[11].push(item);\n                else if (Object.keys(inventory).includes(item.type)) arr[0].push(item);\n                return arr;\n            },\n            [[], [], [], [], [], [], [], [], [], [], [], []],\n        );\n\n        const sortByName = (i1, i2) => {\n            if (i1.name > i2.name) return 1;\n            if (i1.name < i2.name) return -1;\n            return 0;\n        };\n        const sortByEquipped = (left, right) => {\n            const leftEquipped = left.data?.technology?.equipped;\n            const rightEquipped = right.data?.technology?.equipped;\n            if (leftEquipped && !rightEquipped) return -1;\n            if (rightEquipped && !leftEquipped) return 1;\n            if (left.name > right.name) return 1;\n            if (left.name < right.name) return -1;\n            return 0;\n        };\n        actions.sort(sortByName);\n        adept_powers.sort(sortByName);\n        complex_forms.sort(sortByName);\n        items.sort(sortByEquipped);\n        spells.sort(sortByName);\n        contacts.sort(sortByName);\n        lifestyles.sort(sortByName);\n        sins.sort(sortByName);\n        programs.sort(sortByEquipped);\n        critter_powers.sort(sortByName);\n        sprite_powers.sort(sortByName);\n\n        items.forEach((item) => {\n            inventory[item.type].items.push(item);\n        });\n\n        data.inventory = Object.values(inventory);\n        data.magic = {\n            spellbook: spells,\n            powers: adept_powers,\n        };\n        data.actions = actions;\n        data.complex_forms = complex_forms;\n        data.lifestyles = lifestyles;\n        data.contacts = contacts;\n        data.sins = sins;\n        data.programs = programs;\n        data.critter_powers = critter_powers;\n        data.sprite_powers = sprite_powers;\n\n        qualities.sort((a, b) => {\n            if (a.data.type === 'positive' && b.data.type === 'negative') return -1;\n            if (a.data.type === 'negative' && b.data.type === 'positive') return 1;\n            return a.name < b.name ? -1 : 1;\n        });\n        data.qualities = qualities;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Activate event listeners using the prepared sheet HTML\n     * @param html The prepared HTML object ready to be rendered into the DOM\n     */\n    activateListeners(html) {\n        super.activateListeners(html);\n\n        html.find('.hidden').hide();\n\n        html.find('.has-desc').click((event) => {\n            event.preventDefault();\n            const item = $(event.currentTarget).parents('.list-item');\n            const iid = $(item).data().item;\n            const field = item.next();\n            field.toggle();\n            if (iid) {\n                if (field.is(':visible')) this._shownDesc.push(iid);\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\n            }\n        });\n\n        html.find('.skill-header').click(this._onFilterUntrainedSkills.bind(this));\n\n        html.find('.cell-input-roll').click(this._onRollCellInput.bind(this));\n        html.find('.attribute-roll').click(this._onRollAttribute.bind(this));\n        html.find('.skill-roll').click(this._onRollActiveSkill.bind(this));\n\n        html.find('#filter-skills').on('input', this._onFilterSkills.bind(this));\n\n        html.find('.skill-edit').click(this._onShowEditSkill.bind(this));\n        html.find('.knowledge-skill-edit').click(this._onShowEditKnowledgeSkill.bind(this));\n        html.find('.language-skill-edit').click(this._onShowEditLanguageSkill.bind(this));\n        html.find('.add-knowledge').click(this._onAddKnowledgeSkill.bind(this));\n        html.find('.add-language').click(this._onAddLanguageSkill.bind(this));\n        html.find('.remove-knowledge').click(this._onRemoveKnowledgeSkill.bind(this));\n        html.find('.remove-language').click(this._onRemoveLanguageSkill.bind(this));\n        html.find('.knowledge-skill').click(this._onRollKnowledgeSkill.bind(this));\n        html.find('.language-skill').click(this._onRollLanguageSkill.bind(this));\n\n        html.find('.item-roll').click(this._onRollItem.bind(this));\n        html.find('.item-equip-toggle').click(this._onEquipItem.bind(this));\n        html.find('.item-qty').change(this._onChangeQty.bind(this));\n        html.find('.item-rtg').change(this._onChangeRtg.bind(this));\n        html.find('.item-create').click(this._onItemCreate.bind(this));\n        html.find('.reload-ammo').click(this._onReloadAmmo.bind(this));\n        html.find('.matrix-att-selector').change(this._onMatrixAttributeSelected.bind(this));\n\n        html.find('.import-character').click(this._onShowImportCharacter.bind(this));\n\n\n\n        /**\n         * Open the PDF for an item on the actor\n         */\n        $(html)\n            .find('.open-source-pdf')\n            .on('click', async (event) => {\n                event.preventDefault();\n                const field = $(event.currentTarget).parents('.list-item');\n                const iid = $(field).data().itemId;\n                const item = this.actor.getOwnedSR5Item(iid);\n                if (item) {\n                    await item.openPdfSource();\n                }\n            });\n\n        $(html).find('.horizontal-cell-input .cell').on('click', this._onSetCellInput.bind(this));\n        $(html).find('.horizontal-cell-input .cell').on('contextmenu', this._onClearCellInput.bind(this));\n\n        /**\n         * New API to use for rolling from the actor sheet\n         * the clickable label needs the css class Roll\n         * a parent of the label needs to have the css class RollId, and then have data-roll-id set\n         */\n        $(html).find('.Roll').on('click', this._onRollFromSheet.bind(this));\n\n        // updates matrix condition monitor on the device the actor has equippe\n        $(html)\n            .find('[name=\"data.matrix.condition_monitor.value\"]')\n            .on('change', async (event: any) => {\n                event.preventDefault();\n                const value = Helpers.parseInputToNumber(event.currentTarget.value);\n                const matrixDevice = this.actor.getMatrixDevice();\n                if (matrixDevice && !isNaN(value)) {\n                    const updateData = {};\n                    updateData['data.technology.condition_monitor.value'] = value;\n                    await matrixDevice.update(updateData);\n                }\n            });\n\n        // Update Inventory Item\n        html.find('.item-edit').click((event) => {\n            event.preventDefault();\n            const iid = Helpers.listItemId(event);\n            const item = this.actor.getOwnedSR5Item(iid);\n            if (item) item.sheet.render(true);\n        });\n        // Delete Inventory Item\n        html.find('.item-delete').click((event) => {\n            event.preventDefault();\n            const iid = Helpers.listItemId(event);\n            const el = $(event.currentTarget).parents('.list-item');\n            this.actor.deleteOwnedItem(iid);\n            el.slideUp(200, () => this.render(false));\n        });\n        // Drag inventory item\n        let handler = (ev) => this._onDragStart(ev);\n        html.find('.list-item').each((i, item) => {\n            if (item.dataset && item.dataset.itemId) {\n                item.setAttribute('draggable', true);\n                item.addEventListener('dragstart', handler, false);\n            }\n        });\n    }\n\n    async _onRollFromSheet(event) {\n        event.preventDefault();\n        // look for roll id data in the current line\n        let rollId = $(event.currentTarget).data()?.rollId;\n        // if that doesn't exist, look for a prent with RollId name\n        rollId = rollId ?? $(event.currentTarget).parent('.RollId').data().rollId;\n\n        const split = rollId.split('.');\n        const options = { event };\n        switch (split[0]) {\n            case 'prompt-roll':\n                this.actor.promptRoll(options);\n                break;\n            case 'armor':\n                this.actor.rollArmor(options);\n                break;\n            case 'fade':\n                this.actor.rollFade(options);\n                break;\n            case 'drain':\n                this.actor.rollDrain(options);\n                break;\n            case 'defense':\n                this.actor.rollDefense(options);\n                break;\n            case 'damage-resist':\n                this.actor.rollSoak(options);\n                break;\n\n            // attribute only rolls\n            case 'composure':\n                this.actor.rollAttributesTest('composure');\n                break;\n            case 'judge-intentions':\n                this.actor.rollAttributesTest('judge_intentions');\n                break;\n            case 'lift-carry':\n                this.actor.rollAttributesTest('lift_carry');\n                break;\n            case 'memory':\n                this.actor.rollAttributesTest('memory');\n                break;\n\n            case 'vehicle-stat':\n                console.log('roll vehicle stat', rollId);\n                break;\n\n            case 'drone':\n                const prop = split[1]; // we expect another for \"drone\" category\n                switch (prop) {\n                    case 'perception':\n                        this.actor.rollDronePerception(options);\n                        break;\n                    case 'infiltration':\n                        this.actor.rollDroneInfiltration(options);\n                        break;\n                    case 'pilot-vehicle':\n                        this.actor.rollPilotVehicle(options);\n                        break;\n                }\n                break;\n            // end drone\n\n            case 'attribute':\n                const attribute = split[1];\n                if (attribute) {\n                    this.actor.rollAttribute(attribute, options);\n                }\n                break;\n            // end attribute\n\n            case 'skill':\n                const skillType = split[1];\n                switch (skillType) {\n                    case 'active': {\n                        const skillId = split[2];\n                        this.actor.rollActiveSkill(skillId, options);\n                        break;\n                    }\n                    case 'language': {\n                        const skillId = split[2];\n                        this.actor.rollLanguageSkill(skillId, options);\n                        break;\n                    }\n                    case 'knowledge': {\n                        const category = split[2];\n                        const skillId = split[3];\n                        this.actor.rollKnowledgeSkill(category, skillId, options);\n                        break;\n                    }\n                }\n                break;\n            // end skill\n\n            case 'matrix':\n                const subkey = split[1];\n                switch (subkey) {\n                    case 'attribute':\n                        const attr = split[2];\n                        this.actor.rollMatrixAttribute(attr, options);\n                        break;\n                    case 'device-rating':\n                        this.actor.rollDeviceRating(options);\n                        break;\n                }\n\n                break;\n            // end matrix\n        }\n    }\n\n    // Setup skill name filter within getData\n    async _onFilterSkills(event) {\n        this._filters.skills = event.currentTarget.value;\n        await this.render();\n    }\n\n    // Setup untrained skill filter within getData\n    async _onFilterUntrainedSkills(event) {\n        event.preventDefault();\n        this._filters.showUntrainedSkills = !this._filters.showUntrainedSkills;\n        await this.render();\n    }\n\n    async _onReloadAmmo(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.getOwnedSR5Item(iid);\n        if (item) return item.reloadAmmo();\n    }\n\n    async _onMatrixAttributeSelected(event) {\n        let iid = this.actor.data.data.matrix.device;\n        let item = this.actor.getOwnedSR5Item(iid);\n        if (!item) {\n            console.error('could not find item');\n            return;\n        }\n        // grab matrix attribute (sleaze, attack, etc.)\n        let att = event.currentTarget.dataset.att;\n        // grab device attribute (att1, att2, ...)\n        let deviceAtt = event.currentTarget.value;\n\n        // get current matrix attribute on the device\n        let oldVal = item.data.data.atts[deviceAtt].att;\n        let data = {\n            _id: iid,\n        };\n\n        // go through atts on device, setup matrix attributes on it\n        for (let i = 1; i <= 4; i++) {\n            let tmp = `att${i}`;\n            let key = `data.atts.att${i}.att`;\n            if (tmp === deviceAtt) {\n                data[key] = att;\n            } else if (item.data.data.atts[`att${i}`].att === att) {\n                data[key] = oldVal;\n            }\n        }\n        await this.actor.updateOwnedItem(data);\n    }\n\n    _onItemCreate(event) {\n        event.preventDefault();\n        const type = Helpers.listItemId(event);\n        const itemData = {\n            name: `New ${type}`,\n            type: type,\n        };\n        return this.actor.createOwnedItem(itemData, { renderSheet: true });\n    }\n\n    async _onAddLanguageSkill(event) {\n        event.preventDefault();\n        this.actor.addLanguageSkill({ name: '' });\n    }\n\n    async _onRemoveLanguageSkill(event) {\n        event.preventDefault();\n        const skillId = Helpers.listItemId(event);\n        this.actor.removeLanguageSkill(skillId);\n    }\n\n    async _onAddKnowledgeSkill(event) {\n        event.preventDefault();\n        const category = Helpers.listItemId(event);\n        this.actor.addKnowledgeSkill(category);\n    }\n\n    async _onRemoveKnowledgeSkill(event) {\n        event.preventDefault();\n        const [skillId, category] = Helpers.listItemId(event).split('.');\n        this.actor.removeKnowledgeSkill(skillId, category);\n    }\n\n    async _onChangeRtg(event) {\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.getOwnedSR5Item(iid);\n        const rtg = parseInt(event.currentTarget.value);\n        if (item && rtg) {\n            item.update({ 'data.technology.rating': rtg });\n        }\n    }\n\n    async _onChangeQty(event) {\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.getOwnedSR5Item(iid);\n        const qty = parseInt(event.currentTarget.value);\n        if (item && qty) {\n            item.data.data.technology.quantity = qty;\n            item.update({ 'data.technology.quantity': qty });\n        }\n    }\n\n    async _onEquipItem(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.getOwnedSR5Item(iid);\n        if (item) {\n            const itemData = item.data.data;\n            const newItems = [] as any[];\n            if (item.type === 'device') {\n                // turn off all other devices than the one that is being equipped\n                // if clicking the equipped, toggle it\n                for (let ite of this.actor.items.filter((i) => i.type === 'device')) {\n                    newItems.push({\n                        '_id': ite._id,\n                        'data.technology.equipped': ite._id === iid ? !itemData.technology.equipped : false,\n                    });\n                }\n            } else {\n                newItems.push({\n                    '_id': iid,\n                    'data.technology.equipped': !itemData.technology.equipped,\n                });\n            }\n            await this.actor.updateEmbeddedEntity('OwnedItem', newItems);\n            this.actor.render();\n        }\n    }\n\n    async _onSetCellInput(event) {\n        const value = Number(event.currentTarget.dataset.value);\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        const data = {};\n        if (cmId === 'stun' || cmId === 'physical') {\n            const property = `data.track.${cmId}.value`;\n            data[property] = value;\n        } else if (cmId === 'edge') {\n            const property = `data.attributes.edge.uses`;\n            data[property] = value;\n        } else if (cmId === 'overflow') {\n            const property = 'data.track.physical.overflow.value';\n            data[property] = value;\n        } else if (cmId === 'matrix') {\n            const matrixDevice = this.actor.getMatrixDevice();\n            if (matrixDevice && !isNaN(value)) {\n                const updateData = {};\n                updateData['data.technology.condition_monitor.value'] = value;\n                await matrixDevice.update(updateData);\n            } else {\n                data['data.matrix.condition_monitor.value'] = value;\n            }\n        }\n        await this.actor.update(data);\n    }\n\n    async _onClearCellInput(event) {\n        const cmId = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        const data = {};\n        if (cmId === 'stun' || cmId === 'physical') {\n            const property = `data.track.${cmId}.value`;\n            data[property] = 0;\n        } else if (cmId === 'edge') {\n            const property = `data.attributes.edge.uses`;\n            data[property] = 0;\n        } else if (cmId === 'overflow') {\n            const property = 'data.track.physical.overflow.value';\n            data[property] = 0;\n        } else if (cmId === 'matrix') {\n            const matrixDevice = this.actor.getMatrixDevice();\n            if (matrixDevice) {\n                const updateData = {};\n                updateData['data.technology.condition_monitor.value'] = 0;\n                await matrixDevice.update(updateData);\n            } else {\n                data['data.matrix.condition_monitor.value'] = 0;\n            }\n        }\n        await this.actor.update(data);\n    }\n\n    async _onRollCellInput(event) {\n        event.preventDefault();\n        let track = $(event.currentTarget).closest('.horizontal-cell-input').data().id;\n        if (track === 'stun' || track === 'physical') {\n            await this.actor.rollNaturalRecovery(track, event);\n        } else if (track === 'edge') {\n            await this.actor.rollAttribute('edge');\n        }\n    }\n\n    async _onRollItem(event) {\n        event.preventDefault();\n        const iid = Helpers.listItemId(event);\n        const item = this.actor.getOwnedSR5Item(iid);\n        if (item) {\n            await item.postCard(event);\n        }\n    }\n\n    async _onRollKnowledgeSkill(event) {\n        event.preventDefault();\n        const id = Helpers.listItemId(event);\n        const [skill, category] = id.split('.');\n        return this.actor.rollKnowledgeSkill(category, skill, { event: event });\n    }\n\n    async _onRollLanguageSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        return this.actor.rollLanguageSkill(skill, { event: event });\n    }\n\n    async _onRollActiveSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        return this.actor.rollActiveSkill(skill, { event: event });\n    }\n\n    async _onRollAttribute(event) {\n        event.preventDefault();\n        const attr = event.currentTarget.closest('.attribute').dataset.attribute;\n        return this.actor.rollAttribute(attr, { event: event });\n    }\n\n    /**\n     * @private\n     */\n    _findActiveList() {\n        return $(this.element).find('.tab.active .scroll-area');\n    }\n\n    /**\n     * @private\n     */\n    async _render(...args) {\n        const focusList = $(this.element).find(':focus');\n        const focus: any = focusList.length ? focusList[0] : null;\n\n        this._saveScrollPositions();\n        await super._render(...args);\n        this._restoreScrollPositions();\n\n        if (focus && focus.name) {\n            const element = this.form[focus.name];\n            if (element) {\n                element.focus();\n                // set the selection range on the focus formed from before (keeps track of cursor in input)\n                element.setSelectionRange && element.setSelectionRange(focus.selectionStart, focus.selectionEnd);\n            }\n        }\n    }\n\n    /**\n     * @private\n     */\n    _restoreScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length && this._scroll != null) {\n            activeList.prop('scrollTop', this._scroll);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _saveScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length) {\n            this._scroll = activeList.prop('scrollTop');\n        }\n    }\n\n    async _closeOpenSkillApp() {\n        if (globalSkillAppId !== -1) {\n            if (ui.windows[globalSkillAppId]) {\n                await ui.windows[globalSkillAppId].close();\n            }\n            globalSkillAppId = -1;\n        }\n    }\n\n    /** Keep track of each SkillEditForm instance and close before opening another.\n     *\n     * @param skillEditFormImplementation Any extending class! of SkillEditForm\n     * @param actor\n     * @param options\n     * @param args Collect arguments of the different renderWithSkill implementations.\n     */\n    async _showSkillEditForm(skillEditFormImplementation, actor: SR5Actor, options: object, ...args) {\n        await this._closeOpenSkillApp();\n\n        const skillEditForm = new skillEditFormImplementation(actor, options, ...args);\n        globalSkillAppId = skillEditForm.appId;\n        await skillEditForm.render(true);\n    }\n\n    _onShowEditKnowledgeSkill(event) {\n        event.preventDefault();\n        const [skill, category] = Helpers.listItemId(event).split('.');\n        this._showSkillEditForm(\n            KnowledgeSkillEditForm,\n            this.actor,\n            {\n                event: event,\n            },\n            skill,\n            category,\n        );\n    }\n\n    _onShowEditLanguageSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        // new LanguageSkillEditForm(this.actor, skill, { event: event }).render(true);\n        this._showSkillEditForm(LanguageSkillEditForm, this.actor, { event: event }, skill);\n    }\n\n    _onShowEditSkill(event) {\n        event.preventDefault();\n        const skill = Helpers.listItemId(event);\n        // new SkillEditForm(this.actor, skill, { event: event }).render(true);\n        this._showSkillEditForm(SkillEditForm, this.actor, { event: event }, skill);\n    }\n\n    _onShowImportCharacter(event) {\n        event.preventDefault();\n        const options = {\n            name: 'chummer-import',\n            title: 'Chummer Import',\n        };\n        new ChummerImportForm(this.actor, options).render(true);\n    }\n}\n","import SR5ActorType = Shadowrun.SR5ActorType;\nimport { CharacterPrep } from './CharacterPrep';\nimport { SpiritPrep } from './SpiritPrep';\nimport { SpritePrep } from './SpritePrep';\nimport { VehiclePrep } from './VehiclePrep';\n\nexport class ActorPrepFactory {\n    static Create(data: SR5ActorType) {\n        if (data.type === 'character') {\n            return new CharacterPrep(data);\n        } else if (data.type === 'spirit') {\n            return new SpiritPrep(data);\n        } else if (data.type === 'sprite') {\n            return new SpritePrep(data);\n        } else if (data.type === 'vehicle') {\n            return new VehiclePrep(data);\n        }\n    }\n}\n","import SR5ActorType = Shadowrun.SR5ActorType;\nimport { SR5ItemDataWrapper } from '../../item/SR5ItemDataWrapper';\nimport SR5ActorData = Shadowrun.SR5ActorData;\n\nexport abstract class BaseActorPrep<ActorType extends SR5ActorType, DataType extends SR5ActorData> {\n    data: DataType;\n    items: SR5ItemDataWrapper[];\n\n    constructor(data: ActorType) {\n        this.data = data.data;\n        this.items = data.items.map((item) => new SR5ItemDataWrapper(item));\n    }\n\n    // override with the correct order and fucntions to prepare the actor\n    abstract prepare(): void;\n}\n","import {BaseActorPrep} from './BaseActorPrep';\nimport {InitiativePrep} from './functions/InitiativePrep';\nimport {ModifiersPrep} from './functions/ModifiersPrep';\nimport {MatrixPrep} from './functions/MatrixPrep';\nimport {ItemPrep} from './functions/ItemPrep';\nimport {SkillsPrep} from './functions/SkillsPrep';\nimport {LimitsPrep} from './functions/LimitsPrep';\nimport {ConditionMonitorsPrep} from './functions/ConditionMonitorsPrep';\nimport {MovementPrep} from './functions/MovementPrep';\nimport {WoundsPrep} from './functions/WoundsPrep';\nimport {AttributesPrep} from './functions/AttributesPrep';\nimport {NPCPrep} from './functions/NPCPrep';\nimport {SR5} from '../../config';\nimport SR5CharacterType = Shadowrun.SR5CharacterType;\nimport CharacterActorData = Shadowrun.CharacterActorData;\n\nexport class CharacterPrep extends BaseActorPrep<SR5CharacterType, CharacterActorData> {\n    prepare() {\n        ModifiersPrep.prepareModifiers(this.data);\n\n        ItemPrep.prepareArmor(this.data, this.items);\n        ItemPrep.prepareCyberware(this.data, this.items);\n\n        SkillsPrep.prepareSkills(this.data);\n        AttributesPrep.prepareAttributes(this.data);\n        LimitsPrep.prepareLimitBaseFromAttributes(this.data);\n        LimitsPrep.prepareLimits(this.data);\n\n        MatrixPrep.prepareMatrix(this.data, this.items);\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(this.data);\n\n        if (this.data.is_npc && this.data.npc.is_grunt) {\n            ConditionMonitorsPrep.prepareGrunt(this.data);\n        } else {\n            ConditionMonitorsPrep.preparePhysical(this.data);\n            ConditionMonitorsPrep.prepareStun(this.data);\n        }\n\n        MovementPrep.prepareMovement(this.data);\n        WoundsPrep.prepareWounds(this.data);\n\n        InitiativePrep.prepareMeatspaceInit(this.data);\n        InitiativePrep.prepareAstralInit(this.data);\n        InitiativePrep.prepareMatrixInit(this.data);\n        InitiativePrep.prepareCurrentInitiative(this.data);\n\n        // NPCPrep is reliant to be called after AttributesPrep.\n        NPCPrep.prepareNPCData(this.data);\n    }\n}\n","import { BaseActorPrep } from './BaseActorPrep';\nimport SpiritActorData = Shadowrun.SpiritActorData;\nimport SR5SpiritType = Shadowrun.SR5SpiritType;\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { ConditionMonitorsPrep } from './functions/ConditionMonitorsPrep';\nimport { MovementPrep } from './functions/MovementPrep';\nimport { WoundsPrep } from './functions/WoundsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport SpiritType = Shadowrun.SpiritType;\nimport { Helpers } from '../../helpers';\n\nexport class SpiritPrep extends BaseActorPrep<SR5SpiritType, SpiritActorData> {\n    prepare() {\n        ModifiersPrep.prepareModifiers(this.data);\n\n        SpiritPrep.prepareSpiritBaseData(this.data);\n\n        SkillsPrep.prepareSkills(this.data);\n        AttributesPrep.prepareAttributes(this.data);\n        LimitsPrep.prepareLimitBaseFromAttributes(this.data);\n        LimitsPrep.prepareLimits(this.data);\n\n        SpiritPrep.prepareSpiritArmor(this.data);\n\n        ConditionMonitorsPrep.prepareStun(this.data);\n        ConditionMonitorsPrep.preparePhysical(this.data);\n\n        MovementPrep.prepareMovement(this.data);\n        WoundsPrep.prepareWounds(this.data);\n\n        InitiativePrep.prepareCurrentInitiative(this.data);\n\n        this.data.special = 'magic';\n    }\n\n    static prepareSpiritBaseData(data: SpiritActorData) {\n        const overrides = this.getSpiritStatModifiers(data.spiritType);\n\n        if (overrides) {\n            const { attributes, skills, initiative, force, modifiers } = data;\n\n            // set the base of attributes to the provided value\n            for (const [attId, value] of Object.entries(overrides.attributes)) {\n                if (attributes[attId] !== undefined) {\n                    attributes[attId].base = value + force;\n                }\n            }\n\n            for (const [skillId, skill] of Object.entries(skills.active)) {\n                skill.base = overrides.skills.find((s) => s === skillId) ? force : 0;\n            }\n\n            // prepare initiative data\n            initiative.meatspace.base.base = force * 2 + overrides.init + Number(modifiers['astral_initiative']);\n            initiative.meatspace.dice.base = 2;\n            initiative.astral.base.base = force * 2 + overrides.astral_init + Number(modifiers['astral_initiative_dice']);\n            initiative.astral.dice.base = 3;\n        }\n    }\n\n    static prepareSpiritArmor(data: SpiritActorData) {\n        const { armor, attributes } = data;\n        armor.base = (attributes.essence.value ?? 0) * 2;\n        armor.value = Helpers.calcTotal(armor);\n    }\n\n    /**\n     * get the attribute and initiative modifiers and skills\n     */\n    static getSpiritStatModifiers(spiritType: SpiritType) {\n        const overrides = {\n            // value of 0 for attribute makes it equal to the Force\n            attributes: {\n                body: 0,\n                agility: 0,\n                reaction: 0,\n                strength: 0,\n                willpower: 0,\n                logic: 0,\n                intuition: 0,\n                charisma: 0,\n                magic: 0,\n                essence: 0,\n            },\n            // modifiers for after the Force x 2 calculation\n            init: 0,\n            astral_init: 0,\n            // skills are all set to Force\n            skills: [] as string[],\n        };\n        switch (spiritType) {\n            case 'air':\n                overrides.attributes.body = -2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'beasts':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'earth':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'fire':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'flight', 'perception', 'unarmed_combat');\n                break;\n            case 'guardian':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = 2;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'blades', 'clubs', 'counter_spelling', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'guidance':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = -1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.skills.push('arcana', 'assensing', 'astral_combat', 'counter_spelling', 'perception', 'unarmed_combat');\n                break;\n            case 'man':\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.attributes.logic = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spellcasting', 'unarmed_combat');\n                break;\n            case 'plant':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = -1;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'exotic_range', 'unarmed_combat');\n                break;\n            case 'task':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 2;\n                overrides.init = 2;\n                overrides.skills.push('artisan', 'assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'water':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n\n            case 'toxic_air':\n                overrides.attributes.body = -2;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = -3;\n                overrides.init = 4;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'toxic_beasts':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 1;\n                overrides.attributes.strength = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'gymnastics', 'perception', 'running', 'unarmed_combat');\n                break;\n            case 'toxic_earth':\n                overrides.attributes.body = 4;\n                overrides.attributes.agility = -2;\n                overrides.attributes.reaction = -1;\n                overrides.attributes.strength = 4;\n                overrides.attributes.logic = -1;\n                overrides.init = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n            case 'toxic_fire':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'flight', 'unarmed_combat');\n                break;\n            case 'toxic_man':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = -2;\n                overrides.attributes.intuition = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'spell_casting', 'unarmed_combat');\n                break;\n            case 'toxic_water':\n                overrides.attributes.body = 1;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'exotic_range', 'perception', 'unarmed_combat');\n                break;\n\n            case 'blood':\n                overrides.attributes.body = 2;\n                overrides.attributes.agility = 2;\n                overrides.attributes.strength = 2;\n                overrides.attributes.logic = -1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'running', 'unarmed_combat');\n                break;\n\n            case 'muse':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'nightmare':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'shade':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'succubus':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n            case 'wraith':\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 2;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.intuition = 1;\n                overrides.attributes.charisma = 2;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'con', 'gymnastics', 'intimidation', 'perception', 'unarmed_combat');\n                break;\n\n            case 'shedim':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'master_shedim':\n                overrides.attributes.reaction = 2;\n                overrides.attributes.strength = 1;\n                overrides.attributes.logic = 1;\n                overrides.attributes.intuition = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'perception', 'spellcasting', 'unarmed_combat');\n                break;\n\n            // insect\n            case 'caretaker':\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 1;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'leadership', 'perception', 'unarmed_combat');\n                break;\n            case 'nymph':\n                overrides.attributes.body = 1;\n                overrides.attributes.reaction = 3;\n                overrides.attributes.strength = 1;\n                overrides.init = 3;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'spellcasting', 'unarmed_combat');\n                break;\n            case 'scout':\n                overrides.attributes.agility = 2;\n                overrides.attributes.reaction = 2;\n                overrides.init = 2;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'gymnastics', 'sneaking', 'unarmed_combat');\n                break;\n            case 'soldier':\n                overrides.attributes.body = 3;\n                overrides.attributes.agility = 1;\n                overrides.attributes.reaction = 1;\n                overrides.attributes.strength = 3;\n                overrides.init = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'counterspelling', 'exotic_range', 'gymnastics', 'perception', 'unarmed_combat');\n                break;\n            case 'worker':\n                overrides.attributes.strength = 1;\n                overrides.skills.push('assensing', 'astral_combat', 'perception', 'unarmed_combat');\n                break;\n            case 'queen':\n                overrides.attributes.body = 5;\n                overrides.attributes.agility = 3;\n                overrides.attributes.reaction = 4;\n                overrides.attributes.strength = 5;\n                overrides.attributes.willpower = 1;\n                overrides.attributes.logic = 1;\n                overrides.attributes.intuition = 1;\n                overrides.init = 5;\n                overrides.skills.push(\n                    'assensing',\n                    'astral_combat',\n                    'con',\n                    'counterspelling',\n                    'gymnastics',\n                    'leadership',\n                    'negotiation',\n                    'perception',\n                    'spellcasting',\n                    'unarmed_combat',\n                );\n                break;\n        }\n        return overrides;\n    }\n}\n","import { BaseActorPrep } from './BaseActorPrep';\nimport SR5SpriteType = Shadowrun.SR5SpriteType;\nimport SpriteActorData = Shadowrun.SpriteActorData;\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport SpriteType = Shadowrun.SpriteType;\nimport { Helpers } from '../../helpers';\nimport { PartsList } from '../../parts/PartsList';\n\n/**\n * Prepare a Sprite Type of Actor\n */\nexport class SpritePrep extends BaseActorPrep<SR5SpriteType, SpriteActorData> {\n    prepare() {\n        ModifiersPrep.prepareModifiers(this.data);\n\n        SpritePrep.prepareSpriteData(this.data);\n        MatrixPrep.prepareAttributesForDevice(this.data);\n\n        SkillsPrep.prepareSkills(this.data);\n        AttributesPrep.prepareAttributes(this.data);\n        LimitsPrep.prepareLimits(this.data);\n\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(this.data);\n\n        InitiativePrep.prepareCurrentInitiative(this.data);\n\n        this.data.special = 'resonance';\n    }\n\n    /**\n     * Prepares basic Sprite specific data\n     * - matrix attribute values\n     * - device rating\n     * - matrix condition monitor\n     * - matrix initiative\n     * - skills\n     * @param data\n     */\n    static prepareSpriteData(data: SpriteActorData) {\n        const { level, skills, matrix, spriteType, initiative, attributes, modifiers } = data;\n\n        const matrixAtts = ['attack', 'sleaze', 'data_processing', 'firewall'];\n\n        const overrides = this.getSpriteStatModifiers(spriteType);\n\n        // apply the matrix overrides\n        matrixAtts.forEach((att) => {\n            if (matrix[att] !== undefined) {\n                matrix[att].base = level + overrides[att];\n                matrix[att].value = Helpers.calcTotal(matrix[att]);\n            }\n        });\n\n        // setup initiative from overrides\n        initiative.matrix.base.base = level * 2 + overrides.init;\n        PartsList.AddUniquePart(initiative.matrix.base.mod, 'SR5.Bonus', modifiers['matrix_initiative']);\n        Helpers.calcTotal(initiative.matrix.base);\n\n        initiative.matrix.dice.base = 4;\n        PartsList.AddUniquePart(initiative.matrix.dice.mod, 'SR5.Bonus', modifiers['matrix_initiative_dice']);\n        Helpers.calcTotal(initiative.matrix.dice);\n\n        // always in matrix perception\n        initiative.perception = 'matrix';\n\n        // calculate resonance value\n        attributes.resonance.base = level + overrides.resonance;\n        Helpers.calcTotal(attributes.resonance);\n\n        // apply skill levels\n        // clear skills that we don't have\n        for (const [skillId, skill] of Object.entries(skills.active)) {\n            skill.base = overrides.skills.find((s) => s === skillId) ? level : 0;\n        }\n\n        matrix.rating = level;\n        matrix.condition_monitor.max = 8 + Math.ceil(level / 2);\n    }\n\n    /**\n     * Get the stat modifiers for the specified type of sprite\n     * @param spriteType\n     */\n    static getSpriteStatModifiers(spriteType: SpriteType) {\n        const overrides = {\n            attack: 0,\n            sleaze: 0,\n            data_processing: 0,\n            firewall: 0,\n            resonance: 0,\n            init: 0,\n            // all sprites have computer\n            skills: ['computer'],\n        };\n        switch (spriteType) {\n            case 'courier':\n                overrides.sleaze = 3;\n                overrides.data_processing = 1;\n                overrides.firewall = 2;\n                overrides.init = 1;\n                overrides.skills.push('hacking');\n                break;\n            case 'crack':\n                overrides.sleaze = 3;\n                overrides.data_processing = 2;\n                overrides.firewall = 1;\n                overrides.init = 2;\n                overrides.skills.push('hacking', 'electronic_warfare');\n                break;\n            case 'data':\n                overrides.attack = -1;\n                overrides.data_processing = 4;\n                overrides.firewall = 1;\n                overrides.init = 4;\n                overrides.skills.push('electronic_warfare');\n                break;\n            case 'fault':\n                overrides.attack = 3;\n                overrides.data_processing = 1;\n                overrides.firewall = 2;\n                overrides.init = 1;\n                overrides.skills.push('cybercombat', 'hacking');\n                break;\n            case 'machine':\n                overrides.attack = 1;\n                overrides.data_processing = 3;\n                overrides.firewall = 2;\n                overrides.init = 3;\n                overrides.skills.push('electronic_warfare', 'hardware');\n                break;\n        }\n        return overrides;\n    }\n}\n","import { BaseActorPrep } from './BaseActorPrep';\nimport SR5VehicleType = Shadowrun.SR5VehicleType;\nimport VehicleActorData = Shadowrun.VehicleActorData;\nimport { SkillsPrep } from './functions/SkillsPrep';\nimport { ModifiersPrep } from './functions/ModifiersPrep';\nimport { InitiativePrep } from './functions/InitiativePrep';\nimport { AttributesPrep } from './functions/AttributesPrep';\nimport { LimitsPrep } from './functions/LimitsPrep';\nimport { MatrixPrep } from './functions/MatrixPrep';\nimport { Helpers } from '../../helpers';\nimport { PartsList } from '../../parts/PartsList';\n\nexport class VehiclePrep extends BaseActorPrep<SR5VehicleType, VehicleActorData> {\n    prepare() {\n        ModifiersPrep.prepareModifiers(this.data);\n\n        VehiclePrep.prepareVehicleStats(this.data);\n        VehiclePrep.prepareAttributes(this.data);\n        VehiclePrep.prepareLimits(this.data);\n\n        SkillsPrep.prepareSkills(this.data);\n        AttributesPrep.prepareAttributes(this.data);\n        LimitsPrep.prepareLimits(this.data);\n\n        VehiclePrep.prepareConditionMonitor(this.data);\n\n        MatrixPrep.prepareMatrixToLimitsAndAttributes(this.data);\n        MatrixPrep.prepareAttributesForDevice(this.data);\n\n        VehiclePrep.prepareMovement(this.data);\n\n        VehiclePrep.prepareMeatspaceInit(this.data);\n        InitiativePrep.prepareMatrixInit(this.data);\n        InitiativePrep.prepareCurrentInitiative(this.data);\n\n        VehiclePrep.prepareArmor(this.data);\n    }\n\n    static prepareVehicleStats(data: VehicleActorData) {\n        const { vehicle_stats, isOffRoad } = data;\n        // set the value for the stats\n        for (let [key, stat] of Object.entries(vehicle_stats)) {\n            // this turns the Object model into the list mod\n            if (typeof stat.mod === 'object') {\n                stat.mod = new PartsList(stat.mod).list;\n            }\n            const parts = new PartsList(stat.mod);\n\n            parts.addUniquePart('SR5.Temporary', stat.temp ?? 0);\n\n            stat.mod = parts.list;\n            Helpers.calcTotal(stat);\n            // add labels\n            stat.label = CONFIG.SR5.vehicle.stats[key];\n        }\n\n        // hide certain stats depending on if we're offroad\n        if (isOffRoad) {\n            vehicle_stats.off_road_speed.hidden = false;\n            vehicle_stats.off_road_handling.hidden = false;\n            vehicle_stats.speed.hidden = true;\n            vehicle_stats.handling.hidden = true;\n        } else {\n            vehicle_stats.off_road_speed.hidden = true;\n            vehicle_stats.off_road_handling.hidden = true;\n            vehicle_stats.speed.hidden = false;\n            vehicle_stats.handling.hidden = false;\n        }\n    }\n\n    static prepareAttributes(data: VehicleActorData) {\n        const { attributes, vehicle_stats } = data;\n\n        const attributeIds = ['agility', 'reaction', 'strength', 'willpower', 'logic', 'intuition', 'charisma'];\n\n        const totalPilot = Helpers.calcTotal(vehicle_stats.pilot);\n\n        attributeIds.forEach((attId) => {\n            if (attributes[attId] !== undefined) {\n                attributes[attId].base = totalPilot;\n            }\n        });\n    }\n\n    static prepareLimits(data: VehicleActorData) {\n        const { limits, vehicle_stats, isOffRoad } = data;\n\n        limits.mental.base = Helpers.calcTotal(vehicle_stats.sensor);\n\n        // add sensor, handling, and speed as limits\n        limits.sensor = { ...vehicle_stats.sensor, hidden: true };\n        limits.handling = { ...(isOffRoad ? vehicle_stats.off_road_handling : vehicle_stats.handling), hidden: true };\n        limits.speed = { ...(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed), hidden: true };\n    }\n\n    static prepareConditionMonitor(data: VehicleActorData) {\n        const { track, attributes, matrix, isDrone, modifiers } = data;\n\n        const halfBody = Math.ceil(Helpers.calcTotal(attributes.body) / 2);\n        // CRB pg 199 drone vs vehicle physical condition monitor rules\n        if (isDrone) {\n            track.physical.max = 6 + halfBody + (Number(modifiers['physical_track']) || 0);\n        } else {\n            track.physical.max = 12 + halfBody + (Number(modifiers['physical_track']) || 0);\n        }\n        track.physical.label = CONFIG.SR5.damageTypes.physical;\n\n        const rating = matrix.rating || 0;\n        matrix.condition_monitor.max = 8 + Math.ceil(rating / 2);\n    }\n\n    static prepareMovement(data: VehicleActorData) {\n        const { vehicle_stats, movement, isOffRoad } = data;\n\n        let speedTotal = Helpers.calcTotal(isOffRoad ? vehicle_stats.off_road_speed : vehicle_stats.speed);\n\n        // algorithm to determine speed, CRB pg 202 table\n        movement.walk.base = 5 * Math.pow(2, speedTotal - 1);\n        movement.walk.value = movement.walk.base;\n\n        movement.run.base = 10 * Math.pow(2, speedTotal - 1);\n        movement.run.value = movement.run.base;\n    }\n\n    static prepareMeatspaceInit(data: VehicleActorData) {\n        const { vehicle_stats, initiative } = data;\n\n        const pilot = Helpers.calcTotal(vehicle_stats.pilot);\n\n        initiative.meatspace.base.base = pilot * 2;\n        initiative.meatspace.dice.base = 4;\n        Helpers.calcTotal(initiative.meatspace.base);\n        Helpers.calcTotal(initiative.meatspace.dice);\n    }\n\n    static prepareArmor(data: VehicleActorData) {\n        const { armor } = data;\n        armor.mod = PartsList.AddUniquePart(armor.mod, 'SR5.Temporary', armor['temp']);\n        Helpers.calcTotal(armor);\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport { PartsList } from '../../../parts/PartsList';\nimport { Helpers } from '../../../helpers';\n\nexport class AttributesPrep {\n    /**\n     * Prepare actor data for attributes\n     */\n    static prepareAttributes(data: SR5ActorData) {\n        const { attributes } = data;\n\n        // always have special attributes set to hidden\n        attributes.magic.hidden = true;\n        attributes.resonance.hidden = true;\n        attributes.edge.hidden = true;\n        attributes.essence.hidden = true;\n\n        // set the value for the attributes\n        for (let [key, attribute] of Object.entries(attributes)) {\n            // don't manage the attribute if it is using the old method of edge tracking\n            // needed to be able to migrate things correctly\n            if (key === 'edge' && attribute['uses'] === undefined) return;\n            // always clear the mod list on prep\n            attribute.mod = [];\n            const parts = new PartsList(attribute.mod);\n\n            attribute.mod = parts.list;\n            Helpers.calcTotal(attribute);\n            // add labels\n            attribute.label = CONFIG.SR5.attributes[key];\n        }\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport PhysicalTrackActorData = Shadowrun.PhysicalTrackActorData;\nimport StunTrackActorData = Shadowrun.StunTrackActorData;\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\n\nexport class ConditionMonitorsPrep {\n    static prepareStun(data: SR5ActorData & StunTrackActorData) {\n        const { track, attributes, modifiers } = data;\n\n        track.stun.max = 8 + Math.ceil(attributes.willpower.value / 2) + Number(modifiers['stun_track']);\n        track.stun.label = CONFIG.SR5.damageTypes.stun;\n        track.stun.disabled = false;\n    }\n\n    static preparePhysical(data: SR5ActorData & PhysicalTrackActorData) {\n        const { track, attributes, modifiers } = data;\n\n        track.physical.max = 8 + Math.ceil(attributes.body.value / 2) + Number(modifiers['physical_track']);\n        track.physical.overflow.max = attributes.body.value;\n        track.physical.label = CONFIG.SR5.damageTypes.physical;\n        track.physical.disabled = false;\n    }\n\n    static prepareGrunt(data: SR5ActorData & TwoTrackActorData) {\n        // Grunts use only one monitor, use physical to get overflow functionality.\n        ConditionMonitorsPrep.prepareStun(data);\n\n        const { track, attributes, modifiers } = data;\n        // Overwrite stun damage to avoid invisible damage modifiers.\n        track.stun.value = 0;\n        track.stun.disabled = true;\n\n        // Grunts use either their WIL or BOD as their monitors attribute.\n        const attribute = attributes.willpower.value > attributes.body.value ?\n            attributes.willpower:\n            attributes.body;\n\n        // TODO: Should track modifiers switch according to used attribute?\n        track.physical.max = 8 + Math.ceil(attribute.value / 2) + Number(modifiers['physical_track']);\n        track.physical.overflow.max = attributes.body.value;\n        track.physical.label = \"SR5.ConditionMonitor\";\n        track.physical.disabled = false;\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport MagicActorData = Shadowrun.MagicActorData;\nimport MatrixActorData = Shadowrun.MatrixActorData;\nimport { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\n\nexport class InitiativePrep {\n    static prepareCurrentInitiative(data: SR5ActorData) {\n        const { initiative } = data;\n\n        if (initiative.perception === 'matrix') initiative.current = initiative.matrix;\n        else if (initiative.perception === 'astral') initiative.current = initiative.astral;\n        else {\n            initiative.current = initiative.meatspace;\n            initiative.perception = 'meatspace';\n        }\n\n        initiative.current.dice.value = Helpers.calcTotal(initiative.current.dice);\n        if (initiative.edge) initiative.current.dice.value = 5;\n        initiative.current.dice.value = Math.min(5, initiative.current.dice.value); // maximum of 5d6 for initiative\n        initiative.current.dice.text = `${initiative.current.dice.value}d6`;\n\n        initiative.current.base.value = Helpers.calcTotal(initiative.current.base);\n    }\n\n    static prepareMeatspaceInit(data: SR5ActorData) {\n        const { initiative, attributes, modifiers } = data;\n\n        initiative.meatspace.base.base = attributes.intuition.value + attributes.reaction.value;\n        initiative.meatspace.base.mod = PartsList.AddUniquePart(initiative.meatspace.base.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative']));\n\n        initiative.meatspace.dice.base = 1;\n        initiative.meatspace.dice.mod = PartsList.AddUniquePart(initiative.meatspace.dice.mod, \"SR5.Bonus\", Number(modifiers['meat_initiative_dice']));\n    }\n\n    static prepareAstralInit(data: SR5ActorData & MagicActorData) {\n        const { initiative, attributes, modifiers } = data;\n\n        initiative.astral.base.base = attributes.intuition.value * 2;\n        initiative.astral.base.mod = PartsList.AddUniquePart(initiative.astral.base.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative']));\n\n        initiative.astral.dice.base = 2;\n        initiative.astral.dice.mod = PartsList.AddUniquePart(initiative.astral.dice.mod, \"SR5.Bonus\", Number(modifiers['astral_initiative_dice']));\n    }\n\n    static prepareMatrixInit(data: SR5ActorData & MatrixActorData) {\n        const { initiative, attributes, modifiers, matrix } = data;\n        if (matrix) {\n\n            initiative.matrix.base.base = attributes.intuition.value + data.matrix.data_processing.value;\n            initiative.matrix.base.mod = PartsList.AddUniquePart(initiative.matrix.base.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative']));\n\n            initiative.matrix.dice.base = (matrix.hot_sim ? 4 : 3);\n            initiative.matrix.dice.mod = PartsList.AddUniquePart(initiative.matrix.dice.mod, \"SR5.Bonus\", Number(modifiers['matrix_initiative_dice']));\n        }\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport { SR5ItemDataWrapper } from '../../../item/SR5ItemDataWrapper';\nimport { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\nimport ArmorActorData = Shadowrun.ArmorActorData;\n\nexport class ItemPrep {\n    /**\n     * Prepare the armor data for the Item\n     * - will only allow one \"Base\" armor item to be used\n     * - all \"accessories\" will be added to the armor\n     */\n    static prepareArmor(data: SR5ActorData & ArmorActorData, items: SR5ItemDataWrapper[]) {\n        const { armor } = data;\n        armor.base = 0;\n        armor.value = 0;\n        armor.mod = [];\n        for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\n            armor[element] = 0;\n        }\n\n        const equippedArmor = items.filter((item) => item.hasArmor() && item.isEquipped());\n        const armorModParts = new PartsList<number>(armor.mod);\n        equippedArmor?.forEach((item) => {\n            if (item.hasArmorAccessory()) {\n                armorModParts.addUniquePart(item.getName(), item.getArmorValue());\n            } // if not a mod, set armor.value to the items value\n            else {\n                armor.base = item.getArmorValue();\n                armor.label = item.getName();\n                for (const element of Object.keys(CONFIG.SR5.elementTypes)) {\n                    armor[element] = item.getArmorElements()[element];\n                }\n            }\n        });\n\n        if (data.modifiers['armor']) armorModParts.addUniquePart(game.i18n.localize('SR5.Bonus'), data.modifiers['armor']);\n        // SET ARMOR\n        armor.value = Helpers.calcTotal(armor);\n    }\n    /**\n     * Prepare actor data for cyberware changes\n     * - this calculates the actors essence\n     */\n    static prepareCyberware(data: SR5ActorData, items: SR5ItemDataWrapper[]) {\n        const { attributes } = data;\n        const parts = new PartsList<number>();\n        // add Items as values to lower the total value of essence\n        items\n            .filter((item) => item.isCyberware() && item.isEquipped())\n            .forEach((item) => {\n                if (item.getEssenceLoss()) {\n                    parts.addUniquePart(item.getName(), -Number(item.getEssenceLoss()));\n                }\n            });\n        // add the bonus from the misc tab if applied\n        const essenceMod = data.modifiers['essence'];\n        if (essenceMod && !Number.isNaN(essenceMod)) {\n            parts.addUniquePart('SR5.Bonus', Number(essenceMod));\n        }\n\n        attributes.essence.base = 6;\n        attributes.essence.mod = parts.list;\n        attributes.essence.value = Helpers.calcTotal(attributes.essence);\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport { PartsList } from '../../../parts/PartsList';\nimport { Helpers } from '../../../helpers';\n\nexport class LimitsPrep {\n    static prepareLimits(data: SR5ActorData) {\n        const { limits, modifiers } = data;\n\n        // SETUP LIMITS\n        limits.physical.mod = PartsList.AddUniquePart(limits.physical.mod, 'SR5.Bonus', Number(modifiers['physical_limit']));\n        limits.mental.mod = PartsList.AddUniquePart(limits.mental.mod, 'SR5.Bonus', Number(modifiers['mental_limit']));\n        limits.social.mod = PartsList.AddUniquePart(limits.social.mod, \"SR5.Bonus\", Number(modifiers['social_limit']));\n\n        // limit labels\n        for (let [limitKey, limitValue] of Object.entries(limits)) {\n            Helpers.calcTotal(limitValue);\n            limitValue.label = CONFIG.SR5.limits[limitKey];\n        }\n    }\n\n    static prepareLimitBaseFromAttributes(data: SR5ActorData) {\n\n        const { limits, attributes } = data;\n\n        limits.physical.base = Math.ceil((2 * attributes.strength.value + attributes.body.value + attributes.reaction.value) / 3);\n        limits.mental.base = Math.ceil((2 * attributes.logic.value + attributes.intuition.value + attributes.willpower.value) / 3);\n        limits.social.base = Math.ceil((2 * attributes.charisma.value + attributes.willpower.value + attributes.essence.value) / 3);\n\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport MatrixActorData = Shadowrun.MatrixActorData;\nimport { Helpers } from '../../../helpers';\nimport { SR5ItemDataWrapper } from '../../../item/SR5ItemDataWrapper';\nimport { PartsList } from '../../../parts/PartsList';\n\nexport class MatrixPrep {\n    /**\n     * Prepare Matrix data on the actor\n     * - if an item is equipped, it will use that data\n     * - if it isn't and player is technomancer, it will use that data\n     */\n    static prepareMatrix(actorData: SR5ActorData & MatrixActorData, items: SR5ItemDataWrapper[]) {\n        const { matrix, attributes } = actorData;\n\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\n\n        // clear matrix data to defaults\n        MatrixList.forEach((key) => {\n            const parts = new PartsList(matrix[key].mod);\n            parts.addUniquePart('SR5.Temporary', matrix[key].temp);\n            // TODO LEGACY from when the sheet used 'mod.Temporary'\n            parts.removePart('Temporary');\n            matrix[key].mod = parts.list;\n            matrix[key].value = parts.total;\n        });\n        matrix.condition_monitor.max = 0;\n        matrix.rating = 0;\n        matrix.name = '';\n        matrix.device = '';\n        matrix.condition_monitor.label = 'SR5.ConditionMonitor';\n\n        // get the first equipped device, we don't care if they have more equipped -- it shouldn't happen\n        const device = items.find((item) => item.isEquipped() && item.isDevice());\n\n        if (device) {\n            const conditionMonitor = device.getConditionMonitor();\n            matrix.device = device.getId();\n            matrix.condition_monitor.max = conditionMonitor.max;\n            matrix.condition_monitor.value = conditionMonitor.value;\n            matrix.rating = device.getRating();\n            matrix.is_cyberdeck = device.isCyberdeck();\n            matrix.name = device.getName();\n            matrix.item = device.getData();\n            const deviceAtts = device.getASDF();\n            if (deviceAtts) {\n                // setup the actual matrix attributes for the actor\n                for (const [key, value] of Object.entries(deviceAtts)) {\n                    if (value && matrix[key]) {\n                        matrix[key].base = value.value;\n                        matrix[key].device_att = value.device_att;\n                    }\n                }\n            }\n        } // if we don't have a device, use living persona\n        else if (actorData.special === 'resonance') {\n            matrix.firewall.base = Helpers.calcTotal(attributes.willpower);\n            matrix.data_processing.base = Helpers.calcTotal(attributes.logic);\n            matrix.rating = Helpers.calcTotal(attributes.resonance);\n            matrix.attack.base = Helpers.calcTotal(attributes.charisma);\n            matrix.sleaze.base = Helpers.calcTotal(attributes.intuition);\n            matrix.name = game.i18n.localize('SR5.LivingPersona');\n        }\n\n        // set matrix condition monitor to max if greater than\n        if (matrix.condition_monitor.value > matrix.condition_monitor.max) {\n            matrix.condition_monitor.value = matrix.condition_monitor.max;\n        }\n    }\n\n    /**\n     * Add Matrix Attributes to Limits and Attributes\n     * @param data\n     */\n    static prepareMatrixToLimitsAndAttributes(data: SR5ActorData & MatrixActorData) {\n        const { matrix, attributes, limits } = data;\n        const MatrixList = ['firewall', 'sleaze', 'data_processing', 'attack'];\n\n        // add matrix attributes to both limits and attributes as hidden entries\n        MatrixList.forEach((key) => {\n            Helpers.calcTotal(matrix[key]);\n            if (matrix[key]) {\n                const label = CONFIG.SR5.matrixAttributes[key];\n                const { value, base, mod } = matrix[key];\n                const hidden = true;\n\n                limits[key] = {\n                    value,\n                    base,\n                    mod,\n                    label,\n                    hidden,\n                };\n                attributes[key] = {\n                    value,\n                    base,\n                    mod,\n                    label,\n                    hidden,\n                };\n            }\n        });\n    }\n\n    /**\n     * Prepare the mental attributes for a sheet that just has a device rating\n     * @param data\n     */\n    static prepareAttributesForDevice(data: SR5ActorData & MatrixActorData) {\n        const { matrix, attributes } = data;\n        const rating = matrix.rating || 0;\n        const mentalAttributes = ['intuition', 'logic', 'charisma', 'willpower'];\n\n        mentalAttributes.forEach((attLabel) => {\n            if (attributes[attLabel] !== undefined) {\n                attributes[attLabel].base = rating;\n                Helpers.calcTotal(attributes[attLabel]);\n            }\n        });\n        const basic = ['firewall', 'data_processing'];\n        basic.forEach((attId) => {\n            matrix[attId].base = rating;\n        });\n        [...basic, 'sleaze', 'attack'].forEach((attId) => {\n            Helpers.calcTotal(matrix[attId]);\n        });\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\n\nexport class ModifiersPrep {\n    /**\n     * Prepare the modifiers that are displayed in the Misc. tab\n     */\n    static prepareModifiers(data: SR5ActorData) {\n        if (!data.modifiers) data.modifiers = {};\n        const modifiers = {};\n        let miscTabModifiers = [\n            'soak',\n            'drain',\n            'armor',\n            'physical_limit',\n            'social_limit',\n            'mental_limit',\n            'stun_track',\n            'physical_track',\n            'meat_initiative',\n            'meat_initiative_dice',\n            'astral_initiative',\n            'astral_initiative_dice',\n            'matrix_initiative',\n            'matrix_initiative_dice',\n            'composure',\n            'lift_carry',\n            'judge_intentions',\n            'memory',\n            'walk',\n            'run',\n            'defense',\n            'wound_tolerance',\n            'essence',\n            'fade',\n        ];\n        miscTabModifiers.sort();\n        // force global to the top\n        miscTabModifiers.unshift('global');\n\n        for (let item of miscTabModifiers) {\n            modifiers[item] = Number(data.modifiers[item]) || 0;\n        }\n\n        data.modifiers = modifiers;\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport MovementActorData = Shadowrun.MovementActorData;\n\nexport class MovementPrep {\n    static prepareMovement(data: SR5ActorData & MovementActorData) {\n        const { attributes, modifiers } = data;\n        const movement = data.movement;\n        // default movement: WALK = AGI * 2, RUN = AGI * 4\n        movement.walk.value = attributes.agility.value * (2 + Number(modifiers['walk']));\n        movement.run.value = attributes.agility.value * (4 + Number(modifiers['run']));\n    }\n}\n","import CharacterActorData = Shadowrun.CharacterActorData;\nimport {DataTemplates} from \"../../../dataTemplates\";\nimport {Helpers} from \"../../../helpers\";\nimport {METATYPEMODIFIER} from \"../../../constants\";\nimport {PartsList} from \"../../../parts/PartsList\";\n\nexport class NPCPrep {\n    static prepareNPCData(data: CharacterActorData) {\n        // Apply to NPC and none NPC to remove lingering modifiers after actor has been removed it's npc status.\n        NPCPrep.applyMetatypeModifiers(data);\n    }\n\n    /** Replace current metatype modifiers with, even if nothing has changed.\n     *\n     */\n    static applyMetatypeModifiers(data: CharacterActorData) {\n        const {metatype} = data;\n        let modifiers = DataTemplates.grunt.metatype_modifiers[metatype];\n        modifiers = modifiers ? modifiers : {};\n\n        const {attributes} = data;\n\n        for (const [attId, attribute] of Object.entries(attributes)) {\n            // old-style object mod transformation is happening in AttributePrep and is needed here. Order is important.\n            if (!Array.isArray(attribute.mod)) {\n                    console.error('Actor data contains wrong data type for attribute.mod', attribute, !Array.isArray(attribute.mod));\n            } else {\n                const modifyBy = modifiers?.attributes?.[attId];\n                const parts = new PartsList(attribute.mod);\n                parts.removePart(METATYPEMODIFIER);\n\n                if (data.is_npc && modifyBy) {\n                    parts.addPart(METATYPEMODIFIER, modifyBy);\n                }\n\n                attribute.mod = parts.list;\n\n                Helpers.calcTotal(attribute);\n            }\n        }\n    }\n\n    static AddNPCMetatypeAttributeModifier(value) {\n        return {\n            name: METATYPEMODIFIER,\n            value: value as number\n        }\n    }\n}","import SR5ActorData = Shadowrun.SR5ActorData;\nimport { Helpers } from '../../../helpers';\nimport { PartsList } from '../../../parts/PartsList';\n\nexport class SkillsPrep {\n    /**\n     * Prepare actor data for skills\n     */\n    static prepareSkills(data: SR5ActorData) {\n        const { language, active, knowledge } = data.skills;\n        if (language) {\n            if (!language.value) language.value = {};\n            language.attribute = 'intuition';\n        }\n\n        // function that will set the total of a skill correctly\n        const prepareSkill = (skill) => {\n            skill.mod = [];\n            if (!skill.base) skill.base = 0;\n            if (skill.bonus?.length) {\n                for (let bonus of skill.bonus) {\n                    skill.mod = PartsList.AddUniquePart(skill.mod, bonus.key, Number(bonus.value));\n                }\n            }\n            skill.value = Helpers.calcTotal(skill);\n        };\n\n        // setup active skills\n        for (const skill of Object.values(active)) {\n            if (!skill.hidden) {\n                prepareSkill(skill);\n            }\n        }\n\n        const entries = Object.entries(data.skills.language.value);\n        // remove entries which are deleted TODO figure out how to delete these from the data\n        entries.forEach(([key, val]: [string, { _delete?: boolean }]) => val._delete && delete data.skills.language.value[key]);\n\n        for (let skill of Object.values(language.value)) {\n            prepareSkill(skill);\n            skill.attribute = 'intuition';\n        }\n\n        // setup knowledge skills\n        for (let [, group] of Object.entries(knowledge)) {\n            const entries = Object.entries(group.value);\n            // remove entries which are deleted TODO figure out how to delete these from the data\n            group.value = entries\n                .filter(([, val]) => !val._delete)\n                .reduce((acc, [id, skill]) => {\n                    prepareSkill(skill);\n\n                    // set the attribute on the skill\n                    skill.attribute = group.attribute;\n                    acc[id] = skill;\n                    return acc;\n                }, {});\n        }\n\n        // skill labels\n        for (let [skillKey, skillValue] of Object.entries(active)) {\n            skillValue.label = CONFIG.SR5.activeSkills[skillKey];\n        }\n    }\n}\n","import SR5ActorData = Shadowrun.SR5ActorData;\nimport TwoTrackActorData = Shadowrun.TwoTrackActorData;\nimport WoundsActorData = Shadowrun.WoundsActorData;\n\nexport class WoundsPrep {\n    static prepareWounds(data: SR5ActorData & TwoTrackActorData & WoundsActorData) {\n        const { modifiers, track } = data;\n        const count = 3 + Number(modifiers['wound_tolerance']);\n        const stunWounds = track.stun.disabled ? 0 : Math.floor(track.stun.value / count);\n        const physicalWounds = track.physical.disabled ? 0 : Math.floor(track.physical.value / count);\n\n        track.stun.wounds = stunWounds;\n        track.physical.wounds = physicalWounds;\n\n        data.wounds = {\n            value: stunWounds + physicalWounds,\n        };\n    }\n}\n","export class ChummerImportForm extends FormApplication {\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'chummer-import';\n        options.classes = ['shadowrun5e'];\n        options.title = 'Chummer/Hero Lab Import';\n        options.template = 'systems/shadowrun5e/dist/templates/apps/import.html';\n        options.width = 600;\n        options.height = 'auto';\n        return options;\n    }\n\n    getData() {\n        return {};\n    }\n\n    activateListeners(html) {\n        html.find('.submit-chummer-import').click(async (event) => {\n            event.preventDefault();\n            const chummerfile = JSON.parse($('.chummer-text').val());\n            const weapons = $('.weapons').is(':checked');\n            const armor = $('.armor').is(':checked');\n            const cyberware = $('.cyberware').is(':checked');\n            const equipment = $('.gear').is(':checked');\n            const qualities = $('.qualities').is(':checked');\n            const powers = $('.powers').is(':checked');\n            const spells = $('.spells').is(':checked');\n\n            console.log(chummerfile);\n\n            const parseAtt = (att) => {\n                if (att.toLowerCase() === 'bod') {\n                    return 'body';\n                }\n                if (att.toLowerCase() === 'agi') {\n                    return 'agility';\n                }\n                if (att.toLowerCase() === 'rea') {\n                    return 'reaction';\n                }\n                if (att.toLowerCase() === 'str') {\n                    return 'strength';\n                }\n                if (att.toLowerCase() === 'cha') {\n                    return 'charisma';\n                }\n                if (att.toLowerCase() === 'int') {\n                    return 'intuition';\n                }\n                if (att.toLowerCase() === 'log') {\n                    return 'logic';\n                }\n                if (att.toLowerCase() === 'wil') {\n                    return 'willpower';\n                }\n                if (att.toLowerCase() === 'edg') {\n                    return 'edge';\n                }\n                if (att.toLowerCase() === 'mag') {\n                    return 'magic';\n                }\n                if (att.toLowerCase() === 'res') {\n                    return 'resonance';\n                }\n            };\n\n            const parseDamage = (val) => {\n                const damage = {\n                    damage: 0,\n                    type: 'physical',\n                    radius: 0,\n                    dropoff: 0,\n                };\n                const split = val.split(',');\n                if (split.length > 0) {\n                    const l = split[0].match(/(\\d+)(\\w+)/);\n                    if (l && l[1]) damage.damage = parseInt(l[1]);\n                    if (l && l[2]) damage.type = l[2] === 'P' ? 'physical' : 'stun';\n                }\n                for (let i = 1; i < split.length; i++) {\n                    const l = split[i].match(/(-?\\d+)(.*)/);\n                    if (l && l[2]) {\n                        if (l[2].toLowerCase().includes('/m')) damage.dropoff = parseInt(l[1]);\n                        else damage.radius = parseInt(l[1]);\n                    }\n                }\n                return damage;\n            };\n\n            const getValues = (val) => {\n                const regex = /(-?[0-9]+)(?:([0-9]+))*/g;\n                const l = val.match(regex);\n                return l || ['0'];\n            };\n\n            const getArray = (value) => {\n                return Array.isArray(value) ? value : [value];\n            };\n            const updateData = duplicate(this.object.data);\n            const update = updateData.data;\n            const items = [];\n            let error = '';\n            // character info stuff, also techno/magic and essence\n            if (chummerfile.characters && chummerfile.characters.character) {\n                const c = chummerfile.characters.character;\n                try {\n                    if (c.playername) {\n                        update.player_name = c.playername;\n                    }\n                    if (c.alias) {\n                        update.name = c.alias;\n                        updateData.name = c.alias;\n                    }\n                    if (c.metatype) {\n                        update.metatype = c.metatype;\n                    }\n                    if (c.sex) {\n                        update.sex = c.sex;\n                    }\n                    if (c.age) {\n                        update.age = c.age;\n                    }\n                    if (c.height) {\n                        update.height = c.height;\n                    }\n                    if (c.weight) {\n                        update.weight = c.weight;\n                    }\n                    if (c.calculatedstreetcred) {\n                        update.street_cred = c.calculatedstreetcred;\n                    }\n                    if (c.calculatednotoriety) {\n                        update.notoriety = c.calculatednotoriety;\n                    }\n                    if (c.calculatedpublicawareness) {\n                        update.public_awareness = c.calculatedpublicawareness;\n                    }\n                    if (c.karma) {\n                        update.karma.value = c.karma;\n                    }\n                    if (c.totalkarma) {\n                        update.karma.max = c.totalkarma;\n                    }\n                    if (c.technomancer && c.technomancer.toLowerCase() === 'true') {\n                        update.special = 'resonance';\n                    }\n                    if (\n                        (c.magician && c.magician.toLowerCase() === 'true') ||\n                        (c.adept && c.adept.toLowerCase() === 'true')\n                    ) {\n                        update.special = 'magic';\n                        let attr = [];\n                        if (\n                            c.tradition &&\n                            c.tradition.drainattribute &&\n                            c.tradition.drainattribute.attr\n                        ) {\n                            attr = c.tradition.drainattribute.attr;\n                        } else if (c.tradition && c.tradition.drainattributes) {\n                            attr = c.tradition.drainattributes\n                                .split('+')\n                                .map((item) => item.trim());\n                        }\n                        attr.forEach((att) => {\n                            att = parseAtt(att);\n                            if (att !== 'willpower') update.magic.attribute = att;\n                        });\n                    }\n                    if (c.totaless) {\n                        update.attributes.essence.value = c.totaless;\n                    }\n                    if (c.nuyen) {\n                        update.nuyen = parseInt(c.nuyen.replace(',', ''));\n                    }\n                } catch (e) {\n                    error += `Error with character info: ${e}. `;\n                }\n                // update attributes\n                const atts = chummerfile.characters.character.attributes[1].attribute;\n                atts.forEach((att) => {\n                    try {\n                        const newAtt = parseAtt(att.name);\n                        if (newAtt) update.attributes[newAtt].base = parseInt(att.total);\n                    } catch (e) {\n                        error += `Error with attributes: ${e}. `;\n                    }\n                });\n                // initiative stuff\n                try {\n                    if (c.initbonus) {\n                        // not sure if this one is correct\n                        update.mods.initiative = c.initbonus;\n                    }\n                    if (c.initdice) {\n                        update.mods.initiative_dice = c.initdice - 1;\n                    }\n                } catch (e) {\n                    error += `Error with initiative: ${e}. `;\n                }\n                // skills...\n                const skills = c.skills.skill;\n                for (let i = 0; i < skills.length; i++) {\n                    try {\n                        const s = skills[i];\n                        if (s.rating > 0 && s.islanguage) {\n                            let group = 'active';\n                            let skill = null;\n                            const id = randomID(16);\n                            if (s.islanguage && s.islanguage.toLowerCase() === 'true') {\n                                skill = {};\n                                update.skills.language.value[id] = skill;\n                                group = 'language';\n                            } else if (s.knowledge && s.knowledge.toLowerCase() === 'true') {\n                                const category = s.skillcategory_english;\n                                console.log(category);\n                                skill = {};\n                                let skillCategory;\n                                if (category) {\n                                    console.log('found category', category);\n                                    const cat = category.toLowerCase();\n                                    if (cat === 'street')\n                                        skillCategory = update.skills.knowledge.street.value;\n                                    if (cat === 'academic')\n                                        skillCategory = update.skills.knowledge.academic.value;\n                                    if (cat === 'professional')\n                                        skillCategory = update.skills.knowledge.professional.value;\n                                    if (cat === 'interest')\n                                        skillCategory = update.skills.knowledge.interests.value;\n                                    if (skillCategory) skillCategory[id] = skill;\n                                } else {\n                                    if (s.attribute.toLowerCase() === 'int') {\n                                        update.skills.knowledge.street.value[id] = skill;\n                                    }\n                                    if (s.attribute.toLowerCase() === 'log') {\n                                        update.skills.knowledge.professional.value[id] = skill;\n                                    }\n                                }\n                                group = 'knowledge';\n                            } else {\n                                let name = s.name\n                                    .toLowerCase()\n                                    .trim()\n                                    .replace(/\\s/g, '_')\n                                    .replace(/-/g, '_');\n                                if (name.includes('exotic') && name.includes('_weapon'))\n                                    name = name.replace('_weapon', '');\n                                skill = update.skills.active[name];\n                            }\n                            if (!skill) console.error(`Couldn't parse skill ${s.name}`);\n                            if (skill) {\n                                if (group !== 'active') skill.name = s.name;\n                                skill.base = parseInt(s.rating);\n                                if (s.skillspecializations) {\n                                    skill.specs = getArray(\n                                        s.skillspecializations.skillspecialization.name\n                                    );\n                                }\n                            }\n                        }\n                    } catch (e) {\n                        console.error(e);\n                    }\n                }\n                // qualities\n                if (qualities && c.qualities && c.qualities.quality) {\n                    const qualities = getArray(c.qualities.quality);\n                    qualities.forEach((q) => {\n                        try {\n                            const data = {};\n                            data.type = q.qualitytype.toLowerCase();\n                            if (q.description)\n                                data.description = {\n                                    value: TextEditor.enrichHTML(q.description),\n                                };\n\n                            const itemData = {\n                                name: q.name,\n                                type: 'quality',\n                                data,\n                            };\n                            items.push(itemData);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                    });\n                }\n                // weapons\n                if (weapons && c.weapons != null && c.weapons.weapon != null) {\n                    const weapons = getArray(c.weapons.weapon);\n                    weapons.forEach((w) => {\n                        try {\n                            const data = {};\n                            const action = {};\n                            const damage = {};\n                            action.damage = damage;\n                            data.action = action;\n\n                            if (w.description) {\n                                data.description = {\n                                    value: TextEditor.enrichHTML(w.description),\n                                };\n                            }\n\n                            damage.ap = {\n                                base: parseInt(getValues(w.ap)[0]),\n                            };\n                            action.type = 'varies';\n                            if (w.skill) action.skill = w.skill.toLowerCase().replace(/\\s/g, '_');\n                            else if (w.category && w.category.toLowerCase().includes('exotic'))\n                                action.skill = w.category\n                                    .toLowerCase()\n                                    .replace(' weapons', '')\n                                    .replace(/\\s/g, '_');\n                            if (action.skill.includes('exotic'))\n                                action.skill = action.skill.replace('_weapon', '');\n                            action.attribute = 'agility';\n                            action.limit = {\n                                base: parseInt(getValues(w.accuracy)[0]),\n                            };\n                            action.opposed = {\n                                type: 'defense',\n                            };\n\n                            if (w.type.toLowerCase() === 'melee') {\n                                action.type = 'complex';\n                                data.category = 'melee';\n                                const melee = {};\n                                data.melee = melee;\n                                melee.reach = parseInt(w.reach);\n                            } else if (w.type.toLowerCase() === 'ranged') {\n                                data.category = 'range';\n                                if (w.skill.toLowerCase().includes('throw')) {\n                                    data.category = 'thrown'; // TODO clean this up\n                                }\n                                const range = {};\n                                data.range = range;\n                                range.rc = {\n                                    base: parseInt(getValues(w.rc)[0]),\n                                };\n                                if (w.mode) {\n                                    // HeroLab export doesn't have mode\n                                    const lower = w.mode.toLowerCase();\n                                    range.modes = {\n                                        single_shot: lower.includes('ss'),\n                                        semi_auto: lower.includes('sa'),\n                                        burst_fire: lower.includes('bf'),\n                                        full_auto: lower.includes('fa'),\n                                    };\n                                }\n                                if (w.clips != null && w.clips.clip != null) {\n                                    // HeroLab export doesn't have clips\n                                    const clips = Array.isArray(w.clips.clip)\n                                        ? w.clips.clip\n                                        : [w.clips.clip];\n                                    clips.forEach((clip) => {\n                                        console.log(clip);\n                                    });\n                                }\n                                if (\n                                    w.ranges &&\n                                    w.ranges.short &&\n                                    w.ranges.medium &&\n                                    w.ranges.long &&\n                                    w.ranges.extreme\n                                ) {\n                                    console.log(w.ranges);\n                                    range.ranges = {\n                                        short: parseInt(w.ranges.short.split('-')[1]),\n                                        medium: parseInt(w.ranges.medium.split('-')[1]),\n                                        long: parseInt(w.ranges.long.split('-')[1]),\n                                        extreme: parseInt(w.ranges.extreme.split('-')[1]),\n                                    };\n                                }\n                                // TODO figure out how to add mods to weapons\n                                // if (w.accessories && w.accessories.accessory) {\n                                //     range.mods = [];\n                                //     const accessories = getArray(w.accessories.accessory);\n                                //     accessories.forEach((a) => {\n                                //         if (a) {\n                                //             range.mods.push({\n                                //                 name: a.name,\n                                //             });\n                                //         }\n                                //     });\n                                // }\n                            } else if (w.type.toLowerCase() === 'thrown') {\n                                data.category = 'thrown';\n                            }\n                            {\n                                // TODO handle raw damage if present\n                                const d = parseDamage(w.damage_english);\n                                damage.base = d.damage;\n                                damage.type = {};\n                                damage.type.base = d.type;\n                                if (d.dropoff || d.radius) {\n                                    const thrown = {};\n                                    data.thrown = thrown;\n                                    thrown.blast = {\n                                        radius: d.radius,\n                                        dropoff: d.dropoff,\n                                    };\n                                }\n                            }\n\n                            const itemData = {\n                                name: w.name,\n                                type: 'weapon',\n                                data,\n                            };\n                            items.push(itemData);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                    });\n                }\n                // armors\n                if (armor && c.armors && c.armors.armor) {\n                    const armors = getArray(c.armors.armor);\n                    armors.forEach((a) => {\n                        try {\n                            const data = {};\n                            const armor = {};\n                            data.armor = armor;\n\n                            let desc = '';\n                            armor.mod = a.armor.includes('+');\n                            armor.value = parseInt(a.armor.replace('+', ''));\n                            if (a.description) desc = a.description;\n\n                            console.log(a);\n                            if (a.armormods && a.armormods.armormod) {\n                                armor.fire = 0;\n                                armor.electricity = 0;\n                                armor.cold = 0;\n                                armor.acid = 0;\n                                armor.radiation = 0;\n\n                                const modDesc = [];\n                                const mods = getArray(a.armormods.armormod);\n                                mods.forEach((mod) => {\n                                    if (mod.name.toLowerCase().includes('fire resistance')) {\n                                        armor.fire += parseInt(mod.rating);\n                                    } else if (mod.name.toLowerCase().includes('nonconductivity')) {\n                                        armor.electricity += parseInt(mod.rating);\n                                    } else if (mod.name.toLowerCase().includes('insulation')) {\n                                        armor.cold += parseInt(mod.rating);\n                                    } else if (\n                                        mod.name.toLowerCase().includes('radiation shielding')\n                                    ) {\n                                        armor.radiation += parseInt(mod.rating);\n                                    }\n                                    if (mod.rating !== '') {\n                                        modDesc.push(`${mod.name} R${mod.rating}`);\n                                    } else {\n                                        modDesc.push(mod.name);\n                                    }\n                                });\n                                if (modDesc.length > 0) {\n                                    // add desc to beginning\n                                    desc = `${modDesc.join(',')}\\n\\n${desc}`;\n                                }\n                            }\n                            if (a.equipped.toLowerCase() === 'true') {\n                                data.technology = {\n                                    equipped: true,\n                                };\n                            }\n                            data.description = {\n                                value: TextEditor.enrichHTML(desc),\n                            };\n\n                            const itemData = {\n                                name: a.name,\n                                type: 'armor',\n                                data,\n                            };\n                            items.push(itemData);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                    });\n                }\n                // cyberware\n                if (cyberware && c.cyberwares && c.cyberwares.cyberware) {\n                    const cyberwares = getArray(c.cyberwares.cyberware);\n                    cyberwares.forEach((cy) => {\n                        try {\n                            const data = {};\n                            data.description = {\n                                rating: cy.rating,\n                                value: cy.description,\n                            };\n                            data.technology = {\n                                equipped: true,\n                            };\n                            data.essence = cy.ess;\n                            data.grade = cy.grade;\n                            const itemData = {\n                                name: cy.name,\n                                type: 'cyberware',\n                                data,\n                            };\n                            items.push(itemData);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                    });\n                }\n                // powers\n                if (powers && c.powers && c.powers.power) {\n                    const powers = getArray(c.powers.power);\n                    powers.forEach((p) => {\n                        const data = {};\n                        if (p.description)\n                            data.description = {\n                                value: TextEditor.enrichHTML(p.description),\n                            };\n                        data.level = parseInt(p.rating);\n                        p.pp = parseInt(p.totalpoints);\n\n                        const itemData = {\n                            name: p.name,\n                            type: 'adept_power',\n                            data,\n                        };\n                        items.push(itemData);\n                    });\n                }\n                // gear\n                if (equipment && c.gears && c.gears.gear) {\n                    const gears = getArray(c.gears.gear);\n                    gears.forEach((g) => {\n                        try {\n                            const data = {};\n                            let { name } = g;\n                            if (g.extra) name += ` (${g.extra})`;\n                            data.technology = {\n                                rating: g.rating,\n                                quantity: g.qty,\n                            };\n                            data.description = {\n                                value: g.description,\n                            };\n                            const itemData = {\n                                name,\n                                type: 'equipment',\n                                data,\n                            };\n                            items.push(itemData);\n                        } catch (e) {\n                            console.error(e);\n                        }\n                    });\n                }\n                // spells\n                if (spells && c.spells && c.spells.spell) {\n                    const spells = getArray(c.spells.spell);\n                    spells.forEach((s) => {\n                        try {\n                            if (s.alchemy.toLowerCase() !== 'true') {\n                                const action = {};\n                                const data = {};\n                                data.action = action;\n                                data.category = s.category.toLowerCase().replace(/\\s/g, '_');\n                                data.name = s.name;\n                                data.type = s.type === 'M' ? 'mana' : 'physical';\n                                data.range =\n                                    s.range === 'T'\n                                        ? 'touch'\n                                        : s.range\n                                              .toLowerCase()\n                                              .replace(/\\s/g, '_')\n                                              .replace('(', '')\n                                              .replace(')', '');\n                                data.drain = parseInt(s.dv.replace('F', ''));\n                                let description = '';\n                                if (s.descriptors) description = s.descriptors;\n                                if (s.description) description += `\\n${s.description}`;\n                                data.description = {};\n                                data.description.value = TextEditor.enrichHTML(description);\n\n                                if (s.duration.toLowerCase() === 's') data.duration = 'sustained';\n                                else if (s.duration.toLowerCase() === 'i')\n                                    data.duration = 'instant';\n                                else if (s.duration.toLowerCase() === 'p')\n                                    data.duration = 'permanent';\n\n                                action.type = 'varies';\n                                action.skill = 'spellcasting';\n                                action.attribute = 'magic';\n\n                                if (s.descriptors) {\n                                    const desc = s.descriptors.toLowerCase();\n                                    if (s.category.toLowerCase() === 'combat') {\n                                        data.combat = {};\n                                        if (desc.includes('direct')) {\n                                            data.combat.type = 'indirect';\n                                            action.opposed = {\n                                                type: 'defense',\n                                            };\n                                        } else {\n                                            data.combat.type = 'direct';\n                                            if (data.type === 'mana') {\n                                                action.opposed = {\n                                                    type: 'custom',\n                                                    attribute: 'willpower',\n                                                };\n                                            } else if (data.type === 'physical') {\n                                                action.opposed = {\n                                                    type: 'custom',\n                                                    attribute: 'body',\n                                                };\n                                            }\n                                        }\n                                    }\n                                    if (s.category.toLowerCase() === 'detection') {\n                                        data.detection = {};\n                                        const split = desc.split(',');\n                                        split.forEach((token) => {\n                                            token = token || '';\n                                            token = token.replace(' detection spell', '');\n                                            if (!token) return;\n                                            if (token.includes('area')) return;\n\n                                            if (token.includes('passive'))\n                                                data.detection.passive = true;\n                                            else if (token.includes('active'))\n                                                data.detection.passive = false;\n                                            else if (token)\n                                                data.detection.type = token.toLowerCase();\n                                        });\n                                        if (!data.detection.passive) {\n                                            action.opposed = {\n                                                type: 'custom',\n                                                attribute: 'willpower',\n                                                attribute2: 'logic',\n                                            };\n                                        }\n                                    }\n                                    if (s.category.toLowerCase() === 'illusion') {\n                                        data.illusion = {};\n                                        const split = desc.split(',');\n                                        split.forEach((token) => {\n                                            token = token || '';\n                                            token = token.replace(' illusion spell', '');\n                                            if (!token) return;\n                                            if (token.includes('area')) return;\n\n                                            if (token.includes('sense'))\n                                                data.illusion.sense = token.toLowerCase();\n                                            else if (token)\n                                                data.illusion.type = token.toLowerCase();\n                                        });\n                                        if (data.type === 'mana') {\n                                            action.opposed = {\n                                                type: 'custom',\n                                                attribute: 'willpower',\n                                                attribute2: 'logic',\n                                            };\n                                        } else {\n                                            action.opposed = {\n                                                type: 'custom',\n                                                attribute: 'intuition',\n                                                attribute2: 'logic',\n                                            };\n                                        }\n                                    }\n                                    if (s.category.toLowerCase() === 'manipulation') {\n                                        data.manipulation = {};\n                                        if (desc.includes('environmental'))\n                                            data.manipulation.environmental = true;\n                                        if (desc.includes('physical'))\n                                            data.manipulation.physical = true;\n                                        if (desc.includes('mental'))\n                                            data.manipulation.mental = true;\n                                        // TODO figure out how to parse damaging\n\n                                        if (data.manipulation.mental) {\n                                            action.opposed = {\n                                                type: 'custom',\n                                                attribute: 'willpower',\n                                                attribute2: 'logic',\n                                            };\n                                        }\n                                        if (data.manipulation.physical) {\n                                            action.opposed = {\n                                                type: 'custom',\n                                                attribute: 'body',\n                                                attribute2: 'strength',\n                                            };\n                                        }\n                                    }\n                                }\n                                const itemData = {\n                                    name: s.name,\n                                    type: 'spell',\n                                    data,\n                                };\n                                items.push(itemData);\n                            }\n                        } catch (e) {\n                            console.error(e);\n                        }\n                    });\n                }\n            }\n            await this.object.update(updateData);\n            await this.object.createEmbeddedEntity('OwnedItem', items);\n            ui.notifications.info(\n                'Complete! Check everything. Notably: Ranged weapon mods and ammo; Strength based weapon damage; Specializations on all spells, powers, and weapons;'\n            );\n            this.close();\n        });\n    }\n}\n","import { SR5Item } from '../../item/SR5Item';\nimport { Helpers } from '../../helpers';\n\nexport class ShadowrunItemDialog extends Dialog {\n    static async fromItem(item: SR5Item, event?: MouseEvent): Promise<DialogData | undefined> {\n        const dialogData: DialogData = {\n            title: item.name,\n            buttons: {},\n        };\n        if (event) dialogData['event'] = event;\n\n        const templateData = {};\n        let templatePath = '';\n\n        if (item.isRangedWeapon()) {\n            ShadowrunItemDialog.addRangedWeaponData(templateData, dialogData, item);\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/range-weapon-roll.html';\n        } else if (item.isSpell()) {\n            ShadowrunItemDialog.addSpellData(templateData, dialogData, item);\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-spell.html';\n        } else if (item.isComplexForm()) {\n            ShadowrunItemDialog.addComplexFormData(templateData, dialogData, item);\n            templatePath = 'systems/shadowrun5e/dist/templates/rolls/roll-complex-form.html';\n        }\n\n        if (templatePath) {\n            const dialog = await renderTemplate(templatePath, templateData);\n            return mergeObject(dialogData, {\n                content: dialog,\n            });\n        }\n\n        return undefined;\n    }\n\n    /*\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        return mergeObject(options, {\n            classes: ['sr5', 'sheet'],\n        });\n    }\n     */\n\n    static addComplexFormData(templateData: object, dialogData: DialogData, item: SR5Item): void {\n        const fade = item.getFade();\n        const title = `${Helpers.label(item.name)} Level`;\n\n        const level = item.getLastComplexFormLevel()?.value || 2 - fade;\n\n        templateData['fade'] = fade >= 0 ? `+${fade}` : fade;\n        templateData['level'] = level;\n        templateData['title'] = title;\n\n        let cancel = true;\n        dialogData.buttons = {\n            roll: {\n                label: 'Continue',\n                icon: '<i class=\"fas fa-dice-six\"></i>',\n                callback: () => (cancel = false),\n            },\n        };\n        dialogData.close = async (html) => {\n            if (cancel) return false;\n            const level = Helpers.parseInputToNumber($(html).find('[name=level]').val());\n            await item.setLastComplexFormLevel({ value: level });\n            return true;\n        };\n    }\n\n    static addSpellData(templateData: object, dialogData: DialogData, item: SR5Item): void {\n        const title = `${Helpers.label(item.name)} Force`;\n        const drain = item.getDrain();\n\n        const force = item.getLastSpellForce()?.value || 2 - drain;\n\n        templateData['drain'] = drain >= 0 ? `+${drain}` : `${drain}`;\n        templateData['force'] = force;\n        templateData['title'] = title;\n\n        dialogData.title = title;\n        let cancel = true;\n        let reckless = false;\n        dialogData.buttons = {\n            normal: {\n                label: game.i18n.localize('SR5.NormalSpellButton'),\n                callback: () => (cancel = false),\n            },\n            reckless: {\n                label: game.i18n.localize('SR5.RecklessSpellButton'),\n                callback: () => {\n                    reckless = true;\n                    cancel = false;\n                },\n            },\n        };\n        dialogData.default = 'normal';\n        dialogData.close = async (html) => {\n            if (cancel) return false;\n            const force = Helpers.parseInputToNumber($(html).find('[name=force]').val());\n            await item.setLastSpellForce({ value: force, reckless });\n            return true;\n        };\n    }\n\n    static addRangedWeaponData(templateData: object, dialogData: DialogData, item: SR5Item): void {\n        let title = dialogData.title || item.name;\n\n        const itemData = item.data.data;\n        const fireModes = {};\n\n        const { modes, ranges } = itemData.range;\n        const { ammo } = itemData;\n        if (modes.single_shot) {\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSingleShotShort\");\n        }\n        if (modes.semi_auto) {\n            fireModes['1'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoShort\");\n            fireModes['3'] = game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\");\n        }\n        if (modes.burst_fire) {\n            fireModes['3'] = `${modes.semi_auto ? `${game.i18n.localize(\"SR5.WeaponModeSemiAutoBurst\")}/` : ''}${game.i18n.localize(\"SR5.WeaponModeBurstFireShort\")}`;\n            fireModes['6'] = game.i18n.localize(\"SR5.WeaponModeBurstFireLong\");\n        }\n        if (modes.full_auto) {\n            fireModes['6'] = `${modes.burst_fire ? 'LB/' : ''}${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(s)`;\n            fireModes['10'] = `${game.i18n.localize(\"SR5.WeaponModeFullAutoShort\")}(c)`;\n            fireModes['20'] = game.i18n.localize('SR5.Suppressing');\n        }\n\n        const templateRanges = this._getRangeWeaponTemplateData(ranges);\n        const fireMode = item.getLastFireMode();\n        const rc = item.getRecoilCompensation(true);\n        templateData['fireModes'] = fireModes;\n        templateData['fireMode'] = fireMode?.value;\n        templateData['rc'] = rc;\n        templateData['ammo'] = ammo;\n        templateData['title'] = title;\n        templateData['ranges'] = templateRanges;\n        templateData['targetRange'] = item.getLastFireRangeMod();\n\n        let cancel = true;\n        dialogData.buttons = {\n            continue: {\n                label: game.i18n.localize('SR5.Continue'),\n                callback: () => (cancel = false),\n            },\n        };\n\n        dialogData.close = async (html) => {\n            if (cancel) return false;\n            const fireMode = Helpers.parseInputToNumber($(html).find('[name=\"fireMode\"]').val());\n            const range = Helpers.parseInputToNumber($(html).find('[name=\"range\"]').val());\n\n            if (range) {\n                await item.setLastFireRangeMod({ value: range });\n            }\n\n            if (fireMode) {\n                const fireModeString = fireModes[fireMode];\n                const defenseModifier = Helpers.mapRoundsToDefenseDesc(fireMode);\n                const fireModeData = {\n                    label: fireModeString,\n                    value: fireMode,\n                    defense: defenseModifier,\n                };\n                await item.setLastFireMode(fireModeData);\n            }\n            return true;\n        };\n    }\n\n    static _getRangeWeaponTemplateData(ranges) {\n        const lookup = {\n            short: 0,\n            medium: -1,\n            long: -3,\n            extreme: -6,\n        };\n        const newRanges = {};\n        for (const [key, value] of Object.entries(ranges)) {\n            newRanges[key] = {\n                distance: value,\n                label: CONFIG.SR5.weaponRanges[key],\n                modifier: lookup[key],\n            };\n        }\n        return newRanges;\n    }\n}\n","/**\n * A GM-Tool to keep track of all players overwatch scores\n */\nexport class OverwatchScoreTracker extends Application {\n    static MatrixOverwatchDiceCount = '2d6';\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        options.id = 'overwatch-score-tracker';\n        options.classes = ['sr5'];\n        options.title = game.i18n.localize('SR5.OverwatchScoreTrackerTitle');\n        options.template = 'systems/shadowrun5e/dist/templates/apps/gmtools/overwatch-score-tracker.html';\n        options.width = 450;\n        options.height = 'auto';\n        options.resizable = true;\n        return options;\n    }\n\n    static addedActors = [];\n\n    getData() {\n        // get list of actors that belong to users\n        const actors = game.users.reduce((acc, user) => {\n            if (!user.isGM && user.character) {\n                acc.push(user.character.data);\n            }\n            return acc;\n        }, []);\n\n        OverwatchScoreTracker.addedActors.forEach((id) => {\n            const actor = game.actors.find((a) => a._id === id);\n            if (actor) {\n                actors.push(actor.data);\n            }\n        });\n\n        return {\n            actors,\n        };\n    }\n\n    activateListeners(html) {\n        html.find('.overwatch-score-reset').on('click', this._resetOverwatchScore.bind(this));\n        html.find('.overwatch-score-add').on('click', this._addOverwatchScore.bind(this));\n        html.find('.overwatch-score-input').on('change', this._setOverwatchScore.bind(this));\n        html.find('.overwatch-score-roll-15-minutes').on('click', this._rollFor15Minutes.bind(this));\n        html.find('.overwatch-score-add-actor').on('click', this._onAddActor.bind(this));\n    }\n\n    // returns the actor that this event is acting on\n    _getActorFromEvent(event) {\n        const id = event.currentTarget.closest('.list-item').dataset.actorId;\n        if (id) return game.actors.find((a) => a._id === id);\n    }\n\n    _onAddActor(event) {\n        event.preventDefault();\n        const tokens = canvas.tokens.controlled;\n        if (tokens.length === 0) {\n            ui.notifications.warn(game.i18n.localize('SR5.OverwatchScoreTracker.NotifyNoSelectedTokens'));\n            return;\n        }\n        tokens.forEach((token) => {\n            const actorId = token.data.actorId;\n            OverwatchScoreTracker.addedActors.push(actorId);\n            this.render();\n        });\n    }\n\n    _setOverwatchScore(event) {\n        const actor = this._getActorFromEvent(event);\n        const amount = event.currentTarget.value;\n        if (amount && actor) {\n            actor.setOverwatchScore(amount).then(() => this.render());\n        }\n    }\n\n    _addOverwatchScore(event) {\n        const actor = this._getActorFromEvent(event);\n        const amount = parseInt(event.currentTarget.dataset.amount);\n        if (amount && actor) {\n            const os = actor.getOverwatchScore();\n            actor.setOverwatchScore(os + amount).then(() => this.render());\n        }\n    }\n\n    _resetOverwatchScore(event) {\n        event.preventDefault();\n        const actor = this._getActorFromEvent(event);\n        if (actor) {\n            actor.setOverwatchScore(0).then(() => this.render());\n        }\n    }\n\n    _rollFor15Minutes(event) {\n        event.preventDefault();\n        const actor = this._getActorFromEvent(event);\n        if (actor) {\n            //  use static value so it can be modified in modules\n            const roll = new Roll(OverwatchScoreTracker.MatrixOverwatchDiceCount);\n            roll.roll();\n\n            // use GM Roll Mode so players don't see\n            // const rollMode = CONFIG.Dice.rollModes.gmroll;\n            // roll.toMessage({ rollMode });\n\n            if (roll.total) {\n                const os = actor.getOverwatchScore();\n                actor.setOverwatchScore(os + roll.total).then(() => this.render());\n            }\n        }\n    }\n}\n","import { LanguageSkillEditForm } from './LanguageSkillEditForm';\nimport KnowledgeSkillCategory = Shadowrun.KnowledgeSkillCategory;\n\nexport class KnowledgeSkillEditForm extends LanguageSkillEditForm {\n    category: KnowledgeSkillCategory;\n    constructor(actor, options, skillId, category) {\n        super(actor, options, skillId);\n        this.category = category;\n    }\n    _updateString() {\n        return `data.skills.knowledge.${this.category}.value.${this.skillId}`;\n    }\n}\n","import { SkillEditForm } from './SkillEditForm';\n\nexport class LanguageSkillEditForm extends SkillEditForm {\n    _updateString() {\n        return `data.skills.language.value.${this.skillId}`;\n    }\n\n    getData() {\n        return mergeObject(super.getData(), {\n            editable_name: true,\n        });\n    }\n\n    /** @override */\n    _onUpdateObject(event, formData, updateData) {\n        super._onUpdateObject(event, formData, updateData);\n        const name = formData['data.name'];\n        const currentData = updateData[this._updateString()] || {};\n        updateData[this._updateString()] = {\n            ...currentData,\n            name,\n        };\n    }\n}\n","import SkillEditFormData = Shadowrun.SkillEditFormData;\n\nexport class SkillEditForm extends BaseEntitySheet {\n    skillId: string;\n\n    constructor(actor, options, skillId) {\n        super(actor, options);\n        this.skillId = skillId;\n    }\n\n    _updateString() {\n        return `data.skills.active.${this.skillId}`;\n    }\n\n    static get defaultOptions() {\n        const options = super.defaultOptions;\n        return mergeObject(options, {\n            id: 'skill-editor',\n            classes: ['sr5', 'sheet', 'skill-edit-window'],\n            template: 'systems/shadowrun5e/dist/templates/apps/skill-edit.html',\n            width: 300,\n            submitOnClose: true,\n            submitOnChange: true,\n            closeOnSubmit: false,\n            resizable: true,\n        });\n    }\n\n    get title(): string {\n        const label = this.entity.getSkillLabel(this.skillId);\n        return `${game.i18n.localize('SR5.EditSkill')} - ${game.i18n.localize(label)}`;\n    }\n\n    _onUpdateObject(event, formData, updateData) {\n        // get base value\n        const base = formData['data.base'];\n\n        // process specializations\n        const specsRegex = /data\\.specs\\.(\\d+)/;\n        const specs = Object.entries(formData).reduce((running, [key, val]: [string, any]) => {\n            const found = key.match(specsRegex);\n            if (found && found[0]) {\n                running.push(val);\n            }\n            return running;\n        }, [] as any[]);\n\n        // process bonuses\n        const bonusKeyRegex = /data\\.bonus\\.(\\d+).key/;\n        const bonusValueRegex = /data\\.bonus\\.(\\d+).value/;\n        const bonus = Object.entries(formData).reduce((running, [key, value]: [string, any]) => {\n            const foundKey = key.match(bonusKeyRegex);\n            const foundVal = key.match(bonusValueRegex);\n            if (foundKey && foundKey[0] && foundKey[1]) {\n                const index = foundKey[1];\n                if (running[index] === undefined) running[index] = {};\n                running[index].key = value;\n            } else if (foundVal && foundVal[0] && foundVal[1]) {\n                const index = foundVal[1];\n                if (running[index] === undefined) running[index] = {};\n                running[index].value = value;\n            }\n\n            return running;\n        }, [] as any[]);\n\n        const currentData = updateData[this._updateString()] || {};\n        updateData[this._updateString()] = {\n            ...currentData,\n            base,\n            specs,\n            bonus,\n        };\n    }\n\n    /** @override */\n    async _updateObject(event, formData) {\n        const updateData = {};\n        this._onUpdateObject(event, formData, updateData);\n        await this.entity.update(updateData);\n    }\n\n    activateListeners(html) {\n        super.activateListeners(html);\n        $(html).find('.add-spec').on('click', this._addNewSpec.bind(this));\n        $(html).find('.remove-spec').on('click', this._removeSpec.bind(this));\n        $(html).find('.add-bonus').on('click', this._addNewBonus.bind(this));\n        $(html).find('.remove-bonus').on('click', this._removeBonus.bind(this));\n    }\n\n    async _addNewBonus(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (!data) return;\n        const { bonus = [] } = data;\n        // add blank line for new bonus\n        updateData[`${this._updateString()}.bonus`] = [...bonus, { key: '', value: 0 }];\n        await this.entity.update(updateData);\n    }\n\n    async _removeBonus(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (data?.bonus) {\n            const { bonus } = data;\n            const index = event.currentTarget.dataset.spec;\n            if (index >= 0) {\n                bonus.splice(index, 1);\n                updateData[`${this._updateString()}.bonus`] = bonus;\n                await this.entity.update(updateData);\n            }\n        }\n    }\n\n    async _addNewSpec(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (data?.specs) {\n            // add a blank line to specs\n            const { specs } = data;\n            updateData[`${this._updateString()}.specs`] = [...specs, ''];\n        }\n        await this.entity.update(updateData);\n    }\n\n    async _removeSpec(event) {\n        event.preventDefault();\n        const updateData = {};\n        const data = this.getData().data;\n        if (data?.specs) {\n            const { specs } = data;\n            const index = event.currentTarget.dataset.spec;\n            if (index >= 0) {\n                specs.splice(index, 1);\n                updateData[`${this._updateString()}.specs`] = specs;\n                await this.entity.update(updateData);\n            }\n        }\n    }\n\n    getData(): SkillEditFormData {\n        const data = super.getData();\n        const actor = data.entity;\n        data['data'] = actor ? getProperty(actor, this._updateString()) : {};\n        return data;\n    }\n}\n","/**\n * Measure the distance between two pixel coordinates\n * See BaseGrid.measureDistance for more details\n *\n * @param {Object} p0           The origin coordinate {x, y}\n * @param {Object} p1           The destination coordinate {x, y}\n * @param {boolean} gridSpaces  Enforce grid distance (if true) vs. direct point-to-point (if false)\n * @return {number}             The distance between p1 and p0\n */\nimport { SYSTEM_NAME } from './constants';\n\nexport const measureDistance = function (p0, p1, { gridSpaces = true } = {}) {\n    if (!gridSpaces)\n        {  // BaseGrid exists... fix in foundry types\n            // @ts-ignore\n            return BaseGrid.prototype.measureDistance.bind(this)(p0, p1, {\n                        gridSpaces,\n                    });\n        }\n    const gs = canvas.dimensions.size;\n    const ray = new Ray(p0, p1);\n    const nx = Math.abs(Math.ceil(ray.dx / gs));\n    const ny = Math.abs(Math.ceil(ray.dy / gs));\n\n    // Get the number of straight and diagonal moves\n    const nDiagonal = Math.min(nx, ny);\n    const nStraight = Math.abs(ny - nx);\n\n    const diagonalRule = game.settings.get(SYSTEM_NAME, 'diagonalMovement');\n\n    if (diagonalRule === '1-2-1') {\n        const nd10 = Math.floor(nDiagonal / 2);\n        const spaces = nd10 * 2 + (nDiagonal - nd10) + nStraight;\n        return spaces * canvas.dimensions.distance;\n    }\n    return (nStraight + nDiagonal) * canvas.scene.data.gridDistance;\n};\n","import { SR5Actor } from './actor/SR5Actor';\nimport { SR5Item } from './item/SR5Item';\nimport Template from './template';\nimport ModList = Shadowrun.ModList;\nimport BaseValuePair = Shadowrun.BaseValuePair;\nimport DamageData = Shadowrun.DamageData;\nimport AttackData = Shadowrun.AttackData;\nimport LabelField = Shadowrun.LabelField;\nimport { FLAGS, SYSTEM_NAME } from './constants';\nimport { PartsList } from './parts/PartsList';\n\nexport type TemplateData = {\n    header: {\n        name: string;\n        img: string;\n    };\n    tokenId?: string;\n    dice?: Die[];\n    parts?: ModList<number>;\n    limit?: BaseValuePair<number> & LabelField;\n    testName?: string;\n    actor?: SR5Actor;\n    item?: SR5Item;\n    attack?: AttackData;\n    incomingAttack?: AttackData;\n    incomingDrain?: LabelField & {\n        value: number;\n    };\n    hits?: number;\n    soak?: DamageData;\n    tests?: {\n        label: string;\n        type: string;\n    }[];\n    description?: object;\n    previewTemplate?: boolean;\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\n};\n\nexport const createChatData = async (templateData: TemplateData, roll?: Roll) => {\n    const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\n    const hackyTemplateData = {\n        ...templateData,\n        parts: new PartsList(templateData.parts).getMessageOutput(),\n        showGlitchAnimation: game.settings.get(SYSTEM_NAME, FLAGS.ShowGlitchAnimation),\n    };\n    const html = await renderTemplate(template, hackyTemplateData);\n    const actor = templateData.actor;\n\n    const chatData = {\n        user: game.user._id,\n        type: roll ? CONST.CHAT_MESSAGE_TYPES.ROLL : CONST.CHAT_MESSAGE_TYPES.OTHER,\n        content: html,\n        roll: roll ? JSON.stringify(roll) : undefined,\n        speaker: {\n            actor: actor?._id,\n            token: actor?.token,\n            alias: templateData.header.name,\n        },\n        flags: {\n            shadowrun5e: {\n                customRoll: true,\n            },\n        },\n    };\n    if (roll) {\n        chatData['sound'] = CONFIG.sounds.dice;\n    }\n    const rollMode = templateData.rollMode ?? game.settings.get('core', 'rollMode');\n\n    if (['gmroll', 'blindroll'].includes(rollMode)) chatData['whisper'] = ChatMessage.getWhisperRecipients('GM');\n    if (rollMode === 'blindroll') chatData['blind'] = true;\n\n    return chatData;\n};\n\nexport const addChatMessageContextOptions = (html, options) => {\n    const canRoll = (li) => {\n        const msg = game.messages.get(li.data().messageId);\n\n        return msg.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll);\n    };\n\n    options.push(\n        {\n            name: 'Push the Limit',\n            callback: (li) => SR5Actor.pushTheLimit(li),\n            condition: canRoll,\n            icon: '<i class=\"fas fa-meteor\"></i>',\n        },\n        {\n            name: 'Second Chance',\n            callback: (li) => SR5Actor.secondChance(li),\n            condition: canRoll,\n            icon: '<i class=\"fas fa-dice-d6\"></i>',\n        },\n    );\n    return options;\n};\n\nexport const addRollListeners = (app: ChatMessage, html) => {\n    if (!app.getFlag(SYSTEM_NAME, FLAGS.MessageCustomRoll)) return;\n    const item = SR5Item.getItemFromMessage(html);\n    html.on('click', '.test-roll', async (event) => {\n        event.preventDefault();\n        if (item) {\n            const roll = await item.rollTest(event, { hideRollMessage: true });\n            if (roll && roll.templateData) {\n                const template = `systems/shadowrun5e/dist/templates/rolls/roll-card.html`;\n                const html = await renderTemplate(template, roll.templateData);\n                const data = {};\n                data['content'] = html;\n                await app.update(data);\n            }\n        }\n    });\n    html.on('click', '.test', async (event) => {\n        event.preventDefault();\n        const type = event.currentTarget.dataset.action;\n        if (item) {\n            await item.rollExtraTest(type, event);\n        }\n    });\n    html.on('click', '.place-template', (event) => {\n        event.preventDefault();\n        if (item) {\n            const template = Template.fromItem(item);\n            template?.drawPreview();\n        }\n    });\n    html.on('click', '.card-title', (event) => {\n        event.preventDefault();\n        $(event.currentTarget).siblings('.card-description').toggle();\n    });\n    if (item?.hasRoll && app.isRoll) $(html).find('.card-description').hide();\n};\n","import { SYSTEM_NAME } from './constants';\n\nexport const preCombatUpdate = async function (combat, changes, options) {\n    // triggers when combat round changes\n    if (changes.round && combat.round && changes.round > combat.round) {\n        let initPassEnd = true;\n        for (const c of combat.combatants) {\n            let init = Number(c.initiative);\n            init -= 10;\n            if (init > 0) initPassEnd = false;\n        }\n        if (!initPassEnd) {\n            changes.round = combat.round;\n        }\n        // if we are gm, call function normally\n        // if not gm, send a socket message for the gm to update the combatants\n        // for new initative passes or reroll\n        if (game.user.isGM) {\n            await shadowrunCombatUpdate(changes, options);\n        } else {\n            // @ts-ignore\n            game.socket.emit('system.shadowrun5e', {\n                gmCombatUpdate: {\n                    changes,\n                    options,\n                },\n            });\n        }\n    }\n};\n\nexport const shadowrunCombatUpdate = async (changes, options) => {\n    const { combat } = game;\n    // subtact 10 from all initiative, we just went into the next initiative pass\n    const removedCombatants = combat.getFlag(SYSTEM_NAME, 'removedCombatants') || [];\n    const combatants = [];\n    for (const c of combat.combatants) {\n        let init = Number(c.initiative);\n        init -= 10;\n        if (init <= 0) removedCombatants.push({ ...c });\n        else {\n            // @ts-ignore\n            combatants.push({ _id: c._id, initiative: init });\n        }\n    }\n    await combat.deleteEmbeddedEntity(\n        'Combatant',\n        removedCombatants.map((c) => c._id),\n        {},\n    );\n    await combat.updateEmbeddedEntity('Combatant', combatants, {});\n    if (combatants.length === 0) {\n        const messages = [];\n        const messageOptions = options.messageOptions || {};\n\n        for (const c of removedCombatants) {\n            const actorData = c.actor ? c.actor.data : {};\n            // @ts-ignore\n            const formula = combat._getInitiativeFormula(c);\n\n            const roll: Roll = new Roll(formula, actorData).roll();\n            c.initiative = roll.total;\n\n            const rollMode = messageOptions.rollMode || c.token.hidden || c.hidden ? 'gmroll' : 'roll';\n            const messageData = mergeObject(\n                {\n                    speaker: {\n                        scene: canvas.scene._id,\n                        actor: c.actor ? c.actor._id : null,\n                        token: c.token._id,\n                        alias: c.token.name,\n                    },\n                    flavor: `${c.token.name} rolls for Initiative!`,\n                },\n                messageOptions,\n            );\n            await roll.toMessage(messageData, {\n                rollMode,\n            });\n        }\n        await combat.createEmbeddedEntity('Combatant', removedCombatants, {});\n        await ChatMessage.create(messages);\n        await combat.unsetFlag(SYSTEM_NAME, 'removedCombatants');\n        // @ts-ignore\n        await combat.resetAll();\n        await combat.rollAll();\n        await combat.update({ turn: 0 });\n    } else if (removedCombatants.length) {\n        await combat.setFlag(SYSTEM_NAME, 'removedCombatants', removedCombatants);\n        await combat.update({ turn: 0 });\n    }\n};\n","export const SR5 = {\n    itemTypes: {\n        action: 'SR5.ItemTypes.Action',\n        adept_power: 'SR5.ItemTypes.AdeptPower',\n        ammo: 'SR5.ItemTypes.Ammo',\n        armor: 'SR5.ItemTypes.Armor',\n        complex_form: 'SR5.ItemTypes.ComplexForm',\n        contact: 'SR5.ItemTypes.Contact',\n        critter_power: 'SR5.ItemTypes.CritterPower',\n        cyberware: 'SR5.ItemTypes.Cyberware',\n        device: 'SR5.ItemTypes.Device',\n        equipment: 'SR5.ItemTypes.Equipment',\n        lifestyle: 'SR5.ItemTypes.Lifestyle',\n        modification: 'SR5.ItemTypes.Modification',\n        quality: 'SR5.ItemTypes.Quality',\n        sin: 'SR5.ItemTypes.Sin',\n        spell: 'SR5.ItemTypes.Spell',\n        weapon: 'SR5.ItemTypes.Weapon',\n    },\n\n    attributes: {\n        body: 'SR5.AttrBody',\n        agility: 'SR5.AttrAgility',\n        reaction: 'SR5.AttrReaction',\n        strength: 'SR5.AttrStrength',\n        willpower: 'SR5.AttrWillpower',\n        logic: 'SR5.AttrLogic',\n        intuition: 'SR5.AttrIntuition',\n        charisma: 'SR5.AttrCharisma',\n        magic: 'SR5.AttrMagic',\n        resonance: 'SR5.AttrResonance',\n        edge: 'SR5.AttrEdge',\n        essence: 'SR5.AttrEssence',\n        attack: 'SR5.MatrixAttrAttack',\n        sleaze: 'SR5.MatrixAttrSleaze',\n        data_processing: 'SR5.MatrixAttrDataProc',\n        firewall: 'SR5.MatrixAttrFirewall',\n    },\n\n    limits: {\n        physical: 'SR5.LimitPhysical',\n        social: 'SR5.LimitSocial',\n        mental: 'SR5.LimitMental',\n        attack: 'SR5.MatrixAttrAttack',\n        sleaze: 'SR5.MatrixAttrSleaze',\n        data_processing: 'SR5.MatrixAttrDataProc',\n        firewall: 'SR5.MatrixAttrFirewall',\n    },\n\n    specialTypes: {\n        mundane: 'SR5.Mundane',\n        magic: 'SR5.Awakened',\n        resonance: 'SR5.Emerged',\n    },\n\n    damageTypes: {\n        physical: 'SR5.DmgTypePhysical',\n        stun: 'SR5.DmgTypeStun',\n        matrix: 'SR5.DmgTypeMatrix',\n    },\n\n    elementTypes: {\n        fire: 'SR5.ElementFire',\n        cold: 'SR5.ElementCold',\n        acid: 'SR5.ElementAcid',\n        electricity: 'SR5.ElementElectricity',\n        radiation: 'SR5.ElementRadiation',\n    },\n\n    spellCategories: {\n        combat: 'SR5.SpellCatCombat',\n        detection: 'SR5.SpellCatDetection',\n        health: 'SR5.SpellCatHealth',\n        illusion: 'SR5.SpellCatIllusion',\n        manipulation: 'SR5.SpellCatManipulation',\n    },\n\n    spellTypes: {\n        physical: 'SR5.SpellTypePhysical',\n        mana: 'SR5.SpellTypeMana',\n    },\n\n    spellRanges: {\n        touch: 'SR5.SpellRangeTouch',\n        los: 'SR5.SpellRangeLos',\n        los_a: 'SR5.SpellRangeLosA',\n    },\n\n    combatSpellTypes: {\n        direct: 'SR5.SpellCombatDirect',\n        indirect: 'SR5.SpellCombatIndirect',\n    },\n\n    detectionSpellTypes: {\n        directional: 'SR5.SpellDetectionDirectional',\n        psychic: 'SR5.SpellDetectionPsychic',\n        area: 'SR5.SpellDetectionArea',\n    },\n\n    illusionSpellTypes: {\n        obvious: 'SR5.SpellIllusionObvious',\n        realistic: 'SR5.SpellIllusionRealistic',\n    },\n\n    illusionSpellSenses: {\n        'single-sense': 'SR5.SpellIllusionSingleSense',\n        'multi-sense': 'SR5.SpellIllusionMultiSense',\n    },\n\n    attributeRolls: {\n        composure: 'SR5.RollComposure',\n        lift_carry: 'SR5.RollLiftCarry',\n        judge_intentions: 'SR5.RollJudgeIntentions',\n        memory: 'SR5.RollMemory',\n    },\n\n    matrixTargets: {\n        persona: 'SR5.TargetPersona',\n        device: 'SR5.TargetDevice',\n        file: 'SR5.TargetFile',\n        self: 'SR5.TargetSelf',\n        sprite: 'SR5.TargetSprite',\n        other: 'SR5.TargetOther',\n    },\n\n    durations: {\n        instant: 'SR5.DurationInstant',\n        sustained: 'SR5.DurationSustained',\n        permanent: 'SR5.DurationPermanent',\n    },\n\n    weaponCategories: {\n        range: 'SR5.WeaponCatRange',\n        melee: 'SR5.WeaponCatMelee',\n        thrown: 'SR5.WeaponCatThrown',\n    },\n\n    weaponRanges: {\n        short: 'SR5.WeaponRangeShort',\n        medium: 'SR5.WeaponRangeMedium',\n        long: 'SR5.WeaponRangeLong',\n        extreme: 'SR5.WeaponRangeExtreme',\n    },\n\n    qualityTypes: {\n        positive: 'SR5.QualityTypePositive',\n        negative: 'SR5.QualityTypeNegative',\n    },\n\n    adeptPower: {\n        types: {\n            active: 'SR5.AdeptPower.Types.Active',\n            passive: 'SR5.AdeptPower.Types.Passive',\n        },\n    },\n\n    deviceCategories: {\n        commlink: 'SR5.DeviceCatCommlink',\n        cyberdeck: 'SR5.DeviceCatCyberdeck',\n    },\n\n    cyberwareGrades: {\n        standard: 'SR5.CyberwareGradeStandard',\n        alpha: 'SR5.CyberwareGradeAlpha',\n        beta: 'SR5.CyberwareGradeBeta',\n        delta: 'SR5.CyberwareGradeDelta',\n        used: 'SR5.CyberwareGradeUsed',\n    },\n\n    knowledgeSkillCategories: {\n        street: 'SR5.KnowledgeSkillStreet',\n        academic: 'SR5.KnowledgeSkillAcademic',\n        professional: 'SR5.KnowledgeSkillProfessional',\n        interests: 'SR5.KnowledgeSkillInterests',\n    },\n\n    activeSkills: {\n        archery: 'SR5.SkillArchery',\n        automatics: 'SR5.SkillAutomatics',\n        blades: 'SR5.SkillBlades',\n        clubs: 'SR5.SkillClubs',\n        exotic_melee: 'SR5.SkillExoticMelee',\n        exotic_range: 'SR5.SkillExoticRange',\n        heavy_weapons: 'SR5.SkillHeavyWeapons',\n        longarms: 'SR5.SkillLongarms',\n        pistols: 'SR5.SkillPistols',\n        throwing_weapons: 'SR5.SkillThrowingWeapons',\n        unarmed_combat: 'SR5.SkillUnarmedCombat',\n        disguise: 'SR5.SkillDisguise',\n        diving: 'SR5.SkillDiving',\n        escape_artist: 'SR5.SkillEscapeArtist',\n        free_fall: 'SR5.SkillFreeFall',\n        gymnastics: 'SR5.SkillGymnastics',\n        palming: 'SR5.SkillPalming',\n        perception: 'SR5.SkillPerception',\n        running: 'SR5.SkillRunning',\n        sneaking: 'SR5.SkillSneaking',\n        survival: 'SR5.SkillSurvival',\n        swimming: 'SR5.SkillSwimming',\n        tracking: 'SR5.SkillTracking',\n        con: 'SR5.SkillCon',\n        etiquette: 'SR5.SkillEtiquette',\n        impersonation: 'SR5.SkillImpersonation',\n        instruction: 'SR5.SkillInstruction',\n        intimidation: 'SR5.SkillIntimidation',\n        leadership: 'SR5.SkillLeadership',\n        negotiation: 'SR5.SkillNegotiation',\n        performance: 'SR5.SkillPerformance',\n        alchemy: 'SR5.SkillAlchemy',\n        arcana: 'SR5.SkillArcana',\n        artificing: 'SR5.SkillArtificing',\n        assensing: 'SR5.SkillAssensing',\n        astral_combat: 'SR5.SkillAstralCombat',\n        banishing: 'SR5.SkillBanishing',\n        binding: 'SR5.SkillBinding',\n        counterspelling: 'SR5.SkillCounterspelling',\n        disenchanting: 'SR5.SkillDisenchanting',\n        ritual_spellcasting: 'SR5.SkillRitualSpellcasting',\n        spellcasting: 'SR5.SkillSpellcasting',\n        summoning: 'SR5.SkillSummoning',\n        compiling: 'SR5.SkillCompiling',\n        decompiling: 'SR5.SkillDecompiling',\n        registering: 'SR5.SkillRegistering',\n        aeronautics_mechanic: 'SR5.SkillAeronauticsMechanic',\n        automotive_mechanic: 'SR5.SkillAutomotiveMechanic',\n        industrial_mechanic: 'SR5.SkillIndustrialMechanic',\n        nautical_mechanic: 'SR5.SkillNauticalMechanic',\n        animal_handling: 'SR5.SkillAnimalHandling',\n        armorer: 'SR5.SkillArmorer',\n        artisan: 'SR5.SkillArtisan',\n        biotechnology: 'SR5.SkillBiotechnology',\n        chemistry: 'SR5.SkillChemistry',\n        computer: 'SR5.SkillComputer',\n        cybercombat: 'SR5.SkillCybercombat',\n        cybertechnology: 'SR5.SkillCybertechnology',\n        demolitions: 'SR5.SkillDemolitions',\n        electronic_warfare: 'SR5.SkillElectronicWarfare',\n        first_aid: 'SR5.SkillFirstAid',\n        forgery: 'SR5.SkillForgery',\n        hacking: 'SR5.SkillHacking',\n        hardware: 'SR5.SkillHardware',\n        locksmith: 'SR5.SkillLocksmith',\n        medicine: 'SR5.SkillMedicine',\n        navigation: 'SR5.SkillNavigation',\n        software: 'SR5.SkillSoftware',\n        gunnery: 'SR5.SkillGunnery',\n        pilot_aerospace: 'SR5.SkillPilotAerospace',\n        pilot_aircraft: 'SR5.SkillPilotAircraft',\n        pilot_walker: 'SR5.SkillPilotWalker',\n        pilot_ground_craft: 'SR5.SkillPilotGroundCraft',\n        pilot_water_craft: 'SR5.SkillPilotWaterCraft',\n        pilot_exotic_vehicle: 'SR5.SkillPilotExoticVehicle',\n    },\n\n    actionTypes: {\n        none: 'SR5.ActionTypeNone',\n        free: 'SR5.ActionTypeFree',\n        simple: 'SR5.ActionTypeSimple',\n        complex: 'SR5.ActionTypeComplex',\n        varies: 'SR5.ActionTypeVaries',\n    },\n\n    matrixAttributes: {\n        attack: 'SR5.MatrixAttrAttack',\n        sleaze: 'SR5.MatrixAttrSleaze',\n        data_processing: 'SR5.MatrixAttrDataProc',\n        firewall: 'SR5.MatrixAttrFirewall',\n    },\n\n    initiativeCategories: {\n        meatspace: 'SR5.InitCatMeatspace',\n        astral: 'SR5.InitCatAstral',\n        matrix: 'SR5.InitCatMatrix',\n    },\n\n    modificationTypes: {\n        weapon: 'SR5.Weapon',\n        armor: 'SR5.Armor',\n    },\n\n    mountPoints: {\n        barrel: 'SR5.Barrel',\n        stock: 'SR5.Stock',\n        top: 'SR5.Top',\n        side: 'SR5.Side',\n        internal: 'SR5.Internal',\n    },\n\n    lifestyleTypes: {\n        street: 'SR5.LifestyleStreet',\n        squatter: 'SR5.LifestyleSquatter',\n        low: 'SR5.LifestyleLow',\n        medium: 'SR5.LifestyleMiddle',\n        high: 'SR5.LifestyleHigh',\n        luxory: 'SR5.LifestyleLuxory',\n        other: 'SR5.LifestyleOther',\n    },\n\n    kbmod: {\n        STANDARD: 'shiftKey',\n        EDGE: 'altKey',\n        SPEC: 'ctrlKey',\n    },\n\n    actorModifiers: {\n        soak: 'SR5.RollSoak',\n        drain: 'SR5.Drain',\n        armor: 'SR5.Armor',\n        physical_limit: 'SR5.PhysicalLimit',\n        social_limit: 'SR5.SocialLimit',\n        mental_limit: 'SR5.MentalLimit',\n        stun_track: 'SR5.StunTrack',\n        physical_track: 'SR5.PhysicalTrack',\n        meat_initiative: 'SR5.MeatSpaceInit',\n        meat_initiative_dice: 'SR5.MeatSpaceDice',\n        astral_initiative: 'SR5.AstralInit',\n        astral_initiative_dice: 'SR5.AstralDice',\n        matrix_initiative: 'SR5.MatrixInit',\n        matrix_initiative_dice: 'SR5.MatrixDice',\n        composure: 'SR5.RollComposure',\n        lift_carry: 'SR5.RollLiftCarry',\n        judge_intentions: 'SR5.RollJudgeIntentions',\n        memory: 'SR5.RollMemory',\n        walk: 'SR5.Walk',\n        run: 'SR5.Run',\n        defense: 'SR5.RollDefense',\n        wound_tolerance: 'SR5.WoundTolerance',\n        essence: 'SR5.AttrEssence',\n        fade: 'SR5.RollFade',\n        global: 'SR5.Global',\n    },\n\n    programTypes: {\n        common_program: 'SR5.CommonProgram',\n        hacking_program: 'SR5.HackingProgram',\n        agent: 'SR5.Agent',\n    },\n\n    spiritTypes: {\n        // base types\n        air: 'SR5.Spirit.Types.Air',\n        beasts: 'SR5.Spirit.Types.Beasts',\n        earth: 'SR5.Spirit.Types.Earth',\n        fire: 'SR5.Spirit.Types.Fire',\n        guardian: 'SR5.Spirit.Types.Guardian',\n        guidance: 'SR5.Spirit.Types.Guidance',\n        man: 'SR5.Spirit.Types.Man',\n        plant: 'SR5.Spirit.Types.Plant',\n        task: 'SR5.Spirit.Types.Task',\n        water: 'SR5.Spirit.Types.Water',\n\n        // toxic types\n        toxic_air: 'SR5.Spirit.Types.ToxicAir',\n        toxic_beasts: 'SR5.Spirit.Types.ToxicBeasts',\n        toxic_earth: 'SR5.Spirit.Types.ToxicEarth',\n        toxic_fire: 'SR5.Spirit.Types.ToxicFire',\n        toxic_man: 'SR5.Spirit.Types.ToxicMan',\n        toxic_water: 'SR5.Spirit.Types.ToxicWater',\n\n        // blood types\n        blood: 'SR5.Spirit.Types.Blood',\n\n        // shadow types\n        muse: 'SR5.Spirit.Types.Muse',\n        nightmare: 'SR5.Spirit.Types.Nightmare',\n        shade: 'SR5.Spirit.Types.Shade',\n        succubus: 'SR5.Spirit.Types.Succubus',\n        wraith: 'SR5.Spirit.Types.Wraith',\n\n        // shedim types\n        shedim: 'SR5.Spirit.Types.Shedim',\n        master_shedim: 'SR5.Spirit.Types.MasterShedim',\n\n        // insect types\n        caretaker: 'SR5.Spirit.Types.Caretaker',\n        nymph: 'SR5.Spirit.Types.Nymph',\n        scout: 'SR5.Spirit.Types.Scout',\n        soldier: 'SR5.Spirit.Types.Soldier',\n        worker: 'SR5.Spirit.Types.Worker',\n        queen: 'SR5.Spirit.Types.Queen',\n    },\n\n    critterPower: {\n        types: {\n            mana: 'SR5.CritterPower.Types.Mana',\n            physical: 'SR5.CritterPower.Types.Physical',\n        },\n        ranges: {\n            los: 'SR5.CritterPower.Ranges.LineOfSight',\n            self: 'SR5.CritterPower.Ranges.Self',\n            touch: 'SR5.CritterPower.Ranges.Touch',\n        },\n        durations: {\n            always: 'SR5.CritterPower.Durations.Always',\n            instant: 'SR5.CritterPower.Durations.Instant',\n            sustained: 'SR5.CritterPower.Durations.Sustained',\n            permanent: 'SR5.CritterPower.Durations.Permanent',\n            special: 'SR5.CritterPower.Durations.Special',\n        },\n    },\n\n    spriteTypes: {\n        courier: 'SR5.Sprite.Types.Courier',\n        crack: 'SR5.Sprite.Types.Crack',\n        data: 'SR5.Sprite.Types.Data',\n        fault: 'SR5.Sprite.Types.Fault',\n        machine: 'SR5.Sprite.Types.Machine',\n    },\n\n    vehicle: {\n        types: {\n            air: 'SR5.Vehicle.Types.Air',\n            aerospace: 'SR5.Vehicle.Types.Aerospace',\n            ground: 'SR5.Vehicle.Types.Ground',\n            water: 'SR5.Vehicle.Types.Water',\n            walker: 'SR5.Vehicle.Types.Walker',\n            exotic: 'SR5.Vehicle.Types.Exotic',\n        },\n        stats: {\n            handling: 'SR5.Vehicle.Stats.Handling',\n            off_road_handling: 'SR5.Vehicle.Stats.OffRoadHandling',\n            speed: 'SR5.Vehicle.Stats.Speed',\n            off_road_speed: 'SR5.Vehicle.Stats.OffRoadSpeed',\n            acceleration: 'SR5.Vehicle.Stats.Acceleration',\n            pilot: 'SR5.Vehicle.Stats.Pilot',\n            sensor: 'SR5.Vehicle.Stats.Sensor',\n        },\n        control_modes: {\n            manual: 'SR5.Vehicle.ControlModes.Manual',\n            remote: 'SR5.Vehicle.ControlModes.Remote',\n            rigger: 'SR5.Vehicle.ControlModes.Rigger',\n            autopilot: 'SR5.Vehicle.ControlModes.Autopilot',\n        },\n        environments: {\n            speed: 'SR5.Vehicle.Environments.Speed',\n            handling: 'SR5.Vehicle.Environments.Handling',\n        },\n    },\n\n    character: {\n        types: {\n            human: 'SR5.Character.Types.Human',\n            elf: 'SR5.Character.Types.Elf',\n            ork: 'SR5.Character.Types.Ork',\n            dwarf: 'SR5.Character.Types.Dwarf',\n            troll: 'SR5.Character.Types.Troll'\n        }\n    }\n};\n","export const SYSTEM_NAME = 'shadowrun5e';\nexport const FLAGS = {\n    ShowGlitchAnimation: 'showGlitchAnimation',\n    ShowTokenNameForChatOutput: 'showTokenNameInsteadOfActor',\n    MessageCustomRoll: 'customRoll'\n};\nexport const GLITCH_DIE = 1;\nexport const METATYPEMODIFIER = 'SR5.Character.Modifiers.NPCMetatypeAttribute';\n","export const DataTemplates = {\n    grunt: {\n        metatype_modifiers: {\n            elf: {\n                attributes: {\n                    agility: +1,\n                    charisma: +2,\n                    edge: -1\n                }\n            },\n            ork: {\n                attributes: {\n                    body: +3,\n                    strength: +2,\n                    logic: -1,\n                    charisma: -1,\n                    edge: -1\n                }\n            },\n            troll: {\n                attributes: {\n                    body: +4,\n                    agility: -1,\n                    strength: +4,\n                    logic: -1,\n                    intuition: -1,\n                    charisma: -2,\n                    edge: -1,\n                },\n                general: {\n                    armor: +1\n                }\n            },\n            dwarf: {\n                attributes: {\n                    body: +2,\n                    reaction: -1,\n                    strength: +2,\n                    willpower: +1,\n                    edge: -1\n                }\n            }\n        }\n    }\n}","export abstract class DataWrapper<DataType> {\n    constructor(protected data: DataType) {}\n}\n","import { Helpers } from '../helpers';\nimport {SafeString} from \"handlebars\";\n\nexport const registerBasicHelpers = () => {\n    Handlebars.registerHelper('localizeOb', function (strId, obj) {\n        if (obj) strId = obj[strId];\n        return game.i18n.localize(strId);\n    });\n\n    Handlebars.registerHelper('toHeaderCase', function (str) {\n        if (str) return Helpers.label(str);\n        return '';\n    });\n\n    Handlebars.registerHelper('concatStrings', function (...args) {\n        return args.filter(a => typeof a === 'string').join('');\n    });\n\n    Handlebars.registerHelper('concat', function (strs, c = ',') {\n        if (Array.isArray(strs)) {\n            return strs.join(c);\n        }\n        return strs;\n    });\n\n    Handlebars.registerHelper('for', function (from: number, to: number, options) {\n        let accum = '';\n        for (let i = from; i < to; i += 1) {\n            accum += options.fn(i);\n        }\n\n        return accum;\n    });\n    Handlebars.registerHelper('modulo', function (v1: number, v2: number) {\n        return v1 % v2;\n    });\n    Handlebars.registerHelper('divide', function (v1: number, v2: number) {\n        if (v2 === 0) return 0;\n        return v1 / v2;\n    });\n    Handlebars.registerHelper('hasprop', function (obj, prop, options) {\n        if (obj.hasOwnProperty(prop)) {\n            return options.fn(this);\n        } else return options.inverse(this);\n    });\n    Handlebars.registerHelper('ifin', function (val, arr, options) {\n        if (arr.includes(val)) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if greater than\n    Handlebars.registerHelper('ifgt', function (v1, v2, options) {\n        if (v1 > v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if less than\n    Handlebars.registerHelper('iflt', function (v1, v2, options) {\n        if (v1 < v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if less than or equal\n    Handlebars.registerHelper('iflte', function (v1, v2, options) {\n        if (v1 <= v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if not equal\n    Handlebars.registerHelper('ifne', function (v1, v2, options) {\n        if (v1 !== v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    // if equal\n    Handlebars.registerHelper('ife', function (v1, v2, options) {\n        if (v1 === v2) return options.fn(this);\n        else return options.inverse(this);\n    });\n    Handlebars.registerHelper('not', function (v1) {\n        return !v1;\n    });\n    Handlebars.registerHelper('sum', function (v1, v2) {\n        return v1 + v2;\n    });\n\n    Handlebars.registerHelper('isDefined', function (value) {\n        return value !== undefined && value !== null;\n    });\n    /**\n     * Return a default value if the provided value is not defined (null or undefined)\n     */\n    Handlebars.registerHelper('default', function (value: string, defaultValue: string) {\n        return new Handlebars.SafeString(value ?? defaultValue);\n    });\n\n    Handlebars.registerHelper('log', function (value: string) {\n        console.log(value);\n    });\n    Handlebars.registerHelper('buildName', function (options) {\n        const hash: string[] = Helpers.orderKeys(options.hash);\n        const name = Object.values(hash).reduce((retVal, current, index) => {\n            if (index > 0) retVal += '.';\n            return retVal + current;\n        }, '');\n        return new Handlebars.SafeString(name);\n    });\n    Handlebars.registerHelper('disabledHelper', function (value) {\n        const val = Boolean(value);\n        return val ? val : undefined;\n    });\n    // TODO: This helper doesn't work... Don't why, but it doesn't.\n    Handlebars.registerHelper('localizeShortened', function (label: string, length: number, options: any): SafeString {\n        return new Handlebars.SafeString(Helpers.shortenAttributeLocalization(label, length));\n    });\n};\n","import { preloadHandlebarsTemplates } from './HandlebarTemplates';\nimport { registerBasicHelpers } from './BasicHelpers';\nimport { registerRollAndLabelHelpers } from './RollAndLabelHelpers';\nimport { registerItemLineHelpers } from './ItemLineHelpers';\nimport { registerSkillLineHelpers } from './SkillLineHelpers';\n\nexport class HandlebarManager {\n    static loadTemplates(): void {\n        preloadHandlebarsTemplates();\n    }\n    static registerHelpers(): void {\n        registerBasicHelpers();\n        registerRollAndLabelHelpers();\n        registerItemLineHelpers();\n        registerSkillLineHelpers();\n    }\n}","export const preloadHandlebarsTemplates = async () => {\n    const templatePaths = [\n        // actor tabs\n        'systems/shadowrun5e/dist/templates/actor/tabs/ActionsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/BioTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/GearTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/MagicTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/MatrixTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/MiscTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/SkillsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/SocialTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/SpellsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/CritterPowersTab.html',\n\n        'systems/shadowrun5e/dist/templates/actor/tabs/spirit/SpiritSkillsTab.html',\n\n        'systems/shadowrun5e/dist/templates/actor/tabs/matrix/SpriteSkillsTab.html',\n\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleSkillsTab.html',\n        'systems/shadowrun5e/dist/templates/actor/tabs/vehicle/VehicleMatrixTab.html',\n\n        // uncategorized lists\n        'systems/shadowrun5e/dist/templates/actor/parts/Initiative.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/Movement.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/ProfileImage.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/NameInput.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/ActionList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/ContactList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/SinAndLifestyleList.html',\n\n        // magic\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/AdeptPowerList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpellAndAdeptPowerList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/magic/SpiritOptions.html',\n\n        // matrix\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ProgramList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/ComplexFormList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/MatrixAttribute.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/SpritePowerList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/matrix/DeviceRating.html',\n\n        // attributes\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Attribute.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/AttributeList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/SpecialAttributeList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/attributes/Limits.html',\n\n        // skills\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/ActiveSkillList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/skills/LanguageAndKnowledgeSkillList.html',\n\n        // vehicle\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleStatsList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleSecondStatsList.html',\n        'systems/shadowrun5e/dist/templates/actor/parts/vehicle/VehicleMovement.html',\n\n        'systems/shadowrun5e/dist/templates/item/parts/description.html',\n        'systems/shadowrun5e/dist/templates/item/parts/technology.html',\n        'systems/shadowrun5e/dist/templates/item/parts/header.html',\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-ammo-list.html',\n        'systems/shadowrun5e/dist/templates/item/parts/weapon-mods-list.html',\n        'systems/shadowrun5e/dist/templates/item/parts/action.html',\n        'systems/shadowrun5e/dist/templates/item/parts/damage.html',\n        'systems/shadowrun5e/dist/templates/item/parts/opposed.html',\n        'systems/shadowrun5e/dist/templates/item/parts/spell.html',\n        'systems/shadowrun5e/dist/templates/item/parts/complex_form.html',\n        'systems/shadowrun5e/dist/templates/item/parts/weapon.html',\n        'systems/shadowrun5e/dist/templates/item/parts/armor.html',\n        'systems/shadowrun5e/dist/templates/item/parts/matrix.html',\n        'systems/shadowrun5e/dist/templates/item/parts/sin.html',\n        'systems/shadowrun5e/dist/templates/item/parts/contact.html',\n        'systems/shadowrun5e/dist/templates/item/parts/lifestyle.html',\n        'systems/shadowrun5e/dist/templates/item/parts/ammo.html',\n        'systems/shadowrun5e/dist/templates/item/parts/modification.html',\n        'systems/shadowrun5e/dist/templates/item/parts/program.html',\n        'systems/shadowrun5e/dist/templates/item/parts/critter_power.html',\n        'systems/shadowrun5e/dist/templates/rolls/parts/parts-list.html',\n\n        // to wrap the bodies of tabs\n        'systems/shadowrun5e/dist/templates/common/TabWrapper.html',\n        'systems/shadowrun5e/dist/templates/common/ValueInput.html',\n\n        // Useful wrapper and implemented components\n        'systems/shadowrun5e/dist/templates/common/ValueMaxAttribute.html',\n        'systems/shadowrun5e/dist/templates/common/Attribute.html',\n        'systems/shadowrun5e/dist/templates/common/ValueModifiers.html',\n\n        // useful select template for the common pattern\n        'systems/shadowrun5e/dist/templates/common/Select.html',\n\n        // to create the condition monitors and edge counter\n        'systems/shadowrun5e/dist/templates/common/HorizontalCellInput.html',\n\n        // looks like a ListHeader\n        'systems/shadowrun5e/dist/templates/common/HeaderBlock.html',\n\n        'systems/shadowrun5e/dist/templates/common/NameLineBlock.html',\n\n        // list components\n        'systems/shadowrun5e/dist/templates/common/List/ListItem.html',\n        'systems/shadowrun5e/dist/templates/common/List/ListHeader.html'\n    ];\n\n    return loadTemplates(templatePaths);\n};\n","import SR5ItemType = Shadowrun.SR5ItemType;\nimport { SR5ItemDataWrapper } from '../item/SR5ItemDataWrapper';\n\nexport const registerItemLineHelpers = () => {\n    Handlebars.registerHelper('ItemHeaderIcons', function (id) {\n        const PlusIcon = 'fas fa-plus';\n        const AddText = game.i18n.localize('SR5.Add');\n        const addIcon = {\n            icon: PlusIcon,\n            text: AddText,\n            title: game.i18n.localize('SR5.CreateItem'),\n            cssClass: 'item-create',\n        };\n        switch (id) {\n            case 'lifestyle':\n                addIcon.title = game.i18n.localize('SR5.CreateItemLifestyle');\n                return [addIcon];\n            case 'contact':\n                addIcon.title = game.i18n.localize('SR5.CreateItemContact');\n                return [addIcon];\n            case 'sin':\n                addIcon.title = game.i18n.localize('SR5.CreateItemSIN');\n                return [addIcon];\n            case 'license':\n                addIcon.title = game.i18n.localize('SR5.CreateItemLicense');\n                return [addIcon];\n            case 'quality':\n                addIcon.title = game.i18n.localize('SR5.CreateItemQuality');\n                return [addIcon];\n            case 'adept_power':\n                addIcon.title = game.i18n.localize('SR5.CreateItemAdeptPower');\n                return [addIcon];\n            case 'action':\n                addIcon.title = game.i18n.localize('SR5.CreateItemAction');\n                return [addIcon];\n            case 'spell':\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpell');\n                return [addIcon];\n            case 'gear':\n                addIcon.title = game.i18n.localize('SR5.CreateItemGear');\n                return [addIcon];\n            case 'complex_form':\n                addIcon.title = game.i18n.localize('SR5.CreateItemComplexForm');\n                return [addIcon];\n            case 'program':\n                addIcon.title = game.i18n.localize('SR5.CreateItemProgram');\n                return [addIcon];\n            case 'weapon':\n                addIcon.title = game.i18n.localize('SR5.CreateItemWeapon');\n                return [addIcon];\n            case 'armor':\n                addIcon.title = game.i18n.localize('SR5.CreateItemArmor');\n                return [addIcon];\n            case 'device':\n                addIcon.title = game.i18n.localize('SR5.CreateItemDevice');\n                return [addIcon];\n            case 'equipment':\n                addIcon.title = game.i18n.localize('SR5.CreateItemEquipment');\n                return [addIcon];\n            case 'cyberware':\n                addIcon.title = game.i18n.localize('SR5.CreateItemCyberware');\n                return [addIcon];\n            case 'critter_power':\n                addIcon.title = game.i18n.localize('SR5.CreateItemCritterPower');\n                return [addIcon];\n            case 'sprite_power':\n                addIcon.title = game.i18n.localize('SR5.CreateItemSpritePower');\n                return [addIcon];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('ItemHeaderRightSide', function (id) {\n        switch (id) {\n            case 'action':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Skill'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Attribute'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Attribute'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Limit'),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Modifier'),\n                            cssClass: 'six',\n                        },\n                    },\n                ];\n            case 'weapon':\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Qty'),\n                        },\n                    },\n                ];\n            case 'complex_form':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Target'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Duration'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Fade'),\n                        },\n                    },\n                ];\n            case 'adept_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.PowerType'),\n                        },\n                    },\n                ];\n            case 'spell':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.SpellType'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.SpellRange'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Duration'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.Drain'),\n                        },\n                    },\n                ];\n            case 'critter_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.CritterPower.Type'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.CritterPower.Range'),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.CritterPower.Duration'),\n                        },\n                    },\n                ];\n            case 'quality':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize('SR5.QualityType'),\n                        },\n                    },\n                ];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('ItemRightSide', function (item: SR5ItemType) {\n        const wrapper = new SR5ItemDataWrapper(item);\n        const qtyInput = {\n            input: {\n                type: 'number',\n                value: wrapper.getQuantity(),\n                cssClass: 'item-qty',\n            },\n        };\n        switch (item.type) {\n            case 'action':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.activeSkills[wrapper.getActionSkill() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.attributes[wrapper.getActionAttribute2() ?? '']),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getLimitAttribute()\n                                ? game.i18n.localize(CONFIG.SR5.attributes[wrapper.getLimitAttribute() ?? ''])\n                                : wrapper.getActionLimit(),\n                            cssClass: 'six',\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getActionDicePoolMod(),\n                            cssClass: 'six',\n                        },\n                    },\n                ];\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n                return [qtyInput];\n            case 'weapon':\n                if (wrapper.isRangedWeapon()) {\n                    const count = wrapper.getAmmo()?.current.value ?? 0;\n                    const max = wrapper.getAmmo()?.current.max ?? 0;\n                    const text = count < max ? `${game.i18n.localize('SR5.WeaponReload')} (${count}/${max})` : game.i18n.localize('SR5.AmmoFull');\n                    const cssClass = 'no-break' + (count < max ? ' reload-ammo roll' : ' faded');\n                    return [\n                        {\n                            text: {\n                                title: `${game.i18n.localize('SR5.WeaponAmmoCount')}: ${count}`,\n                                text,\n                                cssClass,\n                            },\n                        },\n                        {\n                            text: {\n                                text: '',\n                            },\n                        },\n                        qtyInput,\n                    ];\n                } else {\n                    return [qtyInput];\n                }\n\n            case 'quality':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.qualityTypes[item.data.type ?? '']),\n                        },\n                    },\n                ];\n\n            case 'adept_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.adeptPower.types[item.data.type ?? '']),\n                        },\n                    },\n                ];\n            case 'spell':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.spellTypes[item.data.type ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.spellRanges[item.data.range ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.durations[item.data.duration ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: wrapper.getDrain(),\n                        },\n                    },\n                ];\n            case 'critter_power':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.critterPower.types[item.data.powerType ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.critterPower.ranges[item.data.range ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.critterPower.durations[item.data.duration ?? '']),\n                        },\n                    },\n                ];\n\n            case 'complex_form':\n                return [\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.matrixTargets[item.data.target ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: game.i18n.localize(CONFIG.SR5.durations[item.data.duration ?? '']),\n                        },\n                    },\n                    {\n                        text: {\n                            text: String(item.data.fade),\n                        },\n                    },\n                ];\n            case 'program':\n                return [\n                    {\n                        button: {\n                            cssClass: `item-equip-toggle ${wrapper.isEquipped() ? 'light' : ''}`,\n                            short: true,\n                            text: wrapper.isEquipped() ? game.i18n.localize('SR5.Loaded') : game.i18n.localize('SR5.Load') + ' >>',\n                        },\n                    },\n                ];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('ItemIcons', function (item: SR5ItemType) {\n        const editIcon = {\n            icon: 'fas fa-edit item-edit',\n            title: game.i18n.localize('SR5.EditItem'),\n        };\n        const removeIcon = {\n            icon: 'fas fa-trash item-delete',\n            title: game.i18n.localize('SR5.DeleteItem'),\n        };\n        const equipIcon = {\n            icon: `${item.data.technology?.equipped ? 'fas fa-check-circle' : 'far fa-circle'} item-equip-toggle`,\n            title: game.i18n.localize('SR5.ToggleEquip'),\n        };\n        const pdfIcon = {\n            icon: 'fas fa-file open-source-pdf',\n            title: game.i18n.localize('SR5.OpenSourcePdf'),\n        };\n\n        const icons = [editIcon, removeIcon];\n\n        if (ui['PDFoundry']) {\n            icons.unshift(pdfIcon);\n        }\n\n        switch (item.type) {\n            case 'program':\n            case 'armor':\n            case 'device':\n            case 'equipment':\n            case 'cyberware':\n            case 'weapon':\n                icons.unshift(equipIcon);\n        }\n\n        return icons;\n    });\n};\n","import { PartsList } from '../parts/PartsList';\nimport ModList = Shadowrun.ModList;\n\nexport const registerRollAndLabelHelpers = () => {\n    Handlebars.registerHelper('damageAbbreviation', function (damage) {\n        if (damage === 'physical') return 'P';\n        if (damage === 'stun') return 'S';\n        if (damage === 'matrix') return 'M';\n        return '';\n    });\n    Handlebars.registerHelper('diceIcon', function (side) {\n        if (side) {\n            switch (side) {\n                case 1:\n                    return 'red';\n                case 2:\n                    return 'grey';\n                case 3:\n                    return 'grey';\n                case 4:\n                    return 'grey';\n                case 5:\n                    return 'green';\n                case 6:\n                    return 'green';\n            }\n        }\n    });\n\n    Handlebars.registerHelper('elementIcon', function (element) {\n        let icon = '';\n        if (element === 'electricity') {\n            icon = 'fas fa-bolt';\n        } else if (element === 'radiation') {\n            icon = 'fas fa-radiation-alt';\n        } else if (element === 'fire') {\n            icon = 'fas fa-fire';\n        } else if (element === 'acid') {\n            icon = 'fas fa-vials';\n        } else if (element === 'cold') {\n            icon = 'fas fa-snowflake';\n        }\n        return icon;\n    });\n\n    Handlebars.registerHelper('partsTotal', function (partsList: ModList<number>) {\n        const parts = new PartsList(partsList);\n        return parts.total;\n    });\n\n    Handlebars.registerHelper('signedValue', function (value: number): string {\n        if (value > 0) {\n            return `+${value}`;\n        } else {\n            return `${value}`;\n        }\n    });\n};\n","import SkillField = Shadowrun.SkillField;\nimport { Helpers } from '../helpers';\nimport SR5SheetFilters = Shadowrun.SR5SheetFilters;\n\nexport const registerSkillLineHelpers = () => {\n    Handlebars.registerHelper('SkillHeaderIcons', function (id) {\n        const addIcon = {\n            icon: 'fas fa-plus',\n            title: game.i18n.localize('SR5.AddSkill'),\n            text: game.i18n.localize('SR5.Add'),\n            cssClass: '',\n        };\n        switch (id) {\n            case 'active':\n                return [{}];\n            case 'language':\n                addIcon.cssClass = 'add-language';\n                return [addIcon];\n            case 'knowledge':\n                addIcon.cssClass = 'add-knowledge';\n                return [addIcon];\n            default:\n                return [];\n        }\n    });\n\n    Handlebars.registerHelper('SkillHeaderRightSide', function (id, filters: SR5SheetFilters) {\n        const specs = {\n            text: {\n                text: game.i18n.localize('SR5.Specialization'),\n                cssClass: 'skill-spec-item',\n            },\n        };\n\n        const rtg = {\n            // Change Rating header to show active filtering.\n            text: {\n                text: !filters || filters.showUntrainedSkills ?\n                    game.i18n.localize('SR5.Rtg') :\n                    game.i18n.localize('SR5.RtgAboveZero'),\n                cssClass: 'rtg',\n            },\n        };\n\n        switch (id) {\n            case 'active':\n            case 'knowledge':\n            case 'language':\n                return [specs, rtg];\n            default:\n                return [];\n        }\n    });\n    Handlebars.registerHelper('SkillRightSide', function (skillType: string, skill: SkillField) {\n        const specs = Array.isArray(skill.specs) ? skill.specs : [skill.specs];\n        return [\n            {\n                text: {\n                    text: specs.join(', ') ?? '',\n                    cssClass: 'skill-spec-item',\n                },\n            },\n            {\n                text: {\n                    text: Helpers.calcTotal(skill),\n                    cssClass: 'rtg',\n                },\n            },\n        ];\n    });\n\n    Handlebars.registerHelper('SkillIcons', function (skillType: string, skill: SkillField) {\n        const editIcon = {\n            icon: 'fas fa-edit',\n            title: game.i18n.localize('SR5.EditSkill'),\n            cssClass: '',\n        };\n        const removeIcon = {\n            icon: 'fas fa-trash',\n            title: game.i18n.localize('SR5.DeleteSkill'),\n            cssClass: '',\n        };\n        switch (skillType) {\n            case 'active':\n                editIcon.cssClass = 'skill-edit';\n                return [editIcon];\n            case 'language':\n                editIcon.cssClass = 'language-skill-edit';\n                removeIcon.cssClass = 'remove-language';\n                return [editIcon, removeIcon];\n            case 'knowledge':\n                editIcon.cssClass = 'knowledge-skill-edit';\n                removeIcon.cssClass = 'remove-knowledge';\n                return [editIcon, removeIcon];\n            default:\n                return [editIcon];\n        }\n    });\n\n};\n","import AttributeField = Shadowrun.AttributeField;\nimport SkillField = Shadowrun.SkillField;\nimport ModifiableValue = Shadowrun.ModifiableValue;\nimport { PartsList } from './parts/PartsList';\nimport LabelField = Shadowrun.LabelField;\n\nexport class Helpers {\n    /**\n     * Calculate the total value for a data object\n     * - stores the total value and returns it\n     * @param data\n     */\n    static calcTotal(data: ModifiableValue): number {\n        if (data.mod === undefined) data.mod = [];\n        const parts = new PartsList(data.mod);\n        // if a temp field is found, add it as a unique part\n        if (data['temp'] !== undefined) {\n            parts.addUniquePart('SR5.Temporary', data['temp']);\n        }\n        data.value = parts.total + data.base;\n        data.mod = parts.list;\n        return data.value;\n    }\n\n    static listItemId(event) {\n        return event.currentTarget.closest('.list-item').dataset.itemId;\n    }\n\n    // replace 'SR5.'s on keys with 'SR5_DOT_'\n    static onSetFlag(data) {\n        if (typeof data !== 'object') return data;\n        if (data === undefined || data === null) return data;\n        const newData = {};\n        for (const [key, value] of Object.entries(data)) {\n            const newKey = key.replace('SR5.', 'SR5_DOT_');\n            newData[newKey] = this.onSetFlag(value);\n        }\n        return newData;\n    }\n    // replace 'SR5_DOT_' with 'SR5.' on keys\n    static onGetFlag(data) {\n        if (typeof data !== 'object') return data;\n        if (data === undefined || data === null) return data;\n        const newData = {};\n        for (const [key, value] of Object.entries(data)) {\n            const newKey = key.replace('SR5_DOT_', 'SR5.');\n            newData[newKey] = this.onGetFlag(value);\n        }\n        return newData;\n    }\n\n    static isMatrix(atts?: boolean | (AttributeField | string | SkillField)[] | AttributeField | string | SkillField) {\n        if (!atts) return false;\n        if (typeof atts === 'boolean') return atts;\n        // array of labels to check for on the incoming data\n        const matrixLabels = [\n            'SR5.MatrixAttrFirewall',\n            'SR5.MatrixAttrDataProcessing',\n            'SR5.MatrixAttrSleaze',\n            'SR5.MatrixAttrAttack',\n            'SR5.SkillComputer',\n            'SR5.SkillHacking',\n            'SR5.SkillCybercombat',\n            'SR5.SkillElectronicWarfare',\n            'SR5.Software',\n        ];\n        if (!Array.isArray(atts)) atts = [atts];\n        atts = atts.filter((att) => att);\n        // iterate over the attributes and return true if we find a matrix att\n        for (const att of atts) {\n            if (typeof att === 'string') {\n                if (matrixLabels.indexOf(att) >= 0) {\n                    return true;\n                }\n            } else if (typeof att === 'object' && (att as LabelField).label !== undefined) {\n                if (matrixLabels.indexOf(att.label ?? '') >= 0) {\n                    return true;\n                }\n            }\n        }\n        // if we don't find anything return false\n        return false;\n    }\n\n    static parseInputToString(val: number | string | string[] | undefined): string {\n        if (val === undefined) return '';\n        if (typeof val === 'number') return val.toString();\n        if (typeof val === 'string') return val;\n        if (Array.isArray(val)) {\n            return val.join(',');\n        }\n        return '';\n    }\n\n    static parseInputToNumber(val: number | string | string[] | undefined): number {\n        if (typeof val === 'number') return val;\n        if (typeof val === 'string') {\n            const ret = +val;\n            if (!isNaN(ret)) return ret;\n            return 0;\n        }\n        if (Array.isArray(val)) {\n            const str = val.join('');\n            const ret = +str;\n            if (!isNaN(ret)) return ret;\n            return 0;\n        }\n        return 0;\n    }\n\n    static setupCustomCheckbox(app, html) {\n        const setContent = (el) => {\n            const checkbox = $(el).children('input[type=checkbox]');\n            const checkmark = $(el).children('.checkmark');\n            if ($(checkbox).prop('checked')) {\n                $(checkmark).addClass('fa-check-circle');\n                $(checkmark).removeClass('fa-circle');\n            } else {\n                $(checkmark).addClass('fa-circle');\n                $(checkmark).removeClass('fa-check-circle');\n            }\n        };\n        html.find('label.checkbox').each(function () {\n            setContent(this);\n        });\n        html.find('label.checkbox').click((event) => setContent(event.currentTarget));\n        html.find('.submit-checkbox').change((event) => app._onSubmit(event));\n    }\n\n    static mapRoundsToDefenseMod(rounds) {\n        if (rounds === 1) return 0;\n        if (rounds === 3) return -2;\n        if (rounds === 6) return -5;\n        if (rounds === 10) return -9;\n        return 0;\n    }\n\n    static mapRoundsToDefenseDesc(rounds) {\n        if (rounds === 1) return '';\n        if (rounds === 3) return '-2';\n        if (rounds === 6) return '-5';\n        if (rounds === 10) return '-9';\n        if (rounds === 20) return 'SR5.DuckOrCover';\n        return '';\n    }\n\n    static label(str) {\n        const frags = str.split('_');\n        for (let i = 0; i < frags.length; i++) {\n            frags[i] = frags[i].charAt(0).toUpperCase() + frags[i].slice(1);\n        }\n        frags.forEach((frag, idx) => {\n            if (frag === 'Processing') frags[idx] = 'Proc.';\n            if (frag === 'Mechanic') frags[idx] = 'Mech.';\n        });\n        return frags.join(' ');\n    }\n\n    static orderKeys(obj) {\n        const keys = Object.keys(obj).sort(function keyOrder(k1, k2) {\n            if (k1 < k2) return -1;\n            if (k1 > k2) return +1;\n            return 0;\n        });\n\n        let i;\n        const after = {};\n        for (i = 0; i < keys.length; i++) {\n            after[keys[i]] = obj[keys[i]];\n            delete obj[keys[i]];\n        }\n\n        for (i = 0; i < keys.length; i++) {\n            obj[keys[i]] = after[keys[i]];\n        }\n        return obj;\n    }\n\n    static hasModifiers(event) {\n        return event && (event.shiftKey || event.altKey || event.ctrlKey || event.metaKey);\n    }\n\n    static filter(obj, comp) {\n        const retObj = {};\n        if (typeof obj === 'object' && obj !== null) {\n            Object.entries(obj).forEach(([key, value]) => {\n                if (comp([key, value])) retObj[key] = value;\n            });\n        }\n        return retObj;\n    }\n\n    static addLabels(obj, label) {\n        if (typeof obj === 'object' && obj !== null) {\n            if (!obj.hasOwnProperty('label') && obj.hasOwnProperty('value') && label !== '') {\n                obj.label = label;\n            }\n            Object.entries(obj)\n                .filter(([, value]) => typeof value === 'object')\n                .forEach(([key, value]) => Helpers.addLabels(value, key));\n        }\n    }\n\n    /* Handle Shadowrun style shortened attribute names with typical three letter shortening. */\n    static shortenAttributeLocalization(label: string, length: number=3): string {\n        const name = game.i18n.localize(label);\n\n        if (length <= 0) {\n            return name;\n        }\n\n        if (name.length < length) {\n            length = name.length;\n        }\n\n        return name.slice(0, length).toUpperCase();\n    }\n}\n","import { SR5 } from './config';\nimport { Migrator } from './migrator/Migrator';\nimport { registerSystemSettings } from './settings';\nimport { SYSTEM_NAME } from './constants';\nimport { SR5Actor } from './actor/SR5Actor';\nimport { SR5ActorSheet } from './actor/SR5ActorSheet';\nimport { SR5Item } from './item/SR5Item';\nimport { SR5ItemSheet } from './item/SR5ItemSheet';\nimport { ShadowrunRoller } from './rolls/ShadowrunRoller';\nimport { Helpers } from './helpers';\nimport { HandlebarManager } from './handlebars/HandlebarManager';\nimport { measureDistance } from './canvas';\nimport { preCombatUpdate, shadowrunCombatUpdate } from './combat';\nimport * as chat from './chat';\nimport { createItemMacro, rollItemMacro } from './macros';\n\nimport { OverwatchScoreTracker } from './apps/gmtools/OverwatchScoreTracker';\n\nexport class HooksManager {\n    static registerHooks() {\n        // Register your highest level hook callbacks here for a quick overview of what's hooked into.\n\n        Hooks.once('init', HooksManager.init);\n\n        Hooks.on('canvasInit', HooksManager.canvasInit);\n        Hooks.on('ready', HooksManager.ready);\n        Hooks.on('renderChatMessage', HooksManager.readyChatMessage);\n        Hooks.on('getChatLogEntryContext', chat.addChatMessageContextOptions);\n        Hooks.on('hotbarDrop', HooksManager.hotbarDrop);\n        Hooks.on('renderSceneControls', HooksManager.renderSceneControls);\n        Hooks.on('getSceneControlButtons', HooksManager.getSceneControlButtons);\n\n        Hooks.on('preUpdateCombat', preCombatUpdate);\n    }\n\n    static init() {\n        console.log('Loading Shadowrun 5e System');\n\n        // Create a shadowrun5e namespace within the game global\n        game['shadowrun5e'] = {\n            SR5Actor,\n            ShadowrunRoller,\n            SR5Item,\n            rollItemMacro,\n        };\n\n        CONFIG.SR5 = SR5;\n        CONFIG.Actor.entityClass = SR5Actor;\n        CONFIG.Item.entityClass = SR5Item;\n\n        registerSystemSettings();\n\n        // Register sheet application classes\n        Actors.unregisterSheet('core', ActorSheet);\n        Actors.registerSheet(SYSTEM_NAME, SR5ActorSheet, { makeDefault: true });\n        Items.unregisterSheet('core', ItemSheet);\n        Items.registerSheet(SYSTEM_NAME, SR5ItemSheet, { makeDefault: true });\n\n        ['renderSR5ActorSheet', 'renderSR5ItemSheet'].forEach((s) => {\n            Hooks.on(s, (app, html) => Helpers.setupCustomCheckbox(app, html));\n        });\n\n        HandlebarManager.loadTemplates();\n    }\n\n    static async ready() {\n        game.socket.on('system.shadowrun5e', async (data) => {\n            if (game.user.isGM && data.gmCombatUpdate) {\n                await shadowrunCombatUpdate(data.gmCombatUpdate.changes, data.gmCombatUpdate.options);\n            }\n        });\n\n        if (game.user.isGM) {\n            await Migrator.BeginMigration();\n        }\n\n        // TODO make based on foundry version\n        const diceIconSelector = '#chat-controls .roll-type-select .fa-dice-d20';\n        $(document).on('click', diceIconSelector, () => ShadowrunRoller.promptRoll());\n        const diceIconSelectorNew = '#chat-controls .chat-control-icon .fa-dice-d20';\n        $(document).on('click', diceIconSelectorNew, () => ShadowrunRoller.promptRoll());\n    }\n\n    static canvasInit() {\n        //@ts-ignore\n        // SquareGrid isn't typed.\n        SquareGrid.prototype.measureDistance = measureDistance;\n    }\n\n    static hotbarDrop(bar, data, slot): boolean {\n        if (data.type === 'Item') {\n            // Promise can't be honored in this non-async function scope, as it needs to return a boolean.\n            createItemMacro(data.data, slot);\n        }\n\n        return false;\n    }\n\n    static renderSceneControls(controls, html) {\n        html.find('[data-tool=\"overwatch-score-tracker\"]').on('click', (event) => {\n            event.preventDefault();\n            new OverwatchScoreTracker().render(true);\n        });\n    }\n\n    static getSceneControlButtons(controls) {\n        if (game.user.isGM) {\n            const tokenControls = controls.find((c) => c.name === 'token');\n            tokenControls.tools.push({\n                name: 'overwatch-score-tracker',\n                title: 'CONTROLS.SR5.OverwatchScoreTracker',\n                icon: 'fas fa-network-wired',\n            });\n        }\n    }\n\n    static readyChatMessage(app, html) {\n        chat.addRollListeners(app, html);\n    }\n}\n","import { Helpers } from '../helpers';\nimport DeviceData = Shadowrun.DeviceData;\n\nexport const ChatData = {\n    action: (data, labels, props) => {\n        if (data.action) {\n            const labelStringList: string[] = [];\n            if (data.action.skill) {\n                labelStringList.push(Helpers.label(data.action.skill));\n                labelStringList.push(Helpers.label(data.action.attribute));\n            } else if (data.action.attribute2) {\n                labelStringList.push(Helpers.label(data.action.attribute));\n                labelStringList.push(Helpers.label(data.action.attribute2));\n            } else if (data.action.attribute) {\n                labelStringList.push(Helpers.label(data.action.attribute));\n            }\n            if (data.action.mod) {\n                labelStringList.push(`${game.i18n.localize('SR5.ItemMod')} (${data.action.mod})`);\n                // TODO when all mods are modlists\n                // Object.entries(data.action.mod).forEach(([key, value]) =>\n                //     labelStringList.push(`${game.i18n.localize(key)} (${value})`)\n                // );\n            }\n            if (labelStringList.length) {\n                labels.roll = labelStringList.join(' + ');\n            }\n\n            if (data.action.opposed.type) {\n                const { opposed } = data.action;\n                if (opposed.type !== 'custom') labels.opposedRoll = `vs. ${Helpers.label(opposed.type)}`;\n                else if (opposed.skill) labels.opposedRoll = `vs. ${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\n                else if (opposed.attribute2) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\n                else if (opposed.attribute) labels.opposedRoll = `vs. ${Helpers.label(opposed.attribute)}`;\n            }\n\n            // setup action props\n            // go in order of \"Limit/Accuracy\" \"Damage\" \"AP\"\n            // don't add action type if set to 'varies' or 'none' as that's pretty much useless info\n            if (data.action.type !== '' && data.action.type !== 'varies' && data.action.type !== 'none') {\n                props.push(`${Helpers.label(data.action.type)} Action`);\n            }\n            if (data.action.limit.value) props.push(`Limit ${data.action.limit.value}`);\n            if (data.action.damage.type.value) {\n                const { damage } = data.action;\n                let damageString = '';\n                let elementString = '';\n                if (damage.value) {\n                    damageString = `DV ${damage.value}${damage.type.value ? damage.type.value.toUpperCase().charAt(0) : ''}`;\n                }\n                if (damage.element.value) {\n                    // if we have a damage value and are electric, follow the convention of (e) after\n                    if (damage.value) {\n                        if (damage.element.value === 'electricity') {\n                            damageString += ' (e)';\n                        } else {\n                            elementString = Helpers.label(damage.element.value);\n                        }\n                    } else {\n                        elementString = Helpers.label(damage.element.value);\n                    }\n                }\n                if (damageString) props.push(damageString);\n                if (elementString) props.push(elementString);\n                if (damage.ap && damage.ap.value) props.push(`AP ${damage.ap.value}`);\n            }\n        }\n    },\n    sin: (data, labels, props) => {\n        props.push(`Rating ${data.technology.rating}`);\n        data.licenses.forEach((license) => {\n            props.push(`${license.name} R${license.rtg}`);\n        });\n    },\n\n    contact: (data, labels, props) => {\n        props.push(data.type);\n        props.push(`${game.i18n.localize('SR5.Connection')} ${data.connection}`);\n        props.push(`${game.i18n.localize('SR5.Loyalty')} ${data.loyalty}`);\n        if (data.blackmail) {\n            props.push(`${game.i18n.localize('SR5.Blackmail')}`);\n        }\n        if (data.family) {\n            props.push(game.i18n.localize('SR5.Family'));\n        }\n    },\n\n    lifestyle: (data, labels, props) => {\n        props.push(Helpers.label(data.type));\n        if (data.cost) props.push(`¥${data.cost}`);\n        if (data.comforts) props.push(`Comforts ${data.comforts}`);\n        if (data.security) props.push(`Security ${data.security}`);\n        if (data.neighborhood) props.push(`Neighborhood ${data.neighborhood}`);\n        if (data.guests) props.push(`Guests ${data.guests}`);\n    },\n\n    adept_power: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        props.push(`PP ${data.pp}`);\n        props.push(Helpers.label(data.type));\n    },\n\n    armor: (data, labels, props) => {\n        if (data.armor) {\n            if (data.armor.value) props.push(`Armor ${data.armor.mod ? '+' : ''}${data.armor.value}`);\n            if (data.armor.acid) props.push(`Acid ${data.armor.acid}`);\n            if (data.armor.cold) props.push(`Cold ${data.armor.cold}`);\n            if (data.armor.fire) props.push(`Fire ${data.armor.fire}`);\n            if (data.armor.electricity) props.push(`Electricity ${data.armor.electricity}`);\n            if (data.armor.radiation) props.push(`Radiation ${data.armor.radiation}`);\n        }\n    },\n\n    program: (data, labels, props) => {\n        props.push(game.i18n.localize(CONFIG.SR5.programTypes[data.type]));\n    },\n\n    complex_form: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        props.push(Helpers.label(data.target), Helpers.label(data.duration));\n        const { fade } = data;\n        if (fade > 0) props.push(`Fade L+${fade}`);\n        else if (fade < 0) props.push(`Fade L${fade}`);\n        else props.push('Fade L');\n    },\n\n    cyberware: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        ChatData.armor(data, labels, props);\n        if (data.essence) props.push(`Ess ${data.essence}`);\n    },\n\n    device: (data: DeviceData, labels, props) => {\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\n        if (data.category === 'cyberdeck') {\n            for (const attN of Object.values(data.atts)) {\n                props.push(`${Helpers.label(attN.att)} ${attN.value}`);\n            }\n        }\n    },\n\n    equipment: (data, labels, props) => {\n        if (data.technology && data.technology.rating) props.push(`Rating ${data.technology.rating}`);\n    },\n\n    quality: (data, labels, props) => {\n        ChatData.action(data, labels, props);\n        props.push(Helpers.label(data.type));\n    },\n\n    sprite_power: (data, labels, props) => {\n        // add action data\n        ChatData.action(data, labels, props);\n    },\n\n    critter_power: (data, labels, props) => {\n        // power type\n        props.push(game.i18n.localize(CONFIG.SR5.critterPower.types[data.powerType]));\n        // duration\n        props.push(game.i18n.localize(CONFIG.SR5.critterPower.durations[data.duration]));\n        // range\n        props.push(game.i18n.localize(CONFIG.SR5.critterPower.ranges[data.range]));\n\n        // add action data\n        ChatData.action(data, labels, props);\n    },\n\n    // add properties for spell data, follow order in book\n    spell: (data, labels, props) => {\n        // first category and type\n        props.push(Helpers.label(data.category), Helpers.label(data.type));\n\n        // add subtype tags\n        if (data.category === 'combat') {\n            props.push(Helpers.label(data.combat.type));\n        } else if (data.category === 'health') {\n        } else if (data.category === 'illusion') {\n            props.push(data.illusion.type);\n            props.push(data.illusion.sense);\n        } else if (data.category === 'manipulation') {\n            if (data.manipulation.damaging) props.push('Damaging');\n            if (data.manipulation.mental) props.push('Mental');\n            if (data.manipulation.environmental) props.push('Environmental');\n            if (data.manipulation.physical) props.push('Physical');\n        } else if (data.category === 'detection') {\n            props.push(data.illusion.type);\n            props.push(data.illusion.passive ? 'Passive' : 'Active');\n            if (data.illusion.extended) props.push('Extended');\n        }\n        // add range\n        props.push(Helpers.label(data.range));\n\n        // add action data\n        ChatData.action(data, labels, props);\n\n        // add duration data\n        props.push(Helpers.label(data.duration));\n\n        // add drain data\n        const { drain } = data;\n        if (drain > 0) props.push(`Drain F+${drain}`);\n        else if (drain < 0) props.push(`Drain F${drain}`);\n        else props.push('Drain F');\n\n        labels.roll = 'Cast';\n    },\n\n    weapon: (data, labels, props, item) => {\n        ChatData.action(data, labels, props);\n        for (let i = 0; i < props.length; i++) {\n            const prop = props[i];\n            if (prop.includes('Limit')) {\n                props[i] = prop.replace('Limit', 'Accuracy');\n            }\n        }\n\n        const equippedAmmo = item?.getEquippedAmmo();\n        if (equippedAmmo && data.ammo && data.ammo.current?.max) {\n            if (equippedAmmo) {\n                const { current, spare_clips } = data.ammo;\n                if (equippedAmmo.name) props.push(`${equippedAmmo.name} (${current.value}/${current.max})`);\n                if (equippedAmmo.data.data.blast.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${equippedAmmo.data.data.blast.radius}m`);\n                if (equippedAmmo.data.data.blast.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${equippedAmmo.data.data.blast.dropoff}/m`);\n                if (spare_clips && spare_clips.max) props.push(`${game.i18n.localize('SR5.SpareClips')} (${spare_clips.value}/${spare_clips.max})`);\n            }\n        }\n\n        if (data.technology?.conceal?.value) {\n            props.push(`${game.i18n.localize('SR5.Conceal')} ${data.technology.conceal.value}`);\n        }\n\n        if (data.category === 'range') {\n            if (data.range.rc) {\n                let rcString = `${game.i18n.localize('SR5.RecoilCompensation')} ${data.range.rc.value}`;\n                if (item?.actor) {\n                    rcString += ` (${game.i18n.localize('SR5.Total')} ${item.actor.getRecoilCompensation()})`;\n                }\n                props.push(rcString);\n            }\n            if (data.range.modes) {\n                const newModes: string[] = [];\n                const { modes } = data.range;\n                if (modes.single_shot) newModes.push('SR5.WeaponModeSingleShotShort');\n                if (modes.semi_auto) newModes.push('SR5.WeaponModeSemiAutoShort');\n                if (modes.burst_fire) newModes.push('SR5.WeaponModeBurstFireShort');\n                if (modes.full_auto) newModes.push('SR5.WeaponModeFullAutoShort');\n                props.push(newModes.map((m) => game.i18n.localize(m)).join('/'));\n            }\n            if (data.range.ranges) props.push(Array.from(Object.values(data.range.ranges)).join('/'));\n        } else if (data.category === 'melee') {\n            if (data.melee.reach) {\n                const reachString = `${game.i18n.localize('SR5.Reach')} ${data.melee.reach}`;\n                // find accuracy in props and insert ourselves after it\n                const accIndex = props.findIndex((p) => p.includes('Accuracy'));\n                if (accIndex > -1) {\n                    props.splice(accIndex + 1, 0, reachString);\n                } else {\n                    props.push(reachString);\n                }\n            }\n        } else if (data.category === 'thrown') {\n            const { blast } = data.thrown;\n            if (blast?.radius) props.push(`${game.i18n.localize('SR5.BlastRadius')} ${blast.radius}m`);\n            if (blast?.dropoff) props.push(`${game.i18n.localize('SR5.Dropoff')} ${blast.dropoff}/m`);\n\n            if (data.thrown.ranges) {\n                const mult = data.thrown.ranges.attribute && item?.actor ? item.actor.data.data.attributes[data.thrown.ranges.attribute].value : 1;\n                const ranges = [data.thrown.ranges.short, data.thrown.ranges.medium, data.thrown.ranges.long, data.thrown.ranges.extreme];\n                props.push(ranges.map((v) => v * mult).join('/'));\n            }\n        }\n    },\n};\n","import { Helpers } from '../helpers';\nimport { SR5Actor } from '../actor/SR5Actor';\nimport { ShadowrunItemDialog } from '../apps/dialogs/ShadowrunItemDialog';\nimport ModList = Shadowrun.ModList;\nimport AttackData = Shadowrun.AttackData;\nimport AttributeField = Shadowrun.AttributeField;\nimport SkillField = Shadowrun.SkillField;\nimport LimitField = Shadowrun.LimitField;\nimport FireModeData = Shadowrun.FireModeData;\nimport SpellForceData = Shadowrun.SpellForceData;\nimport ComplexFormLevelData = Shadowrun.ComplexFormLevelData;\nimport FireRangeData = Shadowrun.FireRangeData;\nimport BlastData = Shadowrun.BlastData;\nimport { ChatData } from './ChatData';\nimport { AdvancedRollProps, ShadowrunRoll, ShadowrunRoller } from '../rolls/ShadowrunRoller';\nimport { createChatData } from '../chat';\nimport { SYSTEM_NAME } from '../constants';\nimport ConditionData = Shadowrun.ConditionData;\nimport { SR5ItemDataWrapper } from './SR5ItemDataWrapper';\nimport SR5ItemType = Shadowrun.SR5ItemType;\nimport { PartsList } from '../parts/PartsList';\n\nexport class SR5Item extends Item {\n    labels: {} = {};\n    items: SR5Item[];\n    actor: SR5Actor;\n\n    private get wrapper(): SR5ItemDataWrapper {\n        // we need to cast here to unknown first to make ts happy\n        return new SR5ItemDataWrapper((this.data as unknown) as SR5ItemType);\n    }\n\n    // Flag Functions\n    getLastFireMode(): FireModeData {\n        return this.getFlag(SYSTEM_NAME, 'lastFireMode') || { value: 0 };\n    }\n    async setLastFireMode(fireMode: FireModeData) {\n        return this.setFlag(SYSTEM_NAME, 'lastFireMode', fireMode);\n    }\n    getLastSpellForce(): SpellForceData {\n        return this.getFlag(SYSTEM_NAME, 'lastSpellForce') || { value: 0 };\n    }\n    async setLastSpellForce(force: SpellForceData) {\n        return this.setFlag(SYSTEM_NAME, 'lastSpellForce', force);\n    }\n    getLastComplexFormLevel(): ComplexFormLevelData {\n        return this.getFlag(SYSTEM_NAME, 'lastComplexFormLevel') || { value: 0 };\n    }\n    async setLastComplexFormLevel(level: ComplexFormLevelData) {\n        return this.setFlag(SYSTEM_NAME, 'lastComplexFormLevel', level);\n    }\n    getLastFireRangeMod(): FireRangeData {\n        return this.getFlag(SYSTEM_NAME, 'lastFireRange') || { value: 0 };\n    }\n    async setLastFireRangeMod(environmentalMod: FireRangeData) {\n        return this.setFlag(SYSTEM_NAME, 'lastFireRange', environmentalMod);\n    }\n\n    /**\n     * Return an Array of the Embedded Item Data\n     * TODO properly types this\n     */\n    getEmbeddedItems(): any[] {\n        let items = this.getFlag(SYSTEM_NAME, 'embeddedItems');\n        if (items) {\n            // moved this \"hotfix\" to here so that everywhere that accesses the flag just gets an array -- Shawn\n            //TODO: This is a hotfix. Items should either always be\n            // stored as an array or always be stored as a object.\n            if (!Array.isArray(items)) {\n                let newItems: any[] = [];\n                for (const key of Object.keys(items)) {\n                    newItems.push(items[key]);\n                }\n                return newItems;\n            }\n            return items;\n        }\n        return [];\n    }\n\n    /**\n     * Set the embedded item data\n     * @param items\n     */\n    async setEmbeddedItems(items: any[]) {\n        // clear the flag first to remove the previous items - if we don't do this then it doesn't actually \"delete\" any items\n        await this.unsetFlag(SYSTEM_NAME, 'embeddedItems');\n        await this.setFlag(SYSTEM_NAME, 'embeddedItems', items);\n    }\n\n    getLastAttack(): AttackData | undefined {\n        return this.getFlag(SYSTEM_NAME, 'lastAttack');\n    }\n    async setLastAttack(attack: AttackData) {\n        // unset the flag first to clear old data, data can get weird if not done\n        await this.unsetFlag(SYSTEM_NAME, 'lastAttack');\n        return this.setFlag(SYSTEM_NAME, 'lastAttack', attack);\n    }\n\n    async update(data, options?) {\n        const ret = super.update(data, options);\n        ret.then(() => {\n            if (this.actor) {\n                this.actor.render();\n            }\n        });\n        return ret;\n    }\n    get hasOpposedRoll(): boolean {\n        return !!(this.data.data.action && this.data.data.action.opposed.type);\n    }\n\n    get hasRoll(): boolean {\n        const { action } = this.data.data;\n        return !!(action && action.type !== '' && (action.skill || action.attribute));\n    }\n    get hasTemplate(): boolean {\n        return this.isAreaOfEffect();\n    }\n\n    prepareData() {\n        super.prepareData();\n        const labels = {};\n        const item = this.data;\n\n        if (item.type === 'sin') {\n            if (typeof item.data.licenses === 'object') {\n                item.data.licenses = Object.values(item.data.licenses);\n            }\n        }\n        const equippedMods = this.getEquippedMods();\n        const equippedAmmo = this.getEquippedAmmo();\n\n        const { technology, range, action } = item.data;\n\n        if (technology) {\n            if (technology.condition_monitor === undefined) {\n                technology.condition_monitor = { value: 0 };\n            }\n            technology.condition_monitor.max = 8 + Math.ceil(technology.rating / 2);\n\n            if (!technology.conceal) technology.conceal = {};\n\n            const concealParts = new PartsList<number>();\n            equippedMods.forEach((mod) => {\n                if (mod.data.data.technology.conceal.value) {\n                    concealParts.addUniquePart(mod.name, mod.data.data.technology.conceal.value);\n                }\n            });\n            technology.conceal.mod = concealParts.list;\n\n            technology.conceal.value = Helpers.calcTotal(technology.conceal);\n        }\n\n        if (action) {\n            action.alt_mod = 0;\n            action.limit.mod = [];\n            action.damage.mod = [];\n            action.damage.ap.mod = [];\n            action.dice_pool_mod = [];\n            // handle overrides from mods\n            const limitParts = new PartsList(action.limit.mod);\n            const dpParts = new PartsList(action.dice_pool_mod);\n            equippedMods.forEach((mod) => {\n                if (mod.data.data.accuracy) {\n                    limitParts.addUniquePart(mod.name, mod.data.data.accuracy);\n                }\n                if (mod.data.data.dice_pool) {\n                    dpParts.addUniquePart(mod.name, mod.data.data.dice_pool);\n                }\n            });\n\n            if (equippedAmmo) {\n                // add mods to damage from ammo\n                action.damage.mod = PartsList.AddUniquePart(action.damage.mod, equippedAmmo.name, equippedAmmo.data.data.damage);\n                // add mods to ap from ammo\n                action.damage.ap.mod = PartsList.AddUniquePart(action.damage.ap.mod, equippedAmmo.name, equippedAmmo.data.data.ap);\n\n                // override element\n                if (equippedAmmo.data.data.element) {\n                    action.damage.element.value = equippedAmmo.data.data.element;\n                } else {\n                    action.damage.element.value = action.damage.element.base;\n                }\n\n                // override damage type\n                if (equippedAmmo.data.data.damageType) {\n                    action.damage.type.value = equippedAmmo.data.data.damageType;\n                } else {\n                    action.damage.type.value = action.damage.type.base;\n                }\n            } else {\n                // set value if we don't have item overrides\n                action.damage.element.value = action.damage.element.base;\n                action.damage.type.value = action.damage.type.base;\n            }\n\n            // once all damage mods have been accounted for, sum base and mod to value\n            action.damage.value = Helpers.calcTotal(action.damage);\n            action.damage.ap.value = Helpers.calcTotal(action.damage.ap);\n\n            action.limit.value = Helpers.calcTotal(action.limit);\n\n            if (this.actor) {\n                if (action.damage.attribute) {\n                    const { attribute } = action.damage;\n                    // TODO convert this in the template\n                    action.damage.mod = PartsList.AddUniquePart(\n                        action.damage.mod,\n                        game.i18n.localize(CONFIG.SR5.attributes[attribute]),\n                        this.actor.findAttribute(attribute)?.value,\n                    );\n                    action.damage.value = Helpers.calcTotal(action.damage);\n                }\n                if (action.limit.attribute) {\n                    const { attribute } = action.limit;\n                    // TODO convert this in the template\n                    action.limit.mod = PartsList.AddUniquePart(\n                        action.limit.mod,\n                        game.i18n.localize(CONFIG.SR5.limits[attribute]),\n                        this.actor.findLimit(attribute)?.value,\n                    );\n                    action.limit.value = Helpers.calcTotal(action.limit);\n                }\n            }\n        }\n\n        if (range) {\n            if (range.rc) {\n                const rangeParts = new PartsList();\n                equippedMods.forEach((mod) => {\n                    if (mod.data.data.rc) rangeParts.addUniquePart(mod.name, mod.data.data.rc);\n                    // handle overrides from ammo\n                });\n                range.rc.mod = rangeParts.list;\n                if (range.rc) range.rc.value = Helpers.calcTotal(range.rc);\n            }\n        }\n\n        if (item.type === 'adept_power') {\n            item.data.type = item.data.action?.type ? 'active' : 'passive';\n        }\n\n        this.labels = labels;\n        item['properties'] = this.getChatData().properties;\n    }\n\n    async postCard(event?) {\n        // we won't work if we don't have an actor\n        if (!this.actor) return;\n\n        const postOnly = event?.shiftKey || !this.hasRoll;\n\n        const post = (bonus = {}) => {\n            // if only post, don't roll and post a card version -- otherwise roll\n            if (postOnly) {\n                const { token } = this.actor;\n                const attack = this.getAttackData(0);\n                // don't include any hits\n                delete attack?.hits;\n                // generate chat data\n                createChatData({\n                    header: {\n                        name: this.name,\n                        img: this.img,\n                    },\n                    testName: this.getRollName(),\n                    actor: this.actor,\n                    tokenId: token ? `${token.scene._id}.${token.id}` : undefined,\n                    description: this.getChatData(),\n                    item: this,\n                    previewTemplate: this.hasTemplate,\n                    attack,\n                    ...bonus,\n                }).then((chatData) => {\n                    // create the message\n                    return ChatMessage.create(chatData, { displaySheet: false });\n                });\n            } else {\n                this.rollTest(event);\n            }\n        };\n        // prompt user if needed\n        const dialogData = await ShadowrunItemDialog.fromItem(this, event);\n        if (dialogData) {\n            // keep track of old close function\n            const oldClose = dialogData.close;\n            // call post() after dialog closes\n            dialogData.close = async (html) => {\n                if (oldClose) {\n                    // the oldClose we put on the dialog will return a boolean\n                    const ret = ((await oldClose(html)) as unknown) as boolean;\n                    if (!ret) return;\n                }\n                post();\n            };\n            return new Dialog(dialogData).render(true);\n        } else {\n            post();\n        }\n    }\n\n    getChatData(htmlOptions?) {\n        const data = duplicate(this.data.data);\n        const { labels } = this;\n        if (!data.description) data.description = {};\n\n        data.description.value = TextEditor.enrichHTML(data.description.value, htmlOptions);\n\n        const props = [];\n        const func = ChatData[this.data.type];\n        if (func) func(duplicate(data), labels, props, this);\n\n        data.properties = props.filter((p) => !!p);\n\n        return data;\n    }\n\n    getOpposedTestName(): string {\n        let name = '';\n        if (this.data.data.action?.opposed?.type) {\n            const { opposed } = this.data.data.action;\n            if (opposed.type !== 'custom') {\n                name = `${Helpers.label(opposed.type)}`;\n            } else if (opposed.skill) {\n                name = `${Helpers.label(opposed.skill)}+${Helpers.label(opposed.attribute)}`;\n            } else if (opposed.attribute2) {\n                name = `${Helpers.label(opposed.attribute)}+${Helpers.label(opposed.attribute2)}`;\n            } else if (opposed.attribute) {\n                name = `${Helpers.label(opposed.attribute)}`;\n            }\n        }\n        const mod = this.getOpposedTestModifier();\n        if (mod) name += ` ${mod}`;\n        return name;\n    }\n\n    getOpposedTestMod(): PartsList<number> {\n        const parts = new PartsList<number>();\n        if (this.hasDefenseTest()) {\n            if (this.isAreaOfEffect()) {\n                parts.addUniquePart('SR5.Aoe', -2);\n            }\n            if (this.isRangedWeapon()) {\n                const fireModeData = this.getLastFireMode();\n                if (fireModeData?.defense) {\n                    if (fireModeData.defense !== 'SR5.DuckOrCover') {\n                        const fireMode = +fireModeData.defense;\n                        parts.addUniquePart('SR5.FireMode', fireMode);\n                    }\n                }\n            }\n        }\n        return parts;\n    }\n\n    getOpposedTestModifier(): string {\n        const testMod = this.getOpposedTestMod();\n        const total = testMod.total;\n        if (total) return `(${total})`;\n        else {\n            if (this.isRangedWeapon()) {\n                const fireModeData = this.getLastFireMode();\n                if (fireModeData?.defense) {\n                    if (fireModeData.defense === 'SR5.DuckOrCover') {\n                        return game.i18n.localize('SR5.DuckOrCover');\n                    }\n                }\n            }\n        }\n        return '';\n    }\n\n    getBlastData(): BlastData | undefined {\n        // can only handle spells and grenade right now\n        if (this.isSpell() && this.isAreaOfEffect()) {\n            // distance on spells is equal to force\n            let distance = this.getLastSpellForce().value;\n            // extended spells multiply by 10\n            if (this.data.data.extended) distance *= 10;\n            return {\n                radius: distance,\n                dropoff: 0,\n            };\n        } else if (this.isGrenade()) {\n            // use blast radius\n            const distance = this.data.data.thrown.blast.radius;\n            const dropoff = this.data.data.thrown.blast.dropoff;\n            return {\n                radius: distance,\n                dropoff: dropoff,\n            };\n        } else if (this.hasExplosiveAmmo()) {\n            const ammo = this.getEquippedAmmo();\n            const distance = ammo.data.data.blast.radius;\n            const dropoff = ammo.data.data.blast.dropoff;\n            return {\n                radius: distance,\n                dropoff,\n            };\n        }\n    }\n\n    getEquippedAmmo() {\n        return (this.items || []).filter((item) => item.type === 'ammo' && item.data.data?.technology?.equipped)[0];\n    }\n\n    getEquippedMods() {\n        return (this.items || []).filter((item) => item.type === 'modification' && item.data.data.type === 'weapon' && item.data.data?.technology?.equipped);\n    }\n\n    hasExplosiveAmmo(): boolean {\n        const ammo = this.getEquippedAmmo();\n        return ammo?.data?.data?.blast?.radius > 0;\n    }\n\n    async equipWeaponMod(iid) {\n        const mod = this.getOwnedItem(iid);\n        if (mod) {\n            const dupData = duplicate(mod.data);\n            dupData.data.technology.equipped = !dupData.data.technology.equipped;\n            await this.updateOwnedItem(dupData);\n        }\n    }\n\n    get hasAmmo() {\n        return this.data.data.ammo !== undefined;\n    }\n\n    async useAmmo(fireMode) {\n        const dupData = duplicate(this.data);\n        const { ammo } = dupData.data;\n        if (ammo) {\n            ammo.current.value = Math.max(0, ammo.current.value - fireMode);\n            return this.update(dupData);\n        }\n    }\n\n    async reloadAmmo() {\n        const data = duplicate(this.data);\n        const { ammo } = data.data;\n        const diff = ammo.current.max - ammo.current.value;\n        ammo.current.value = ammo.current.max;\n\n        if (ammo.spare_clips) {\n            ammo.spare_clips.value = Math.max(0, ammo.spare_clips.value - 1);\n        }\n        await this.update(data);\n\n        const newAmmunition = (this.items || [])\n            .filter((i) => i.data.type === 'ammo')\n            .reduce((acc: EntityData[], item) => {\n                const { technology } = item.data.data;\n                if (technology.equipped) {\n                    const qty = technology.quantity;\n                    technology.quantity = Math.max(0, qty - diff);\n                    acc.push(item.data);\n                }\n                return acc;\n            }, []);\n        if (newAmmunition.length) await this.updateOwnedItem(newAmmunition);\n    }\n\n    async equipAmmo(iid) {\n        // only allow ammo that was just clicked to be equipped\n        const ammo = this.items\n            ?.filter((item) => item.type === 'ammo')\n            .map((item) => {\n                const i = this.getOwnedItem(item._id);\n                if (i) {\n                    i.data.data.technology.equipped = iid === item._id;\n                    return i.data;\n                }\n            });\n        await this.updateOwnedItem(ammo);\n    }\n\n    addNewLicense() {\n        const data = duplicate(this.data);\n        const { licenses } = data.data;\n        if (typeof licenses === 'object') {\n            data.data.licenses = Object.values(licenses);\n        }\n        data.data.licenses.push({\n            name: '',\n            rtg: '',\n            description: '',\n        });\n        this.update(data);\n    }\n\n    getRollPartsList(): ModList<number> {\n        // we only have a roll if we have an action or an actor\n        if (!this.data.data.action || !this.actor) return [];\n\n        const parts = new PartsList(duplicate(this.getModifierList()));\n\n        const skill = this.actor.findActiveSkill(this.getActionSkill());\n        const attribute = this.actor.findAttribute(this.getActionAttribute());\n        const attribute2 = this.actor.findAttribute(this.getActionAttribute2());\n\n        if (attribute && attribute.label) parts.addPart(attribute.label, attribute.value);\n\n        // if we have a valid skill, don't look for a second attribute\n        if (skill && skill.label) {\n            parts.addUniquePart(skill.label, skill.value);\n            if (skill.value === 0) {\n                parts.addUniquePart('SR5.Defaulting', -1);\n            }\n        } else if (attribute2 && attribute2.label) parts.addUniquePart(attribute2.label, attribute2.value);\n\n        const spec = this.getActionSpecialization();\n        if (spec) parts.addUniquePart(spec, 2);\n\n        const mod = parseInt(this.data.data.action.mod || 0);\n        if (mod) parts.addUniquePart('SR5.ItemMod', mod);\n\n        const atts: (AttributeField | SkillField)[] | boolean = [];\n        if (attribute !== undefined) atts.push(attribute);\n        if (attribute2 !== undefined) atts.push(attribute2);\n        if (skill !== undefined) atts.push(skill);\n        // add global parts from actor\n        this.actor._addGlobalParts(parts);\n        this.actor._addMatrixParts(parts, atts);\n        this._addWeaponParts(parts);\n\n        return parts.list;\n    }\n\n    calculateRecoil() {\n        const lastFireMode = this.getLastFireMode();\n        if (!lastFireMode) return 0;\n        if (lastFireMode.value === 20) return 0;\n        return Math.min(this.getRecoilCompensation(true) - (this.getLastFireMode()?.value || 0), 0);\n    }\n\n    _addWeaponParts(parts: PartsList<number>) {\n        if (this.isRangedWeapon()) {\n            const recoil = this.calculateRecoil();\n            if (recoil) parts.addUniquePart('SR5.Recoil', recoil);\n        }\n    }\n\n    removeLicense(index) {\n        const data = duplicate(this.data);\n        const { licenses } = data.data;\n        licenses.splice(index, 1);\n        this.update(data);\n    }\n\n    async rollOpposedTest(target: SR5Actor, ev) {\n        const itemData = this.data.data;\n        const options = {\n            event: ev,\n            fireModeDefense: 0,\n            cover: false,\n        };\n\n        const lastAttack = this.getLastAttack();\n        const parts = this.getOpposedTestMod();\n        const { opposed } = itemData.action;\n\n        if (opposed.type === 'defense') {\n            if (lastAttack) {\n                options['incomingAttack'] = lastAttack;\n                options.cover = true;\n                if (lastAttack.fireMode?.defense) {\n                    options.fireModeDefense = +lastAttack.fireMode.defense;\n                }\n            }\n            return target.rollDefense(options, parts.list);\n        } else if (opposed.type === 'soak') {\n            options['damage'] = lastAttack?.damage;\n            options['attackerHits'] = lastAttack?.hits;\n            return target.rollSoak(options, parts.list);\n        } else if (opposed.type === 'armor') {\n            return target.rollArmor(options);\n        } else {\n            if (opposed.skill && opposed.attribute) {\n                return target.rollSkill(opposed.skill, {\n                    ...options,\n                    attribute: opposed.attribute,\n                });\n            } else if (opposed.attribute && opposed.attribute2) {\n                return target.rollTwoAttributes([opposed.attribute, opposed.attribute2], options);\n            } else if (opposed.attribute) {\n                return target.rollSingleAttribute(opposed.attribute, options);\n            }\n        }\n    }\n\n    async rollExtraTest(type: string, event) {\n        const targets = SR5Item.getTargets();\n        if (type === 'opposed') {\n            for (const t of targets) {\n                await this.rollOpposedTest(t, event);\n            }\n        }\n    }\n\n    /**\n     * Rolls a test using the latest stored data on the item (force, fireMode, level)\n     * @param event - mouse event\n     * @param options - any additional roll options to pass along - note that currently the Item will overwrite -- WIP\n     */\n    async rollTest(event, options?: Partial<AdvancedRollProps>): Promise<ShadowrunRoll | undefined> {\n        const promise = ShadowrunRoller.itemRoll(event, this, options);\n\n        // handle promise when it resolves for our own stuff\n        promise.then(async (roll) => {\n            const attackData = this.getAttackData(roll?.total ?? 0);\n            if (attackData) {\n                await this.setLastAttack(attackData);\n            }\n\n            // complex form handles fade\n            if (this.isComplexForm()) {\n                const totalFade = Math.max(this.getFade() + this.getLastComplexFormLevel().value, 2);\n                await this.actor.rollFade({ event }, totalFade);\n            } // spells handle drain, force, and attack data\n            else if (this.isSpell()) {\n                if (this.isCombatSpell() && roll) {\n                }\n                const forceData = this.getLastSpellForce();\n                const drain = Math.max(this.getDrain() + forceData.value + (forceData.reckless ? 3 : 0), 2);\n                await this.actor?.rollDrain({ event }, drain);\n            } // weapons handle ammo and attack data\n            else if (this.data.type === 'weapon') {\n                if (this.hasAmmo) {\n                    const fireMode = this.getLastFireMode()?.value || 1;\n                    await this.useAmmo(fireMode);\n                }\n            }\n        });\n\n        return promise;\n    }\n\n    static getItemFromMessage(html): SR5Item | undefined {\n        const card = html.find('.chat-card');\n        let actor;\n        const tokenKey = card.data('tokenId');\n        if (tokenKey) {\n            const [sceneId, tokenId] = tokenKey.split('.');\n            let token;\n            if (sceneId === canvas.scene._id) token = canvas.tokens.get(tokenId);\n            else {\n                const scene: Scene = game.scenes.get(sceneId);\n                if (!scene) return;\n                // @ts-ignore\n                const tokenData = scene.data.tokens.find((t) => t.id === Number(tokenId));\n                if (tokenData) token = new Token(tokenData);\n            }\n            if (!token) return;\n            actor = Actor.fromToken(token);\n        } else actor = game.actors.get(card.data('actorId'));\n\n        if (!actor) return;\n        const itemId = card.data('itemId');\n        return actor.getOwnedItem(itemId);\n    }\n\n    static getTargets() {\n        const { character } = game.user;\n        const { controlled } = canvas.tokens;\n        const targets = controlled.reduce((arr, t) => (t.actor ? arr.concat([t.actor]) : arr), []);\n        if (character && controlled.length === 0) targets.push(character);\n        if (!targets.length) throw new Error(`You must designate a specific Token as the roll target`);\n        return targets;\n    }\n\n    /**\n     * Create an item in this item\n     * @param itemData\n     * @param options\n     */\n    async createOwnedItem(itemData, options = {}) {\n        if (!Array.isArray(itemData)) itemData = [itemData];\n        // weapons accept items\n        if (this.type === 'weapon') {\n            const currentItems = duplicate(this.getEmbeddedItems());\n\n            itemData.forEach((ogItem) => {\n                const item = duplicate(ogItem);\n                item._id = randomID(16);\n                if (item.type === 'ammo' || item.type === 'modification') {\n                    if (item?.data?.technology?.equipped) {\n                        item.data.technology.equipped = false;\n                    }\n                    currentItems.push(item);\n                }\n            });\n\n            await this.setEmbeddedItems(currentItems);\n        }\n        await this.prepareEmbeddedEntities();\n        await this.prepareData();\n        await this.render(false);\n        return true;\n    }\n\n    /**\n     * Prepare embeddedItems\n     */\n    prepareEmbeddedEntities() {\n        super.prepareEmbeddedEntities();\n        let items = this.getEmbeddedItems();\n        if (items) {\n            const existing = (this.items || []).reduce((object, i) => {\n                object[i.id] = i;\n                return object;\n            }, {});\n            this.items = items.map((i) => {\n                if (i._id in existing) {\n                    const a = existing[i._id];\n                    a.data = i;\n                    a.prepareData();\n                    return a;\n                } else {\n                    // dirty things done here\n                    // @ts-ignore\n                    return Item.createOwned(i, this);\n                }\n            });\n        }\n    }\n\n    getOwnedItem(itemId) {\n        const items = this.items;\n        if (!items) return;\n        return items.find((i) => i._id === itemId);\n    }\n\n    async updateOwnedItem(changes) {\n        const items = duplicate(this.getEmbeddedItems());\n        if (!items) return;\n        changes = Array.isArray(changes) ? changes : [changes];\n        if (!changes || changes.length === 0) return;\n        changes.forEach((itemChanges) => {\n            const index = items.findIndex((i) => i._id === itemChanges._id);\n            if (index === -1) return;\n            const item = items[index];\n            if (item) {\n                itemChanges = expandObject(itemChanges);\n                mergeObject(item, itemChanges);\n                items[index] = item;\n                // this.items[index].data = items[index];\n            }\n        });\n\n        await this.setEmbeddedItems(items);\n        await this.prepareEmbeddedEntities();\n        await this.prepareData();\n        await this.render(false);\n        return true;\n    }\n\n    async updateEmbeddedEntity(embeddedName: string, updateData: object | object[], options?: object) {\n        await this.updateOwnedItem(updateData);\n        return this;\n    }\n\n    /**\n     * Remove an owned item\n     * @param deleted\n     * @returns {Promise<boolean>}\n     */\n    async deleteOwnedItem(deleted) {\n        const items = duplicate(this.getEmbeddedItems());\n        if (!items) return;\n\n        const idx = items.findIndex((i) => i._id === deleted || Number(i._id) === deleted);\n        if (idx === -1) throw new Error(`Shadowrun5e | Couldn't find owned item ${deleted}`);\n        items.splice(idx, 1);\n        await this.setEmbeddedItems(items);\n        await this.prepareEmbeddedEntities();\n        await this.prepareData();\n        await this.render(false);\n        return true;\n    }\n\n    async openPdfSource() {\n        // Check for PDFoundry module hook: https://github.com/Djphoenix719/PDFoundry\n        if (!ui['PDFoundry']) {\n            ui.notifications.warn(game.i18n.localize('SR5.DIALOG.MissingModuleContent'));\n            return;\n        }\n\n        const source = this.getBookSource();\n        if (source === '') {\n            // @ts-ignore\n            ui.notifications.error(game.i18n.localize('SR5.SourceFieldEmptyError'));\n        }\n        // TODO open PDF to correct location\n        // parse however you need, all \"buttons\" will lead to this function\n        const [code, page] = source.split(' ');\n\n        //@ts-ignore\n        ui.PDFoundry.openPDFByCode(code, {page: parseInt(page)});\n    }\n\n    getAttackData(hits: number): AttackData | undefined {\n        if (!this.data.data.action?.damage.type) return undefined;\n        const damage = this.data.data.action.damage;\n        const data: AttackData = {\n            hits,\n            damage: damage,\n        };\n\n        if (this.isCombatSpell()) {\n            const force = this.getLastSpellForce().value;\n            const damageParts = new PartsList(data.damage.mod);\n            data.force = force;\n            data.damage.base = force;\n            data.damage.value = force + damageParts.total;\n            data.damage.ap.value = -force + damageParts.total;\n            data.damage.ap.base = -force;\n        }\n\n        if (this.isComplexForm()) {\n            data.level = this.getLastComplexFormLevel().value;\n        }\n\n        if (this.isMeleeWeapon()) {\n            data.reach = this.getReach();\n            data.accuracy = this.getActionLimit();\n        }\n\n        if (this.isRangedWeapon()) {\n            data.fireMode = this.getLastFireMode();\n            data.accuracy = this.getActionLimit();\n        }\n\n        const blastData = this.getBlastData();\n        if (blastData) data.blast = blastData;\n\n        return data;\n    }\n\n    getRollName(): string | undefined {\n        if (this.isRangedWeapon()) {\n            return game.i18n.localize('SR5.RangeWeaponAttack');\n        }\n        if (this.isMeleeWeapon()) {\n            return game.i18n.localize('SR5.MeleeWeaponAttack');\n        }\n        if (this.isCombatSpell()) {\n            return game.i18n.localize('SR5.SpellAttack');\n        }\n        if (this.isSpell()) {\n            return game.i18n.localize('SR5.SpellCast');\n        }\n        if (this.hasRoll) return this.name;\n        return undefined;\n    }\n\n    getLimit(): LimitField | undefined {\n        const limit = this.data.data.action?.limit;\n        if (!limit) return undefined;\n        if (this.data.type === 'weapon') {\n            limit.label = 'SR5.Accuracy';\n        } else if (limit?.attribute) {\n            limit.label = CONFIG.SR5.attributes[limit.attribute];\n        } else if (this.isSpell()) {\n            limit.value = this.getLastSpellForce().value;\n            limit.label = 'SR5.Force';\n        } else if (this.isComplexForm()) {\n            limit.value = this.getLastComplexFormLevel().value;\n            limit.label = 'SR5.Level';\n        } else {\n            limit.label = 'SR5.Limit';\n        }\n        return limit;\n    }\n\n    /**\n     * Override setFlag to remove the 'SR5.' from keys in modlists, otherwise it handles them as embedded keys\n     * @param scope\n     * @param key\n     * @param value\n     */\n    setFlag(scope: string, key: string, value: any): Promise<this> {\n        const newValue = Helpers.onSetFlag(value);\n        return super.setFlag(scope, key, newValue);\n    }\n\n    /**\n     * Override getFlag to add back the 'SR5.' keys correctly to be handled\n     * @param scope\n     * @param key\n     */\n    getFlag(scope: string, key: string): any {\n        const data = super.getFlag(scope, key);\n        return Helpers.onGetFlag(data);\n    }\n\n    /**\n     * Passthrough functions\n     */\n    isAreaOfEffect(): boolean {\n        return this.wrapper.isAreaOfEffect();\n    }\n\n    isArmor(): boolean {\n        return this.wrapper.isArmor();\n    }\n\n    hasArmorBase(): boolean {\n        return this.wrapper.hasArmorBase();\n    }\n\n    hasArmorAccessory(): boolean {\n        return this.wrapper.hasArmorAccessory();\n    }\n\n    hasArmor(): boolean {\n        return this.wrapper.hasArmor();\n    }\n\n    isGrenade(): boolean {\n        return this.wrapper.isGrenade();\n    }\n\n    isWeapon(): boolean {\n        return this.wrapper.isWeapon();\n    }\n\n    isCyberware(): boolean {\n        return this.wrapper.isCyberware();\n    }\n\n    isCombatSpell(): boolean {\n        return this.wrapper.isCombatSpell();\n    }\n\n    isRangedWeapon(): boolean {\n        return this.wrapper.isRangedWeapon();\n    }\n\n    isSpell(): boolean {\n        return this.wrapper.isSpell();\n    }\n\n    isComplexForm(): boolean {\n        return this.wrapper.isComplexForm();\n    }\n\n    isMeleeWeapon(): boolean {\n        return this.wrapper.isMeleeWeapon();\n    }\n\n    isDevice(): boolean {\n        return this.wrapper.isDevice();\n    }\n\n    isEquipped(): boolean {\n        return this.wrapper.isEquipped();\n    }\n\n    isCyberdeck(): boolean {\n        return this.wrapper.isCyberdeck();\n    }\n\n    getBookSource(): string {\n        return this.wrapper.getBookSource();\n    }\n\n    getConditionMonitor(): ConditionData {\n        return this.wrapper.getConditionMonitor();\n    }\n\n    getRating(): number {\n        return this.wrapper.getRating();\n    }\n\n    getArmorValue(): number {\n        return this.wrapper.getArmorValue();\n    }\n\n    getArmorElements(): { [key: string]: number } {\n        return this.wrapper.getArmorElements();\n    }\n\n    getEssenceLoss(): number {\n        return this.wrapper.getEssenceLoss();\n    }\n\n    getASDF() {\n        return this.wrapper.getASDF();\n    }\n\n    getActionSkill(): string | undefined {\n        return this.wrapper.getActionSkill();\n    }\n\n    getActionAttribute(): string | undefined {\n        return this.wrapper.getActionAttribute();\n    }\n\n    getActionAttribute2(): string | undefined {\n        return this.wrapper.getActionAttribute2();\n    }\n\n    getActionLimit(): number | undefined {\n        return this.wrapper.getActionLimit();\n    }\n\n    getModifierList(): ModList<number> {\n        return this.wrapper.getModifierList();\n    }\n\n    getActionSpecialization(): string | undefined {\n        return this.wrapper.getActionSpecialization();\n    }\n\n    getDrain(): number {\n        return this.wrapper.getDrain();\n    }\n\n    getFade(): number {\n        return this.wrapper.getFade();\n    }\n\n    getRecoilCompensation(includeActor: boolean = true): number {\n        let rc = this.wrapper.getRecoilCompensation();\n        if (includeActor && this.actor) {\n            rc += this.actor.getRecoilCompensation();\n        }\n        return rc;\n    }\n\n    getReach(): number {\n        if (this.isMeleeWeapon()) {\n            return this.data.data.melee?.reach ?? 0;\n        }\n        return 0;\n    }\n\n    hasDefenseTest(): boolean {\n        return this.data.data.action?.opposed?.type === 'defense';\n    }\n}\n","import { DataWrapper } from '../dataWrappers/DataWrapper';\nimport SR5ItemType = Shadowrun.SR5ItemType;\nimport ConditionData = Shadowrun.ConditionData;\nimport ModList = Shadowrun.ModList;\nimport SR5ItemData = Shadowrun.SR5ItemData;\n\nexport class SR5ItemDataWrapper extends DataWrapper<SR5ItemType> {\n    getData(): SR5ItemData {\n        return this.data.data;\n    }\n\n    isAreaOfEffect(): boolean {\n        // TODO figure out how to detect explosive ammo\n        return this.isGrenade() || (this.isSpell() && this.data.data.range === 'los_a'); //|| this.hasExplosiveAmmo();\n    }\n\n    isArmor(): boolean {\n        return this.data.type === 'armor';\n    }\n\n    hasArmorBase(): boolean {\n        return this.hasArmor() && !this.data.data.armor?.mod;\n    }\n\n    hasArmorAccessory(): boolean {\n        return this.hasArmor() && (this.data.data.armor?.mod ?? false);\n    }\n\n    hasArmor(): boolean {\n        return this.getArmorValue() > 0;\n    }\n\n    isGrenade(): boolean {\n        return this.isThrownWeapon() && (this.data.data.thrown?.blast.radius ?? 0) > 0;\n    }\n\n    isThrownWeapon(): boolean {\n        return this.isWeapon() && this.data.data.category === 'thrown';\n    }\n\n    isWeapon(): boolean {\n        return this.data.type === 'weapon';\n    }\n\n    isCyberware(): boolean {\n        return this.data.type === 'cyberware';\n    }\n\n    isCombatSpell(): boolean {\n        return this.isSpell() && this.data.data.category === 'combat';\n    }\n\n    isRangedWeapon(): boolean {\n        return this.isWeapon() && this.data.data.category === 'range';\n    }\n\n    isSpell(): boolean {\n        return this.data.type === 'spell';\n    }\n\n    isComplexForm(): boolean {\n        return this.data.type === 'complex_form';\n    }\n\n    isMeleeWeapon(): boolean {\n        return this.data.type === 'weapon' && this.data.data.category === 'melee';\n    }\n\n    isDevice(): boolean {\n        return this.data.type === 'device';\n    }\n\n    isEquipped(): boolean {\n        return this.data.data.technology?.equipped || false;\n    }\n\n    isCyberdeck(): boolean {\n        return this.isDevice() && this.data.data.category === 'cyberdeck';\n    }\n\n    getId(): string {\n        return this.data._id;\n    }\n\n    getBookSource(): string {\n        return this.data.data.description.source;\n    }\n\n    getConditionMonitor(): ConditionData {\n        return this.data.data.technology?.condition_monitor ?? { value: 0, max: 0, label: '' };\n    }\n\n    getRating(): number {\n        return this.data.data.technology?.rating || 0;\n    }\n\n    getArmorValue(): number {\n        return this.data.data?.armor?.value ?? 0;\n    }\n\n    getArmorElements(): { [key: string]: number } {\n        // TODO clean this up\n        const { fire, electricity, cold, acid } = this.data.data.armor || {};\n        return { fire: fire ?? 0, electricity: electricity ?? 0, cold: cold ?? 0, acid: acid ?? 0 };\n    }\n\n    getName(): string {\n        return this.data.name;\n    }\n\n    getEssenceLoss(): number {\n        return this.data.data?.essence ?? 0;\n    }\n\n    getAmmo() {\n        return this.data.data.ammo;\n    }\n\n    getASDF() {\n        if (!this.isDevice()) return undefined;\n\n        // matrix attributes are set up as an object\n        const matrix = {\n            attack: {\n                value: 0,\n                device_att: '',\n            },\n            sleaze: {\n                value: 0,\n                device_att: '',\n            },\n            data_processing: {\n                value: this.getRating(),\n                device_att: '',\n            },\n            firewall: {\n                value: this.getRating(),\n                device_att: '',\n            },\n        };\n\n        if (this.isCyberdeck()) {\n            /**\n             * {\n             *     attN: {\n             *         value: number,\n             *         att: string (the ASDF attribute)\n             *     }\n             * }\n             */\n            const atts: { [key: string]: { value: number; att: string } } | undefined = this.data.data.atts;\n            if (atts) {\n                for (let [key, att] of Object.entries(atts)) {\n                    matrix[att.att].value = att.value;\n                    matrix[att.att].device_att = key;\n                }\n            }\n        }\n\n        return matrix;\n    }\n\n    getQuantity(): number | undefined {\n        return this.data.data?.technology?.quantity || 1;\n    }\n\n    getActionDicePoolMod(): number | undefined {\n        return this.data.data.action?.mod;\n    }\n\n    getLimitAttribute(): string | undefined {\n        return this.data.data.action?.limit?.attribute;\n    }\n\n    getActionSkill(): string | undefined {\n        return this.data.data.action?.skill;\n    }\n\n    getActionAttribute(): string | undefined {\n        return this.data.data.action?.attribute;\n    }\n\n    getActionAttribute2(): string | undefined {\n        return this.data.data.action?.attribute2;\n    }\n\n    getActionLimit(): number | undefined {\n        return this.data.data.action?.limit?.value;\n    }\n\n    getModifierList(): ModList<number> {\n        return this.data.data.action?.dice_pool_mod || [];\n    }\n\n    getActionSpecialization(): string | undefined {\n        if (this.data.data.action?.spec) return 'SR5.Specialization';\n        return undefined;\n    }\n\n    getDrain(): number {\n        return this.data.data.drain || 0;\n    }\n\n    getFade(): number {\n        return this.data.data.fade || 0;\n    }\n\n    getRecoilCompensation(): number {\n        if (!this.isRangedWeapon()) return 0;\n        const base = this.data.data?.range?.rc.value ?? '0';\n        return Number(base);\n    }\n\n    getReach(): number {\n        if (this.isMeleeWeapon()) {\n            return this.data.data.melee?.reach ?? 0;\n        }\n        return 0;\n    }\n\n    hasDefenseTest(): boolean {\n        return this.data.data.action?.opposed?.type === 'defense';\n    }\n}\n","import { Helpers } from '../helpers';\nimport { SR5Item } from './SR5Item';\n\n/**\n * Extend the basic ItemSheet with some very simple modifications\n */\nexport class SR5ItemSheet extends ItemSheet {\n    item: SR5Item;\n    private _shownDesc: any[];\n    private _scroll: string;\n    constructor(...args) {\n        super(...args);\n        this._shownDesc = [];\n    }\n\n    getEmbeddedItems() {\n        return this.item.items || [];\n    }\n\n    /**\n     * Extend and override the default options used by the Simple Item Sheet\n     * @returns {Object}\n     */\n    static get defaultOptions() {\n        return mergeObject(super.defaultOptions, {\n            classes: ['sr5', 'sheet', 'item'],\n            width: 650,\n            height: 450,\n            tabs: [{ navSelector: '.tabs', contentSelector: '.sheetbody' }],\n        });\n    }\n\n    get template() {\n        const path = 'systems/shadowrun5e/dist/templates/item/';\n        return `${path}${this.item.data.type}.html`;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Prepare data for rendering the Item sheet\n     * The prepared data object contains both the actor data as well as additional sheet options\n     */\n    getData() {\n        const data = super.getData();\n        const itemData = data.data;\n\n        if (itemData.action) {\n            try {\n                const { action } = itemData;\n                if (action.mod === 0) delete action.mod;\n                if (action.limit === 0) delete action.limit;\n                if (action.damage) {\n                    if (action.damage.mod === 0) delete action.damage.mod;\n                    if (action.damage.ap.mod === 0) delete action.damage.ap.mod;\n                }\n                if (action.limit) {\n                    if (action.limit.mod === 0) delete action.limit.mod;\n                }\n            } catch (e) {\n                console.error(e);\n            }\n        }\n\n        if (itemData.technology) {\n            try {\n                const tech = itemData.technology;\n                if (tech.rating === 0) delete tech.rating;\n                if (tech.quantity === 0) delete tech.quantity;\n                if (tech.cost === 0) delete tech.cost;\n            } catch (e) {\n                console.log(e);\n            }\n        }\n\n        data['config'] = CONFIG.SR5;\n        const items = this.getEmbeddedItems();\n        const [ammunition, weaponMods, armorMods] = items.reduce(\n            (parts: [ItemData[], ItemData[], ItemData[]], item: SR5Item) => {\n                if (item.type === 'ammo') parts[0].push(item.data);\n                if (item.type === 'modification' && item.data.data.type === 'weapon') parts[1].push(item.data);\n                if (item.type === 'modification' && item.data.data.type === 'armor') parts[2].push(item.data);\n                return parts;\n            },\n            [[], [], []],\n        );\n        data['ammunition'] = ammunition;\n        data['weaponMods'] = weaponMods;\n        data['armorMods'] = armorMods;\n        // TODO set to the proper boolean for if the source PDF can be accessed\n        // I'm thinking maybe check for the mod being installed?\n        data['hasSourcePdfAvailable'] = true;\n\n        return data;\n    }\n\n    /* -------------------------------------------- */\n\n    /**\n     * Activate event listeners using the prepared sheet HTML\n     * @param html -  The prepared HTML object ready to be rendered into the DOM\n     */\n    activateListeners(html) {\n        super.activateListeners(html);\n        if (this.item.type === 'weapon') {\n            this.form.ondragover = (event) => this._onDragOver(event);\n            this.form.ondrop = (event) => this._onDrop(event);\n        }\n        html.find('.add-new-ammo').click(this._onAddNewAmmo.bind(this));\n        html.find('.ammo-equip').click(this._onAmmoEquip.bind(this));\n        html.find('.ammo-delete').click(this._onAmmoRemove.bind(this));\n        html.find('.ammo-reload').click(this._onAmmoReload.bind(this));\n\n        html.find('.edit-item').click(this._onEditItem.bind(this));\n\n        html.find('.add-new-mod').click(this._onAddWeaponMod.bind(this));\n        html.find('.mod-equip').click(this._onWeaponModEquip.bind(this));\n        html.find('.mod-delete').click(this._onWeaponModRemove.bind(this));\n\n        html.find('.add-new-license').click(this._onAddLicense.bind(this));\n        html.find('.license-delete').on('click', this._onRemoveLicense.bind(this));\n\n        html.find('.open-source-pdf').on('click', this._onOpenSourcePdf.bind(this));\n\n        html.find('.has-desc').click((event) => {\n            event.preventDefault();\n            const item = $(event.currentTarget).parents('.list-item');\n            const iid = $(item).data().item;\n            const field = item.next();\n            field.toggle();\n            if (iid) {\n                if (field.is(':visible')) this._shownDesc.push(iid);\n                else this._shownDesc = this._shownDesc.filter((val) => val !== iid);\n            }\n        });\n\n        html.find('.hidden').hide();\n    }\n\n    _onDragOver(event) {\n        event.preventDefault();\n        return false;\n    }\n\n    async _onDrop(event) {\n        event.preventDefault();\n        event.stopPropagation();\n        let data;\n        try {\n            data = JSON.parse(event.dataTransfer.getData('text/plain'));\n            if (data.type !== 'Item') {\n                console.log('Shadowrun5e | Can only drop Items');\n            }\n        } catch (err) {\n            console.log('Shadowrun5e | drop error');\n        }\n        let item;\n        // Case 1 - Data explicitly provided\n        if (data.data) {\n            // TODO test\n            if (this.item.isOwned && data.actorId === this.item.actor?._id && data.data._id === this.item._id) {\n                console.log('Shadowrun5e | Cant drop item on itself');\n                // @ts-ignore\n                ui.notifications.error('Are you trying to break the game??');\n            }\n            item = data;\n        } else if (data.pack) {\n            console.log(data);\n            // Case 2 - From a Compendium Pack\n            // TODO test\n            item = await this._getItemFromCollection(data.pack, data.id);\n        } else {\n            // Case 3 - From a World Entity\n            item = game.items.get(data.id);\n        }\n\n        this.item.createOwnedItem(item.data);\n    }\n\n    _getItemFromCollection(collection, itemId) {\n        const pack = game.packs.find((p) => p.collection === collection);\n        return pack.getEntity(itemId);\n    }\n\n    _eventId(event) {\n        event.preventDefault();\n        return event.currentTarget.closest('.list-item').dataset.itemId;\n    }\n\n    async _onOpenSourcePdf(event) {\n        event.preventDefault();\n        await this.item.openPdfSource();\n    }\n\n    async _onEditItem(event) {\n        const item = this.item.getOwnedItem(this._eventId(event));\n        if (item) {\n            item.sheet.render(true);\n        }\n    }\n\n    async _onAddLicense(event) {\n        event.preventDefault();\n        this.item.addNewLicense();\n    }\n\n    async _onRemoveLicense(event) {\n        event.preventDefault();\n        const index = event.currentTarget.dataset.index;\n        if (index >= 0) this.item.removeLicense(index);\n    }\n\n    async _onWeaponModRemove(event) {\n        this.item.deleteOwnedItem(this._eventId(event));\n    }\n\n    async _onWeaponModEquip(event) {\n        this.item.equipWeaponMod(this._eventId(event));\n    }\n\n    async _onAddWeaponMod(event) {\n        event.preventDefault();\n        const type = 'modification';\n        const itemData = {\n            name: `New ${Helpers.label(type)}`,\n            type: type,\n            data: duplicate(game.system.model.Item.modification),\n        };\n        itemData.data.type = 'weapon';\n        // @ts-ignore\n        const item = Item.createOwned(itemData, this.item);\n        this.item.createOwnedItem(item.data);\n    }\n\n    async _onAmmoReload(event) {\n        event.preventDefault();\n        this.item.reloadAmmo();\n    }\n\n    async _onAmmoRemove(event) {\n        this.item.deleteOwnedItem(this._eventId(event));\n    }\n\n    async _onAmmoEquip(event) {\n        this.item.equipAmmo(this._eventId(event));\n    }\n\n    _onAddNewAmmo(event) {\n        event.preventDefault();\n        const type = 'ammo';\n        const itemData = {\n            name: `New ${Helpers.label(type)}`,\n            type: type,\n            data: duplicate(game.system.model.Item.ammo),\n        };\n        // @ts-ignore\n        const item = Item.createOwned(itemData, this.item);\n        this.item.createOwnedItem(item.data);\n    }\n\n    /**\n     * @private\n     */\n    _findActiveList() {\n        return $(this.element).find('.tab.active .scroll-area');\n    }\n\n    /** This is needed to circumvent Application.close setting closed state early, due to it's async animation\n     * - The length of the closing animation can't be longer then any await time in the closing cycle\n     * - FormApplication._onSubmit will otherwise set ._state to RENDERED even if the Application window has closed already\n     * - Subsequent render calls then will show the window again, due to it's state\n     *\n     * @private\n     */\n    private fixStaleRenderedState() {\n        if (this._state === Application.RENDER_STATES.RENDERED && ui.windows[this.appId] === undefined) {\n            console.warn(`SR5ItemSheet app for ${this.entity.name} is set as RENDERED but has no window registered. Fixing app internal render state. This is a known bug.`);\n            // Hotfixing instead of this.close() since FormApplication.close() expects form elements, which don't exist anymore.\n            this._state = Application.RENDER_STATES.CLOSED;\n        }\n    }\n\n    /**\n     * @private\n     */\n    async _render(force = false, options = {}) {\n        // NOTE: This is for a timing bug. See function doc for code removal. Good luck, there be dragons here. - taM\n        this.fixStaleRenderedState();\n\n        this._saveScrollPositions();\n        await super._render(force, options);\n        this._restoreScrollPositions();\n    }\n\n    /**\n     * @private\n     */\n    _restoreScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length && this._scroll != null) {\n            activeList.prop('scrollTop', this._scroll);\n        }\n    }\n\n    /**\n     * @private\n     */\n    _saveScrollPositions() {\n        const activeList = this._findActiveList();\n        if (activeList.length) {\n            this._scroll = activeList.prop('scrollTop');\n        }\n    }\n}\n","/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {Object} item     The item data\n * @param {number} slot     The hotbar slot to use\n * @returns {Promise}\n */\nexport async function createItemMacro(item, slot) {\n    const command = `game.shadowrun5e.rollItemMacro(\"${item.name}\");`;\n    let macro = game.macros.entities.find((m) => m.name === item.name);\n    if (!macro) {\n        macro = (await Macro.create(\n            {\n                name: item.name,\n                type: 'script',\n                img: item.img,\n                command: command,\n                flags: { 'shadowrun5e.itemMacro': true },\n            },\n            { displaySheet: false },\n        )) as Macro;\n    }\n    if (macro) game.user.assignHotbarMacro(macro, slot);\n}\n\n/**\n * Create a Macro from an Item drop.\n * Get an existing item macro if one exists, otherwise create a new one.\n * @param {string} itemName\n * @return {Promise}\n */\nexport function rollItemMacro(itemName) {\n    const speaker = ChatMessage.getSpeaker();\n    let actor;\n    if (speaker.token) actor = game.actors.tokens[speaker.token];\n    if (!actor) actor = game.actors.get(speaker.actor);\n    const item = actor ? actor.items.find((i) => i.name === itemName) : null;\n    if (!item) {\n        // @ts-ignore\n        return ui.notifications.warn(`Your controlled Actor does not have an item named ${itemName}`);\n    }\n\n    return item.postCard();\n}","import { HandlebarManager } from './handlebars/HandlebarManager';\nimport {HooksManager} from \"./hooks\";\n\n/* -------------------------------------------- */\n/*  Foundry VTT Initialization                  */\n/* -------------------------------------------- */\n\n\nHooksManager.registerHooks();\nHandlebarManager.registerHelpers();","import { VersionMigration } from './VersionMigration';\nimport { LegacyMigration } from './versions/LegacyMigration';\nimport { Version0_6_5 } from './versions/Version0_6_5';\nimport { Version0_6_10 } from './versions/Version0_6_10';\nimport {Version0_7_2} from \"./versions/Version0_7_2\";\n\ntype VersionDefinition = {\n    versionNumber: string;\n    migration: VersionMigration;\n};\nexport class Migrator {\n    // Map of all version migrations to their target version numbers.\n    private static readonly s_Versions: VersionDefinition[] = [\n        { versionNumber: LegacyMigration.TargetVersion, migration: new LegacyMigration() },\n        { versionNumber: Version0_6_5.TargetVersion, migration: new Version0_6_5() },\n        { versionNumber: Version0_6_10.TargetVersion, migration: new Version0_6_10() },\n        { versionNumber: Version0_7_2.TargetVersion, migration: new Version0_7_2() },\n    ];\n\n    //TODO: Call on Init()\n    public static async BeginMigration() {\n        let currentVersion = game.settings.get(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION);\n        if (currentVersion === undefined || currentVersion === null) {\n            currentVersion = VersionMigration.NO_VERSION;\n        }\n\n        const migrations = Migrator.s_Versions.filter(({ versionNumber }) => {\n            // if versionNUmber is greater than currentVersion, we need to apply this migration\n            return this.compareVersion(versionNumber, currentVersion) === 1;\n        });\n\n        // No migrations are required, exit.\n        if (migrations.length === 0) {\n            return;\n        }\n\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.WarningTitle');\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.WarningHeader');\n        const localizedWarningRequired = game.i18n.localize('SR5.MIGRATION.WarningRequired');\n        const localizedWarningDescription = game.i18n.localize('SR5.MIGRATION.WarningDescription');\n        const localizedWarningBackup = game.i18n.localize('SR5.MIGRATION.WarningBackup');\n        const localizedWarningBegin = game.i18n.localize('SR5.MIGRATION.BeginMigration');\n\n        const d = new Dialog({\n            title: localizedWarningTitle,\n            content:\n                `<h2 style=\"color: red; text-align: center\">${localizedWarningHeader}</h2>` +\n                `<p style=\"text-align: center\"><i>${localizedWarningRequired}</i></p>` +\n                `<p>${localizedWarningDescription}</p>` +\n                `<h3 style=\"color: red\">${localizedWarningBackup}</h3>`,\n            buttons: {\n                ok: {\n                    label: localizedWarningBegin,\n                    callback: () => this.migrate(migrations),\n                },\n            },\n            default: 'ok',\n        });\n        d.render(true);\n    }\n\n    private static async migrate(migrations: VersionDefinition[]) {\n        // we want to apply migrations in ascending order until we're up to the latest\n        migrations.sort((a, b) => {\n            return this.compareVersion(a.versionNumber, b.versionNumber);\n        });\n\n        await this.migrateWorld(game, migrations);\n        await this.migrateCompendium(game, migrations);\n\n        const localizedWarningTitle = game.i18n.localize('SR5.MIGRATION.SuccessTitle');\n        const localizedWarningHeader = game.i18n.localize('SR5.MIGRATION.SuccessHeader');\n        const localizedSuccessDescription = game.i18n.localize('SR5.MIGRATION.SuccessDescription');\n        const localizedSuccessPacksInfo = game.i18n.localize('SR5.MIGRATION.SuccessPacksInfo');\n        const localizedSuccessConfirm = game.i18n.localize('SR5.MIGRATION.SuccessConfirm');\n        const packsDialog = new Dialog({\n            title: localizedWarningTitle,\n            content:\n                `<h2 style=\"text-align: center; color: green\">${localizedWarningHeader}</h2>` +\n                `<p>${localizedSuccessDescription}</p>` +\n                `<p style=\"text-align: center\"><i>${localizedSuccessPacksInfo}</i></p>`,\n            buttons: {\n                ok: {\n                    icon: '<i class=\"fas fa-check\"></i>',\n                    label: localizedSuccessConfirm,\n                },\n            },\n            default: 'ok',\n        });\n        packsDialog.render(true);\n    }\n\n    /**\n     * Migrate all world objects\n     * @param game\n     * @param migrations\n     */\n    private static async migrateWorld(game: Game, migrations: VersionDefinition[]) {\n        // Run the migrations in order\n        for (const { migration } of migrations) {\n            await migration.Migrate(game);\n        }\n    }\n\n    /**\n     * Iterate over all world compendium packs\n     * @param game Game that will be migrated\n     * @param migrations Instances of the version migration\n     */\n    private static async migrateCompendium(game: Game, migrations: VersionDefinition[]) {\n        // Migrate World Compendium Packs\n        const packs = game.packs.filter((pack) => pack.metadata.package === 'world' && ['Actor', 'Item', 'Scene'].includes(pack.metadata.entity));\n\n        // Run the migrations in order on each pack.\n        for (const pack of packs) {\n            for (const { migration } of migrations) {\n                await migration.MigrateCompendiumPack(pack);\n            }\n        }\n    }\n\n    // found at: https://helloacm.com/the-javascript-function-to-compare-version-number-strings/\n    // updated for typescript\n    /**\n     * compare two version numbers, returns 1 if v1 > v2, -1 if v1 < v2, 0 if equal\n     * @param v1\n     * @param v2\n     */\n    public static compareVersion(v1: string, v2: string) {\n        const s1 = v1.split('.').map((s) => parseInt(s, 10));\n        const s2 = v2.split('.').map((s) => parseInt(s, 10));\n        const k = Math.min(v1.length, v2.length);\n        for (let i = 0; i < k; ++i) {\n            if (s1[i] > s2[i]) return 1;\n            if (s1[i] < s2[i]) return -1;\n        }\n        return v1.length === v2.length ? 0 : v1.length < v2.length ? -1 : 1;\n    }\n}\n","import { SR5Actor } from '../actor/SR5Actor';\n\n/**\n * Converts a game's data model from source version to a target version.\n * Extending classes are only required to handle items, actors, and scenes,\n *  other methods are implementable purely for convenience and atomicity.\n */\nexport abstract class VersionMigration {\n    static readonly MODULE_NAME = 'shadowrun5e';\n    static readonly KEY_DATA_VERSION = 'systemMigrationVersion';\n    static readonly NO_VERSION = '0';\n\n    private m_Abort: boolean = false;\n    private m_AbortReason: string;\n\n    /**\n     * The allowed version this migrator should be able to operate on.\n     */\n    public abstract get SourceVersion(): string;\n    /**\n     * The resulting version this migrator will produce.\n     */\n    public abstract get TargetVersion(): string;\n\n    public get SourceVersionFriendlyName(): string {\n        return `v${this.SourceVersion}`;\n    }\n    public get TargetVersionFriendlyName(): string {\n        return `v${this.TargetVersion}`;\n    }\n\n    /**\n     * Flag the migration to be aborted.\n     * @param reason The reason that the migration must be aborted, to be displayed\n     *  to the user and returned from the migration call.\n     */\n    protected abort(reason: string): void {\n        this.m_Abort = true;\n        this.m_AbortReason = reason;\n        // @ts-ignore\n        ui.notifications.error(`Data migration has been aborted: ${reason}`, { permanent: true });\n    }\n\n    /**\n     * Begin migration for the specified game.\n     * @param game The world that should be migrated.\n     */\n    public async Migrate(game: Game) {\n        // @ts-ignore TODO Unignore when Foundry Types updates\n        ui.notifications.info(`Beginning Shadowrun system migration from version ${this.SourceVersionFriendlyName} to ${this.TargetVersionFriendlyName}.`);\n        // @ts-ignore TODO Unignore when Foundry Types updates\n        ui.notifications.warn(`Please do not close your game or shutdown FoundryVTT.`, {\n            permanent: true,\n        });\n\n        // Map of entities to update, store until later to reduce chance of partial updates\n        // which may result in impossible game states.\n        const entityUpdates: Map<Entity, EntityUpdate> = new Map<Entity, EntityUpdate>();\n\n        // Migrate World Items\n        await this.PreMigrateItemData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateItems(game, entityUpdates);\n        await this.PostMigrateItemData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Migrate World Actors\n        await this.PreMigrateActorData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateActors(game, entityUpdates);\n        await this.PostMigrateActorData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Migrate Actor Tokens\n        await this.PreMigrateSceneData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n        await this.IterateScenes(game, entityUpdates);\n        await this.PostMigrateSceneData(game, entityUpdates);\n        if (this.m_Abort) {\n            return Promise.reject(this.m_AbortReason);\n        }\n\n        // Apply the updates, this should *always* work, now that parsing is complete.\n        await this.Apply(entityUpdates);\n\n        await game.settings.set(VersionMigration.MODULE_NAME, VersionMigration.KEY_DATA_VERSION, this.TargetVersion);\n        // @ts-ignore TODO Unignore when Foundry Types updates\n        ui.notifications.info(`Shadowrun system migration successfully migrated to version ${this.TargetVersion}.`, { permanent: true });\n    }\n\n    /**\n     * Applies the specified mapping of entities, iteratively updating each.\n     * @param entityUpdates A mapping of entity updateData pairs.\n     */\n    protected async Apply(entityUpdates: Map<Entity, EntityUpdate>) {\n        for (const [entity, { updateData, embeddedItems }] of entityUpdates) {\n            if (embeddedItems !== null) {\n                const actor = entity as SR5Actor;\n                await actor.updateOwnedItem(embeddedItems);\n            }\n            await entity.update(updateData, { enforceTypes: false });\n        }\n    }\n\n    /**\n     * Iterate through all scenes and migrate each if needed.\n     * @param game\n     * @param entityUpdates\n     */\n    protected async IterateScenes(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\n        for (const scene of game.scenes.entities) {\n            try {\n                if (!(await this.ShouldMigrateSceneData(scene))) {\n                    continue;\n                }\n\n                if (scene._id === 'MAwSFhlXRipixOWw') {\n                    console.log('Scene Pre-Update');\n                    console.log(scene);\n                }\n\n                console.log(`Migrating Scene entity ${scene.name}`);\n                const updateData = await this.MigrateSceneData(duplicate(scene.data));\n\n                let hasTokenUpdates = false;\n                updateData.tokens = await Promise.all(\n                    // @ts-ignore\n                    scene.data.tokens.map(async (token) => {\n                        if (isObjectEmpty(token.actorData)) {\n                            return token;\n                        }\n\n                        let tokenDataUpdate = await this.MigrateActorData(token.actorData);\n                        if (!isObjectEmpty(tokenDataUpdate)) {\n                            hasTokenUpdates = true;\n                            tokenDataUpdate['_id'] = token._id;\n\n                            const newToken = duplicate(token);\n                            newToken.actorData = await mergeObject(token.actorData, tokenDataUpdate, {\n                                enforceTypes: false,\n                                inplace: false,\n                            });\n                            console.log(newToken);\n                            return newToken;\n                        } else {\n                            return token;\n                        }\n                    }),\n                );\n                if (scene._id === 'MAwSFhlXRipixOWw') {\n                    console.log('Scene Pre-Update');\n                    console.log(scene);\n                }\n\n                if (isObjectEmpty(updateData)) {\n                    continue;\n                }\n\n                expandObject(updateData);\n                entityUpdates.set(scene, {\n                    updateData,\n                    embeddedItems: null,\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n    /**\n     * Iterate through all items and migrate each if needed.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async IterateItems(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\n        for (const item of game.items.entities) {\n            try {\n                if (!(await this.ShouldMigrateItemData(item.data))) {\n                    continue;\n                }\n\n                console.log(`Migrating Item: ${item.name}`);\n                const updateData = await this.MigrateItemData(item.data);\n\n                if (isObjectEmpty(updateData)) {\n                    continue;\n                }\n\n                expandObject(updateData);\n                entityUpdates.set(item, {\n                    updateData,\n                    embeddedItems: null,\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n    /**\n     * Iterate through all actors and migrate each if needed.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async IterateActors(game: Game, entityUpdates: Map<Entity, EntityUpdate>) {\n        for (const actor of game.actors.entities) {\n            try {\n                if (!(await this.ShouldMigrateActorData(actor.data))) {\n                    continue;\n                }\n\n                console.log(`Migrating Actor ${actor.name}`);\n                console.log(actor);\n                const updateData = await this.MigrateActorData(duplicate(actor.data));\n                console.log(updateData);\n                let items = [];\n                if (updateData.items) {\n                    items = updateData.items;\n                    delete updateData.items;\n                }\n\n                expandObject(updateData);\n\n                entityUpdates.set(actor, {\n                    updateData,\n                    embeddedItems: items,\n                });\n            } catch (error) {\n                console.error(error);\n                return Promise.reject(error);\n            }\n        }\n    }\n\n    /**\n     * Iterate over an actor's items, updating those that need updating.\n     * @param actorData The actor to iterate over\n     * @param updateData The existing update data to merge into\n     */\n    protected async IterateActorItems(actorData: ActorData, updateData) {\n        let hasItemUpdates = false;\n        // @ts-ignore\n        if (actorData.items !== undefined) {\n            const items = await Promise.all(\n                // @ts-ignore\n                actorData.items.map(async (item) => {\n                    let itemUpdate = await this.MigrateItemData(item);\n\n                    if (!isObjectEmpty(itemUpdate)) {\n                        hasItemUpdates = true;\n                        itemUpdate['_id'] = item._id;\n                        return await mergeObject(item, itemUpdate, {\n                            enforceTypes: false,\n                            inplace: false,\n                        });\n                    } else {\n                        return item;\n                    }\n                }),\n            );\n            if (hasItemUpdates) {\n                updateData.items = items;\n            }\n        }\n\n        return updateData;\n    }\n\n    /**\n     * Check if a scene requires updates.\n     * @param scene The scene to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified scene's data.\n     * @param scene The scene to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateSceneData(scene: any): Promise<any> {\n        return {};\n    }\n    /**\n     * Do something right before scene data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async PreMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n    /**\n     * Do something right before scene data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async PostMigrateSceneData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n\n    /**\n     * Check if an item requires updates.\n     * @param item The item to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateItemData(item: EntityData): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified item's data.\n     * @param item The item to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateItemData(item: EntityData): Promise<any> {\n        return {};\n    }\n    /**\n     * Do something right before item data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async PreMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n    /**\n     * Do something right before item data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async PostMigrateItemData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n\n    /**\n     * Check if an actor requires updates.\n     * @param actor The actor to check.\n     * @return A promise that resolves true or false.\n     */\n    protected async ShouldMigrateActorData(actor: ActorData): Promise<boolean> {\n        return false;\n    }\n    /**\n     * Migrate the specified actor's data.\n     * @param actor The actor to migrate.\n     * @return A promise that resolves with the update data.\n     */\n    protected async MigrateActorData(actor: ActorData): Promise<any> {\n        return {};\n    }\n    /**\n     * Do something right before actor data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async PreMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n    /**\n     * Do something right after actor data is migrated.\n     * @param game The game to be updated.\n     * @param entityUpdates The current map of entity updates.\n     */\n    protected async PostMigrateActorData(game: Game, entityUpdates: Map<Entity, EntityUpdate>): Promise<void> {}\n\n    /**\n     * Migrate a compendium pack\n     * @param pack\n     */\n    public async MigrateCompendiumPack(pack: Compendium) {\n        const entity = pack.metadata.entity;\n        if (!['Actor', 'Item', 'Scene'].includes(entity)) return;\n\n        // Begin by requesting server-side data model migration and get the migrated content\n        await pack.migrate({});\n        const content = await pack.getContent();\n\n        // Iterate over compendium entries - applying fine-tuned migration functions\n        for (let ent of content) {\n            try {\n                let updateData: any = null;\n                if (entity === 'Item') {\n                    updateData = await this.MigrateItemData(ent.data);\n\n                    if (isObjectEmpty(updateData)) {\n                        continue;\n                    }\n\n                    expandObject(updateData);\n                    updateData['_id'] = ent._id;\n                    await pack.updateEntity(updateData);\n                    // TODO: Uncomment when foundry allows embeddeds to be updated in packs\n                    // } else if (entity === 'Actor') {\n                    //     updateData = await this.MigrateActorData(ent.data);\n                    //\n                    //     if (isObjectEmpty(updateData)) {\n                    //         continue;\n                    //     }\n                    //\n                    //     updateData['_id'] = ent._id;\n                    //     await pack.updateEntity(updateData);\n                } else if (entity === 'Scene') {\n                    updateData = await this.MigrateSceneData(ent.data);\n\n                    if (isObjectEmpty(updateData)) {\n                        continue;\n                    }\n\n                    expandObject(updateData);\n                    updateData['_id'] = ent._id;\n                    await pack.updateEntity(updateData);\n                }\n            } catch (err) {\n                console.error(err);\n            }\n        }\n        console.log(`Migrated all ${entity} entities from Compendium ${pack.collection}`);\n    }\n}\n\ntype EntityUpdate = {\n    updateData: any;\n    embeddedItems: null | any[];\n};\n","import { VersionMigration } from '../VersionMigration';\n\n/**\n * Migrates the data model for Legacy migrations prior to 0.6.4\n */\nexport class LegacyMigration extends VersionMigration {\n    get SourceVersion(): string {\n        return '0';\n    }\n    get TargetVersion(): string {\n        return LegacyMigration.TargetVersion;\n    }\n    static get TargetVersion(): string {\n        return '0.6.4';\n    }\n\n    protected async MigrateActorData(actorData: ActorData): Promise<any> {\n        let updateData: any = {};\n        LegacyMigration.migrateActorOverflow(actorData, updateData);\n        LegacyMigration.migrateActorSkills(actorData, updateData);\n\n        updateData = await this.IterateActorItems(actorData, updateData);\n\n        return updateData;\n    }\n\n    protected async MigrateItemData(item: EntityData): Promise<any> {\n        const updateData = {};\n        LegacyMigration.migrateDamageTypeAndElement(item, updateData);\n        LegacyMigration.migrateItemsAddActions(item, updateData);\n        LegacyMigration.migrateActorOverflow(item, updateData);\n        LegacyMigration.migrateItemsAddCapacity(item, updateData);\n        LegacyMigration.migrateItemsAmmo(item, updateData);\n        LegacyMigration.migrateItemsConceal(item, updateData);\n        return updateData;\n    }\n\n    protected async MigrateSceneData(scene: any): Promise<any> {\n        return {};\n    }\n\n    protected async ShouldMigrateActorData(actorData: ActorData): Promise<boolean> {\n        return true;\n    }\n\n    protected async ShouldMigrateItemData(item: EntityData): Promise<boolean> {\n        return true;\n    }\n\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        // @ts-ignore\n        return scene.data.tokens?.length > 0;\n    }\n\n    /**\n     * Migrate actor overflow from an integer to an object\n     * - it wasn't even displayed before so we know it is 0\n     * @param actorData\n     * @param updateData\n     */\n    private static migrateActorOverflow(actorData, updateData) {\n        if (getProperty(actorData.data, 'track.physical.overflow') === 0) {\n            updateData['data.track.physical.overflow.value'] = 0;\n            updateData['data.track.physical.overflow.max'] = 0;\n        }\n    }\n\n    /**\n     * Migrate actor skills specializations to be a list instead of string\n     * @param actorData\n     * @param updateData\n     */\n    private static migrateActorSkills(actorData, updateData) {\n        if (!actorData.data?.skills?.active) return;\n        const splitRegex = /[,\\/|.]+/;\n\n        const reducer = (running, [key, val]) => {\n            if (!Array.isArray(val.specs) && val.specs) {\n                running[key] = {\n                    specs: val.specs.split(splitRegex).filter((s) => s !== ''),\n                };\n            }\n            return running;\n        };\n\n        if (actorData.data.skills) {\n            updateData['data.skills.active'] = Object.entries(actorData.data.skills.active).reduce(reducer, {});\n            if (actorData.data.skills.knowledge) {\n                updateData['data.skills.knowledge.street.value'] = Object.entries(actorData.data.skills?.knowledge?.street?.value).reduce(reducer, {});\n                updateData['data.skills.knowledge.professional.value'] = Object.entries(actorData.data.skills?.knowledge?.professional?.value).reduce(reducer, {});\n                updateData['data.skills.knowledge.academic.value'] = Object.entries(actorData.data.skills?.knowledge?.academic?.value).reduce(reducer, {});\n                updateData['data.skills.knowledge.interests.value'] = Object.entries(actorData.data.skills?.knowledge?.interests?.value).reduce(reducer, {});\n            }\n            if (actorData.data.skills.language) {\n                updateData['data.skills.language.value'] = Object.entries(actorData.data.skills?.language?.value).reduce(reducer, {});\n            }\n        }\n    }\n\n    /**\n     *\n     * @param item\n     * @param updateData\n     */\n    private static migrateDamageTypeAndElement(item, updateData) {\n        // console.log('Migrating Damage and Elements');\n        if (item.data.action) {\n            const action = item.data.action;\n            if (typeof action.damage.type === 'string') {\n                updateData['data.action.damage.type.base'] = item.data.action.damage.type;\n            }\n            if (typeof action.damage.element === 'string') {\n                updateData['data.action.damage.element.base'] = item.data.action.damage.element;\n            }\n        }\n    }\n\n    /**\n     * Migrate ammo from ranged weapons only to all weapons\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsAmmo(item, updateData) {\n        // console.log('Migrating Ammo');\n        if (item.type === 'weapon' && item.data.ammo === undefined) {\n            let currentAmmo = { value: 0, max: 0 };\n            if (item.data.category === 'range' && item.data.range && item.data.range.ammo) {\n                // copy over ammo count\n                const oldAmmo = item.data.range.ammo;\n                currentAmmo.value = oldAmmo.value;\n                currentAmmo.max = oldAmmo.max;\n            }\n            updateData['data.ammo'] = {\n                spare_clips: {\n                    value: 0,\n                    max: 0,\n                },\n                current: {\n                    value: currentAmmo.value,\n                    max: currentAmmo.max,\n                },\n            };\n        }\n    }\n\n    /**\n     * Migrate conceal name\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsConceal(item, updateData) {\n        if (item.data.technology?.concealability !== undefined) {\n            updateData['data.technology.conceal'] = {\n                base: item.data.technology.concealability,\n            };\n        }\n    }\n\n    /**\n     * Add capacity to items\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsAddCapacity(item, updateData) {\n        if (['cyberware'].includes(item.type)) {\n            if (item.data.capacity === undefined) {\n                updateData.data.capacity = 0;\n            }\n        }\n    }\n\n    /**\n     * Add actions to needed items\n     * @param item\n     * @param updateData\n     */\n    private static migrateItemsAddActions(item, updateData) {\n        if (['quality', 'cyberware'].includes(item.type)) {\n            if (item.data.action === undefined) {\n                const action = {\n                    type: '',\n                    category: '',\n                    attribute: '',\n                    attribute2: '',\n                    skill: '',\n                    spec: false,\n                    mod: 0,\n                    limit: {\n                        value: 0,\n                        attribute: '',\n                    },\n                    extended: false,\n                    damage: {\n                        type: '',\n                        element: '',\n                        value: 0,\n                        ap: {\n                            value: 0,\n                        },\n                        attribute: '',\n                    },\n                    opposed: {\n                        type: '',\n                        attribute: '',\n                        attribute2: '',\n                        skill: '',\n                        mod: 0,\n                        description: '',\n                    },\n                };\n                if (!updateData.data) updateData.data = {};\n                updateData.data.action = action;\n            }\n        }\n    }\n}\n","import { VersionMigration } from '../VersionMigration';\nimport SR5ActorType = Shadowrun.SR5ActorType;\n\n/**\n * Add default value of willpower to the full_defense_attribute field\n */\nexport class Version0_6_10 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.6.9';\n    }\n    get TargetVersion(): string {\n        return Version0_6_10.TargetVersion;\n    }\n    static get TargetVersion(): string {\n        return '0.6.10';\n    }\n\n    protected async MigrateActorData(actorData: SR5ActorType): Promise<any> {\n        if (actorData.data?.attributes?.edge === undefined) return {};\n        return {\n            data: {\n                attributes: {\n                    edge: {\n                        base: actorData.data.attributes.edge.max,\n                        value: actorData.data.attributes.edge.max,\n                        uses: actorData.data.attributes.edge.value,\n                    },\n                },\n            },\n        };\n    }\n\n    protected async ShouldMigrateActorData(actorData: SR5ActorType): Promise<boolean> {\n        return actorData.data.attributes.edge?.uses === undefined;\n    }\n\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        // @ts-ignore\n        return scene.data.tokens?.length > 0;\n    }\n}\n","import { VersionMigration } from '../VersionMigration';\n\n/**\n * Add default value of willpower to the full_defense_attribute field\n */\nexport class Version0_6_5 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.6.4';\n    }\n    get TargetVersion(): string {\n        return Version0_6_5.TargetVersion;\n    }\n    static get TargetVersion(): string {\n        return '0.6.5';\n    }\n\n    protected async MigrateActorData(actorData: ActorData): Promise<any> {\n        let updateData: any = {};\n        if (updateData.data === undefined) updateData.data = {};\n        updateData.data.full_defense_attribute = 'willpower';\n        return updateData;\n    }\n\n    protected async ShouldMigrateActorData(actorData: any): Promise<boolean> {\n        return actorData.data.full_defense_attribute === undefined;\n    }\n\n    protected async ShouldMigrateSceneData(scene: Scene): Promise<boolean> {\n        // @ts-ignore\n        return scene.data.tokens?.length > 0;\n    }\n}\n","// TODO: How to trigger test migration.\n// TODO: How to test migration results?\n\n\nimport {VersionMigration} from \"../VersionMigration\";\nimport {SR5} from \"../../config\";\nimport SR5ActorBase = Shadowrun.SR5ActorBase;\n\n/** NPC / Grunt feature set\n * - Add npc character data.\n * - Add track disabled feature\n */\nexport class Version0_7_2 extends VersionMigration {\n    get SourceVersion(): string {\n        return '0.7.1';\n    }\n\n    get TargetVersion(): string {\n        return Version0_7_2.TargetVersion;\n    }\n\n    static get TargetVersion(): string {\n        return '0.7.2';\n    }\n\n    static NoNPCDataForCharacter(actorData: SR5ActorBase): boolean {\n        return actorData.type === 'character' && (\n            actorData?.data?.is_npc === undefined ||\n            actorData?.data?.npc === undefined\n        );\n    }\n\n    static UnsupportedMetatype(actorData: SR5ActorBase): boolean {\n        const type = actorData.data.metatype?.toLowerCase() ?? '';\n        return actorData.type === 'character' &&\n            SR5.character.types.hasOwnProperty(type);\n    }\n\n    protected async MigrateActorData(actorData: SR5ActorBase): Promise<any> {\n        const updateData: {\n            data?: object,\n            attributes?: object\n        } = {};\n\n        if (Version0_7_2.UnsupportedMetatype(actorData)) {\n            const type = actorData.data.metatype?.toLowerCase() ?? '';\n            // TODO: What to do with custom metatypes?\n            const metatypeData = {metatype: SR5.character.types.hasOwnProperty(type) ? type : 'human'};\n            updateData.data = {...updateData.data, ...metatypeData};\n        }\n\n        if (Version0_7_2.NoNPCDataForCharacter(actorData)) {\n            updateData.data = updateData.data ? updateData.data : {};\n            const npcData = {\n                is_npc: false,\n                npc: {\n                    is_grunt: false,\n                    professional_rating: 0\n                }\n            }\n            updateData.data = {...updateData.data, ...npcData};\n        }\n\n        return updateData;\n    }\n\n    protected async ShouldMigrateActorData(actorData: SR5ActorBase): Promise<boolean> {\n        return Version0_7_2.UnsupportedMetatype(actorData) || Version0_7_2.NoNPCDataForCharacter(actorData);\n    }\n}","import ModList = Shadowrun.ModList;\nimport ModListEntry = Shadowrun.ModListEntry;\n\nexport class PartsList<TType> {\n    get list(): ModList<TType> {\n        return this._list.slice();\n    }\n\n    get length(): number {\n        return this._list.length;\n    }\n\n    get total(): number {\n        let total = 0;\n        for (const part of this._list) {\n            if (typeof part.value === 'number') {\n                total += part.value;\n            }\n        }\n        return total;\n    }\n\n    getPartValue(name: string): TType | undefined {\n        return this._list.find((part) => part.name === name)?.value;\n    }\n\n    clear(): void {\n        this._list.length = 0;\n    }\n\n    private _list: ModList<TType>;\n\n    constructor(parts?: ModList<TType>) {\n        let actualParts = [] as ModList<TType>;\n        if (parts) {\n            if (Array.isArray(parts)) {\n                actualParts = parts;\n            } else if (typeof parts === 'object') {\n                for (const [name, value] of Object.entries(parts)) {\n                    if (value !== null && value !== undefined) {\n                        // if it's a number, we are dealing with an array as an object\n                        if (!isNaN(Number(name)) && typeof value === 'object') {\n                            actualParts.push({\n                                name: (value as ModListEntry<TType>).name,\n                                value: (value as ModListEntry<TType>).value,\n                            });\n                        } else {\n                            actualParts.push({\n                                name,\n                                value,\n                            } as ModListEntry<TType>);\n                        }\n                    }\n                }\n            }\n        }\n        this._list = actualParts;\n    }\n\n    addPart(name: string, value: TType): void {\n        this._list.push({\n            name,\n            value,\n        });\n    }\n\n    addUniquePart(name: string, value?: TType, overwrite = true): void {\n        const index = this._list.findIndex((part) => part.name === name);\n        if (index > -1) {\n            // if we exist and should've overwrite, return\n            if (!overwrite) return;\n\n            this._list.splice(index, 1);\n            // if we are passed undefined, remove the value\n            if (value === undefined || value === null) return;\n            // recursively go through until we no longer have a part of this name\n            this.addUniquePart(name, value);\n        } else if (value) {\n            this.addPart(name, value);\n        }\n    }\n\n    removePart(name: string): boolean {\n        const index = this._list.findIndex((part) => part.name === name);\n        if (index > -1) {\n            this._list.splice(index, 1);\n            return true;\n        }\n        return false;\n    }\n\n    getMessageOutput() {\n        return this.list;\n    }\n\n    static AddUniquePart<TType>(list: ModList<TType>, name: string, value: TType, overwrite = true): ModList<TType> {\n        const parts = new PartsList(list);\n        parts.addUniquePart(name, value, overwrite);\n        return parts._list;\n    }\n\n    static Total(list: ModList<number>) {\n        const parts = new PartsList(list);\n        return parts.total;\n    }\n}\n","import ModList = Shadowrun.ModList;\nimport RollEvent = Shadowrun.RollEvent;\nimport BaseValuePair = Shadowrun.BaseValuePair;\nimport LabelField = Shadowrun.LabelField;\nimport AttackData = Shadowrun.AttackData;\nimport DamageData = Shadowrun.DamageData;\nimport { Helpers } from '../helpers';\nimport { SR5Actor } from '../actor/SR5Actor';\nimport { SR5Item } from '../item/SR5Item';\nimport { createChatData, TemplateData } from '../chat';\nimport {FLAGS, GLITCH_DIE, SYSTEM_NAME} from '../constants';\nimport { PartsList } from '../parts/PartsList';\n\nexport interface BasicRollProps {\n    name?: string;\n    img?: string;\n    parts?: ModList<number>;\n    limit?: BaseValuePair<number> & LabelField;\n    explodeSixes?: boolean;\n    title?: string;\n    actor?: SR5Actor;\n    item?: SR5Item;\n    attack?: AttackData;\n    incomingAttack?: AttackData;\n    incomingDrain?: LabelField & {\n        value: number;\n    };\n    soak?: DamageData;\n    tests?: {\n        label: string;\n        type: string;\n    }[];\n    description?: object;\n    previewTemplate?: boolean;\n    hideRollMessage?: boolean;\n    rollMode?: keyof typeof CONFIG.Dice.rollModes;\n}\n\nexport interface RollDialogOptions {\n    environmental?: number | boolean;\n    prompt?: boolean;\n}\n\nexport interface AdvancedRollProps extends BasicRollProps {\n    event?: RollEvent;\n    extended?: boolean;\n    wounds?: boolean;\n    after?: (roll: Roll | undefined) => void;\n    dialogOptions?: RollDialogOptions;\n}\n\nexport class ShadowrunRoll extends Roll {\n    templateData: TemplateData | undefined;\n    // add class Roll to the json so dice-so-nice works\n    toJSON(): any {\n        const data = super.toJSON();\n        data.class = 'Roll';\n        return data;\n    }\n\n    get sides(): number[] {\n        //@ts-ignore\n        // 0.7.x foundryVTT\n        if (this.terms) {\n            //@ts-ignore\n            return this.terms[0].results.map(result => result.result);\n        }\n\n        //@ts-ignore\n        // 0.6.x foundryVTT\n        return this.parts[0].rolls.map(roll => roll.roll);\n    }\n\n    count(side: number): number {\n        const results = this.sides;\n        return results.reduce((counted, result) => result === side ? counted + 1 : counted, 0);\n    }\n\n    get hits(): number {\n        return this.total;\n    }\n\n    get pool(): number {\n        //@ts-ignore\n        // 0.7.x foundryVTT\n        if (this.terms) {\n            //@ts-ignore\n            return this.dice[0].number;\n        }\n\n        //@ts-ignore\n        // 0.6.x foundryVTT\n        return this.parts[0].rolls.length;\n    }\n\n    get glitched(): boolean {\n        return this.count(GLITCH_DIE) > Math.floor(this.pool / 2);\n    }\n}\n\nexport class ShadowrunRoller {\n    static itemRoll(event, item: SR5Item, options?: Partial<AdvancedRollProps>): Promise<ShadowrunRoll | undefined> {\n        const parts = item.getRollPartsList();\n        let limit = item.getLimit();\n        let title = item.getRollName();\n\n        const rollData: AdvancedRollProps = {\n            ...options,\n            event: event,\n            dialogOptions: {\n                environmental: true,\n            },\n            parts,\n            actor: item.actor,\n            item,\n            limit,\n            title,\n            name: item.name,\n            img: item.img,\n            previewTemplate: item.hasTemplate,\n        };\n        rollData['attack'] = item.getAttackData(0);\n        rollData['blast'] = item.getBlastData();\n\n        if (item.hasOpposedRoll) {\n            rollData['tests'] = [\n                {\n                    label: item.getOpposedTestName(),\n                    type: 'opposed',\n                },\n            ];\n        }\n        if (item.isMeleeWeapon()) {\n            rollData['reach'] = item.getReach();\n        }\n        if (item.isRangedWeapon()) {\n            rollData['fireMode'] = item.getLastFireMode()?.label;\n            if (rollData.dialogOptions) {\n                rollData.dialogOptions.environmental = item.getLastFireRangeMod().value;\n            }\n        }\n        rollData.description = item.getChatData();\n\n        return ShadowrunRoller.advancedRoll(rollData);\n    }\n\n    static shadowrunFormula({\n        parts: partsProps,\n        limit,\n        explode,\n    }: {\n        parts: ModList<number>;\n        limit?: BaseValuePair<number> & LabelField;\n        explode?: boolean;\n    }): string {\n        const parts = new PartsList(partsProps);\n        const count = parts.total;\n        if (count <= 0) {\n            // @ts-ignore\n            ui.notifications.error(game.i18n.localize('SR5.RollOneDie'));\n            return '0d6cs>=5';\n        }\n        let formula = `${count}d6`;\n        if (explode) {\n            formula += 'x6';\n        }\n        if (limit?.value) {\n            formula += `kh${limit.value}`;\n        }\n        formula += 'cs>=5';\n        return formula;\n    }\n\n    static async basicRoll({\n        parts: partsProps = [],\n        limit,\n        explodeSixes,\n        title,\n        actor,\n        img = actor?.img,\n        name = actor?.name,\n        hideRollMessage,\n        rollMode,\n        ...props\n    }: BasicRollProps): Promise<ShadowrunRoll | undefined> {\n        let roll;\n        const parts = new PartsList(partsProps);\n        if (parts.length) {\n            const formula = this.shadowrunFormula({ parts: parts.list, limit, explode: explodeSixes });\n            if (!formula) return;\n            roll = new ShadowrunRoll(formula);\n            roll.roll();\n\n            if (game.settings.get(SYSTEM_NAME, 'displayDefaultRollCard')) {\n                await roll.toMessage({\n                    speaker: ChatMessage.getSpeaker({ actor: actor }),\n                    flavor: title,\n                    rollMode: rollMode,\n                });\n            }\n        }\n        const token = actor?.token;\n\n        [name, img] = ShadowrunRoller.getPreferedNameAndImageSource(name, img, actor, token);\n\n        const templateData = {\n            actor: actor,\n            header: {\n                name: name || '',\n                img: img || '',\n            },\n            tokenId: token ? `${token.scene._id}.${token.id}` : undefined,\n            rollMode,\n            dice: roll.sides,\n            limit,\n            testName: title,\n            dicePool: roll.pool,\n            parts: parts.list,\n            hits: roll.hits,\n            glitch: roll.glitched,\n            ...props,\n        };\n\n        // In what case would no roll be present? No parts? Why would this reach any logic then?\n        if (roll) {\n            roll.templateData = templateData;\n        }\n\n        if (!hideRollMessage) {\n            const chatData = await createChatData(templateData, roll);\n            ChatMessage.create(chatData, { displaySheet: false }).then((message) => {\n                console.log(message);\n            });\n        }\n        return roll;\n    }\n\n    /**\n     * Prompt a roll for the user\n     */\n    static promptRoll(): Promise<ShadowrunRoll | undefined> {\n        const lastRoll = game.user.getFlag(SYSTEM_NAME, 'lastRollPromptValue') || 0;\n        const parts = [{ name: 'SR5.LastRoll', value: lastRoll }];\n        return ShadowrunRoller.advancedRoll({ parts, title: 'Roll', dialogOptions: { prompt: true } });\n    }\n\n    /**\n     * Start an advanced roll\n     * - Prompts the user for modifiers\n     * @param props\n     */\n    static advancedRoll(props: AdvancedRollProps): Promise<ShadowrunRoll | undefined> {\n        // destructure what we need to use from props\n        // any value pulled out needs to be updated back in props if changed\n        const { title, actor, parts: partsProps = [], limit, extended, wounds = true, after, dialogOptions } = props;\n        const parts = new PartsList(partsProps);\n\n        // remove limits if game settings is set\n        if (!game.settings.get(SYSTEM_NAME, 'applyLimits')) {\n            delete props.limit;\n        }\n\n        // TODO create \"fast roll\" option\n\n        const rollMode = game.settings.get('core', 'rollMode');\n\n        let dialogData = {\n            options: dialogOptions,\n            extended,\n            dice_pool: parts.total,\n            parts: parts.getMessageOutput(),\n            limit: limit?.value,\n            wounds,\n            woundValue: actor?.getWoundModifier(),\n            rollMode,\n            rollModes: CONFIG.Dice.rollModes,\n        };\n        let template = 'systems/shadowrun5e/dist/templates/rolls/roll-dialog.html';\n        let edge = false;\n        let cancel = true;\n\n        const buttons = {\n            roll: {\n                label: game.i18n.localize('SR5.Roll'),\n                icon: '<i class=\"fas fa-dice-six\"></i>',\n                callback: () => (cancel = false),\n            },\n        };\n        if (actor) {\n            buttons['edge'] = {\n                label: `${game.i18n.localize('SR5.PushTheLimit')} (+${actor.getEdge().value})`,\n                icon: '<i class=\"fas fa-bomb\"></i>',\n                callback: () => {\n                    edge = true;\n                    cancel = false;\n                },\n            };\n        }\n\n        return new Promise((resolve) => {\n            renderTemplate(template, dialogData).then((dlg) => {\n                new Dialog({\n                    title: title,\n                    content: dlg,\n                    buttons,\n                    default: 'roll',\n\n                    close: async (html) => {\n                        if (cancel) return;\n                        // get the actual dice_pool from the difference of initial parts and value in the dialog\n\n                        const dicePoolValue = Helpers.parseInputToNumber($(html).find('[name=\"dice_pool\"]').val());\n\n                        if (dialogOptions?.prompt) {\n                            parts.clear();\n                            await game.user.setFlag(SYSTEM_NAME, 'lastRollPromptValue', dicePoolValue);\n                            parts.addUniquePart('SR5.Base', dicePoolValue);\n                        }\n\n                        const limitValue = Helpers.parseInputToNumber($(html).find('[name=\"limit\"]').val());\n\n                        if (limit && limit.value !== limitValue) {\n                            limit.value = limitValue;\n                            limit.base = limitValue;\n                            limit.label = 'SR5.Override';\n                        }\n\n                        const woundValue = Helpers.parseInputToNumber($(html).find('[name=\"wounds\"]').val());\n                        const situationMod = Helpers.parseInputToNumber($(html).find('[name=\"dp_mod\"]').val());\n                        const environmentMod = Helpers.parseInputToNumber($(html).find('[name=\"options.environmental\"]').val());\n\n                        if (wounds && woundValue !== 0) {\n                            parts.addUniquePart('SR5.Wounds', woundValue);\n                            props.wounds = true;\n                        }\n                        if (situationMod) {\n                            parts.addUniquePart('SR5.SituationalModifier', situationMod);\n                        }\n                        if (environmentMod) {\n                            parts.addUniquePart('SR5.EnvironmentModifier', environmentMod);\n                            if (!props.dialogOptions) props.dialogOptions = {};\n                            props.dialogOptions.environmental = true;\n                        }\n\n                        const extendedString = Helpers.parseInputToString($(html).find('[name=\"extended\"]').val());\n                        const extended = extendedString === 'true';\n\n                        if (edge && actor) {\n                            props.explodeSixes = true;\n                            parts.addUniquePart('SR5.PushTheLimit', actor.getEdge().value);\n                            delete props.limit;\n                            // TODO: Edge usage doesn't seem to apply on actor sheet.\n                            await actor.update({\n                                'data.attributes.edge.uses': actor.data.data.attributes.edge.uses - 1,\n                            });\n                        }\n\n                        props.rollMode = Helpers.parseInputToString($(html).find('[name=rollMode]').val());\n\n                        props.parts = parts.list;\n                        const r = this.basicRoll({\n                            ...props,\n                        });\n\n                        if (extended && r) {\n                            const currentExtended = parts.getPartValue('SR5.Extended') ?? 0;\n                            parts.addUniquePart('SR5.Extended', currentExtended - 1);\n                            props.parts = parts.list;\n                            // add a bit of a delay to roll again\n                            setTimeout(() => this.advancedRoll(props), 400);\n                        }\n                        resolve(r);\n                        if (after && r) r.then((roll) => after(roll));\n                    },\n                }).render(true);\n            });\n        });\n    }\n\n    /** Use either the actor or the tokens name and image, depending on system settings.\n     *\n     * However don't change anything if a custom name or image has been given.\n     */\n    static getPreferedNameAndImageSource(name?: string, img?: string, actor?: SR5Actor, token?: Token): [string|undefined, string|undefined] {\n\n        const namedAndImageMatchActor = name === actor?.name && img === actor?.img;\n        const useTokenNameForChatOutput = game.settings.get(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput);\n\n        if (namedAndImageMatchActor && useTokenNameForChatOutput && token) {\n            img = token?.data.img;\n            name = token?.data.name;\n        }\n\n        return [name, img];\n    }\n}\n","// game settings for shadowrun 5e\n\nimport { VersionMigration } from './migrator/VersionMigration';\nimport { FLAGS, SYSTEM_NAME } from './constants';\n\nexport const registerSystemSettings = () => {\n\n    /**\n     * Register diagonal movement rule setting\n     */\n    game.settings.register(SYSTEM_NAME, 'diagonalMovement', {\n        name: 'SETTINGS.DiagonalMovementName',\n        hint: 'SETTINGS.DiagonalMovementDescription',\n        scope: 'world',\n        config: true,\n        type: String,\n        default: '1-2-1',\n        choices: {\n            '1-1-1': 'SETTINGS.IgnoreDiagonal',\n            '1-2-1': 'SETTINGS.EstimateDiagonal',\n        },\n        onChange: (rule) => (canvas.grid.diagonalRule = rule),\n    });\n\n    /**\n     * Default limit behavior\n     */\n    game.settings.register(SYSTEM_NAME, 'applyLimits', {\n        name: 'SETTINGS.ApplyLimitsName',\n        hint: 'SETTINGS.ApplyLimitsDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, 'displayDefaultRollCard', {\n        name: 'SETTINGS.DisplayDefaultRollCardName',\n        hint: 'SETTINGS.DisplayDefaultRollCardDescription',\n        scope: 'user',\n        config: true,\n        type: Boolean,\n        default: false,\n    });\n\n    /**\n     * Track system version upon which a migration was last applied\n     */\n    game.settings.register(SYSTEM_NAME, VersionMigration.KEY_DATA_VERSION, {\n        name: 'System Data Version.',\n        scope: 'world',\n        config: false,\n        type: String,\n        default: '0',\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowGlitchAnimation, {\n        name: 'SETTINGS.ShowGlitchAnimationName',\n        hint: 'SETTINGS.ShowGlitchAnimationDescription',\n        scope: 'user',\n        config: true,\n        type: Boolean,\n        default: true,\n    });\n\n    game.settings.register(SYSTEM_NAME, FLAGS.ShowTokenNameForChatOutput, {\n        name: 'SETTINGS.ShowTokenNameForChatOutputName',\n        hint: 'SETTINGS.ShowTokenNameForChatOutputDescription',\n        scope: 'world',\n        config: true,\n        type: Boolean,\n        default: true\n    });\n};\n","import { SR5Item } from './item/SR5Item';\n\nexport type ShadowrunTemplateData = {\n    t: string;\n    user: User | string;\n    distance: number;\n    x: number;\n    y: number;\n    fillColor: string;\n    direction: number;\n};\n\nexport default // @ts-ignore\nclass Template extends MeasuredTemplate {\n    data: ShadowrunTemplateData;\n    layer: PlaceablesLayer;\n    x: number;\n    y: number;\n    item?: SR5Item;\n    onComplete?: () => void;\n\n    static fromItem(item: SR5Item, onComplete?: () => void): Template | undefined {\n        const templateShape = 'circle';\n\n        const templateData = {\n            t: templateShape,\n            user: game.user._id,\n            direction: 0,\n            x: 0,\n            y: 0,\n            // @ts-ignore\n            fillColor: game.user.color,\n        };\n        const blast = item.getBlastData();\n        templateData['distance'] = blast?.radius;\n        templateData['dropoff'] = blast?.dropoff;\n\n        // @ts-ignore\n        const template = new this(templateData);\n        template.item = item;\n        template.onComplete = onComplete;\n        return template;\n    }\n\n    drawPreview() {\n        const initialLayer = canvas.activeLayer;\n        // @ts-ignore\n        this.draw();\n        // @ts-ignore\n        this.layer.activate();\n        // @ts-ignore\n        this.layer.preview.addChild(this);\n        this.activatePreviewListeners(initialLayer);\n    }\n\n    activatePreviewListeners(initialLayer: CanvasLayer) {\n        const handlers = {};\n        let moveTime = 0;\n\n        // Update placement (mouse-move)\n        handlers['mm'] = (event) => {\n            event.stopPropagation();\n            let now = Date.now(); // Apply a 20ms throttle\n            if (now - moveTime <= 20) return;\n            const center = event.data.getLocalPosition(this.layer);\n            const snapped = canvas.grid.getSnappedPosition(center.x, center.y, 2);\n            this.data.x = snapped.x;\n            this.data.y = snapped.y;\n            // @ts-ignore\n            this.refresh();\n            moveTime = now;\n        };\n\n        // Cancel the workflow (right-click)\n        handlers['rc'] = () => {\n            this.layer.preview.removeChildren();\n            canvas.stage.off('mousemove', handlers['mm']);\n            canvas.stage.off('mousedown', handlers['lc']);\n            canvas.app.view.oncontextmenu = null;\n            canvas.app.view.onwheel = null;\n            initialLayer.activate();\n\n            if (this.onComplete) this.onComplete();\n        };\n\n        // Confirm the workflow (left-click)\n        handlers['lc'] = (event) => {\n            handlers['rc'](event);\n\n            // Confirm final snapped position\n            const destination = canvas.grid.getSnappedPosition(this.x, this.y, 2);\n            this.data.x = destination.x;\n            this.data.y = destination.y;\n\n            // Create the template\n            canvas.scene.createEmbeddedEntity('MeasuredTemplate', this.data);\n        };\n\n        // Rotate the template by 3 degree increments (mouse-wheel)\n        handlers['mw'] = (event) => {\n            if (event.ctrlKey) event.preventDefault(); // Avoid zooming the browser window\n            event.stopPropagation();\n            let delta = canvas.grid.type > CONST.GRID_TYPES.SQUARE ? 30 : 15;\n            let snap = event.shiftKey ? delta : 5;\n            this.data.direction += snap * Math.sign(event.deltaY);\n            // @ts-ignore\n            this.refresh();\n        };\n\n        // Activate listeners\n        canvas.stage.on('mousemove', handlers['mm']);\n        canvas.stage.on('mousedown', handlers['lc']);\n        canvas.app.view.oncontextmenu = handlers['rc'];\n        canvas.app.view.onwheel = handlers['mw'];\n    }\n}\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}