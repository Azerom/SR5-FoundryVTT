{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/module/Constants.ts","src/module/Main.ts","src/module/Setup.ts","src/module/actor/SR5ActorProxy.ts","src/module/actor/SR5BaseActor.ts","src/module/actor/SR5Grunt.ts","src/module/actor/SR5Runner.ts","src/module/actor/factory/AbstractActorFactory.ts","src/module/actor/factory/BaseActorFactory.ts","src/module/actor/factory/GruntFactory.ts","src/module/actor/factory/RunnerFactory.ts","src/module/actor/sheet/SR5BaseActorSheet.ts","src/module/actor/sheet/SR5GruntSheet.ts","src/module/actor/sheet/SR5RunnerSheet.ts","src/module/actor/types/ActorType.ts","src/module/common/Attribute.ts","src/module/common/Helpers.ts","src/module/common/Skills.ts","src/module/item/SR5Ammunition.ts","src/module/item/SR5Armor.ts","src/module/item/SR5BaseItem.ts","src/module/item/SR5ItemProxy.ts","src/module/item/SR5ItemWithEmbeds.ts","src/module/item/SR5Metatype.ts","src/module/item/SR5Weapon.ts","src/module/item/factory/AbstractItemFactory.ts","src/module/item/factory/AmmunitionFactory.ts","src/module/item/factory/ArmorFactory.ts","src/module/item/factory/BaseItemFactory.ts","src/module/item/factory/ItemWithEmbedsFactory.ts","src/module/item/factory/MetatypeFactory.ts","src/module/item/factory/WeaponFactory.ts","src/module/item/sheet/SR5ArmorSheet.ts","src/module/item/sheet/SR5BaseItemSheet.ts","src/module/item/sheet/SR5ItemWithEmbedsSheet.ts","src/module/item/sheet/SR5MetatypeSheet.ts","src/module/item/types/ItemType.ts","src/module/types/common/Damage.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export const SYSTEM_NAME = 'shadowrun5e';\r\nexport const EMBEDDED_ITEMS_KEY = 'embeddedItems';\r\nexport const EMBEDDED_ACTORS_KEY = 'embeddedActors';\r\n","import Setup from './Setup';\r\n\r\nSetup.run();\r\n\r\nCONFIG.debug.hooks = true;","import SR5ActorProxy from './actor/SR5ActorProxy';\r\nimport { SYSTEM_NAME } from './Constants';\r\nimport SR5BaseActorSheet from './actor/sheet/SR5BaseActorSheet';\r\nimport SR5ItemProxy from './item/SR5ItemProxy';\r\nimport SR5BaseItemSheet from './item/sheet/SR5BaseItemSheet';\r\nimport SR5RunnerSheet from './actor/sheet/SR5RunnerSheet';\r\nimport SR5GruntSheet from './actor/sheet/SR5GruntSheet';\r\nimport SR5ArmorSheet from './item/sheet/SR5ArmorSheet';\r\nimport { ValidModifier } from './common/Modifier';\r\nimport SR5MetatypeSheet from './item/sheet/SR5MetatypeSheet';\r\n\r\nexport default class Setup {\r\n    public static run(): void {\r\n        Hooks.once('init', this.init);\r\n        Hooks.once('setup', this.setup);\r\n        Hooks.once('ready', this.ready);\r\n    }\r\n\r\n    // Tasks called on init\r\n    protected static init(): Promise<void> {\r\n        // Register actor + sheets\r\n        CONFIG.Actor.entityClass = SR5ActorProxy;\r\n        Actors.unregisterSheet('core', ActorSheet);\r\n        Actors.registerSheet(SYSTEM_NAME, SR5BaseActorSheet, { makeDefault: true });\r\n        Actors.registerSheet(SYSTEM_NAME, SR5RunnerSheet, { makeDefault: false });\r\n        Actors.registerSheet(SYSTEM_NAME, SR5GruntSheet, { makeDefault: false });\r\n\r\n        // Register item + sheets\r\n        CONFIG.Item.entityClass = SR5ItemProxy;\r\n        Items.unregisterSheet('core', ItemSheet);\r\n        Items.registerSheet(SYSTEM_NAME, SR5ArmorSheet, { makeDefault: true });\r\n        Items.registerSheet(SYSTEM_NAME, SR5MetatypeSheet, { makeDefault: false });\r\n\r\n        // Bind all required Foundry Hooks\r\n        Setup.bindHooks();\r\n\r\n        // Register Handlebars Helpers\r\n        Setup.handlebarsHelpers();\r\n\r\n        // Above code will run synchronously with Foundry\r\n        // Async tasks can be done by returning a new Promise\r\n        return Setup.handlebarsPartials();\r\n    }\r\n    protected static async setup(): Promise<void> {}\r\n    protected static async ready(): Promise<void> {}\r\n\r\n    protected static handlebarsHelpers(): void {\r\n        // if equal\r\n        Handlebars.registerHelper('ife', function (v1, v2, options) {\r\n            console.warn(v1);\r\n            console.warn(v2);\r\n            if (v1 === v2) return options.fn(this);\r\n            else return options.inverse(this);\r\n        });\r\n        // if not equal\r\n        Handlebars.registerHelper('ifne', function (v1, v2, options) {\r\n            if (v1 !== v2) return options.fn(this);\r\n            else return options.inverse(this);\r\n        });\r\n        // if greater than\r\n        Handlebars.registerHelper('ifgt', function (v1, v2, options) {\r\n            if (v1 > v2) return options.fn(this);\r\n            else return options.inverse(this);\r\n        });\r\n        // if greater than equal to\r\n        Handlebars.registerHelper('ifge', function (v1, v2, options) {\r\n            if (v1 >= v2) return options.fn(this);\r\n            else return options.inverse(this);\r\n        });\r\n        // if less than\r\n        Handlebars.registerHelper('iflt', function (v1, v2, options) {\r\n            if (v1 < v2) return options.fn(this);\r\n            else return options.inverse(this);\r\n        });\r\n        // if less than equal to\r\n        Handlebars.registerHelper('ifle', function (v1, v2, options) {\r\n            if (v1 <= v2) return options.fn(this);\r\n            else return options.inverse(this);\r\n        });\r\n        // if includes\r\n        Handlebars.registerHelper('ifin', function (val, arr, options) {\r\n            if (arr.includes(val)) return options.fn(this);\r\n            else return options.inverse(this);\r\n        });\r\n    }\r\n    protected static async handlebarsPartials(): Promise<void> {\r\n        return loadTemplates(['systems/shadowrun5e/dist/templates/common/parts/attributes.html']);\r\n    }\r\n\r\n    protected static bindHooks(): void {\r\n        Hooks.on('preCreateItem', (...args) => {\r\n            console.warn(args);\r\n        });\r\n    }\r\n}\r\n","import SR5Runner from './SR5Runner';\r\nimport SR5Grunt from './SR5Grunt';\r\nimport { ActorType } from './types/ActorType';\r\nimport SR5BaseActor, { ISR5BaseActorDataContainer } from './SR5BaseActor';\r\nimport AbstractActorFactory, { IPreCreateActorData, IPreCreateActorOptions } from './factory/AbstractActorFactory';\r\nimport RunnerFactory from './factory/RunnerFactory';\r\nimport GruntFactory from './factory/GruntFactory';\r\n\r\nexport default class SR5ActorProxy extends Actor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\">\r\n\r\n    static async create(data: IPreCreateActorData, options: IPreCreateActorOptions): Promise<Entity> {\r\n        // We use a factory for default data instead of the template. This allows\r\n        // us to correctly synchronize our internal types - the data template is\r\n        // instead used only to create containers in which the data will be stored\r\n        // Handling this internally has a number of benefits. Mostly it allows strong\r\n        // and more thorough typing of data where the JSON template does not.\r\n        let factory: AbstractActorFactory<ISR5BaseActorDataContainer>;\r\n        switch (data.type) {\r\n            case ActorType.Runner:\r\n                factory = new RunnerFactory();\r\n                break;\r\n            case ActorType.Grunt:\r\n                factory = new GruntFactory();\r\n                break;\r\n        }\r\n        // This will only compile if *every* actor type is handled\r\n        const factoryData = factory.create(data);\r\n        return super.create(factoryData, options);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    private readonly _implementation: SR5BaseActor;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(data: ActorData, options?: any) {\r\n        super(data, options);\r\n\r\n        switch (data.type as ActorType) {\r\n            case ActorType.Runner:\r\n                this._implementation = new SR5Runner(this, data, options);\r\n                break;\r\n            case ActorType.Grunt:\r\n                this._implementation = new SR5Grunt(this, data, options);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** @override */\r\n    prepareData(): void {\r\n        if (this._implementation !== undefined) {\r\n            this._implementation.prepareData();\r\n        }\r\n\r\n        return super.prepareData();\r\n    }\r\n    /** @override */\r\n    prepareEmbeddedEntities(): void {\r\n        if (this._implementation !== undefined) {\r\n            this._implementation.prepareEmbeddedEntities();\r\n        }\r\n\r\n        return super.prepareEmbeddedEntities();\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    public get Impl(): SR5BaseActor {\r\n        return this._implementation;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    // TODO:\r\n    //  I think there shouldn't need to be any more methods proxied.\r\n    //  However we may notice data not updating properly. If so, we\r\n    //  can simply proxy update to the actor implementation.\r\n\r\n    // </editor-fold>\r\n}\r\n","import SR5ActorProxy from './SR5ActorProxy';\r\nimport SR5BaseActorSheet from './sheet/SR5BaseActorSheet';\r\nimport { ActorType } from './types/ActorType';\r\n\r\nexport interface ISR5BaseActorDataContainer extends ActorData {\r\n    type: ActorType;\r\n    data: ISR5BaseActorData;\r\n}\r\nexport interface ISR5BaseActorData {}\r\n\r\nexport default abstract class SR5BaseActor extends Actor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    public data: ISR5BaseActorDataContainer;\r\n    public proxy: SR5ActorProxy;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(proxy: SR5ActorProxy, data: ActorData, options?: any) {\r\n        super(data, options);\r\n\r\n        // TODO: Safer cast. Should be true atm.\r\n        this.data = data as ISR5BaseActorDataContainer;\r\n        this.proxy = proxy;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    get sheet(): SR5BaseActorSheet<SR5BaseActor> {\r\n        // TODO: Figure out safe cast.\r\n        return this.proxy.sheet as SR5BaseActorSheet<SR5BaseActor>;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n\r\nexport function isActorOfType<T extends SR5BaseActor>(actor: Actor): actor is T {\r\n    return true;\r\n}\r\n","import SR5BaseActor, { ISR5BaseActorData, ISR5BaseActorDataContainer } from './SR5BaseActor';\r\nimport { ActorType } from './types/ActorType';\r\n\r\nexport interface ISR5GruntDataContainer extends ISR5BaseActorDataContainer {\r\n    data: ISR5GruntData;\r\n    type: ActorType.Grunt;\r\n}\r\nexport interface ISR5GruntData extends ISR5BaseActorData {}\r\n\r\nexport default class SR5Grunt extends SR5BaseActor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5GruntDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n    }\r\n\r\n    prepareEmbeddedEntities() {\r\n        super.prepareEmbeddedEntities();\r\n    }\r\n}\r\n\r\nexport function isGrunt(actor: Actor): actor is SR5Grunt {\r\n    return actor.data.type === ActorType.Grunt;\r\n}\r\n","import SR5BaseActor, { ISR5BaseActorData, ISR5BaseActorDataContainer } from './SR5BaseActor';\r\nimport SR5ActorProxy from './SR5ActorProxy';\r\nimport { RunnerAttributes } from '../common/Attribute';\r\nimport { ActiveSkillList, KnowledgeSkillList } from '../common/Skills';\r\nimport { ActorType } from './types/ActorType';\r\nimport SR5Grunt from './SR5Grunt';\r\n\r\n// TODO: Assumes Foundry will be enforcing types - as we can see here\r\n//  it's technically possible to get unexpected results.\r\nexport interface ISR5RunnerDataContainer extends ISR5BaseActorDataContainer {\r\n    data: ISR5RunnerData;\r\n}\r\nexport interface ISR5RunnerData extends ISR5BaseActorData {\r\n    attributes: RunnerAttributes;\r\n    skills: {\r\n        active: ActiveSkillList;\r\n        knowledge: KnowledgeSkillList;\r\n    };\r\n}\r\n\r\nexport default class SR5Runner extends SR5BaseActor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5RunnerDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(proxy: SR5ActorProxy, data: ActorData, options: any) {\r\n        super(proxy, data, options);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n\r\nexport function isRunner(actor: Actor): actor is SR5Runner {\r\n    return actor.data.type === ActorType.Runner;\r\n}\r\n","import { ISR5BaseActorDataContainer } from '../SR5BaseActor';\r\nimport { ActorType } from '../types/ActorType';\r\n\r\nexport interface IPreCreateActorOptions {\r\n    renderSheet: boolean;\r\n    temporary?: boolean;\r\n}\r\n\r\nexport interface IPreCreateActorData {\r\n    folder: string | undefined;\r\n    name: string;\r\n    type: ActorType;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\ntype ExcludedKeys = 'token';\r\ntype OptionalKeys = 'img' | 'flags';\r\n\r\n// prettier-ignore\r\ntype RequiredData<T extends ISR5BaseActorDataContainer> = Omit<T, ExcludedKeys | OptionalKeys>;\r\n// prettier-ignore\r\ntype OptionalData<T extends ISR5BaseActorDataContainer> = Partial<Pick<T, OptionalKeys>>;\r\n\r\nexport type ActorFactoryData<T extends ISR5BaseActorDataContainer> = RequiredData<T> & OptionalData<T>;\r\n\r\nexport default abstract class AbstractActorFactory<T extends ISR5BaseActorDataContainer> {\r\n    public abstract create(data: IPreCreateActorData): ActorFactoryData<T>;\r\n}\r\n","import { ISR5BaseActorDataContainer } from '../SR5BaseActor';\r\nimport AbstractActorFactory, { ActorFactoryData, IPreCreateActorData } from './AbstractActorFactory';\r\n\r\nexport default abstract class BaseActorFactory extends AbstractActorFactory<ISR5BaseActorDataContainer> {\r\n    public create(data: IPreCreateActorData): ActorFactoryData<ISR5BaseActorDataContainer> {\r\n        return {\r\n            name: data.name,\r\n            type: data.type,\r\n            data: {},\r\n            flags: {},\r\n            img: '',\r\n        };\r\n    }\r\n}\r\n","import BaseActorFactory from './BaseActorFactory';\r\nimport { ISR5GruntDataContainer } from '../SR5Grunt';\r\nimport { ActorFactoryData, IPreCreateActorData } from './AbstractActorFactory';\r\nimport { ActorType } from '../types/ActorType';\r\n\r\nexport default class GruntFactory extends BaseActorFactory {\r\n    create(data: IPreCreateActorData): ActorFactoryData<ISR5GruntDataContainer> {\r\n        return {\r\n            ...super.create(data),\r\n            type: ActorType.Grunt,\r\n        };\r\n    }\r\n}\r\n","\r\nimport { AttributeName, RunnerAttributes } from '../../common/Attribute';\r\nimport { ActiveSkillList, ActiveSkillName } from '../../common/Skills';\r\nimport BaseActorFactory from './BaseActorFactory';\r\nimport { ISR5RunnerDataContainer } from '../SR5Runner';\r\nimport { ActorFactoryData, IPreCreateActorData } from './AbstractActorFactory';\r\n\r\nexport default class RunnerFactory extends BaseActorFactory {\r\n    create(data: IPreCreateActorData): ActorFactoryData<ISR5RunnerDataContainer> {\r\n        const superData = super.create(data);\r\n        let attributes: RunnerAttributes = {\r\n            body: {\r\n                name: AttributeName.Body,\r\n                value: 1,\r\n            },\r\n            agility: {\r\n                name: AttributeName.Agility,\r\n                value: 1,\r\n            },\r\n            charisma: {\r\n                name: AttributeName.Charisma,\r\n                value: 1,\r\n            },\r\n            intuition: {\r\n                name: AttributeName.Intuition,\r\n                value: 1,\r\n            },\r\n            logic: {\r\n                name: AttributeName.Logic,\r\n                value: 1,\r\n            },\r\n            reaction: {\r\n                name: AttributeName.Reaction,\r\n                value: 1,\r\n            },\r\n            strength: {\r\n                name: AttributeName.Strength,\r\n                value: 1,\r\n            },\r\n            willpower: {\r\n                name: AttributeName.Willpower,\r\n                value: 1,\r\n            },\r\n\r\n            edge: {\r\n                name: AttributeName.Edge,\r\n                value: 1,\r\n            },\r\n\r\n            essence: {\r\n                name: AttributeName.Essence,\r\n                value: 6,\r\n            },\r\n\r\n            magic: {\r\n                name: AttributeName.Magic,\r\n                value: 0,\r\n            },\r\n            resonance: {\r\n                name: AttributeName.Resonance,\r\n                value: 0,\r\n            },\r\n            depth: {\r\n                name: AttributeName.Depth,\r\n                value: 0,\r\n            },\r\n        };\r\n\r\n        let skills: ActiveSkillList = {\r\n            archery: {\r\n                name: ActiveSkillName.Archery,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            automatics: {\r\n                name: ActiveSkillName.Automatics,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            blades: {\r\n                name: ActiveSkillName.Blades,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            clubs: {\r\n                name: ActiveSkillName.Clubs,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            heavy_weapons: {\r\n                name: ActiveSkillName.HeavyWeapons,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            longarms: {\r\n                name: ActiveSkillName.Longarms,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            pistols: {\r\n                name: ActiveSkillName.Pistols,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            throwing_weapons: {\r\n                name: ActiveSkillName.ThrowingWeapons,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            unarmed_combat: {\r\n                name: ActiveSkillName.UnarmedCombat,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            disguise: {\r\n                name: ActiveSkillName.Disguise,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Intuition,\r\n            },\r\n            diving: {\r\n                name: ActiveSkillName.Diving,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Body,\r\n            },\r\n            escape_artist: {\r\n                name: ActiveSkillName.EscapeArtist,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            flight: {\r\n                name: ActiveSkillName.Flight,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            free_fall: {\r\n                name: ActiveSkillName.FreeFall,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Body,\r\n            },\r\n            gymnastics: {\r\n                name: ActiveSkillName.Gymnastics,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            palming: {\r\n                name: ActiveSkillName.Palming,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            perception: {\r\n                name: ActiveSkillName.Perception,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Intuition,\r\n            },\r\n            running: {\r\n                name: ActiveSkillName.Running,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Strength,\r\n            },\r\n            sneaking: {\r\n                name: ActiveSkillName.Sneaking,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            survival: {\r\n                name: ActiveSkillName.Survival,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Willpower,\r\n            },\r\n            swimming: {\r\n                name: ActiveSkillName.Swimming,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Strength,\r\n            },\r\n            tracking: {\r\n                name: ActiveSkillName.Tracking,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Intuition,\r\n            },\r\n            con: {\r\n                name: ActiveSkillName.Con,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            etiquette: {\r\n                name: ActiveSkillName.Etiquette,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            impersonation: {\r\n                name: ActiveSkillName.Impersonation,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            instruction: {\r\n                name: ActiveSkillName.Instruction,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            intimidation: {\r\n                name: ActiveSkillName.Intimidation,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            leadership: {\r\n                name: ActiveSkillName.Leadership,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            negotiation: {\r\n                name: ActiveSkillName.Negotiation,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            performance: {\r\n                name: ActiveSkillName.Performance,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            alchemy: {\r\n                name: ActiveSkillName.Alchemy,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            arcana: {\r\n                name: ActiveSkillName.Arcana,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            artificing: {\r\n                name: ActiveSkillName.Artificing,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            assensing: {\r\n                name: ActiveSkillName.Assensing,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Intuition,\r\n            },\r\n            astral_combat: {\r\n                name: ActiveSkillName.AstralCombat,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Willpower,\r\n            },\r\n            banishing: {\r\n                name: ActiveSkillName.Banishing,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            binding: {\r\n                name: ActiveSkillName.Binding,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            counterspelling: {\r\n                name: ActiveSkillName.Counterspelling,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            disenchanting: {\r\n                name: ActiveSkillName.Disenchanting,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            ritual_spellcasting: {\r\n                name: ActiveSkillName.RitualSpellcasting,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            spellcasting: {\r\n                name: ActiveSkillName.Spellcasting,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            summoning: {\r\n                name: ActiveSkillName.Summoning,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Magic,\r\n            },\r\n            compiling: {\r\n                name: ActiveSkillName.Compiling,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Resonance,\r\n            },\r\n            decompiling: {\r\n                name: ActiveSkillName.Decompiling,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Resonance,\r\n            },\r\n            registering: {\r\n                name: ActiveSkillName.Registering,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Resonance,\r\n            },\r\n            aeronautics_mechanic: {\r\n                name: ActiveSkillName.AeronauticsMechanic,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            automotive_mechanic: {\r\n                name: ActiveSkillName.AutomotiveMechanic,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            industrial_mechanic: {\r\n                name: ActiveSkillName.IndustrialMechanic,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            nautical_mechanic: {\r\n                name: ActiveSkillName.NauticalMechanic,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            animal_handling: {\r\n                name: ActiveSkillName.AnimalHandling,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Charisma,\r\n            },\r\n            armorer: {\r\n                name: ActiveSkillName.Armorer,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            artisan: {\r\n                name: ActiveSkillName.Artisan,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Intuition,\r\n            },\r\n            biotechnology: {\r\n                name: ActiveSkillName.Biotechnology,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            chemistry: {\r\n                name: ActiveSkillName.Chemistry,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            computer: {\r\n                name: ActiveSkillName.Computer,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            cybercombat: {\r\n                name: ActiveSkillName.Cybercombat,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            cybertechnology: {\r\n                name: ActiveSkillName.Cybertechnology,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            demolitions: {\r\n                name: ActiveSkillName.Demolitions,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            electronic_warfare: {\r\n                name: ActiveSkillName.ElectronicWarfare,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            first_aid: {\r\n                name: ActiveSkillName.FirstAid,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            forgery: {\r\n                name: ActiveSkillName.Forgery,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            hacking: {\r\n                name: ActiveSkillName.Hacking,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            hardware: {\r\n                name: ActiveSkillName.Hardware,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            locksmith: {\r\n                name: ActiveSkillName.Locksmith,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            medicine: {\r\n                name: ActiveSkillName.Medicine,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            navigation: {\r\n                name: ActiveSkillName.Navigation,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Intuition,\r\n            },\r\n            software: {\r\n                name: ActiveSkillName.Software,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Logic,\r\n            },\r\n            gunnery: {\r\n                name: ActiveSkillName.Gunnery,\r\n                value: 0,\r\n                canDefault: true,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Agility,\r\n            },\r\n            pilot_aerospace: {\r\n                name: ActiveSkillName.PilotAerospace,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Reaction,\r\n            },\r\n            pilot_aircraft: {\r\n                name: ActiveSkillName.PilotAircraft,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Reaction,\r\n            },\r\n            pilot_walker: {\r\n                name: ActiveSkillName.PilotWalker,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Reaction,\r\n            },\r\n            pilot_ground_craft: {\r\n                name: ActiveSkillName.PilotGroundCraft,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Reaction,\r\n            },\r\n            pilot_water_craft: {\r\n                name: ActiveSkillName.PilotWaterCraft,\r\n                value: 0,\r\n                canDefault: false,\r\n                specializations: [],\r\n                defaultAttribute: AttributeName.Reaction,\r\n            },\r\n        };\r\n\r\n        return {\r\n            ...superData,\r\n            data: {\r\n                attributes,\r\n                skills: {\r\n                    active: skills,\r\n                    knowledge: {},\r\n                },\r\n            },\r\n        };\r\n    }\r\n}\r\n","import SR5BaseActor, { isActorOfType } from '../SR5BaseActor';\r\nimport SR5ActorProxy from '../SR5ActorProxy';\r\nimport { ActorType } from '../types/ActorType';\r\n\r\nexport default abstract class SR5BaseActorSheet<T extends SR5BaseActor> extends ActorSheet {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    protected constructor(...args: any) {\r\n        super(...args);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    get actor(): T {\r\n        // TODO: Figure out how to more safely cast this.\r\n        return (super.actor as SR5ActorProxy).Impl as T;\r\n    }\r\n\r\n    get id(): string {\r\n        return `actor-${this.actor.id}`;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    getData(): ActorSheetData {\r\n        const data = super.getData();\r\n\r\n        data['CONST'] = {\r\n            ActorType: ActorType,\r\n        };\r\n\r\n        console.warn(`Sheet is of type ${this.constructor.name}`);\r\n        console.warn(data);\r\n        console.warn(super.actor);\r\n\r\n        return data;\r\n    }\r\n\r\n    protected activateListeners(html: JQuery | HTMLElement) {\r\n        console.warn(html);\r\n        super.activateListeners(html);\r\n    }\r\n\r\n    close(): Promise<void> {\r\n        console.warn(this.form);\r\n\r\n        return super.close();\r\n    }\r\n\r\n    // </editor-fold>\r\n}\r\n","import SR5BaseActorSheet from './SR5BaseActorSheet';\r\nimport SR5Grunt from '../SR5Grunt';\r\n\r\nexport default class SR5GruntSheet extends SR5BaseActorSheet<SR5Grunt> {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(...args: any) {\r\n        super(...args);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    get template(): string {\r\n        return `systems/shadowrun5e/dist/templates/actor/grunt.html`;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import SR5BaseActorSheet from './SR5BaseActorSheet';\r\nimport SR5Runner from '../SR5Runner';\r\nimport { ActorType } from '../types/ActorType';\r\n\r\nexport default class SR5RunnerSheet extends SR5BaseActorSheet<SR5Runner> {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(data: BaseEntityData, options?: any) {\r\n        super(data, options);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    get template(): string {\r\n        return `systems/shadowrun5e/dist/templates/actor/runner.html`;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    getData(): ActorSheetData {\r\n        const data = super.getData();\r\n        return data;\r\n    }\r\n\r\n    // </editor-fold>\r\n}\r\n","export enum ActorType {\r\n    Runner = 'Runner',\r\n    Grunt = 'Grunt',\r\n    // Contact = 'Contact',\r\n    // Spirit = 'Spirit',\r\n    // Sprite = 'Sprite',\r\n    // Vehicle = 'Vehicle',\r\n    // Critter = 'Critter',\r\n    // Host = 'Host',\r\n    // IC = 'IC',\r\n}\r\n","export enum PhysicalAttributeName {\r\n    Body = 'body',\r\n    Agility = 'agility',\r\n    Reaction = 'reaction',\r\n    Strength = 'strength',\r\n}\r\n\r\nexport enum MentalAttributeName {\r\n    Logic = 'logic',\r\n    Intuition = 'intuition',\r\n    Charisma = 'charisma',\r\n    Willpower = 'willpower',\r\n}\r\n\r\nexport enum SpecialAttributeName {\r\n    Edge = 'edge',\r\n    Essence = 'essence',\r\n    Magic = 'magic',\r\n    Resonance = 'resonance',\r\n    Depth = 'depth',\r\n}\r\n\r\nexport enum MatrixAttributeName {\r\n    Attack = 'attack',\r\n    Sleaze = 'sleaze',\r\n    DataProcessing = 'data_processing',\r\n    Firewall = 'firewall',\r\n}\r\n\r\nexport const AttributeName = { ...PhysicalAttributeName, ...MentalAttributeName, ...SpecialAttributeName, ...MatrixAttributeName };\r\nexport type AttributeName = PhysicalAttributeName | MentalAttributeName | SpecialAttributeName | MatrixAttributeName;\r\n\r\nexport const RunnerAttributeName = { ...PhysicalAttributeName, ...MentalAttributeName, ...SpecialAttributeName };\r\nexport type RunnerAttributeName = PhysicalAttributeName | MentalAttributeName | SpecialAttributeName;\r\n\r\nexport interface Attribute<TName extends AttributeName> {\r\n    name: TName; // TODO: Locale keys need arrangement for SR5.ATTRIBUTES.name\r\n    value: number;\r\n}\r\n\r\nexport type AttributeMap<TValues extends AttributeName> = {\r\n    [TKey in TValues]: Attribute<TKey>;\r\n};\r\n\r\n// Helper maps - Can use AttributeMap for custom mappings\r\nexport type PhysicalAttributes = AttributeMap<PhysicalAttributeName>;\r\nexport type MentalAttribute = AttributeMap<MentalAttributeName>;\r\nexport type SpecialAttributes = AttributeMap<SpecialAttributeName>;\r\nexport type RunnerAttributes = AttributeMap<RunnerAttributeName>;\r\nexport type MatrixAttributes = AttributeMap<MatrixAttributeName>;\r\n\r\n// export type AttributeField = BaseValuePair<number> &\r\n//     CanHideFiled &\r\n//     ModifiableValue &\r\n//     LabelField & {\r\n//     limit?: string;\r\n// };\r\n","import SR5BaseItem, { ISR5BaseItemDataContainer } from '../item/SR5BaseItem';\r\nimport { ItemFactoryData } from '../item/factory/AbstractItemFactory';\r\nimport SR5Armor from '../item/SR5Armor';\r\n\r\n/**\r\n * Helper to get base item data\r\n * @param item\r\n */\r\nexport function getBaseItemData<T extends SR5BaseItem>(item: T): T['data'] {\r\n    return {\r\n        _id: item._id,\r\n        name: item.name,\r\n        type: item.data.type,\r\n        data: item.data,\r\n        flags: item.data.flags,\r\n    };\r\n}\r\n","import { AttributeName } from './Attribute';\r\n\r\nexport enum CombatSkillName {\r\n    Archery = 'archery',\r\n    Automatics = 'automatics',\r\n    Blades = 'blades',\r\n    Clubs = 'clubs',\r\n    // TODO: ExoticMeleeWeapon = 'exotic_melee_weapon',\r\n    // TODO: ExoticRangedWeapon = 'exotic_ranged_weapon',\r\n    HeavyWeapons = 'heavy_weapons',\r\n    Longarms = 'longarms',\r\n    Pistols = 'pistols',\r\n    ThrowingWeapons = 'throwing_weapons',\r\n    UnarmedCombat = 'unarmed_combat',\r\n}\r\n\r\nexport enum MagicalSkillName {\r\n    Alchemy = 'alchemy',\r\n    Arcana = 'arcana',\r\n    Artificing = 'artificing',\r\n    Assensing = 'assensing',\r\n    AstralCombat = 'astral_combat',\r\n    Banishing = 'banishing',\r\n    Binding = 'binding',\r\n    Counterspelling = 'counterspelling',\r\n    Disenchanting = 'disenchanting',\r\n    RitualSpellcasting = 'ritual_spellcasting',\r\n    Spellcasting = 'spellcasting',\r\n    Summoning = 'summoning',\r\n}\r\n\r\nexport enum PhysicalSkillName {\r\n    AnimalHandling = 'animal_handling',\r\n    Disguise = 'disguise',\r\n    Diving = 'diving',\r\n    EscapeArtist = 'escape_artist',\r\n    Flight = 'flight',\r\n    FreeFall = 'free_fall',\r\n    Gymnastics = 'gymnastics',\r\n    Palming = 'palming',\r\n    Perception = 'perception',\r\n    Running = 'running',\r\n    Sneaking = 'sneaking',\r\n    Survival = 'survival',\r\n    Swimming = 'swimming',\r\n    Tracking = 'tracking',\r\n}\r\n\r\nexport enum ResonanceSkillName {\r\n    Compiling = 'compiling',\r\n    Decompiling = 'decompiling',\r\n    Registering = 'registering',\r\n}\r\n\r\nexport enum SocialSkillName {\r\n    Con = 'con',\r\n    Etiquette = 'etiquette',\r\n    Impersonation = 'impersonation',\r\n    Instruction = 'instruction',\r\n    Intimidation = 'intimidation',\r\n    Leadership = 'leadership',\r\n    Negotiation = 'negotiation',\r\n    Performance = 'performance',\r\n}\r\n\r\nexport enum TechnicalSkillName {\r\n    AeronauticsMechanic = 'aeronautics_mechanic',\r\n    Armorer = 'armorer',\r\n    Artisan = 'artisan',\r\n    AutomotiveMechanic = 'automotive_mechanic',\r\n    Biotechnology = 'biotechnology',\r\n    Chemistry = 'chemistry',\r\n    Computer = 'computer',\r\n    Cybercombat = 'cybercombat',\r\n    Cybertechnology = 'cybertechnology',\r\n    Demolitions = 'demolitions',\r\n    ElectronicWarfare = 'electronic_warfare',\r\n    FirstAid = 'first_aid',\r\n    Forgery = 'forgery',\r\n    Hacking = 'hacking',\r\n    Hardware = 'hardware',\r\n    IndustrialMechanic = 'industrial_mechanic',\r\n    Locksmith = 'locksmith',\r\n    Medicine = 'medicine',\r\n    NauticalMechanic = 'nautical_mechanic',\r\n    Navigation = 'navigation',\r\n    Software = 'software',\r\n}\r\n\r\nexport enum VehicleSkillName {\r\n    Gunnery = 'gunnery',\r\n    PilotAerospace = 'pilot_aerospace',\r\n    PilotAircraft = 'pilot_aircraft',\r\n    // TODO: PilotExoticVehicle = 'pilot_exotic_vehicle',\r\n    PilotGroundCraft = 'pilot_ground_craft',\r\n    PilotWalker = 'pilot_walker',\r\n    PilotWaterCraft = 'pilot_water_craft',\r\n}\r\n\r\nexport const ActiveSkillName = {\r\n    ...CombatSkillName,\r\n    ...MagicalSkillName,\r\n    ...PhysicalSkillName,\r\n    ...ResonanceSkillName,\r\n    ...SocialSkillName,\r\n    ...TechnicalSkillName,\r\n    ...VehicleSkillName,\r\n};\r\n\r\nexport type ActiveSkillName =\r\n    | CombatSkillName\r\n    | MagicalSkillName\r\n    | PhysicalSkillName\r\n    | ResonanceSkillName\r\n    | SocialSkillName\r\n    | TechnicalSkillName\r\n    | VehicleSkillName;\r\n\r\nexport enum SkillGroupName {\r\n    Acting = 'acting',\r\n    Athletics = 'athletics',\r\n    Biotech = 'biotech',\r\n    CloseCombat = 'close_combat',\r\n    Conjuring = 'conjuring',\r\n    Cracking = 'cracking',\r\n    Electronics = 'electronics',\r\n    Enchanting = 'enchanting',\r\n    Firearms = 'firearms',\r\n    Influence = 'influence',\r\n    Engineering = 'engineering',\r\n    Outdoors = 'outdoors',\r\n    Sorcery = 'sorcery',\r\n    Stealth = 'stealth',\r\n    Tasking = 'tasking',\r\n}\r\n\r\nexport interface Skill<TName extends string> {\r\n    name: TName;\r\n    value: number;\r\n\r\n    defaultAttribute: AttributeName;\r\n    specializations: Array<string>;\r\n    canDefault: boolean;\r\n}\r\n\r\nexport interface ActiveSkill<TName extends ActiveSkillName> extends Skill<TName> {}\r\n\r\nexport enum KnowledgeSkillType {\r\n    Street = 'street',\r\n    Academic = 'academic',\r\n    Interest = 'interest',\r\n    Language = 'language',\r\n}\r\nexport interface KnowledgeSkill extends Skill<string> {\r\n    type: KnowledgeSkillType;\r\n}\r\n\r\nexport type ActiveSkillList = {\r\n    [TName in ActiveSkillName]: ActiveSkill<TName>;\r\n};\r\n\r\nexport type KnowledgeSkillList = {\r\n    [id in string]: KnowledgeSkill;\r\n};\r\n","import SR5BaseItem, { ISR5BaseItemData, ISR5BaseItemDataContainer } from './SR5BaseItem';\r\nimport { ItemType } from './types/ItemType';\r\n\r\nexport interface ISR5AmmunitionDataContainer extends ISR5BaseItemDataContainer {\r\n    data: ISR5AmmunitionData;\r\n    type: ItemType.Ammunition;\r\n}\r\n\r\nexport interface ISR5AmmunitionData extends ISR5BaseItemData {}\r\n\r\nexport default class SR5Ammunition extends SR5BaseItem {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5AmmunitionDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import SR5BaseItem, { ISR5BaseItemData, ISR5BaseItemDataContainer } from './SR5BaseItem';\r\nimport { ItemType } from './types/ItemType';\r\nimport { DamageElement } from '../types/common/Damage';\r\nimport SR5ItemWithEmbeds, { ISR5ItemWithEmbedsData, ISR5ItemWithEmbedsDataContainer } from './SR5ItemWithEmbeds';\r\n\r\nexport interface ISR5ArmorDataContainer extends ISR5ItemWithEmbedsDataContainer {\r\n    data: ISR5ArmorData;\r\n    type: ItemType.Armor;\r\n}\r\n\r\nexport interface ISR5ArmorData extends ISR5ItemWithEmbedsData {\r\n    armor: {\r\n        value: number;\r\n        stacks: boolean;\r\n        element: {\r\n            [TElement in DamageElement]: {\r\n                value: number;\r\n            };\r\n        };\r\n    };\r\n}\r\n\r\nexport default class SR5Armor extends SR5ItemWithEmbeds {\r\n    // <editor-fold desc=\"Static Properties\">\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5ArmorDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    protected get allowedEmbeddedItemTypes(): ItemType[] {\r\n        return [ItemType.Metatype];\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import { ItemType } from './types/ItemType';\r\n\r\nexport interface ISR5BaseItemDataContainer extends BaseEntityData {\r\n    data: ISR5BaseItemData;\r\n    type: ItemType;\r\n    _id: string;\r\n}\r\n\r\nexport interface ISR5BaseItemData {}\r\n\r\nexport default class SR5BaseItem extends Item {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5BaseItemDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(data: BaseEntityData, options?: any) {\r\n        super(data, options);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import AbstractItemFactory, { IPreCreateItemData, IPreCreateItemOptions } from './factory/AbstractItemFactory';\r\nimport SR5BaseItem, { ISR5BaseItemDataContainer } from './SR5BaseItem';\r\nimport { ItemType } from './types/ItemType';\r\nimport ArmorFactory from './factory/ArmorFactory';\r\nimport WeaponFactory from './factory/WeaponFactory';\r\nimport AmmunitionFactory from './factory/AmmunitionFactory';\r\nimport MetatypeFactory from './factory/MetatypeFactory';\r\nimport SR5Weapon from './SR5Weapon';\r\nimport SR5Metatype from './SR5Metatype';\r\nimport SR5Ammunition from './SR5Ammunition';\r\nimport SR5Armor from './SR5Armor';\r\n\r\nexport default class SR5ItemProxy extends Item {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    private _implementation: SR5BaseItem;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n    static async create(data: IPreCreateItemData, options: IPreCreateItemOptions): Promise<Entity> {\r\n        // We use a factory for default data instead of the template. This allows\r\n        // us to correctly synchronize our internal types - the data template is\r\n        // instead used only to create containers in which the data will be stored\r\n        // Handling this internally has a number of benefits. Mostly it allows strong\r\n        // and more thorough typing of data where the JSON template does not.\r\n        let factory: AbstractItemFactory<ISR5BaseItemDataContainer>;\r\n        switch (data.type) {\r\n            case ItemType.Weapon:\r\n                factory = new WeaponFactory();\r\n                break;\r\n            case ItemType.Armor:\r\n                factory = new ArmorFactory();\r\n                break;\r\n            case ItemType.Ammunition:\r\n                factory = new AmmunitionFactory();\r\n                break;\r\n            case ItemType.Metatype:\r\n                factory = new MetatypeFactory();\r\n                break;\r\n        }\r\n        // This will only compile if *every* actor type is handled\r\n        const factoryData = factory.create(data);\r\n        console.warn(`factoryData for ${data.name}`);\r\n        console.warn(factoryData);\r\n        return super.create(factoryData, options);\r\n    }\r\n    constructor(data: BaseEntityData, options?: any) {\r\n        super(data, options);\r\n\r\n        switch (data.type as ItemType) {\r\n            case ItemType.Weapon:\r\n                this._implementation = new SR5Weapon(data, options);\r\n                break;\r\n            case ItemType.Armor:\r\n                this._implementation = new SR5Armor(data, options);\r\n                break;\r\n            case ItemType.Ammunition:\r\n                this._implementation = new SR5Ammunition(data, options);\r\n                break;\r\n            case ItemType.Metatype:\r\n                this._implementation = new SR5Metatype(data, options);\r\n                break;\r\n        }\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    public get Impl(): SR5BaseItem {\r\n        return this._implementation;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    /** @override */\r\n    update(data: any, options: any): Promise<Item> {\r\n        return this._implementation.update(data, options);\r\n    }\r\n\r\n    _onDragStart;\r\n\r\n    // </editor-fold>\r\n}\r\n","import SR5BaseItem, { ISR5BaseItemData, ISR5BaseItemDataContainer } from './SR5BaseItem';\r\nimport { ItemType } from './types/ItemType';\r\nimport { EMBEDDED_ITEMS_KEY, SYSTEM_NAME } from '../Constants';\r\n\r\nexport type EmbeddedItemMap = Array<ISR5BaseItemDataContainer>;\r\n\r\nexport interface ISR5ItemWithEmbedsDataContainer extends ISR5BaseItemDataContainer {\r\n    type: ItemType;\r\n    data: ISR5ItemWithEmbedsData;\r\n}\r\nexport interface ISR5ItemWithEmbedsData extends ISR5BaseItemData {}\r\n\r\nexport default abstract class SR5ItemWithEmbeds extends SR5BaseItem {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    /**\r\n     * Gets valid item types that are allowed to be dropped over this item.\r\n     * Can potentially be dynamic, as long as it is deterministic.\r\n     */\r\n    protected abstract get allowedEmbeddedItemTypes(): ItemType[];\r\n\r\n    /**\r\n     * Overridable value - default behavior checks this field to see if id-based\r\n     * duplicates should be permitted.\r\n     */\r\n    protected get allowDuplicateEmbeddedItems(): boolean {\r\n        return true;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    /**\r\n     * Return an array of all embedded item instances contained within this item.\r\n     */\r\n    public getEmbeddedItems(): EmbeddedItemMap {\r\n        // Factory ensures this exists.\r\n        return this.getFlag(SYSTEM_NAME, EMBEDDED_ITEMS_KEY) || [];\r\n    }\r\n\r\n    /**\r\n     * Set the embeddedItems map to the newly provided array\r\n     * @param items\r\n     */\r\n    public async setEmbeddedItems(items: EmbeddedItemMap): Promise<Entity> {\r\n        console.warn(`attempting embedded item set`);\r\n        console.warn(this);\r\n        console.warn(items);\r\n        // Unset clears old items, otherwise Foundry merges old + new by default\r\n        // TODO: Race condition.\r\n        //  If another request to add an item for example is dispatched between the unset and set\r\n        //  the read will show 0 items, which will cause items to be \"cleared\". As such I'm just\r\n        //  disabling the unset for now - this will probably be solved with a specific removeItem\r\n        //  method that performs a single atomic operation that can't be intercepted as easily.\r\n        // await this.unsetFlag(SYSTEM_NAME, EMBEDDED_ITEMS_KEY);\r\n        return this.setFlag(SYSTEM_NAME, EMBEDDED_ITEMS_KEY, items);\r\n    }\r\n\r\n    /**\r\n     * Returns whether the provide item is able to be embedded into this item.\r\n     * @param itemData\r\n     */\r\n    public isEmbeddable(itemData: ISR5BaseItemDataContainer) {\r\n        return this.allowedEmbeddedItemTypes.includes(itemData.type);\r\n    }\r\n\r\n    protected preAddEmbeddedItem(itemData: ISR5BaseItemDataContainer) {}\r\n\r\n    /**\r\n     * Add an item to the collection of embedded items\r\n     * @param itemData\r\n     * @param render If the sheet should be re-rendered after adding\r\n     */\r\n    public async addEmbeddedItem(itemData: ISR5BaseItemDataContainer, render: boolean = true) {\r\n        console.warn(`attempting embedded item insert`);\r\n        console.warn(this);\r\n        console.warn(itemData);\r\n        if (!this.isEmbeddable(itemData)) {\r\n            throw new Error(`Tried to embedded a ${itemData.type} in a ${this.data.type} - this is not allowed.`);\r\n        }\r\n\r\n        const currentItems = this.getEmbeddedItems();\r\n        if (currentItems.find((item) => item._id === itemData._id) && !this.allowDuplicateEmbeddedItems) {\r\n            throw new Error(`Tried to embedded ${itemData._id} but duplicates are disabled and it already exists.`);\r\n        }\r\n        currentItems.push(itemData);\r\n\r\n        await this.setEmbeddedItems(currentItems);\r\n\r\n        // prepareData has a chicken-egg scenario\r\n        await this.prepareData();\r\n        await this.prepareEmbeddedEntities();\r\n        await this.prepareData();\r\n\r\n        await this.render(render);\r\n    }\r\n\r\n    public async updateEmbeddedItem(itemData: Partial<ISR5BaseItemDataContainer>, render: boolean = true) {}\r\n\r\n    // </editor-fold>\r\n}\r\n","import SR5BaseItem, { ISR5BaseItemData, ISR5BaseItemDataContainer } from './SR5BaseItem';\r\nimport { ItemType } from './types/ItemType';\r\nimport { Attribute, AttributeName, PhysicalAttributeName, RunnerAttributes } from '../common/Attribute';\r\n\r\nexport interface ISR5MetatypeDataContainer extends ISR5BaseItemDataContainer {\r\n    data: ISR5MetatypeData;\r\n    type: ItemType.Metatype;\r\n}\r\n\r\nexport interface ISR5MetatypeData extends ISR5BaseItemData {\r\n    max_attribute: {\r\n        body: Attribute<PhysicalAttributeName.Body>\r\n    };\r\n}\r\n\r\nexport default class SR5Metatype extends SR5BaseItem {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5MetatypeDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import SR5BaseItem, { ISR5BaseItemData, ISR5BaseItemDataContainer } from './SR5BaseItem';\r\nimport { AttributeName } from '../common/Attribute';\r\nimport { ItemType } from './types/ItemType';\r\n\r\n// Weapon Properties\r\nexport interface WeaponModes {\r\n    single_shot: boolean;\r\n    semi_automatic: boolean;\r\n    burst_fire: boolean;\r\n    full_auto: boolean;\r\n}\r\n\r\nexport interface WeaponRanges {\r\n    short: number;\r\n    medium: number;\r\n    long: number;\r\n    extreme: number;\r\n    attribute: AttributeName;\r\n}\r\n\r\n// Alias in case we change later\r\nexport type WeaponRecoil = number;\r\n\r\nexport enum WeaponType {\r\n    Ranged = 'ranged_weapon',\r\n    Melee = 'melee_weapon',\r\n    Thrown = 'thrown_weapon',\r\n    Splash = 'splash_weapon',\r\n}\r\n\r\nexport interface ISR5WeaponDataContainer extends ISR5BaseItemDataContainer {\r\n    data: ISR5WeaponData;\r\n    type: ItemType.Weapon;\r\n}\r\n\r\nexport interface ISR5WeaponData extends ISR5BaseItemData {}\r\n\r\nexport default class SR5Weapon extends SR5BaseItem {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5WeaponDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import { ISR5BaseItemDataContainer } from '../SR5BaseItem';\r\nimport { ItemType } from '../types/ItemType';\r\n\r\nexport interface IPreCreateItemOptions {\r\n    renderSheet: boolean;\r\n    temporary?: boolean;\r\n}\r\n\r\nexport interface IPreCreateItemData {\r\n    folder: string | undefined;\r\n    name: string;\r\n    type: ItemType;\r\n\r\n    [key: string]: any;\r\n}\r\n\r\ntype ExcludedKeys = 'token';\r\ntype OptionalKeys = 'flags';\r\n\r\n// prettier-ignore\r\ntype RequiredData<T extends ISR5BaseItemDataContainer> = Omit<T, ExcludedKeys | OptionalKeys>;\r\n// prettier-ignore\r\ntype OptionalData<T extends ISR5BaseItemDataContainer> = Partial<Pick<T, OptionalKeys>>;\r\n\r\nexport type ItemFactoryData<T extends ISR5BaseItemDataContainer> = RequiredData<T> & OptionalData<T>;\r\n\r\nexport default abstract class AbstractItemFactory<T extends ISR5BaseItemDataContainer> {\r\n    public abstract create(data: IPreCreateItemData): ItemFactoryData<T>;\r\n}\r\n","import { IPreCreateItemData, ItemFactoryData } from './AbstractItemFactory';\r\nimport BaseItemFactory from './BaseItemFactory';\r\nimport { ISR5AmmunitionDataContainer } from '../SR5Ammunition';\r\nimport { ItemType } from '../types/ItemType';\r\n\r\nexport default class AmmunitionFactory extends BaseItemFactory {\r\n    create(data: IPreCreateItemData): ItemFactoryData<ISR5AmmunitionDataContainer> {\r\n        return {\r\n            ...super.create(data),\r\n            type: ItemType.Ammunition,\r\n        };\r\n    }\r\n}\r\n","import { IPreCreateItemData, ItemFactoryData } from './AbstractItemFactory';\r\nimport BaseItemFactory from './BaseItemFactory';\r\nimport { ISR5ArmorDataContainer } from '../SR5Armor';\r\nimport { ItemType } from '../types/ItemType';\r\nimport { DamageElement } from '../../types/common/Damage';\r\nimport ItemWithEmbedsFactory from './ItemWithEmbedsFactory';\r\n\r\nexport default class ArmorFactory extends ItemWithEmbedsFactory {\r\n    create(data: IPreCreateItemData): ItemFactoryData<ISR5ArmorDataContainer> {\r\n        const superData = super.create(data);\r\n        return {\r\n            _id: superData._id,\r\n            name: superData.name,\r\n            type: ItemType.Armor,\r\n            data: {\r\n                ...superData.data,\r\n                armor: {\r\n                    value: 12,\r\n                    stacks: false,\r\n                    element: {\r\n                        [DamageElement.Physical]: {\r\n                            value: 0,\r\n                        },\r\n                        [DamageElement.Fire]: {\r\n                            value: 0,\r\n                        },\r\n                        [DamageElement.Cold]: {\r\n                            value: 0,\r\n                        },\r\n                        [DamageElement.Electricity]: {\r\n                            value: 0,\r\n                        },\r\n                        [DamageElement.Radiation]: {\r\n                            value: 0,\r\n                        },\r\n                        [DamageElement.Pollution]: {\r\n                            value: 0,\r\n                        },\r\n                    },\r\n                },\r\n            },\r\n            flags: superData.flags,\r\n        };\r\n    }\r\n}\r\n","import AbstractItemFactory, { IPreCreateItemData, ItemFactoryData } from './AbstractItemFactory';\r\nimport { ISR5BaseItemDataContainer } from '../SR5BaseItem';\r\n\r\nexport default abstract class BaseItemFactory extends AbstractItemFactory<ISR5BaseItemDataContainer> {\r\n    create(data: IPreCreateItemData): ItemFactoryData<ISR5BaseItemDataContainer> {\r\n        return {\r\n            data: {},\r\n            flags: {},\r\n            name: data.name,\r\n            type: data.type,\r\n            // '' still forces foundry to generate which is the desired behavior\r\n            _id: '',\r\n        };\r\n    }\r\n}\r\n","import BaseItemFactory from './BaseItemFactory';\r\nimport { IPreCreateItemData, ItemFactoryData } from './AbstractItemFactory';\r\nimport { ISR5ItemWithEmbedsDataContainer } from '../SR5ItemWithEmbeds';\r\n\r\nexport default abstract class ItemWithEmbedsFactory extends BaseItemFactory {\r\n    create(data: IPreCreateItemData): ItemFactoryData<ISR5ItemWithEmbedsDataContainer> {\r\n        const superData = super.create(data);\r\n        return {\r\n            ...superData,\r\n        };\r\n    }\r\n}\r\n","import BaseItemFactory from './BaseItemFactory';\r\nimport { IPreCreateItemData, ItemFactoryData } from './AbstractItemFactory';\r\nimport { ISR5MetatypeDataContainer } from '../SR5Metatype';\r\nimport { ItemType } from '../types/ItemType';\r\nimport { Attribute } from 'pixi.js';\r\nimport { AttributeName, PhysicalAttributeName } from '../../common/Attribute';\r\n\r\nexport default class MetatypeFactory extends BaseItemFactory {\r\n    create(data: IPreCreateItemData): ItemFactoryData<ISR5MetatypeDataContainer> {\r\n        return {\r\n            ...super.create(data),\r\n            type: ItemType.Metatype,\r\n            data: {\r\n                max_attribute: {\r\n                    body: {\r\n                        name: AttributeName.Body,\r\n                        value: 1,\r\n                    },\r\n                    \r\n                },\r\n            },\r\n        };\r\n    }\r\n}\r\n","import BaseItemFactory from './BaseItemFactory';\r\nimport { IPreCreateItemData, ItemFactoryData } from './AbstractItemFactory';\r\nimport { ISR5WeaponDataContainer } from '../SR5Weapon';\r\nimport { ItemType } from '../types/ItemType';\r\n\r\nexport default class WeaponFactory extends BaseItemFactory {\r\n    create(data: IPreCreateItemData): ItemFactoryData<ISR5WeaponDataContainer> {\r\n        return {\r\n            ...super.create(data),\r\n            type: ItemType.Weapon,\r\n        };\r\n    }\r\n}\r\n","import SR5ItemWithEmbedsSheet from './SR5ItemWithEmbedsSheet';\r\nimport { ItemType } from '../types/ItemType';\r\n\r\nexport default class SR5ArmorSheet extends SR5ItemWithEmbedsSheet {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    get template(): string {\r\n        return `systems/shadowrun5e/dist/templates/item/armor.html`;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    getData(): ItemSheetData {\r\n        const data = super.getData();\r\n\r\n        return data;\r\n    }\r\n\r\n    // </editor-fold>\r\n}\r\n","export default class SR5BaseItemSheet extends ItemSheet {\r\n    // <editor-fold desc=\"Static Properties\">\r\n\r\n    static get defaultOptions() {\r\n        const options = super.defaultOptions;\r\n\r\n        options.classes?.push('sr5', 'item');\r\n\r\n        return options;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    protected _onDragStart(event: DragEvent) {\r\n        super._onDragStart(event);\r\n    }\r\n\r\n    getData(): ItemSheetData {\r\n        const data = super.getData();\r\n\r\n        return data;\r\n    }\r\n\r\n    // </editor-fold>\r\n}\r\n","import SR5BaseItemSheet from './SR5BaseItemSheet';\r\nimport { isItemType, ItemType } from '../types/ItemType';\r\nimport SR5ItemWithEmbeds from '../SR5ItemWithEmbeds';\r\nimport { getBaseItemData } from '../../common/Helpers';\r\nimport SR5BaseItem from '../SR5BaseItem';\r\nimport SR5ItemProxy from '../SR5ItemProxy';\r\n\r\nexport default abstract class SR5ItemWithEmbedsSheet extends SR5BaseItemSheet {\r\n    get item(): SR5ItemProxy {\r\n        // TODO: Can we safely cast this?\r\n        return super.item as SR5ItemProxy;\r\n    }\r\n\r\n    protected activateListeners(html: JQuery) {\r\n        super.activateListeners(html);\r\n\r\n        const form = $(this.form);\r\n        form.on('drop', this._onDrop.bind(this));\r\n        form.on('dragover', this._onDragOver.bind(this));\r\n    }\r\n\r\n    protected _onDragOver(event: DragEvent) {\r\n        event.preventDefault();\r\n        return true;\r\n    }\r\n\r\n    protected _onDrop(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        console.warn(`_onDrop`);\r\n        console.warn(event);\r\n        // @ts-ignore\r\n        console.warn(event.originalEvent.dataTransfer.getData('text/plain'));\r\n\r\n        if (event.originalEvent) {\r\n            const dropArgs = event.originalEvent.dataTransfer?.getData('text/plain');\r\n            if (dropArgs === undefined) {\r\n                return;\r\n            }\r\n\r\n            const parsedArgs = JSON.parse(dropArgs);\r\n            if (parsedArgs.type && parsedArgs.type === 'Item') {\r\n                const id: string = parsedArgs.id;\r\n                let item = game.items.get(id);\r\n\r\n                // ensure item is of our item types\r\n                if (!isItemType(item.data.type)) {\r\n                    return;\r\n                }\r\n\r\n                // Can't recurse items infinitely\r\n                if (item.id === this.item.id) {\r\n                    return;\r\n                }\r\n\r\n                // now safe to cast\r\n                const sr5item = item as SR5BaseItem;\r\n                // TODO: Can we safely cast this? It *should* be fine given the many layers of checks we have now.\r\n                const insertTo: SR5ItemWithEmbeds = this.item.Impl as SR5ItemWithEmbeds;\r\n\r\n                // TODO: Does this need awaiting?\r\n                insertTo.addEmbeddedItem(getBaseItemData(sr5item));\r\n            }\r\n\r\n            // let item;\r\n            //\r\n            // // Case 1 - Data explicitly provided\r\n            // if (data.data) {\r\n            //     // TODO test\r\n            //     if (this.item.isOwned && data.actorId === this.item.actor?._id && data.data._id === this.item._id) {\r\n            //         console.log('Shadowrun5e | Cant drop item on itself');\r\n            //         // @ts-ignore\r\n            //         ui.notifications.error('Are you trying to break the game??');\r\n            //     }\r\n            //     item = data;\r\n            // } else if (data.pack) {\r\n            //     console.log(data);\r\n            //     // Case 2 - From a Compendium Pack\r\n            //     // TODO test\r\n            //     item = await this._getItemFromCollection(data.pack, data.id);\r\n            // } else {\r\n            //     // Case 3 - From a World Entity\r\n            //     item = game.items.get(data.id);\r\n            // }\r\n            //\r\n            // this.item.createOwnedItem(item.data);\r\n        }\r\n    }\r\n}\r\n","import SR5ItemWithEmbedsSheet from './SR5ItemWithEmbedsSheet';\r\nimport { ItemType } from '../types/ItemType';\r\nimport SR5BaseItemSheet from './SR5BaseItemSheet';\r\n\r\nexport default class SR5MetatypeSheet extends SR5BaseItemSheet {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    get template(): string {\r\n        return `systems/shadowrun5e/dist/templates/item/metatype.html`;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    getData(): ItemSheetData {\r\n        const data = super.getData();\r\n\r\n        console.warn(`${this.constructor.name} data for ${this.item.name}`);\r\n        console.warn(data);\r\n\r\n        return data;\r\n    }\r\n\r\n    // </editor-fold>\r\n}\r\n","export enum ItemType {\r\n    Weapon = 'Weapon',\r\n    Armor = 'Armor',\r\n    // Device = 'Device',\r\n    // Program = 'Program',\r\n    Ammunition = 'Ammunition',\r\n    Metatype = 'Metatype',\r\n}\r\n\r\n/**\r\n * Type Guard. Returns the string as an item type if possible.\r\n * @param value\r\n */\r\nexport function isItemType(value: string): value is ItemType {\r\n    for (const type of Object.values(ItemType)) {\r\n        if (type.toString() === value) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n","import { AttributeName } from '../../common/Attribute';\r\nimport { NoneType } from '../../common/Constants';\r\n\r\nexport enum DamageType {\r\n    Physical = 'physical',\r\n    Stun = 'stun',\r\n    Matrix = 'matrix',\r\n}\r\n\r\nexport enum DamageElement {\r\n    Physical = 'physical',\r\n    Fire = 'fire',\r\n    Cold = 'cold',\r\n    Electricity = 'electricity',\r\n    Radiation = 'radiation',\r\n    Pollution = 'pollution',\r\n    // TODO: There are more elements I am sure\r\n}\r\n\r\nexport interface ScaleWithAttribute<TValidKeys extends AttributeName | NoneType> {\r\n    baseValue: number;\r\n    scaleWith: TValidKeys;\r\n    scaleFactor: number;\r\n\r\n    // Avoiding methods for now\r\n    // total(): number;\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}