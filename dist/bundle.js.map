{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/module/Constants.ts","src/module/Setup.ts","src/module/actor/SR5ActorProxy.ts","src/module/actor/SR5BaseActor.ts","src/module/actor/SR5BaseActorSheet.ts","src/module/actor/SR5Grunt.ts","src/module/actor/SR5Runner.ts","src/module/actor/types/ActorType.ts","src/module/item/SR5BaseItem.ts","src/module/main.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export const SYSTEM_NAME = 'shadowrun5e';\r\n","import SR5ActorProxy from './actor/SR5ActorProxy';\r\nimport SR5BaseItem from './item/SR5BaseItem';\r\nimport { SYSTEM_NAME } from './Constants';\r\nimport SR5BaseActorSheet from './actor/SR5BaseActorSheet';\r\n\r\nexport default class Setup {\r\n    public static run(): void {\r\n        Hooks.once('init', this.init);\r\n        Hooks.once('setup', this.setup);\r\n        Hooks.once('ready', this.ready);\r\n    }\r\n\r\n    // Tasks called on init\r\n    protected static init(): Promise<void> {\r\n        // Register actor + sheets\r\n        CONFIG.Actor.entityClass = SR5ActorProxy;\r\n        Actors.unregisterSheet('core', ActorSheet);\r\n        Actors.registerSheet(SYSTEM_NAME, SR5BaseActorSheet, { makeDefault: true });\r\n\r\n        // Register item + sheets\r\n        CONFIG.Item.entityClass = SR5BaseItem;\r\n        Items.unregisterSheet('core', ItemSheet);\r\n        Items.registerSheet(SYSTEM_NAME, SR5BaseItem, { makeDefault: true });\r\n\r\n        // Above code will run synchronously with Foundry\r\n        // Async tasks can be done by returning a new Promise\r\n        return Promise.resolve();\r\n    }\r\n    protected static async setup(): Promise<void> {}\r\n    protected static async ready(): Promise<void> {}\r\n}\r\n","import SR5Runner from './SR5Runner';\r\nimport SR5Grunt from './SR5Grunt';\r\nimport { ActorType } from './types/ActorType';\r\nimport SR5BaseActor from './SR5BaseActor';\r\n\r\nexport default class SR5ActorProxy extends Actor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    private readonly _implementation: SR5BaseActor;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(data: ActorData, options?: any) {\r\n        super(data, options);\r\n\r\n        switch (this.data.type) {\r\n            case ActorType.Runner:\r\n                this._implementation = new SR5Runner(this, data, options);\r\n                break;\r\n            case ActorType.Grunt:\r\n                this._implementation = new SR5Grunt(this, data, options);\r\n                break;\r\n            case ActorType.Spirit:\r\n                break;\r\n            case ActorType.Sprite:\r\n                break;\r\n            case ActorType.Vehicle:\r\n                break;\r\n            case ActorType.Host:\r\n                break;\r\n            case ActorType.IC:\r\n                break;\r\n        }\r\n    }\r\n\r\n    // TODO: These can't be proxy'd because they're called in the constructor\r\n    //  of Actor or a parent class. However, that does mean our 'real' actor\r\n    //  also has it's data prepared in the constructor. Functionally, we might\r\n    //  (maybe even *should*) be OK simply only forwarding preparation requests\r\n    //  after the class has been constructed.\r\n    /** @override */\r\n    prepareData(): void {\r\n        console.warn(`PROXY prepareData`);\r\n        if (this._implementation !== undefined) {\r\n            this._implementation.prepareData();\r\n        }\r\n\r\n        return super.prepareData();\r\n    }\r\n    /** @override */\r\n    prepareEmbeddedEntities(): void {\r\n        console.warn(`PROXY prepareEmbeddedEntities`);\r\n        if (this._implementation !== undefined) {\r\n            this._implementation.prepareEmbeddedEntities();\r\n        }\r\n\r\n        return super.prepareEmbeddedEntities();\r\n    }\r\n\r\n    // TODO: These should be OK to proxy straight up.\r\n\r\n    /** @override */\r\n    get itemTypes(): { [key: string]: Item[] } {\r\n        return this._implementation.itemTypes;\r\n    }\r\n\r\n    /** @override */\r\n    get img(): string {\r\n        return this._implementation.img;\r\n    }\r\n\r\n    /** @override */\r\n    get isPC(): boolean {\r\n        return this._implementation.isPC;\r\n    }\r\n\r\n    /** @override */\r\n    get isToken(): boolean {\r\n        return this._implementation.isToken;\r\n    }\r\n\r\n    /** @override */\r\n    getActiveTokens(linked?: boolean): Token[] {\r\n        return this._implementation.getActiveTokens(linked);\r\n    }\r\n\r\n    /** @override */\r\n    getTokenImages(): Promise<any> {\r\n        return this._implementation.getTokenImages();\r\n    }\r\n\r\n    /** @override */\r\n    modifyTokenAttributes(attribute: string, value: number, isDelta?: boolean, isBar?: boolean): Promise<Actor> {\r\n        return this._implementation.modifyTokenAttributes(attribute, value, isDelta, isBar);\r\n    }\r\n\r\n    /** @override */\r\n    update(data: object, options?: object): Promise<Actor> {\r\n        return this._implementation.update(data, options);\r\n    }\r\n\r\n    /** @override */\r\n    delete(options?: object): Promise<string> {\r\n        return this._implementation.delete(options);\r\n    }\r\n\r\n    /** @override */\r\n    createEmbeddedEntity(embeddedName: string, createData: object, options?: object): Promise<Actor> {\r\n        return this._implementation.createEmbeddedEntity(embeddedName, createData, options);\r\n    }\r\n\r\n    /** @override */\r\n    updateEmbeddedEntity(embeddedName: string, updateData: object, options?: object): Promise<Actor> {\r\n        return this._implementation.updateEmbeddedEntity(embeddedName, updateData, options);\r\n    }\r\n\r\n    /** @override */\r\n    deleteEmbeddedEntity(embeddedName: string, childId: string, options?: object): Promise<Actor> {\r\n        return this._implementation.deleteEmbeddedEntity(embeddedName, childId, options);\r\n    }\r\n\r\n    /** @override */\r\n    importItemFromCollection(collection: string, entryId: string): Item {\r\n        return this._implementation.importItemFromCollection(collection, entryId);\r\n    }\r\n\r\n    /** @override */\r\n    getOwnedItem(itemId: string): Item | null {\r\n        return this._implementation.getOwnedItem(itemId);\r\n    }\r\n\r\n    /** @override */\r\n    createOwnedItem(itemData: object, options?: object): Promise<Item> {\r\n        return this._implementation.createOwnedItem(itemData, options);\r\n    }\r\n\r\n    /** @override */\r\n    updateOwnedItem(itemData: object, options?: object): Promise<Item> {\r\n        return this._implementation.updateOwnedItem(itemData, options);\r\n    }\r\n\r\n    /** @override */\r\n    updateManyOwnedItems(data: object, options?: object): Promise<Item[]> {\r\n        return this._implementation.updateManyOwnedItems(data, options);\r\n    }\r\n\r\n    /** @override */\r\n    deleteOwnedItem(itemId: string, options?: object): Promise<Item> {\r\n        return this._implementation.deleteOwnedItem(itemId, options);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import SR5ActorProxy from './SR5ActorProxy';\r\n\r\nexport interface SR5BaseActorDataContainer extends ActorData {\r\n    data: SR5BaseActorData;\r\n}\r\nexport interface SR5BaseActorData {}\r\n\r\nexport default class SR5BaseActor extends Actor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    public data: SR5BaseActorDataContainer;\r\n    public proxy: SR5ActorProxy;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(proxy: SR5ActorProxy, data: ActorData, options?: any) {\r\n        super(data, options);\r\n\r\n        this.data = data;\r\n        this.proxy = proxy;\r\n\r\n        console.warn(`Created a new ${this.constructor.name}`);\r\n        console.warn(this);\r\n    }\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n        console.warn(`SR5BaseActor prepareData`);\r\n    }\r\n\r\n    prepareEmbeddedEntities() {\r\n        super.prepareEmbeddedEntities();\r\n        console.warn(`SR5BaseActor prepareEmbeddedEntities`);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","export default class SR5BaseActorSheet extends ActorSheet {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(...args: any) {\r\n        super(...args);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import SR5BaseActor, { SR5BaseActorData, SR5BaseActorDataContainer } from './SR5BaseActor';\r\n\r\nexport interface SR5GruntDataContainer extends SR5BaseActorDataContainer {\r\n    data: SR5GruntData;\r\n}\r\nexport interface SR5GruntData extends SR5BaseActorData {\r\n    professionalRating: number;\r\n}\r\n\r\nexport default class SR5Grunt extends SR5BaseActor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n    data: SR5GruntDataContainer;\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n        console.warn(`SR5Grunt prepareData`);\r\n\r\n        this.data.data.professionalRating = this.name.length;\r\n\r\n        console.warn(`<end of call chain>`);\r\n    }\r\n\r\n    prepareEmbeddedEntities() {\r\n        super.prepareEmbeddedEntities();\r\n        console.warn(`SR5Grunt prepareEmbeddedEntities`);\r\n        \r\n        console.warn(`<end of call chain>`);\r\n    }\r\n}\r\n","import SR5BaseActor, { SR5BaseActorData, SR5BaseActorDataContainer } from './SR5BaseActor';\r\n\r\n// TODO: Assumes Foundry will be enforcing types - as we can see here\r\n//  it's technically possible to get unexpected results.\r\nexport interface SR5RunnerDataContainer extends SR5BaseActorDataContainer {\r\n    data: SR5RunnerData;\r\n}\r\nexport interface SR5RunnerData extends SR5BaseActorData {\r\n    butts: string;\r\n}\r\n\r\nexport default class SR5Runner extends SR5BaseActor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n    data: SR5RunnerDataContainer;\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","export enum ActorType {\r\n    Runner = 'Runner',\r\n    Grunt = 'Grunt',\r\n    Spirit = 'Spirit',\r\n    Sprite = 'Sprite',\r\n    Vehicle = 'Vehicle',\r\n    Host = 'Host',\r\n    IC = 'IC',\r\n}\r\n","export default class SR5BaseItem extends Item {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import Setup from './Setup';\r\n\r\nSetup.run();\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}