{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/module/Constants.ts","src/module/Main.ts","src/module/Setup.ts","src/module/actor/SR5ActorProxy.ts","src/module/actor/SR5BaseActor.ts","src/module/actor/SR5Grunt.ts","src/module/actor/SR5Runner.ts","src/module/actor/factory/AbstractActorFactory.ts","src/module/actor/factory/BaseActorFactory.ts","src/module/actor/factory/GruntFactory.ts","src/module/actor/factory/RunnerFactory.ts","src/module/actor/sheet/SR5BaseActorSheet.ts","src/module/actor/types/ActorType.ts","src/module/common/Attribute.ts","src/module/item/SR5Armor.ts","src/module/item/SR5BaseItem.ts","src/module/item/SR5ItemProxy.ts","src/module/item/SR5Weapon.ts","src/module/item/sheet/SR5BaseItemSheet.ts","src/module/item/types/ItemType.ts"],"names":[],"mappings":"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","file":"bundle.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","export const SYSTEM_NAME = 'shadowrun5e';\r\n","import Setup from './Setup';\r\n\r\nSetup.run();\r\n\r\nCONFIG.debug.hooks = true;","import SR5ActorProxy from './actor/SR5ActorProxy';\r\nimport { SYSTEM_NAME } from './Constants';\r\nimport SR5BaseActorSheet from './actor/sheet/SR5BaseActorSheet';\r\nimport SR5ItemProxy from './item/SR5ItemProxy';\r\nimport SR5BaseItemSheet from './item/sheet/SR5BaseItemSheet';\r\n\r\nexport default class Setup {\r\n    public static run(): void {\r\n        Hooks.once('init', this.init);\r\n        Hooks.once('setup', this.setup);\r\n        Hooks.once('ready', this.ready);\r\n    }\r\n\r\n    // Tasks called on init\r\n    protected static init(): Promise<void> {\r\n        // Register actor + sheets\r\n        CONFIG.Actor.entityClass = SR5ActorProxy;\r\n        Actors.unregisterSheet('core', ActorSheet);\r\n        Actors.registerSheet(SYSTEM_NAME, SR5BaseActorSheet, { makeDefault: true });\r\n\r\n        // Register item + sheets\r\n        CONFIG.Item.entityClass = SR5ItemProxy;\r\n        Items.unregisterSheet('core', ItemSheet);\r\n        Items.registerSheet(SYSTEM_NAME, SR5BaseItemSheet, { makeDefault: true });\r\n\r\n        // Above code will run synchronously with Foundry\r\n        // Async tasks can be done by returning a new Promise\r\n        return Promise.resolve();\r\n    }\r\n    protected static async setup(): Promise<void> {}\r\n    protected static async ready(): Promise<void> {}\r\n}\r\n","import SR5Runner from './SR5Runner';\r\nimport SR5Grunt from './SR5Grunt';\r\nimport { ActorType } from './types/ActorType';\r\nimport SR5BaseActor, { ISR5BaseActorDataContainer } from './SR5BaseActor';\r\nimport { IPreCreateActorData, IPreCreateActorOptions } from '../common/Hooks';\r\nimport AbstractActorFactory from './factory/AbstractActorFactory';\r\nimport RunnerFactory from './factory/RunnerFactory';\r\nimport GruntFactory from './factory/GruntFactory';\r\n\r\nexport default class SR5ActorProxy extends Actor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\">\r\n\r\n    static async create(data: IPreCreateActorData, options: IPreCreateActorOptions): Promise<Entity> {\r\n        // We use a factory for default data instead of the template. This allows\r\n        // us to correctly syncronize our internal types - the data template is\r\n        // instead used only to create containers in which the data will be stored\r\n        // Handling this internally has a number of benefits. Mostly it allows strong\r\n        // and more thorough typing of data where the JSON template does not.\r\n        let factory: AbstractActorFactory<ISR5BaseActorDataContainer>;\r\n        switch (data.type) {\r\n            case ActorType.Runner:\r\n                factory = new RunnerFactory();\r\n                break;\r\n            case ActorType.Grunt:\r\n                factory = new GruntFactory();\r\n                break;\r\n        }\r\n        // This will only compile if *every* actor type is handled\r\n        const factoryData = factory.create(data);\r\n        return super.create(factoryData, options);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    private readonly _implementation: SR5BaseActor;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(data: ActorData, options?: any) {\r\n        super(data, options);\r\n\r\n        switch (data.type as ActorType) {\r\n            case ActorType.Runner:\r\n                this._implementation = new SR5Runner(this, data, options);\r\n                break;\r\n            case ActorType.Grunt:\r\n                this._implementation = new SR5Grunt(this, data, options);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /** @override */\r\n    prepareData(): void {\r\n        if (this._implementation !== undefined) {\r\n            this._implementation.prepareData();\r\n        }\r\n\r\n        return super.prepareData();\r\n    }\r\n    /** @override */\r\n    prepareEmbeddedEntities(): void {\r\n        if (this._implementation !== undefined) {\r\n            this._implementation.prepareEmbeddedEntities();\r\n        }\r\n\r\n        return super.prepareEmbeddedEntities();\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    // TODO:\r\n    //  I think there shouldn't need to be any more methods proxied.\r\n    //  However we may notice data not updating properly. If so, we\r\n    //  can simply proxy update to the actor implementation.\r\n\r\n    // </editor-fold>\r\n}\r\n","import SR5ActorProxy from './SR5ActorProxy';\r\n\r\nexport interface ISR5BaseActorDataContainer extends ActorData {\r\n    data: ISR5BaseActorData;\r\n}\r\nexport interface ISR5BaseActorData {}\r\n\r\nexport default abstract class SR5BaseActor extends Actor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    public data: ISR5BaseActorDataContainer;\r\n    public proxy: SR5ActorProxy;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(proxy: SR5ActorProxy, data: ActorData, options?: any) {\r\n        super(data, options);\r\n\r\n        this.data = data;\r\n        this.proxy = proxy;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\">\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import SR5BaseActor, { ISR5BaseActorData, ISR5BaseActorDataContainer } from './SR5BaseActor';\r\nimport { ActorType } from './types/ActorType';\r\n\r\nexport interface ISR5GruntDataContainer extends ISR5BaseActorDataContainer {\r\n    data: ISR5GruntData;\r\n}\r\nexport interface ISR5GruntData extends ISR5BaseActorData {}\r\n\r\nexport default class SR5Grunt extends SR5BaseActor {\r\n    // <editor-fold desc=\"Static Properties\">\r\n\r\n    public static get TYPE() {\r\n        return ActorType.Grunt;\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5GruntDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n\r\n    prepareData() {\r\n        super.prepareData();\r\n    }\r\n\r\n    prepareEmbeddedEntities() {\r\n        super.prepareEmbeddedEntities();\r\n    }\r\n}\r\n","import SR5BaseActor, { ISR5BaseActorData, ISR5BaseActorDataContainer } from './SR5BaseActor';\r\nimport SR5ActorProxy from './SR5ActorProxy';\r\nimport { RunnerAttributes } from '../common/Attribute';\r\n\r\n// TODO: Assumes Foundry will be enforcing types - as we can see here\r\n//  it's technically possible to get unexpected results.\r\nexport interface ISR5RunnerDataContainer extends ISR5BaseActorDataContainer {\r\n    data: ISR5RunnerData;\r\n}\r\nexport interface ISR5RunnerData extends ISR5BaseActorData {\r\n    attributes: RunnerAttributes;\r\n}\r\n\r\nexport default class SR5Runner extends SR5BaseActor {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5RunnerDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(proxy: SR5ActorProxy, data: ActorData, options: any) {\r\n        super(proxy, data, options);\r\n\r\n        console.warn(this);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import { IPreCreateActorData } from '../../common/Hooks';\r\nimport { ISR5BaseActorDataContainer } from '../SR5BaseActor';\r\n\r\ntype ExcludedKeys = 'token';\r\ntype OptionalKeys = 'img' | 'flags';\r\n\r\n// prettier-ignore\r\ntype RequiredData<T extends ISR5BaseActorDataContainer> = Omit<\r\n    T, ExcludedKeys | OptionalKeys\r\n>;\r\n\r\n// prettier-ignore\r\ntype OptionalData<T extends ISR5BaseActorDataContainer> = Partial<\r\n    Pick<T, OptionalKeys>\r\n>;\r\n\r\nexport type ActorFactoryData<T extends ISR5BaseActorDataContainer> = RequiredData<T> & OptionalData<T>;\r\n\r\nexport default abstract class AbstractActorFactory<T extends ISR5BaseActorDataContainer> {\r\n    public abstract create(data: IPreCreateActorData): ActorFactoryData<T>;\r\n}\r\n","import AbstractActorFactory, { ActorFactoryData } from './AbstractActorFactory';\r\nimport { ISR5BaseActorDataContainer } from '../SR5BaseActor';\r\nimport { IPreCreateActorData } from '../../common/Hooks';\r\n\r\nexport default abstract class BaseActorFactory extends AbstractActorFactory<ISR5BaseActorDataContainer> {\r\n    public create(data: IPreCreateActorData): ActorFactoryData<ISR5BaseActorDataContainer> {\r\n        return {\r\n            data: {},\r\n            flags: {},\r\n            img: '',\r\n            name: data.name,\r\n            type: data.type,\r\n        };\r\n    }\r\n}\r\n","import BaseActorFactory from './BaseActorFactory';\r\nimport { IPreCreateActorData } from '../../common/Hooks';\r\nimport { ISR5GruntDataContainer } from '../SR5Grunt';\r\nimport { ActorFactoryData } from './AbstractActorFactory';\r\n\r\nexport default class GruntFactory extends BaseActorFactory {\r\n    create(data: IPreCreateActorData): ActorFactoryData<ISR5GruntDataContainer> {\r\n        return super.create(data);\r\n    }\r\n}\r\n","import { ActorFactoryData } from './AbstractActorFactory';\r\nimport { ISR5RunnerDataContainer } from '../SR5Runner';\r\nimport { IPreCreateActorData } from '../../common/Hooks';\r\nimport { AttributeName, RunnerAttributes } from '../../common/Attribute';\r\nimport BaseActorFactory from './BaseActorFactory';\r\n\r\nexport default class RunnerFactory extends BaseActorFactory {\r\n    create(data: IPreCreateActorData): ActorFactoryData<ISR5RunnerDataContainer> {\r\n        const superData = super.create(data);\r\n        let attributes: RunnerAttributes = {\r\n            body: {\r\n                name: AttributeName.Body,\r\n                value: 1,\r\n            },\r\n            agility: {\r\n                name: AttributeName.Agility,\r\n                value: 1,\r\n            },\r\n            charisma: {\r\n                name: AttributeName.Charisma,\r\n                value: 1,\r\n            },\r\n            intuition: {\r\n                name: AttributeName.Intuition,\r\n                value: 1,\r\n            },\r\n            logic: {\r\n                name: AttributeName.Logic,\r\n                value: 1,\r\n            },\r\n            reaction: {\r\n                name: AttributeName.Reaction,\r\n                value: 1,\r\n            },\r\n            strength: {\r\n                name: AttributeName.Strength,\r\n                value: 1,\r\n            },\r\n            willpower: {\r\n                name: AttributeName.Willpower,\r\n                value: 1,\r\n            },\r\n\r\n            edge: {\r\n                name: AttributeName.Edge,\r\n                value: 1,\r\n            },\r\n\r\n            magic: {\r\n                name: AttributeName.Magic,\r\n                value: 1,\r\n            },\r\n            resonance: {\r\n                name: AttributeName.Resonance,\r\n                value: 1,\r\n            },\r\n\r\n            essence: {\r\n                name: AttributeName.Essence,\r\n                value: 6,\r\n            },\r\n\r\n            depth: {\r\n                name: AttributeName.Depth,\r\n                value: 1,\r\n            },\r\n        };\r\n\r\n        return {\r\n            ...superData,\r\n            data: {\r\n                attributes,\r\n            },\r\n        };\r\n    }\r\n}\r\n","export default class SR5BaseActorSheet extends ActorSheet {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(...args: any) {\r\n        super(...args);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","export enum ActorType {\r\n    Runner = 'Runner',\r\n    Grunt = 'Grunt',\r\n    // Contact = 'Contact',\r\n    // Spirit = 'Spirit',\r\n    // Sprite = 'Sprite',\r\n    // Vehicle = 'Vehicle',\r\n    // Critter = 'Critter',\r\n    // Host = 'Host',\r\n    // IC = 'IC',\r\n}\r\n","export enum PhysicalAttributeName {\r\n    Body = 'body',\r\n    Agility = 'agility',\r\n    Reaction = 'reaction',\r\n    Strength = 'strength',\r\n}\r\n\r\nexport enum MentalAttributeName {\r\n    Logic = 'logic',\r\n    Intuition = 'intuition',\r\n    Charisma = 'charisma',\r\n    Willpower = 'willpower',\r\n}\r\n\r\nexport enum SpecialAttributeName {\r\n    Edge = 'edge',\r\n    Essence = 'essence',\r\n    Magic = 'magic',\r\n    Resonance = 'resonance',\r\n    Depth = 'depth',\r\n}\r\n\r\nexport enum MatrixAttributeName {\r\n    Attack = 'attack',\r\n    Sleaze = 'sleaze',\r\n    DataProcessing = 'data_processing',\r\n    Firewall = 'firewall',\r\n}\r\n\r\nexport const AttributeName = { ...PhysicalAttributeName, ...MentalAttributeName, ...SpecialAttributeName, ...MatrixAttributeName };\r\nexport type AttributeName = PhysicalAttributeName | MentalAttributeName | SpecialAttributeName | MatrixAttributeName;\r\n\r\nexport const RunnerAttributeName = { ...PhysicalAttributeName, ...MentalAttributeName, ...SpecialAttributeName };\r\nexport type RunnerAttributeName = PhysicalAttributeName | MentalAttributeName | SpecialAttributeName;\r\n\r\nexport interface Attribute<TName extends AttributeName> {\r\n    name: TName; // TODO: Locale keys need arrangement for SR5.ATTRIBUTES.name\r\n    value: number;\r\n}\r\n\r\nexport type AttributeMap<TValues extends AttributeName> = {\r\n    [TKey in TValues]: Attribute<TKey>;\r\n};\r\n\r\n// Helper maps - Can use AttributeMap for custom mappings\r\nexport type PhysicalAttributes = AttributeMap<PhysicalAttributeName>;\r\nexport type MentalAttribute = AttributeMap<MentalAttributeName>;\r\nexport type SpecialAttributes = AttributeMap<SpecialAttributeName>;\r\nexport type RunnerAttributes = AttributeMap<RunnerAttributeName>;\r\nexport type MatrixAttributes = AttributeMap<MatrixAttributeName>;\r\n\r\n// export type AttributeField = BaseValuePair<number> &\r\n//     CanHideFiled &\r\n//     ModifiableValue &\r\n//     LabelField & {\r\n//     limit?: string;\r\n// };\r\n","import SR5BaseItem from './SR5BaseItem';\r\n\r\nexport default class SR5Armor extends SR5BaseItem {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","export interface ISR5BaseItemDataContainer extends BaseEntityData {}\r\n\r\nexport interface ISR5BaseItemData {}\r\n\r\nexport default class SR5BaseItem extends Item {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    data: ISR5BaseItemDataContainer;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n\r\n    constructor(data: BaseEntityData, options?: any) {\r\n        super(data, options);\r\n\r\n        console.warn(`Created a new ${this.constructor.name}`);\r\n    }\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","import SR5BaseItem from './SR5BaseItem';\r\nimport { ItemType } from './types/ItemType';\r\nimport SR5Weapon from './SR5Weapon';\r\nimport SR5Armor from './SR5Armor';\r\n\r\nexport default class SR5ItemProxy extends Item {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\">\r\n\r\n    private _implementation: SR5BaseItem;\r\n\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\">\r\n    constructor(data: BaseEntityData, options?: any) {\r\n        super(data, options);\r\n\r\n        switch (data.type as ItemType) {\r\n            case ItemType.Weapon:\r\n                this._implementation = new SR5Weapon(data, options);\r\n                break;\r\n            case ItemType.Armor:\r\n                this._implementation = new SR5Armor(data, options);\r\n                break;\r\n            case ItemType.Device:\r\n                break;\r\n            case ItemType.Program:\r\n                break;\r\n            case ItemType.Ammunition:\r\n                break;\r\n        }\r\n    }\r\n    // </editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\">\r\n\r\n    /** @override */\r\n    update(data: any, options: any): Promise<Item> {\r\n        return this._implementation.update(data, options);\r\n    }\r\n    // </editor-fold>\r\n}\r\n","import SR5BaseItem from './SR5BaseItem';\r\n\r\nexport default class SR5Weapon extends SR5BaseItem {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","export default class SR5BaseItemSheet extends ItemSheet {\r\n    // <editor-fold desc=\"Static Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Static Methods\"></editor-fold>\r\n    // <editor-fold desc=\"Properties\"></editor-fold>\r\n    // <editor-fold desc=\"Constructor & Initialization\"></editor-fold>\r\n    // <editor-fold desc=\"Getters & Setters\"></editor-fold>\r\n    // <editor-fold desc=\"Instance Methods\"></editor-fold>\r\n}\r\n","export enum ItemType {\r\n    Weapon = 'Weapon',\r\n    Armor = 'Armor',\r\n    Device = 'Device',\r\n    Program = 'Program',\r\n    Ammunition = 'Ammunition',\r\n}\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}